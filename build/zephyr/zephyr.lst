
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_start>:
 8000000:	20001080 	.word	0x20001080
 8000004:	080026e9 	.word	0x080026e9
 8000008:	08006c03 	.word	0x08006c03
 800000c:	08002715 	.word	0x08002715
 8000010:	08002715 	.word	0x08002715
 8000014:	08002715 	.word	0x08002715
 8000018:	08002715 	.word	0x08002715
	...
 800002c:	080024cd 	.word	0x080024cd
 8000030:	08002715 	.word	0x08002715
 8000034:	00000000 	.word	0x00000000
 8000038:	08002479 	.word	0x08002479
 800003c:	0800229d 	.word	0x0800229d

08000040 <_irq_vector_table>:
 8000040:	080026c1 080026c1 080026c1 080026c1     .&...&...&...&..
 8000050:	080026c1 080026c1 080026c1 080026c1     .&...&...&...&..
 8000060:	080026c1 080026c1 080026c1 080026c1     .&...&...&...&..
 8000070:	080026c1 080026c1 080026c1 080026c1     .&...&...&...&..
 8000080:	080026c1 080026c1 080026c1 080026c1     .&...&...&...&..
 8000090:	080026c1 080026c1 080026c1 080026c1     .&...&...&...&..
 80000a0:	080026c1 080026c1 080026c1 080026c1     .&...&...&...&..
 80000b0:	080026c1 080026c1 080026c1 080026c1     .&...&...&...&..
 80000c0:	080026c1 080026c1 080026c1 080026c1     .&...&...&...&..
 80000d0:	080026c1 080026c1 080026c1 080026c1     .&...&...&...&..
 80000e0:	080026c1 080026c1 080026c1 080026c1     .&...&...&...&..
 80000f0:	080026c1 080026c1 080026c1 080026c1     .&...&...&...&..
 8000100:	080026c1 080026c1 080026c1 080026c1     .&...&...&...&..
 8000110:	080026c1 080026c1 080026c1 080026c1     .&...&...&...&..
 8000120:	080026c1 080026c1 080026c1 080026c1     .&...&...&...&..
 8000130:	080026c1 080026c1 080026c1 080026c1     .&...&...&...&..
 8000140:	080026c1 080026c1 080026c1 080026c1     .&...&...&...&..
 8000150:	080026c1 080026c1 080026c1 080026c1     .&...&...&...&..
 8000160:	080026c1 080026c1 080026c1 080026c1     .&...&...&...&..
 8000170:	080026c1 080026c1 080026c1 080026c1     .&...&...&...&..
 8000180:	080026c1 080026c1                       .&...&..

Disassembly of section text:

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000198:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800019c:	f000 b96e 	b.w	800047c <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9d08      	ldr	r5, [sp, #32]
 80001be:	460e      	mov	r6, r1
 80001c0:	4604      	mov	r4, r0
 80001c2:	468c      	mov	ip, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	f040 8081 	bne.w	80002cc <__udivmoddi4+0x114>
 80001ca:	428a      	cmp	r2, r1
 80001cc:	4617      	mov	r7, r2
 80001ce:	d945      	bls.n	800025c <__udivmoddi4+0xa4>
 80001d0:	fab2 f282 	clz	r2, r2
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x32>
 80001d6:	f1c2 0120 	rsb	r1, r2, #32
 80001da:	fa06 f302 	lsl.w	r3, r6, r2
 80001de:	fa20 f101 	lsr.w	r1, r0, r1
 80001e2:	4097      	lsls	r7, r2
 80001e4:	ea41 0c03 	orr.w	ip, r1, r3
 80001e8:	4094      	lsls	r4, r2
 80001ea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001ee:	0c23      	lsrs	r3, r4, #16
 80001f0:	fbbc f6fe 	udiv	r6, ip, lr
 80001f4:	b2b9      	uxth	r1, r7
 80001f6:	fb0e cc16 	mls	ip, lr, r6, ip
 80001fa:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80001fe:	fb06 f001 	mul.w	r0, r6, r1
 8000202:	4298      	cmp	r0, r3
 8000204:	d909      	bls.n	800021a <__udivmoddi4+0x62>
 8000206:	18fb      	adds	r3, r7, r3
 8000208:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800020c:	f080 8115 	bcs.w	800043a <__udivmoddi4+0x282>
 8000210:	4298      	cmp	r0, r3
 8000212:	f240 8112 	bls.w	800043a <__udivmoddi4+0x282>
 8000216:	3e02      	subs	r6, #2
 8000218:	443b      	add	r3, r7
 800021a:	1a1b      	subs	r3, r3, r0
 800021c:	b2a4      	uxth	r4, r4
 800021e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000222:	fb0e 3310 	mls	r3, lr, r0, r3
 8000226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800022a:	fb00 f101 	mul.w	r1, r0, r1
 800022e:	42a1      	cmp	r1, r4
 8000230:	d909      	bls.n	8000246 <__udivmoddi4+0x8e>
 8000232:	193c      	adds	r4, r7, r4
 8000234:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000238:	f080 8101 	bcs.w	800043e <__udivmoddi4+0x286>
 800023c:	42a1      	cmp	r1, r4
 800023e:	f240 80fe 	bls.w	800043e <__udivmoddi4+0x286>
 8000242:	3802      	subs	r0, #2
 8000244:	443c      	add	r4, r7
 8000246:	1a64      	subs	r4, r4, r1
 8000248:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800024c:	2100      	movs	r1, #0
 800024e:	b11d      	cbz	r5, 8000258 <__udivmoddi4+0xa0>
 8000250:	40d4      	lsrs	r4, r2
 8000252:	2300      	movs	r3, #0
 8000254:	e9c5 4300 	strd	r4, r3, [r5]
 8000258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025c:	b902      	cbnz	r2, 8000260 <__udivmoddi4+0xa8>
 800025e:	deff      	udf	#255	; 0xff
 8000260:	fab2 f282 	clz	r2, r2
 8000264:	2a00      	cmp	r2, #0
 8000266:	d14f      	bne.n	8000308 <__udivmoddi4+0x150>
 8000268:	1bcb      	subs	r3, r1, r7
 800026a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800026e:	fa1f f887 	uxth.w	r8, r7
 8000272:	2101      	movs	r1, #1
 8000274:	fbb3 fcfe 	udiv	ip, r3, lr
 8000278:	0c26      	lsrs	r6, r4, #16
 800027a:	fb0e 331c 	mls	r3, lr, ip, r3
 800027e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8000282:	fb08 f30c 	mul.w	r3, r8, ip
 8000286:	42b3      	cmp	r3, r6
 8000288:	d907      	bls.n	800029a <__udivmoddi4+0xe2>
 800028a:	19be      	adds	r6, r7, r6
 800028c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000290:	d202      	bcs.n	8000298 <__udivmoddi4+0xe0>
 8000292:	42b3      	cmp	r3, r6
 8000294:	f200 80eb 	bhi.w	800046e <__udivmoddi4+0x2b6>
 8000298:	4684      	mov	ip, r0
 800029a:	1af6      	subs	r6, r6, r3
 800029c:	b2a3      	uxth	r3, r4
 800029e:	fbb6 f0fe 	udiv	r0, r6, lr
 80002a2:	fb0e 6610 	mls	r6, lr, r0, r6
 80002a6:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 80002aa:	fb08 f800 	mul.w	r8, r8, r0
 80002ae:	45a0      	cmp	r8, r4
 80002b0:	d907      	bls.n	80002c2 <__udivmoddi4+0x10a>
 80002b2:	193c      	adds	r4, r7, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x108>
 80002ba:	45a0      	cmp	r8, r4
 80002bc:	f200 80d2 	bhi.w	8000464 <__udivmoddi4+0x2ac>
 80002c0:	4618      	mov	r0, r3
 80002c2:	eba4 0408 	sub.w	r4, r4, r8
 80002c6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002ca:	e7c0      	b.n	800024e <__udivmoddi4+0x96>
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d908      	bls.n	80002e2 <__udivmoddi4+0x12a>
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	f000 80af 	beq.w	8000434 <__udivmoddi4+0x27c>
 80002d6:	2100      	movs	r1, #0
 80002d8:	e9c5 0600 	strd	r0, r6, [r5]
 80002dc:	4608      	mov	r0, r1
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d149      	bne.n	800037e <__udivmoddi4+0x1c6>
 80002ea:	42b3      	cmp	r3, r6
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0x13c>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80bb 	bhi.w	800046a <__udivmoddi4+0x2b2>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb66 0303 	sbc.w	r3, r6, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469c      	mov	ip, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0aa      	beq.n	8000258 <__udivmoddi4+0xa0>
 8000302:	e9c5 4c00 	strd	r4, ip, [r5]
 8000306:	e7a7      	b.n	8000258 <__udivmoddi4+0xa0>
 8000308:	f1c2 0320 	rsb	r3, r2, #32
 800030c:	4097      	lsls	r7, r2
 800030e:	40d8      	lsrs	r0, r3
 8000310:	4091      	lsls	r1, r2
 8000312:	40de      	lsrs	r6, r3
 8000314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000318:	4308      	orrs	r0, r1
 800031a:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 800031e:	fbb6 f1fe 	udiv	r1, r6, lr
 8000322:	fa1f f887 	uxth.w	r8, r7
 8000326:	fb0e 6611 	mls	r6, lr, r1, r6
 800032a:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
 800032e:	fb01 f308 	mul.w	r3, r1, r8
 8000332:	42b3      	cmp	r3, r6
 8000334:	fa04 f402 	lsl.w	r4, r4, r2
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x196>
 800033a:	19be      	adds	r6, r7, r6
 800033c:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 8000340:	f080 808e 	bcs.w	8000460 <__udivmoddi4+0x2a8>
 8000344:	42b3      	cmp	r3, r6
 8000346:	f240 808b 	bls.w	8000460 <__udivmoddi4+0x2a8>
 800034a:	3902      	subs	r1, #2
 800034c:	443e      	add	r6, r7
 800034e:	1af3      	subs	r3, r6, r3
 8000350:	b286      	uxth	r6, r0
 8000352:	fbb3 f0fe 	udiv	r0, r3, lr
 8000356:	fb0e 3310 	mls	r3, lr, r0, r3
 800035a:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800035e:	fb00 f308 	mul.w	r3, r0, r8
 8000362:	42b3      	cmp	r3, r6
 8000364:	d907      	bls.n	8000376 <__udivmoddi4+0x1be>
 8000366:	19be      	adds	r6, r7, r6
 8000368:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800036c:	d274      	bcs.n	8000458 <__udivmoddi4+0x2a0>
 800036e:	42b3      	cmp	r3, r6
 8000370:	d972      	bls.n	8000458 <__udivmoddi4+0x2a0>
 8000372:	3802      	subs	r0, #2
 8000374:	443e      	add	r6, r7
 8000376:	1af3      	subs	r3, r6, r3
 8000378:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037c:	e77a      	b.n	8000274 <__udivmoddi4+0xbc>
 800037e:	f1c1 0720 	rsb	r7, r1, #32
 8000382:	fa03 f401 	lsl.w	r4, r3, r1
 8000386:	fa22 f307 	lsr.w	r3, r2, r7
 800038a:	431c      	orrs	r4, r3
 800038c:	fa20 f907 	lsr.w	r9, r0, r7
 8000390:	fa06 f301 	lsl.w	r3, r6, r1
 8000394:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000398:	40fe      	lsrs	r6, r7
 800039a:	ea49 0903 	orr.w	r9, r9, r3
 800039e:	ea4f 4319 	mov.w	r3, r9, lsr #16
 80003a2:	fbb6 fefc 	udiv	lr, r6, ip
 80003a6:	fa1f f884 	uxth.w	r8, r4
 80003aa:	fb0c 661e 	mls	r6, ip, lr, r6
 80003ae:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 80003b2:	fb0e fa08 	mul.w	sl, lr, r8
 80003b6:	45b2      	cmp	sl, r6
 80003b8:	fa02 f201 	lsl.w	r2, r2, r1
 80003bc:	fa00 f301 	lsl.w	r3, r0, r1
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x21c>
 80003c2:	19a6      	adds	r6, r4, r6
 80003c4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80003c8:	d248      	bcs.n	800045c <__udivmoddi4+0x2a4>
 80003ca:	45b2      	cmp	sl, r6
 80003cc:	d946      	bls.n	800045c <__udivmoddi4+0x2a4>
 80003ce:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d2:	4426      	add	r6, r4
 80003d4:	eba6 060a 	sub.w	r6, r6, sl
 80003d8:	fa1f f989 	uxth.w	r9, r9
 80003dc:	fbb6 f0fc 	udiv	r0, r6, ip
 80003e0:	fb0c 6610 	mls	r6, ip, r0, r6
 80003e4:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
 80003e8:	fb00 f808 	mul.w	r8, r0, r8
 80003ec:	45b0      	cmp	r8, r6
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0x248>
 80003f0:	19a6      	adds	r6, r4, r6
 80003f2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003f6:	d22d      	bcs.n	8000454 <__udivmoddi4+0x29c>
 80003f8:	45b0      	cmp	r8, r6
 80003fa:	d92b      	bls.n	8000454 <__udivmoddi4+0x29c>
 80003fc:	3802      	subs	r0, #2
 80003fe:	4426      	add	r6, r4
 8000400:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000404:	eba6 0608 	sub.w	r6, r6, r8
 8000408:	fba0 8902 	umull	r8, r9, r0, r2
 800040c:	454e      	cmp	r6, r9
 800040e:	46c4      	mov	ip, r8
 8000410:	46ce      	mov	lr, r9
 8000412:	d318      	bcc.n	8000446 <__udivmoddi4+0x28e>
 8000414:	d015      	beq.n	8000442 <__udivmoddi4+0x28a>
 8000416:	b375      	cbz	r5, 8000476 <__udivmoddi4+0x2be>
 8000418:	ebb3 020c 	subs.w	r2, r3, ip
 800041c:	eb66 060e 	sbc.w	r6, r6, lr
 8000420:	fa06 f707 	lsl.w	r7, r6, r7
 8000424:	fa22 f301 	lsr.w	r3, r2, r1
 8000428:	40ce      	lsrs	r6, r1
 800042a:	431f      	orrs	r7, r3
 800042c:	e9c5 7600 	strd	r7, r6, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	e711      	b.n	8000258 <__udivmoddi4+0xa0>
 8000434:	4629      	mov	r1, r5
 8000436:	4628      	mov	r0, r5
 8000438:	e70e      	b.n	8000258 <__udivmoddi4+0xa0>
 800043a:	4666      	mov	r6, ip
 800043c:	e6ed      	b.n	800021a <__udivmoddi4+0x62>
 800043e:	4618      	mov	r0, r3
 8000440:	e701      	b.n	8000246 <__udivmoddi4+0x8e>
 8000442:	4543      	cmp	r3, r8
 8000444:	d2e7      	bcs.n	8000416 <__udivmoddi4+0x25e>
 8000446:	ebb8 0c02 	subs.w	ip, r8, r2
 800044a:	eb69 0404 	sbc.w	r4, r9, r4
 800044e:	3801      	subs	r0, #1
 8000450:	46a6      	mov	lr, r4
 8000452:	e7e0      	b.n	8000416 <__udivmoddi4+0x25e>
 8000454:	4660      	mov	r0, ip
 8000456:	e7d3      	b.n	8000400 <__udivmoddi4+0x248>
 8000458:	4660      	mov	r0, ip
 800045a:	e78c      	b.n	8000376 <__udivmoddi4+0x1be>
 800045c:	4686      	mov	lr, r0
 800045e:	e7b9      	b.n	80003d4 <__udivmoddi4+0x21c>
 8000460:	4661      	mov	r1, ip
 8000462:	e774      	b.n	800034e <__udivmoddi4+0x196>
 8000464:	3802      	subs	r0, #2
 8000466:	443c      	add	r4, r7
 8000468:	e72b      	b.n	80002c2 <__udivmoddi4+0x10a>
 800046a:	4608      	mov	r0, r1
 800046c:	e747      	b.n	80002fe <__udivmoddi4+0x146>
 800046e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000472:	443e      	add	r6, r7
 8000474:	e711      	b.n	800029a <__udivmoddi4+0xe2>
 8000476:	4629      	mov	r1, r5
 8000478:	e6ee      	b.n	8000258 <__udivmoddi4+0xa0>
 800047a:	bf00      	nop

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <main>:
#include "fat_fs.h"

LOG_MODULE_REGISTER(main);

void main(void)
{
 8000480:	b508      	push	{r3, lr}
	printk("Nucleo Project\n");
 8000482:	4806      	ldr	r0, [pc, #24]	; (800049c <main+0x1c>)
 8000484:	f005 ff96 	bl	80063b4 <printk>
	
	heartbeat_setup();
 8000488:	f000 f80a 	bl	80004a0 <heartbeat_setup>
	pwm_led_setup();
 800048c:	f000 f89e 	bl	80005cc <pwm_led_setup>
	sd_card_init();
 8000490:	f000 f8e8 	bl	8000664 <sd_card_init>
	
	while (1)
	{
		heartbeat_exec();
 8000494:	f000 f830 	bl	80004f8 <heartbeat_exec>
	while (1)
 8000498:	e7fc      	b.n	8000494 <main+0x14>
 800049a:	bf00      	nop
 800049c:	080091b6 	.word	0x080091b6

080004a0 <heartbeat_setup>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 80004a0:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <heartbeat_setup+0x44>)
 80004a2:	4811      	ldr	r0, [pc, #68]	; (80004e8 <heartbeat_setup+0x48>)

const struct device *dev;

int heartbeat_setup(void)
{
	LOG_INF("Initializing Hearbeat...\r\n");
 80004a4:	4911      	ldr	r1, [pc, #68]	; (80004ec <heartbeat_setup+0x4c>)
 80004a6:	1ac0      	subs	r0, r0, r3
 80004a8:	08c0      	lsrs	r0, r0, #3
 80004aa:	0180      	lsls	r0, r0, #6
{
 80004ac:	b510      	push	{r4, lr}
	LOG_INF("Initializing Hearbeat...\r\n");
 80004ae:	f040 0003 	orr.w	r0, r0, #3
 80004b2:	f006 f8e4 	bl	800667e <log_string_sync>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 80004b6:	480e      	ldr	r0, [pc, #56]	; (80004f0 <heartbeat_setup+0x50>)
 80004b8:	f004 feca 	bl	8005250 <z_impl_device_get_binding>

	int ret;
	dev = device_get_binding(LED0);
 80004bc:	4a0d      	ldr	r2, [pc, #52]	; (80004f4 <heartbeat_setup+0x54>)
 80004be:	6010      	str	r0, [r2, #0]
	if (dev == NULL) {
 80004c0:	b170      	cbz	r0, 80004e0 <heartbeat_setup+0x40>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
 80004c2:	68c4      	ldr	r4, [r0, #12]
	return api->pin_configure(port, pin, flags);
 80004c4:	6883      	ldr	r3, [r0, #8]
 80004c6:	f44f 52d0 	mov.w	r2, #6656	; 0x1a00
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	2105      	movs	r1, #5
 80004ce:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
 80004d0:	2800      	cmp	r0, #0
 80004d2:	d104      	bne.n	80004de <heartbeat_setup+0x3e>
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 80004d4:	6823      	ldr	r3, [r4, #0]
 80004d6:	f023 0320 	bic.w	r3, r3, #32
 80004da:	6023      	str	r3, [r4, #0]
	}
	ret = gpio_pin_configure(dev, PIN, GPIO_OUTPUT_ACTIVE | FLAGS);
	if (ret < 0) {
		return 0;
	}
}
 80004dc:	bd10      	pop	{r4, pc}
	if (ret < 0) {
 80004de:	dafd      	bge.n	80004dc <heartbeat_setup+0x3c>
 80004e0:	2000      	movs	r0, #0
 80004e2:	e7fb      	b.n	80004dc <heartbeat_setup+0x3c>
 80004e4:	08008d1c 	.word	0x08008d1c
 80004e8:	08008d44 	.word	0x08008d44
 80004ec:	080091cb 	.word	0x080091cb
 80004f0:	080091e6 	.word	0x080091e6
 80004f4:	20000400 	.word	0x20000400

080004f8 <heartbeat_exec>:

int heartbeat_exec(void)
{
	static bool led_is_on = true;
	gpio_pin_set(dev, PIN, (int)led_is_on);
 80004f8:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <heartbeat_exec+0x3c>)
 80004fa:	6818      	ldr	r0, [r3, #0]

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 80004fc:	68c2      	ldr	r2, [r0, #12]
{
 80004fe:	b510      	push	{r4, lr}
	gpio_pin_set(dev, PIN, (int)led_is_on);
 8000500:	4c0d      	ldr	r4, [pc, #52]	; (8000538 <heartbeat_exec+0x40>)
 8000502:	6812      	ldr	r2, [r2, #0]
 8000504:	7823      	ldrb	r3, [r4, #0]
 8000506:	0692      	lsls	r2, r2, #26
		value = (value != 0) ? 0 : 1;
 8000508:	bf48      	it	mi
 800050a:	f083 0301 	eormi.w	r3, r3, #1
	if (value != 0)	{
 800050e:	b16b      	cbz	r3, 800052c <heartbeat_exec+0x34>
	return api->port_set_bits_raw(port, pins);
 8000510:	6883      	ldr	r3, [r0, #8]
 8000512:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8000514:	2120      	movs	r1, #32
 8000516:	4798      	blx	r3
	led_is_on = !led_is_on;
 8000518:	7823      	ldrb	r3, [r4, #0]
 800051a:	f083 0301 	eor.w	r3, r3, #1
 800051e:	7023      	strb	r3, [r4, #0]
		parm0.val = timeout;
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
 8000520:	20c8      	movs	r0, #200	; 0xc8
	k_msleep(SLEEP_TIME_MS);
 8000522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000526:	2100      	movs	r1, #0
 8000528:	f005 bc94 	b.w	8005e54 <z_impl_k_sleep>
 800052c:	6883      	ldr	r3, [r0, #8]
 800052e:	691b      	ldr	r3, [r3, #16]
 8000530:	e7f0      	b.n	8000514 <heartbeat_exec+0x1c>
 8000532:	bf00      	nop
 8000534:	20000400 	.word	0x20000400
 8000538:	20000174 	.word	0x20000174

0800053c <pwm_pin_set_usec.constprop.0>:
 * @param flags Flags for pin configuration (polarity).
 *
 * @retval 0 If successful.
 * @retval Negative errno code if failure.
 */
static inline int pwm_pin_set_usec(const struct device *dev, uint32_t pwm,
 800053c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000540:	4606      	mov	r6, r0
 8000542:	b087      	sub	sp, #28
 8000544:	460d      	mov	r5, r1
 8000546:	4617      	mov	r7, r2
	return api->get_cycles_per_sec(dev, pwm, cycles);
 8000548:	6883      	ldr	r3, [r0, #8]
 800054a:	aa04      	add	r2, sp, #16
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	2101      	movs	r1, #1
 8000550:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 8000552:	9003      	str	r0, [sp, #12]
 8000554:	bb80      	cbnz	r0, 80005b8 <pwm_pin_set_usec.constprop.0+0x7c>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 8000556:	e9dd 4b04 	ldrd	r4, fp, [sp, #16]
 800055a:	fba5 8904 	umull	r8, r9, r5, r4
 800055e:	fb05 990b 	mla	r9, r5, fp, r9
 8000562:	4a18      	ldr	r2, [pc, #96]	; (80005c4 <pwm_pin_set_usec.constprop.0+0x88>)
 8000564:	2300      	movs	r3, #0
 8000566:	4640      	mov	r0, r8
 8000568:	4649      	mov	r1, r9
 800056a:	f7ff fe0d 	bl	8000188 <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800056e:	4b16      	ldr	r3, [pc, #88]	; (80005c8 <pwm_pin_set_usec.constprop.0+0x8c>)
 8000570:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000574:	454b      	cmp	r3, r9
 8000576:	bf08      	it	eq
 8000578:	4542      	cmpeq	r2, r8
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800057a:	4682      	mov	sl, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800057c:	d31f      	bcc.n	80005be <pwm_pin_set_usec.constprop.0+0x82>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 800057e:	fba7 4504 	umull	r4, r5, r7, r4
 8000582:	fb07 550b 	mla	r5, r7, fp, r5
 8000586:	4a0f      	ldr	r2, [pc, #60]	; (80005c4 <pwm_pin_set_usec.constprop.0+0x88>)
 8000588:	2300      	movs	r3, #0
 800058a:	4620      	mov	r0, r4
 800058c:	4629      	mov	r1, r5
 800058e:	f7ff fdfb 	bl	8000188 <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 8000592:	4a0d      	ldr	r2, [pc, #52]	; (80005c8 <pwm_pin_set_usec.constprop.0+0x8c>)
 8000594:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000598:	42aa      	cmp	r2, r5
 800059a:	bf08      	it	eq
 800059c:	42a1      	cmpeq	r1, r4
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 800059e:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 80005a0:	d30d      	bcc.n	80005be <pwm_pin_set_usec.constprop.0+0x82>
	return api->pin_set(dev, pwm, period, pulse, flags);
 80005a2:	68b2      	ldr	r2, [r6, #8]
 80005a4:	9903      	ldr	r1, [sp, #12]
 80005a6:	9100      	str	r1, [sp, #0]
 80005a8:	6814      	ldr	r4, [r2, #0]
 80005aa:	2101      	movs	r1, #1
 80005ac:	4652      	mov	r2, sl
 80005ae:	4630      	mov	r0, r6
 80005b0:	47a0      	blx	r4
		return -ENOTSUP;
	}

	return pwm_pin_set_cycles(dev, pwm, (uint32_t)period_cycles,
				  (uint32_t)pulse_cycles, flags);
}
 80005b2:	b007      	add	sp, #28
 80005b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EIO;
 80005b8:	f06f 0004 	mvn.w	r0, #4
 80005bc:	e7f9      	b.n	80005b2 <pwm_pin_set_usec.constprop.0+0x76>
		return -ENOTSUP;
 80005be:	f06f 0022 	mvn.w	r0, #34	; 0x22
 80005c2:	e7f6      	b.n	80005b2 <pwm_pin_set_usec.constprop.0+0x76>
 80005c4:	000f4240 	.word	0x000f4240
 80005c8:	000f423f 	.word	0x000f423f

080005cc <pwm_led_setup>:
static uint32_t max_period;
static uint32_t period;
static uint8_t dir = 0U;

int pwm_led_setup(void)
{
 80005cc:	b570      	push	{r4, r5, r6, lr}
	printk("PWM-based blinky Setup\n");
 80005ce:	481b      	ldr	r0, [pc, #108]	; (800063c <pwm_led_setup+0x70>)
 80005d0:	f005 fef0 	bl	80063b4 <printk>
 80005d4:	481a      	ldr	r0, [pc, #104]	; (8000640 <pwm_led_setup+0x74>)

	pwm = device_get_binding(PWM_LABEL);
 80005d6:	4d1b      	ldr	r5, [pc, #108]	; (8000644 <pwm_led_setup+0x78>)
 80005d8:	f004 fe3a 	bl	8005250 <z_impl_device_get_binding>
 80005dc:	4604      	mov	r4, r0
 80005de:	6028      	str	r0, [r5, #0]
	if (!pwm) {
 80005e0:	b928      	cbnz	r0, 80005ee <pwm_led_setup+0x22>
		printk("Error: didn't find %s device\n", PWM_LABEL);
 80005e2:	4819      	ldr	r0, [pc, #100]	; (8000648 <pwm_led_setup+0x7c>)
 80005e4:	4916      	ldr	r1, [pc, #88]	; (8000640 <pwm_led_setup+0x74>)
 80005e6:	f005 fee5 	bl	80063b4 <printk>
		return 0;
 80005ea:	4620      	mov	r0, r4

	printk("Done calibrating; maximum/minimum periods %u/%u usec\n",
	       max_period, MIN_PERIOD_USEC);

	period = max_period;
}
 80005ec:	bd70      	pop	{r4, r5, r6, pc}
	printk("Calibrating for device %s channel %d...\n", PWM_LABEL, PWM_CHANNEL);
 80005ee:	4914      	ldr	r1, [pc, #80]	; (8000640 <pwm_led_setup+0x74>)
 80005f0:	4816      	ldr	r0, [pc, #88]	; (800064c <pwm_led_setup+0x80>)
	max_period = MAX_PERIOD_USEC;
 80005f2:	4c17      	ldr	r4, [pc, #92]	; (8000650 <pwm_led_setup+0x84>)
	printk("Calibrating for device %s channel %d...\n", PWM_LABEL, PWM_CHANNEL);
 80005f4:	2201      	movs	r2, #1
 80005f6:	f005 fedd 	bl	80063b4 <printk>
	max_period = MAX_PERIOD_USEC;
 80005fa:	4b16      	ldr	r3, [pc, #88]	; (8000654 <pwm_led_setup+0x88>)
 80005fc:	6023      	str	r3, [r4, #0]
		if (max_period < (4U * MIN_PERIOD_USEC)) {
 80005fe:	f24f 4623 	movw	r6, #62499	; 0xf423
    while (pwm_pin_set_usec(pwm, PWM_CHANNEL,
 8000602:	6821      	ldr	r1, [r4, #0]
 8000604:	6828      	ldr	r0, [r5, #0]
 8000606:	084a      	lsrs	r2, r1, #1
 8000608:	f7ff ff98 	bl	800053c <pwm_pin_set_usec.constprop.0>
 800060c:	b948      	cbnz	r0, 8000622 <pwm_led_setup+0x56>
	printk("Done calibrating; maximum/minimum periods %u/%u usec\n",
 800060e:	6821      	ldr	r1, [r4, #0]
 8000610:	4811      	ldr	r0, [pc, #68]	; (8000658 <pwm_led_setup+0x8c>)
 8000612:	f643 5209 	movw	r2, #15625	; 0x3d09
 8000616:	f005 fecd 	bl	80063b4 <printk>
	period = max_period;
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <pwm_led_setup+0x90>)
 800061c:	6822      	ldr	r2, [r4, #0]
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	e7e4      	b.n	80005ec <pwm_led_setup+0x20>
		max_period /= 2U;
 8000622:	6823      	ldr	r3, [r4, #0]
 8000624:	085b      	lsrs	r3, r3, #1
		if (max_period < (4U * MIN_PERIOD_USEC)) {
 8000626:	42b3      	cmp	r3, r6
		max_period /= 2U;
 8000628:	6023      	str	r3, [r4, #0]
		if (max_period < (4U * MIN_PERIOD_USEC)) {
 800062a:	d8ea      	bhi.n	8000602 <pwm_led_setup+0x36>
			printk("Error: PWM device %s "
 800062c:	4904      	ldr	r1, [pc, #16]	; (8000640 <pwm_led_setup+0x74>)
 800062e:	480c      	ldr	r0, [pc, #48]	; (8000660 <pwm_led_setup+0x94>)
 8000630:	f24f 4224 	movw	r2, #62500	; 0xf424
 8000634:	f005 febe 	bl	80063b4 <printk>
			return;
 8000638:	e7d8      	b.n	80005ec <pwm_led_setup+0x20>
 800063a:	bf00      	nop
 800063c:	080091f6 	.word	0x080091f6
 8000640:	0800920e 	.word	0x0800920e
 8000644:	2000040c 	.word	0x2000040c
 8000648:	08009214 	.word	0x08009214
 800064c:	08009232 	.word	0x08009232
 8000650:	20000404 	.word	0x20000404
 8000654:	000f4240 	.word	0x000f4240
 8000658:	08009297 	.word	0x08009297
 800065c:	20000408 	.word	0x20000408
 8000660:	0800925b 	.word	0x0800925b

08000664 <sd_card_init>:
*  in ffconf.h
*/
static const char *disk_mount_pt = "/SD:";

void sd_card_init(void)
{
 8000664:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		static const char *disk_pdrv = "SD";
		uint64_t memory_size_mb;
		uint32_t block_count;
		uint32_t block_size;

		if (disk_access_init(disk_pdrv) != 0) {
 8000666:	4836      	ldr	r0, [pc, #216]	; (8000740 <sd_card_init+0xdc>)
 8000668:	4c36      	ldr	r4, [pc, #216]	; (8000744 <sd_card_init+0xe0>)
 800066a:	f006 f842 	bl	80066f2 <disk_access_init>
 800066e:	4b36      	ldr	r3, [pc, #216]	; (8000748 <sd_card_init+0xe4>)
 8000670:	1ae4      	subs	r4, r4, r3
 8000672:	08e4      	lsrs	r4, r4, #3
 8000674:	01a4      	lsls	r4, r4, #6
 8000676:	b1d0      	cbz	r0, 80006ae <sd_card_init+0x4a>
			LOG_ERR("Storage init ERROR!");
 8000678:	4934      	ldr	r1, [pc, #208]	; (800074c <sd_card_init+0xe8>)
		}
		LOG_INF("Block count %u", block_count);

		if (disk_access_ioctl(disk_pdrv,
				DISK_IOCTL_GET_SECTOR_SIZE, &block_size)) {
			LOG_ERR("Unable to get sector size");
 800067a:	f044 0001 	orr.w	r0, r4, #1
 800067e:	f005 fffe 	bl	800667e <log_string_sync>

		memory_size_mb = (uint64_t)block_count * block_size;
		printk("Memory Size(MB) %u\n", (uint32_t)(memory_size_mb >> 20));
	} while (0);

	mp.mnt_point = disk_mount_pt;
 8000682:	4833      	ldr	r0, [pc, #204]	; (8000750 <sd_card_init+0xec>)
 8000684:	4c33      	ldr	r4, [pc, #204]	; (8000754 <sd_card_init+0xf0>)
 8000686:	60c4      	str	r4, [r0, #12]

	int res = fs_mount(&mp);
 8000688:	f002 fd0c 	bl	80030a4 <fs_mount>

	if (res == FR_OK) {
 800068c:	2800      	cmp	r0, #0
 800068e:	d152      	bne.n	8000736 <sd_card_init+0xd2>
		printk("Disk mounted.\n");
 8000690:	4831      	ldr	r0, [pc, #196]	; (8000758 <sd_card_init+0xf4>)
 8000692:	f005 fe8f 	bl	80063b4 <printk>
	int res;
	struct fs_dir_t dirp;
	static struct fs_dirent entry;

	/* Verify fs_opendir() */
	res = fs_opendir(&dirp, path);
 8000696:	4621      	mov	r1, r4
 8000698:	a802      	add	r0, sp, #8
 800069a:	f002 fbf3 	bl	8002e84 <fs_opendir>
	if (res) {
		printk("Error opening dir %s [%d]\n", path, res);
 800069e:	4621      	mov	r1, r4
	if (res) {
 80006a0:	4602      	mov	r2, r0
 80006a2:	b348      	cbz	r0, 80006f8 <sd_card_init+0x94>
		printk("Error opening dir %s [%d]\n", path, res);
 80006a4:	482d      	ldr	r0, [pc, #180]	; (800075c <sd_card_init+0xf8>)
 80006a6:	f005 fe85 	bl	80063b4 <printk>
}
 80006aa:	b004      	add	sp, #16
 80006ac:	bd70      	pop	{r4, r5, r6, pc}
		if (disk_access_ioctl(disk_pdrv,
 80006ae:	4824      	ldr	r0, [pc, #144]	; (8000740 <sd_card_init+0xdc>)
 80006b0:	aa01      	add	r2, sp, #4
 80006b2:	2101      	movs	r1, #1
 80006b4:	f006 f867 	bl	8006786 <disk_access_ioctl>
 80006b8:	b108      	cbz	r0, 80006be <sd_card_init+0x5a>
			LOG_ERR("Unable to get sector count");
 80006ba:	4929      	ldr	r1, [pc, #164]	; (8000760 <sd_card_init+0xfc>)
 80006bc:	e7dd      	b.n	800067a <sd_card_init+0x16>
		LOG_INF("Block count %u", block_count);
 80006be:	9a01      	ldr	r2, [sp, #4]
 80006c0:	4928      	ldr	r1, [pc, #160]	; (8000764 <sd_card_init+0x100>)
 80006c2:	f044 0003 	orr.w	r0, r4, #3
 80006c6:	f005 ffda 	bl	800667e <log_string_sync>
		if (disk_access_ioctl(disk_pdrv,
 80006ca:	481d      	ldr	r0, [pc, #116]	; (8000740 <sd_card_init+0xdc>)
 80006cc:	aa02      	add	r2, sp, #8
 80006ce:	2102      	movs	r1, #2
 80006d0:	f006 f859 	bl	8006786 <disk_access_ioctl>
 80006d4:	b108      	cbz	r0, 80006da <sd_card_init+0x76>
			LOG_ERR("Unable to get sector size");
 80006d6:	4924      	ldr	r1, [pc, #144]	; (8000768 <sd_card_init+0x104>)
 80006d8:	e7cf      	b.n	800067a <sd_card_init+0x16>
		printk("Sector size %u\n", block_size);
 80006da:	9902      	ldr	r1, [sp, #8]
 80006dc:	4823      	ldr	r0, [pc, #140]	; (800076c <sd_card_init+0x108>)
 80006de:	f005 fe69 	bl	80063b4 <printk>
		memory_size_mb = (uint64_t)block_count * block_size;
 80006e2:	e9dd 0301 	ldrd	r0, r3, [sp, #4]
 80006e6:	fba0 0103 	umull	r0, r1, r0, r3
		printk("Memory Size(MB) %u\n", (uint32_t)(memory_size_mb >> 20));
 80006ea:	0d03      	lsrs	r3, r0, #20
 80006ec:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
 80006f0:	481f      	ldr	r0, [pc, #124]	; (8000770 <sd_card_init+0x10c>)
 80006f2:	f005 fe5f 	bl	80063b4 <printk>
 80006f6:	e7c4      	b.n	8000682 <sd_card_init+0x1e>
		return res;
	}

	printk("\nListing dir %s ...\n", path);
 80006f8:	481e      	ldr	r0, [pc, #120]	; (8000774 <sd_card_init+0x110>)
	for (;;) {
		/* Verify fs_readdir() */
		res = fs_readdir(&dirp, &entry);
 80006fa:	4c1f      	ldr	r4, [pc, #124]	; (8000778 <sd_card_init+0x114>)
		}

		if (entry.type == FS_DIR_ENTRY_DIR) {
			printk("[DIR ] %s\n", entry.name);
		} else {
			printk("[FILE] %s (size = %zu)\n",
 80006fc:	4e1f      	ldr	r6, [pc, #124]	; (800077c <sd_card_init+0x118>)
	printk("\nListing dir %s ...\n", path);
 80006fe:	f005 fe59 	bl	80063b4 <printk>
			printk("[FILE] %s (size = %zu)\n",
 8000702:	1c65      	adds	r5, r4, #1
		res = fs_readdir(&dirp, &entry);
 8000704:	491c      	ldr	r1, [pc, #112]	; (8000778 <sd_card_init+0x114>)
 8000706:	a802      	add	r0, sp, #8
 8000708:	f002 fc26 	bl	8002f58 <fs_readdir>
		if (res || entry.name[0] == 0) {
 800070c:	b978      	cbnz	r0, 800072e <sd_card_init+0xca>
 800070e:	7863      	ldrb	r3, [r4, #1]
 8000710:	b16b      	cbz	r3, 800072e <sd_card_init+0xca>
		if (entry.type == FS_DIR_ENTRY_DIR) {
 8000712:	7823      	ldrb	r3, [r4, #0]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d104      	bne.n	8000722 <sd_card_init+0xbe>
			printk("[DIR ] %s\n", entry.name);
 8000718:	4819      	ldr	r0, [pc, #100]	; (8000780 <sd_card_init+0x11c>)
 800071a:	4629      	mov	r1, r5
 800071c:	f005 fe4a 	bl	80063b4 <printk>
 8000720:	e7f0      	b.n	8000704 <sd_card_init+0xa0>
			printk("[FILE] %s (size = %zu)\n",
 8000722:	6922      	ldr	r2, [r4, #16]
 8000724:	4629      	mov	r1, r5
 8000726:	4630      	mov	r0, r6
 8000728:	f005 fe44 	bl	80063b4 <printk>
 800072c:	e7ea      	b.n	8000704 <sd_card_init+0xa0>
				entry.name, entry.size);
		}
	}

	/* Verify fs_closedir() */
	fs_closedir(&dirp);
 800072e:	a802      	add	r0, sp, #8
 8000730:	f002 fc92 	bl	8003058 <fs_closedir>

	return res;
 8000734:	e7b9      	b.n	80006aa <sd_card_init+0x46>
		printk("Error mounting disk.\n");
 8000736:	4813      	ldr	r0, [pc, #76]	; (8000784 <sd_card_init+0x120>)
 8000738:	f005 fe3c 	bl	80063b4 <printk>
}
 800073c:	e7b5      	b.n	80006aa <sd_card_init+0x46>
 800073e:	bf00      	nop
 8000740:	080092cd 	.word	0x080092cd
 8000744:	08008d24 	.word	0x08008d24
 8000748:	08008d1c 	.word	0x08008d1c
 800074c:	080092d0 	.word	0x080092d0
 8000750:	20000000 	.word	0x20000000
 8000754:	0800934c 	.word	0x0800934c
 8000758:	08009351 	.word	0x08009351
 800075c:	08009360 	.word	0x08009360
 8000760:	080092e4 	.word	0x080092e4
 8000764:	080092ff 	.word	0x080092ff
 8000768:	0800930e 	.word	0x0800930e
 800076c:	08009328 	.word	0x08009328
 8000770:	08009338 	.word	0x08009338
 8000774:	0800937b 	.word	0x0800937b
 8000778:	20000410 	.word	0x20000410
 800077c:	0800939b 	.word	0x0800939b
 8000780:	08009390 	.word	0x08009390
 8000784:	080093b3 	.word	0x080093b3

08000788 <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
 8000788:	4b01      	ldr	r3, [pc, #4]	; (8000790 <__printk_hook_install+0x8>)
 800078a:	6018      	str	r0, [r3, #0]
}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	20000024 	.word	0x20000024

08000794 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
 8000794:	b5f0      	push	{r4, r5, r6, r7, lr}
	*conv = (struct conversion) {
 8000796:	2200      	movs	r2, #0
 8000798:	e9c0 2200 	strd	r2, r2, [r0]
 800079c:	6082      	str	r2, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
 800079e:	784a      	ldrb	r2, [r1, #1]
 80007a0:	2a25      	cmp	r2, #37	; 0x25
{
 80007a2:	4603      	mov	r3, r0
	if (*sp == '%') {
 80007a4:	d033      	beq.n	800080e <extract_conversion+0x7a>
	++sp;
 80007a6:	3101      	adds	r1, #1
 80007a8:	4608      	mov	r0, r1
		switch (*sp) {
 80007aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80007ae:	2a2b      	cmp	r2, #43	; 0x2b
 80007b0:	d03d      	beq.n	800082e <extract_conversion+0x9a>
 80007b2:	d82f      	bhi.n	8000814 <extract_conversion+0x80>
 80007b4:	2a20      	cmp	r2, #32
 80007b6:	d03e      	beq.n	8000836 <extract_conversion+0xa2>
 80007b8:	2a23      	cmp	r2, #35	; 0x23
 80007ba:	d040      	beq.n	800083e <extract_conversion+0xaa>
	if (conv->flag_zero && conv->flag_dash) {
 80007bc:	781a      	ldrb	r2, [r3, #0]
 80007be:	f002 0144 	and.w	r1, r2, #68	; 0x44
 80007c2:	2944      	cmp	r1, #68	; 0x44
 80007c4:	d102      	bne.n	80007cc <extract_conversion+0x38>
		conv->flag_zero = false;
 80007c6:	f36f 1286 	bfc	r2, #6, #1
 80007ca:	701a      	strb	r2, [r3, #0]
	if (*sp == '*') {
 80007cc:	7802      	ldrb	r2, [r0, #0]
 80007ce:	2a2a      	cmp	r2, #42	; 0x2a
 80007d0:	d14c      	bne.n	800086c <extract_conversion+0xd8>
		conv->width_present = true;
 80007d2:	8819      	ldrh	r1, [r3, #0]
 80007d4:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80007d8:	1c42      	adds	r2, r0, #1
 80007da:	8019      	strh	r1, [r3, #0]
	if (*sp != '.') {
 80007dc:	7811      	ldrb	r1, [r2, #0]
 80007de:	292e      	cmp	r1, #46	; 0x2e
 80007e0:	d14f      	bne.n	8000882 <extract_conversion+0xee>
	if (*sp == '*') {
 80007e2:	7851      	ldrb	r1, [r2, #1]
 80007e4:	292a      	cmp	r1, #42	; 0x2a
 80007e6:	d045      	beq.n	8000874 <extract_conversion+0xe0>
 80007e8:	3201      	adds	r2, #1
	const char *sp = *str;
 80007ea:	4615      	mov	r5, r2
	size_t val = 0;
 80007ec:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
 80007ee:	270a      	movs	r7, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 80007f0:	4610      	mov	r0, r2
 80007f2:	f810 4b01 	ldrb.w	r4, [r0], #1
 80007f6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 80007fa:	2e09      	cmp	r6, #9
 80007fc:	d964      	bls.n	80008c8 <extract_conversion+0x134>
	if (sp != wp) {
 80007fe:	4295      	cmp	r5, r2
		conv->prec_present = true;
 8000800:	bf1f      	itttt	ne
 8000802:	7858      	ldrbne	r0, [r3, #1]
		conv->prec_value = prec;
 8000804:	6099      	strne	r1, [r3, #8]
		conv->prec_present = true;
 8000806:	f040 0002 	orrne.w	r0, r0, #2
 800080a:	7058      	strbne	r0, [r3, #1]
		if (prec != conv->prec_value) {
 800080c:	e039      	b.n	8000882 <extract_conversion+0xee>
		conv->specifier = *sp++;
 800080e:	1c88      	adds	r0, r1, #2
 8000810:	70da      	strb	r2, [r3, #3]
	sp = extract_prec(conv, sp);
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
 8000812:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (*sp) {
 8000814:	2a2d      	cmp	r2, #45	; 0x2d
 8000816:	d005      	beq.n	8000824 <extract_conversion+0x90>
 8000818:	2a30      	cmp	r2, #48	; 0x30
 800081a:	d1cf      	bne.n	80007bc <extract_conversion+0x28>
			conv->flag_zero = true;
 800081c:	781a      	ldrb	r2, [r3, #0]
 800081e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000822:	e002      	b.n	800082a <extract_conversion+0x96>
			conv->flag_dash = true;
 8000824:	781a      	ldrb	r2, [r3, #0]
 8000826:	f042 0204 	orr.w	r2, r2, #4
			conv->flag_zero = true;
 800082a:	701a      	strb	r2, [r3, #0]
			break;
 800082c:	e7bc      	b.n	80007a8 <extract_conversion+0x14>
			conv->flag_plus = true;
 800082e:	781a      	ldrb	r2, [r3, #0]
 8000830:	f042 0208 	orr.w	r2, r2, #8
 8000834:	e7f9      	b.n	800082a <extract_conversion+0x96>
			conv->flag_space = true;
 8000836:	781a      	ldrb	r2, [r3, #0]
 8000838:	f042 0210 	orr.w	r2, r2, #16
 800083c:	e7f5      	b.n	800082a <extract_conversion+0x96>
			conv->flag_hash = true;
 800083e:	781a      	ldrb	r2, [r3, #0]
 8000840:	f042 0220 	orr.w	r2, r2, #32
 8000844:	e7f1      	b.n	800082a <extract_conversion+0x96>
		val = 10U * val + *sp++ - '0';
 8000846:	fb07 5101 	mla	r1, r7, r1, r5
 800084a:	3930      	subs	r1, #48	; 0x30
 800084c:	4622      	mov	r2, r4
 800084e:	4614      	mov	r4, r2
 8000850:	f814 5b01 	ldrb.w	r5, [r4], #1
 8000854:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8000858:	2e09      	cmp	r6, #9
 800085a:	d9f4      	bls.n	8000846 <extract_conversion+0xb2>
	if (sp != wp) {
 800085c:	4290      	cmp	r0, r2
		conv->width_present = true;
 800085e:	bf1f      	itttt	ne
 8000860:	7818      	ldrbne	r0, [r3, #0]
		conv->width_value = width;
 8000862:	6059      	strne	r1, [r3, #4]
		conv->width_present = true;
 8000864:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
 8000868:	7018      	strbne	r0, [r3, #0]
		if (width != conv->width_value) {
 800086a:	e7b7      	b.n	80007dc <extract_conversion+0x48>
 800086c:	4602      	mov	r2, r0
	size_t val = 0;
 800086e:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
 8000870:	270a      	movs	r7, #10
 8000872:	e7ec      	b.n	800084e <extract_conversion+0xba>
		conv->prec_present = true;
 8000874:	7859      	ldrb	r1, [r3, #1]
 8000876:	f021 0106 	bic.w	r1, r1, #6
 800087a:	f041 0106 	orr.w	r1, r1, #6
 800087e:	7059      	strb	r1, [r3, #1]
		return ++sp;
 8000880:	3202      	adds	r2, #2
	switch (*sp) {
 8000882:	4611      	mov	r1, r2
 8000884:	f811 0b01 	ldrb.w	r0, [r1], #1
 8000888:	286c      	cmp	r0, #108	; 0x6c
 800088a:	d039      	beq.n	8000900 <extract_conversion+0x16c>
 800088c:	d821      	bhi.n	80008d2 <extract_conversion+0x13e>
 800088e:	2868      	cmp	r0, #104	; 0x68
 8000890:	d026      	beq.n	80008e0 <extract_conversion+0x14c>
 8000892:	286a      	cmp	r0, #106	; 0x6a
 8000894:	d03d      	beq.n	8000912 <extract_conversion+0x17e>
 8000896:	284c      	cmp	r0, #76	; 0x4c
 8000898:	d041      	beq.n	800091e <extract_conversion+0x18a>
 800089a:	4611      	mov	r1, r2
	conv->specifier = *sp++;
 800089c:	4608      	mov	r0, r1
 800089e:	f810 4b01 	ldrb.w	r4, [r0], #1
 80008a2:	70dc      	strb	r4, [r3, #3]
	switch (conv->specifier) {
 80008a4:	2c78      	cmp	r4, #120	; 0x78
 80008a6:	f200 80c6 	bhi.w	8000a36 <extract_conversion+0x2a2>
 80008aa:	2c57      	cmp	r4, #87	; 0x57
 80008ac:	d842      	bhi.n	8000934 <extract_conversion+0x1a0>
 80008ae:	2c41      	cmp	r4, #65	; 0x41
 80008b0:	d003      	beq.n	80008ba <extract_conversion+0x126>
 80008b2:	3c45      	subs	r4, #69	; 0x45
 80008b4:	2c02      	cmp	r4, #2
 80008b6:	f200 80be 	bhi.w	8000a36 <extract_conversion+0x2a2>
		conv->specifier_cat = SPECIFIER_FP;
 80008ba:	789a      	ldrb	r2, [r3, #2]
 80008bc:	2104      	movs	r1, #4
 80008be:	f361 0202 	bfi	r2, r1, #0, #3
 80008c2:	709a      	strb	r2, [r3, #2]
			unsupported = true;
 80008c4:	2201      	movs	r2, #1
			break;
 80008c6:	e092      	b.n	80009ee <extract_conversion+0x25a>
		val = 10U * val + *sp++ - '0';
 80008c8:	fb07 4101 	mla	r1, r7, r1, r4
 80008cc:	3930      	subs	r1, #48	; 0x30
 80008ce:	4602      	mov	r2, r0
 80008d0:	e78e      	b.n	80007f0 <extract_conversion+0x5c>
	switch (*sp) {
 80008d2:	2874      	cmp	r0, #116	; 0x74
 80008d4:	d020      	beq.n	8000918 <extract_conversion+0x184>
 80008d6:	287a      	cmp	r0, #122	; 0x7a
 80008d8:	d1df      	bne.n	800089a <extract_conversion+0x106>
		conv->length_mod = LENGTH_Z;
 80008da:	785a      	ldrb	r2, [r3, #1]
 80008dc:	2006      	movs	r0, #6
 80008de:	e00b      	b.n	80008f8 <extract_conversion+0x164>
		if (*++sp == 'h') {
 80008e0:	7850      	ldrb	r0, [r2, #1]
 80008e2:	785c      	ldrb	r4, [r3, #1]
 80008e4:	2868      	cmp	r0, #104	; 0x68
 80008e6:	d105      	bne.n	80008f4 <extract_conversion+0x160>
			conv->length_mod = LENGTH_HH;
 80008e8:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 80008ea:	f361 04c6 	bfi	r4, r1, #3, #4
 80008ee:	705c      	strb	r4, [r3, #1]
			++sp;
 80008f0:	1c91      	adds	r1, r2, #2
 80008f2:	e7d3      	b.n	800089c <extract_conversion+0x108>
			conv->length_mod = LENGTH_H;
 80008f4:	4622      	mov	r2, r4
 80008f6:	2002      	movs	r0, #2
		conv->length_mod = LENGTH_T;
 80008f8:	f360 02c6 	bfi	r2, r0, #3, #4
 80008fc:	705a      	strb	r2, [r3, #1]
		break;
 80008fe:	e7cd      	b.n	800089c <extract_conversion+0x108>
		if (*++sp == 'l') {
 8000900:	7850      	ldrb	r0, [r2, #1]
 8000902:	785c      	ldrb	r4, [r3, #1]
 8000904:	286c      	cmp	r0, #108	; 0x6c
 8000906:	d101      	bne.n	800090c <extract_conversion+0x178>
			conv->length_mod = LENGTH_LL;
 8000908:	2104      	movs	r1, #4
 800090a:	e7ee      	b.n	80008ea <extract_conversion+0x156>
			conv->length_mod = LENGTH_L;
 800090c:	4622      	mov	r2, r4
 800090e:	2003      	movs	r0, #3
 8000910:	e7f2      	b.n	80008f8 <extract_conversion+0x164>
		conv->length_mod = LENGTH_J;
 8000912:	785a      	ldrb	r2, [r3, #1]
 8000914:	2005      	movs	r0, #5
 8000916:	e7ef      	b.n	80008f8 <extract_conversion+0x164>
		conv->length_mod = LENGTH_T;
 8000918:	785a      	ldrb	r2, [r3, #1]
 800091a:	2007      	movs	r0, #7
 800091c:	e7ec      	b.n	80008f8 <extract_conversion+0x164>
		conv->unsupported = true;
 800091e:	881a      	ldrh	r2, [r3, #0]
 8000920:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8000924:	f022 0202 	bic.w	r2, r2, #2
 8000928:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800092c:	f042 0202 	orr.w	r2, r2, #2
 8000930:	801a      	strh	r2, [r3, #0]
		break;
 8000932:	e7b3      	b.n	800089c <extract_conversion+0x108>
 8000934:	f1a4 0258 	sub.w	r2, r4, #88	; 0x58
 8000938:	2a20      	cmp	r2, #32
 800093a:	d87c      	bhi.n	8000a36 <extract_conversion+0x2a2>
 800093c:	a101      	add	r1, pc, #4	; (adr r1, 8000944 <extract_conversion+0x1b0>)
 800093e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8000942:	bf00      	nop
 8000944:	080009ff 	.word	0x080009ff
 8000948:	08000a37 	.word	0x08000a37
 800094c:	08000a37 	.word	0x08000a37
 8000950:	08000a37 	.word	0x08000a37
 8000954:	08000a37 	.word	0x08000a37
 8000958:	08000a37 	.word	0x08000a37
 800095c:	08000a37 	.word	0x08000a37
 8000960:	08000a37 	.word	0x08000a37
 8000964:	08000a37 	.word	0x08000a37
 8000968:	080008bb 	.word	0x080008bb
 800096c:	08000a37 	.word	0x08000a37
 8000970:	080009ff 	.word	0x080009ff
 8000974:	080009c9 	.word	0x080009c9
 8000978:	080008bb 	.word	0x080008bb
 800097c:	080008bb 	.word	0x080008bb
 8000980:	080008bb 	.word	0x080008bb
 8000984:	08000a37 	.word	0x08000a37
 8000988:	080009c9 	.word	0x080009c9
 800098c:	08000a37 	.word	0x08000a37
 8000990:	08000a37 	.word	0x08000a37
 8000994:	08000a37 	.word	0x08000a37
 8000998:	08000a37 	.word	0x08000a37
 800099c:	08000a05 	.word	0x08000a05
 80009a0:	080009ff 	.word	0x080009ff
 80009a4:	08000a1f 	.word	0x08000a1f
 80009a8:	08000a37 	.word	0x08000a37
 80009ac:	08000a37 	.word	0x08000a37
 80009b0:	08000a1f 	.word	0x08000a1f
 80009b4:	08000a37 	.word	0x08000a37
 80009b8:	080009ff 	.word	0x080009ff
 80009bc:	08000a37 	.word	0x08000a37
 80009c0:	08000a37 	.word	0x08000a37
 80009c4:	080009ff 	.word	0x080009ff
		conv->specifier_cat = SPECIFIER_SINT;
 80009c8:	789a      	ldrb	r2, [r3, #2]
 80009ca:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
 80009cc:	f361 0202 	bfi	r2, r1, #0, #3
 80009d0:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 80009d2:	785a      	ldrb	r2, [r3, #1]
 80009d4:	f002 0278 	and.w	r2, r2, #120	; 0x78
 80009d8:	2a40      	cmp	r2, #64	; 0x40
			conv->invalid = true;
 80009da:	bf02      	ittt	eq
 80009dc:	7819      	ldrbeq	r1, [r3, #0]
 80009de:	f041 0101 	orreq.w	r1, r1, #1
 80009e2:	7019      	strbeq	r1, [r3, #0]
		if (conv->specifier == 'c') {
 80009e4:	2c63      	cmp	r4, #99	; 0x63
 80009e6:	d12a      	bne.n	8000a3e <extract_conversion+0x2aa>
			unsupported = (conv->length_mod != LENGTH_NONE);
 80009e8:	3a00      	subs	r2, #0
 80009ea:	bf18      	it	ne
 80009ec:	2201      	movne	r2, #1
	conv->unsupported |= unsupported;
 80009ee:	7819      	ldrb	r1, [r3, #0]
 80009f0:	f3c1 0440 	ubfx	r4, r1, #1, #1
 80009f4:	4322      	orrs	r2, r4
 80009f6:	f362 0141 	bfi	r1, r2, #1, #1
 80009fa:	7019      	strb	r1, [r3, #0]
	return sp;
 80009fc:	e709      	b.n	8000812 <extract_conversion+0x7e>
		conv->specifier_cat = SPECIFIER_UINT;
 80009fe:	789a      	ldrb	r2, [r3, #2]
 8000a00:	2102      	movs	r1, #2
 8000a02:	e7e3      	b.n	80009cc <extract_conversion+0x238>
		conv->specifier_cat = SPECIFIER_PTR;
 8000a04:	789a      	ldrb	r2, [r3, #2]
 8000a06:	2103      	movs	r1, #3
 8000a08:	f361 0202 	bfi	r2, r1, #0, #3
 8000a0c:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 8000a0e:	785a      	ldrb	r2, [r3, #1]
 8000a10:	f002 0278 	and.w	r2, r2, #120	; 0x78
 8000a14:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8000a18:	424a      	negs	r2, r1
 8000a1a:	414a      	adcs	r2, r1
 8000a1c:	e7e7      	b.n	80009ee <extract_conversion+0x25a>
		conv->specifier_cat = SPECIFIER_PTR;
 8000a1e:	789a      	ldrb	r2, [r3, #2]
 8000a20:	2103      	movs	r1, #3
 8000a22:	f361 0202 	bfi	r2, r1, #0, #3
 8000a26:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod != LENGTH_NONE) {
 8000a28:	785a      	ldrb	r2, [r3, #1]
 8000a2a:	f012 0f78 	tst.w	r2, #120	; 0x78
 8000a2e:	bf14      	ite	ne
 8000a30:	2201      	movne	r2, #1
 8000a32:	2200      	moveq	r2, #0
 8000a34:	e7db      	b.n	80009ee <extract_conversion+0x25a>
		conv->invalid = true;
 8000a36:	781a      	ldrb	r2, [r3, #0]
 8000a38:	f042 0201 	orr.w	r2, r2, #1
 8000a3c:	701a      	strb	r2, [r3, #0]
	bool unsupported = false;
 8000a3e:	2200      	movs	r2, #0
 8000a40:	e7d5      	b.n	80009ee <extract_conversion+0x25a>
 8000a42:	bf00      	nop

08000a44 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 8000a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a48:	4682      	mov	sl, r0
 8000a4a:	b091      	sub	sp, #68	; 0x44
 8000a4c:	468b      	mov	fp, r1
 8000a4e:	4691      	mov	r9, r2
 8000a50:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 8000a52:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8000a54:	f899 0000 	ldrb.w	r0, [r9]
 8000a58:	b908      	cbnz	r0, 8000a5e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
 8000a5a:	4628      	mov	r0, r5
 8000a5c:	e10d      	b.n	8000c7a <cbvprintf+0x236>
		if (*fp != '%') {
 8000a5e:	2825      	cmp	r0, #37	; 0x25
 8000a60:	d009      	beq.n	8000a76 <cbvprintf+0x32>
			OUTC(*fp++);
 8000a62:	4659      	mov	r1, fp
 8000a64:	47d0      	blx	sl
 8000a66:	2800      	cmp	r0, #0
 8000a68:	f2c0 8107 	blt.w	8000c7a <cbvprintf+0x236>
 8000a6c:	f109 0301 	add.w	r3, r9, #1
 8000a70:	9302      	str	r3, [sp, #8]
			OUTC('%');
 8000a72:	3501      	adds	r5, #1
			break;
 8000a74:	e05e      	b.n	8000b34 <cbvprintf+0xf0>
		} state = {
 8000a76:	2218      	movs	r2, #24
 8000a78:	2100      	movs	r1, #0
 8000a7a:	a80a      	add	r0, sp, #40	; 0x28
 8000a7c:	f006 f932 	bl	8006ce4 <memset>
		fp = extract_conversion(conv, sp);
 8000a80:	4649      	mov	r1, r9
 8000a82:	a80c      	add	r0, sp, #48	; 0x30
 8000a84:	f7ff fe86 	bl	8000794 <extract_conversion>
		if (conv->width_star) {
 8000a88:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
		fp = extract_conversion(conv, sp);
 8000a8c:	9002      	str	r0, [sp, #8]
		if (conv->width_star) {
 8000a8e:	07d9      	lsls	r1, r3, #31
 8000a90:	d51b      	bpl.n	8000aca <cbvprintf+0x86>
			width = va_arg(ap, int);
 8000a92:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
 8000a96:	f1b8 0f00 	cmp.w	r8, #0
 8000a9a:	da07      	bge.n	8000aac <cbvprintf+0x68>
				conv->flag_dash = true;
 8000a9c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8000aa0:	f042 0204 	orr.w	r2, r2, #4
 8000aa4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
 8000aa8:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
 8000aac:	075a      	lsls	r2, r3, #29
 8000aae:	d515      	bpl.n	8000adc <cbvprintf+0x98>
			int arg = va_arg(ap, int);
 8000ab0:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
 8000ab4:	2f00      	cmp	r7, #0
 8000ab6:	da14      	bge.n	8000ae2 <cbvprintf+0x9e>
				conv->prec_present = false;
 8000ab8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8000abc:	f36f 0341 	bfc	r3, #1, #1
 8000ac0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
 8000ac4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000ac8:	e00b      	b.n	8000ae2 <cbvprintf+0x9e>
		} else if (conv->width_present) {
 8000aca:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
 8000ace:	2a00      	cmp	r2, #0
			width = conv->width_value;
 8000ad0:	bfb4      	ite	lt
 8000ad2:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
		int width = -1;
 8000ad6:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
 8000ada:	e7e7      	b.n	8000aac <cbvprintf+0x68>
		} else if (conv->prec_present) {
 8000adc:	079f      	lsls	r7, r3, #30
 8000ade:	d5f1      	bpl.n	8000ac4 <cbvprintf+0x80>
			precision = conv->prec_value;
 8000ae0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
 8000ae2:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
 8000ae6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 8000ae8:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
 8000aec:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
 8000af0:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 8000af4:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 8000af6:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 8000afa:	d12e      	bne.n	8000b5a <cbvprintf+0x116>
			switch (length_mod) {
 8000afc:	1ecb      	subs	r3, r1, #3
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	d81b      	bhi.n	8000b3a <cbvprintf+0xf6>
 8000b02:	e8df f003 	tbb	[pc, r3]
 8000b06:	3a03      	.short	0x3a03
 8000b08:	1a3a      	.short	0x1a3a
 8000b0a:	1a          	.byte	0x1a
 8000b0b:	00          	.byte	0x00
				value->sint = va_arg(ap, long);
 8000b0c:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
 8000b10:	17d3      	asrs	r3, r2, #31
				value->uint =
 8000b12:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
 8000b16:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8000b1a:	f013 0603 	ands.w	r6, r3, #3
 8000b1e:	d04f      	beq.n	8000bc0 <cbvprintf+0x17c>
			OUTS(sp, fp);
 8000b20:	9b02      	ldr	r3, [sp, #8]
 8000b22:	464a      	mov	r2, r9
 8000b24:	4659      	mov	r1, fp
 8000b26:	4650      	mov	r0, sl
 8000b28:	f005 fd82 	bl	8006630 <outs>
 8000b2c:	2800      	cmp	r0, #0
 8000b2e:	f2c0 80a4 	blt.w	8000c7a <cbvprintf+0x236>
 8000b32:	4405      	add	r5, r0
			OUTS(bps, bpe);
 8000b34:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8000b38:	e78c      	b.n	8000a54 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8000b3a:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
 8000b3e:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8000b40:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000b44:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
 8000b48:	d102      	bne.n	8000b50 <cbvprintf+0x10c>
				value->uint = (unsigned char)value->uint;
 8000b4a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8000b4e:	e010      	b.n	8000b72 <cbvprintf+0x12e>
			} else if (length_mod == LENGTH_H) {
 8000b50:	2902      	cmp	r1, #2
 8000b52:	d1e0      	bne.n	8000b16 <cbvprintf+0xd2>
				value->sint = (short)value->sint;
 8000b54:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8000b58:	e7da      	b.n	8000b10 <cbvprintf+0xcc>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	d120      	bne.n	8000ba0 <cbvprintf+0x15c>
			switch (length_mod) {
 8000b5e:	1ecb      	subs	r3, r1, #3
 8000b60:	2b04      	cmp	r3, #4
 8000b62:	d810      	bhi.n	8000b86 <cbvprintf+0x142>
 8000b64:	e8df f003 	tbb	[pc, r3]
 8000b68:	0f090903 	.word	0x0f090903
 8000b6c:	0f          	.byte	0x0f
 8000b6d:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned long);
 8000b6e:	f854 3b04 	ldr.w	r3, [r4], #4
				value->uint = (unsigned char)value->uint;
 8000b72:	930a      	str	r3, [sp, #40]	; 0x28
 8000b74:	2300      	movs	r3, #0
 8000b76:	930b      	str	r3, [sp, #44]	; 0x2c
 8000b78:	e7cd      	b.n	8000b16 <cbvprintf+0xd2>
					(uint_value_type)va_arg(ap,
 8000b7a:	3407      	adds	r4, #7
 8000b7c:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
 8000b80:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 8000b84:	e7c5      	b.n	8000b12 <cbvprintf+0xce>
					(uint_value_type)va_arg(ap, size_t);
 8000b86:	f854 3b04 	ldr.w	r3, [r4], #4
 8000b8a:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
 8000b8c:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
 8000b8e:	f04f 0300 	mov.w	r3, #0
 8000b92:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
 8000b94:	d0d9      	beq.n	8000b4a <cbvprintf+0x106>
			} else if (length_mod == LENGTH_H) {
 8000b96:	2902      	cmp	r1, #2
 8000b98:	d1bd      	bne.n	8000b16 <cbvprintf+0xd2>
				value->uint = (unsigned short)value->uint;
 8000b9a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8000b9e:	e7e8      	b.n	8000b72 <cbvprintf+0x12e>
		} else if (specifier_cat == SPECIFIER_FP) {
 8000ba0:	2b04      	cmp	r3, #4
 8000ba2:	d107      	bne.n	8000bb4 <cbvprintf+0x170>
			if (length_mod == LENGTH_UPPER_L) {
 8000ba4:	3407      	adds	r4, #7
 8000ba6:	f024 0407 	bic.w	r4, r4, #7
 8000baa:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
 8000bae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000bb2:	e7b0      	b.n	8000b16 <cbvprintf+0xd2>
		} else if (specifier_cat == SPECIFIER_PTR) {
 8000bb4:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
 8000bb6:	bf04      	itt	eq
 8000bb8:	f854 3b04 	ldreq.w	r3, [r4], #4
 8000bbc:	930a      	streq	r3, [sp, #40]	; 0x28
 8000bbe:	e7aa      	b.n	8000b16 <cbvprintf+0xd2>
		switch (conv->specifier) {
 8000bc0:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8000bc4:	2878      	cmp	r0, #120	; 0x78
 8000bc6:	d8b5      	bhi.n	8000b34 <cbvprintf+0xf0>
 8000bc8:	2862      	cmp	r0, #98	; 0x62
 8000bca:	d81f      	bhi.n	8000c0c <cbvprintf+0x1c8>
 8000bcc:	2825      	cmp	r0, #37	; 0x25
 8000bce:	d04f      	beq.n	8000c70 <cbvprintf+0x22c>
 8000bd0:	2858      	cmp	r0, #88	; 0x58
 8000bd2:	d1af      	bne.n	8000b34 <cbvprintf+0xf0>
			bps = encode_uint(value->uint, conv, buf, bpe);
 8000bd4:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8000bd8:	9300      	str	r3, [sp, #0]
 8000bda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8000bde:	ab04      	add	r3, sp, #16
 8000be0:	aa0c      	add	r2, sp, #48	; 0x30
 8000be2:	f005 fcda 	bl	800659a <encode_uint>
 8000be6:	4681      	mov	r9, r0
			if (precision >= 0) {
 8000be8:	2f00      	cmp	r7, #0
 8000bea:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 8000bee:	db0b      	blt.n	8000c08 <cbvprintf+0x1c4>
				conv->flag_zero = false;
 8000bf0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
 8000bf4:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
 8000bf8:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 8000bfc:	429f      	cmp	r7, r3
				conv->flag_zero = false;
 8000bfe:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
 8000c02:	d901      	bls.n	8000c08 <cbvprintf+0x1c4>
					conv->pad0_value = precision - (int)len;
 8000c04:	1aff      	subs	r7, r7, r3
 8000c06:	970d      	str	r7, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
 8000c08:	4607      	mov	r7, r0
 8000c0a:	e046      	b.n	8000c9a <cbvprintf+0x256>
 8000c0c:	3863      	subs	r0, #99	; 0x63
 8000c0e:	2815      	cmp	r0, #21
 8000c10:	d890      	bhi.n	8000b34 <cbvprintf+0xf0>
 8000c12:	a201      	add	r2, pc, #4	; (adr r2, 8000c18 <cbvprintf+0x1d4>)
 8000c14:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 8000c18:	08000ca3 	.word	0x08000ca3
 8000c1c:	08000d07 	.word	0x08000d07
 8000c20:	08000b35 	.word	0x08000b35
 8000c24:	08000b35 	.word	0x08000b35
 8000c28:	08000b35 	.word	0x08000b35
 8000c2c:	08000b35 	.word	0x08000b35
 8000c30:	08000d07 	.word	0x08000d07
 8000c34:	08000b35 	.word	0x08000b35
 8000c38:	08000b35 	.word	0x08000b35
 8000c3c:	08000b35 	.word	0x08000b35
 8000c40:	08000b35 	.word	0x08000b35
 8000c44:	08000d65 	.word	0x08000d65
 8000c48:	08000d33 	.word	0x08000d33
 8000c4c:	08000d37 	.word	0x08000d37
 8000c50:	08000b35 	.word	0x08000b35
 8000c54:	08000b35 	.word	0x08000b35
 8000c58:	08000c81 	.word	0x08000c81
 8000c5c:	08000b35 	.word	0x08000b35
 8000c60:	08000d33 	.word	0x08000d33
 8000c64:	08000b35 	.word	0x08000b35
 8000c68:	08000b35 	.word	0x08000b35
 8000c6c:	08000d33 	.word	0x08000d33
			OUTC('%');
 8000c70:	4659      	mov	r1, fp
 8000c72:	47d0      	blx	sl
 8000c74:	2800      	cmp	r0, #0
 8000c76:	f6bf aefc 	bge.w	8000a72 <cbvprintf+0x2e>
#undef OUTS
#undef OUTC
}
 8000c7a:	b011      	add	sp, #68	; 0x44
 8000c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			bps = (const char *)value->ptr;
 8000c80:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
			size_t len = strlen(bps);
 8000c84:	4648      	mov	r0, r9
 8000c86:	f005 ffe0 	bl	8006c4a <strlen>
			if ((precision >= 0)
 8000c8a:	2f00      	cmp	r7, #0
 8000c8c:	db02      	blt.n	8000c94 <cbvprintf+0x250>
 8000c8e:	42b8      	cmp	r0, r7
 8000c90:	bf28      	it	cs
 8000c92:	4638      	movcs	r0, r7
			bpe = bps + len;
 8000c94:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
 8000c98:	2600      	movs	r6, #0
		if (bps == NULL) {
 8000c9a:	f1b9 0f00 	cmp.w	r9, #0
 8000c9e:	d108      	bne.n	8000cb2 <cbvprintf+0x26e>
 8000ca0:	e748      	b.n	8000b34 <cbvprintf+0xf0>
			buf[0] = value->uint;
 8000ca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000ca4:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
 8000ca8:	2600      	movs	r6, #0
			bpe = buf + 1;
 8000caa:	f10d 0711 	add.w	r7, sp, #17
			bps = buf;
 8000cae:	f10d 0910 	add.w	r9, sp, #16
		size_t nj_len = (bpe - bps);
 8000cb2:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
 8000cb6:	b106      	cbz	r6, 8000cba <cbvprintf+0x276>
			nj_len += 1U;
 8000cb8:	3301      	adds	r3, #1
		if (conv->altform_0c) {
 8000cba:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8000cbe:	06d0      	lsls	r0, r2, #27
 8000cc0:	d56a      	bpl.n	8000d98 <cbvprintf+0x354>
			nj_len += 2U;
 8000cc2:	3302      	adds	r3, #2
		if (conv->pad_fp) {
 8000cc4:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
 8000cc6:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
 8000cc8:	bf48      	it	mi
 8000cca:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
 8000ccc:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
 8000cce:	bf48      	it	mi
 8000cd0:	189b      	addmi	r3, r3, r2
		if (width > 0) {
 8000cd2:	f1b8 0f00 	cmp.w	r8, #0
 8000cd6:	dd73      	ble.n	8000dc0 <cbvprintf+0x37c>
			if (!conv->flag_dash) {
 8000cd8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
 8000cdc:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
 8000ce0:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8000ce4:	9303      	str	r3, [sp, #12]
 8000ce6:	0753      	lsls	r3, r2, #29
 8000ce8:	d46a      	bmi.n	8000dc0 <cbvprintf+0x37c>
				if (conv->flag_zero) {
 8000cea:	0650      	lsls	r0, r2, #25
 8000cec:	f140 80a6 	bpl.w	8000e3c <cbvprintf+0x3f8>
					if (sign != 0) {
 8000cf0:	b13e      	cbz	r6, 8000d02 <cbvprintf+0x2be>
						OUTC(sign);
 8000cf2:	4659      	mov	r1, fp
 8000cf4:	4630      	mov	r0, r6
 8000cf6:	47d0      	blx	sl
 8000cf8:	2800      	cmp	r0, #0
 8000cfa:	dbbe      	blt.n	8000c7a <cbvprintf+0x236>
						sign = 0;
 8000cfc:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
 8000cfe:	3501      	adds	r5, #1
						sign = 0;
 8000d00:	461e      	mov	r6, r3
					pad = '0';
 8000d02:	2330      	movs	r3, #48	; 0x30
 8000d04:	e09b      	b.n	8000e3e <cbvprintf+0x3fa>
			if (conv->flag_plus) {
 8000d06:	071e      	lsls	r6, r3, #28
 8000d08:	d411      	bmi.n	8000d2e <cbvprintf+0x2ea>
				sign = ' ';
 8000d0a:	f013 0610 	ands.w	r6, r3, #16
 8000d0e:	bf18      	it	ne
 8000d10:	2620      	movne	r6, #32
			if (value->sint < 0) {
 8000d12:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	f173 0100 	sbcs.w	r1, r3, #0
 8000d1c:	f6bf af5a 	bge.w	8000bd4 <cbvprintf+0x190>
				value->uint = (uint_value_type)-value->sint;
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
 8000d2a:	262d      	movs	r6, #45	; 0x2d
 8000d2c:	e752      	b.n	8000bd4 <cbvprintf+0x190>
				sign = '+';
 8000d2e:	262b      	movs	r6, #43	; 0x2b
 8000d30:	e7ef      	b.n	8000d12 <cbvprintf+0x2ce>
		switch (conv->specifier) {
 8000d32:	2600      	movs	r6, #0
 8000d34:	e74e      	b.n	8000bd4 <cbvprintf+0x190>
			if (value->ptr != NULL) {
 8000d36:	980a      	ldr	r0, [sp, #40]	; 0x28
 8000d38:	b348      	cbz	r0, 8000d8e <cbvprintf+0x34a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000d3a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	aa0c      	add	r2, sp, #48	; 0x30
 8000d42:	ab04      	add	r3, sp, #16
 8000d44:	2100      	movs	r1, #0
 8000d46:	f005 fc28 	bl	800659a <encode_uint>
				conv->altform_0c = true;
 8000d4a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8000d4e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8000d52:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8000d56:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000d5a:	4681      	mov	r9, r0
				conv->altform_0c = true;
 8000d5c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
 8000d60:	2600      	movs	r6, #0
				goto prec_int_pad0;
 8000d62:	e741      	b.n	8000be8 <cbvprintf+0x1a4>
				store_count(conv, value->ptr, count);
 8000d64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
 8000d66:	2907      	cmp	r1, #7
 8000d68:	f63f aee4 	bhi.w	8000b34 <cbvprintf+0xf0>
 8000d6c:	e8df f001 	tbb	[pc, r1]
 8000d70:	0d06040d 	.word	0x0d06040d
 8000d74:	0d0d0808 	.word	0x0d0d0808
		*(signed char *)dp = (signed char)count;
 8000d78:	701d      	strb	r5, [r3, #0]
		break;
 8000d7a:	e6db      	b.n	8000b34 <cbvprintf+0xf0>
		*(short *)dp = (short)count;
 8000d7c:	801d      	strh	r5, [r3, #0]
		break;
 8000d7e:	e6d9      	b.n	8000b34 <cbvprintf+0xf0>
		*(intmax_t *)dp = (intmax_t)count;
 8000d80:	4628      	mov	r0, r5
 8000d82:	17e9      	asrs	r1, r5, #31
 8000d84:	e9c3 0100 	strd	r0, r1, [r3]
		break;
 8000d88:	e6d4      	b.n	8000b34 <cbvprintf+0xf0>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8000d8a:	601d      	str	r5, [r3, #0]
		break;
 8000d8c:	e6d2      	b.n	8000b34 <cbvprintf+0xf0>
			bpe = bps + 5;
 8000d8e:	4f31      	ldr	r7, [pc, #196]	; (8000e54 <cbvprintf+0x410>)
 8000d90:	4606      	mov	r6, r0
			bps = "(nil)";
 8000d92:	f1a7 0905 	sub.w	r9, r7, #5
 8000d96:	e78c      	b.n	8000cb2 <cbvprintf+0x26e>
		} else if (conv->altform_0) {
 8000d98:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
 8000d9a:	bf48      	it	mi
 8000d9c:	3301      	addmi	r3, #1
 8000d9e:	e791      	b.n	8000cc4 <cbvprintf+0x280>
					OUTC(pad);
 8000da0:	4618      	mov	r0, r3
 8000da2:	4659      	mov	r1, fp
 8000da4:	9303      	str	r3, [sp, #12]
 8000da6:	47d0      	blx	sl
 8000da8:	2800      	cmp	r0, #0
 8000daa:	9b03      	ldr	r3, [sp, #12]
 8000dac:	f6ff af65 	blt.w	8000c7a <cbvprintf+0x236>
 8000db0:	4642      	mov	r2, r8
				while (width-- > 0) {
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	eba5 0108 	sub.w	r1, r5, r8
 8000db8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8000dbc:	dcf0      	bgt.n	8000da0 <cbvprintf+0x35c>
 8000dbe:	460d      	mov	r5, r1
		if (sign != 0) {
 8000dc0:	b136      	cbz	r6, 8000dd0 <cbvprintf+0x38c>
			OUTC(sign);
 8000dc2:	4659      	mov	r1, fp
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	47d0      	blx	sl
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	f6ff af56 	blt.w	8000c7a <cbvprintf+0x236>
 8000dce:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 8000dd0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8000dd4:	06d9      	lsls	r1, r3, #27
 8000dd6:	d401      	bmi.n	8000ddc <cbvprintf+0x398>
 8000dd8:	071a      	lsls	r2, r3, #28
 8000dda:	d506      	bpl.n	8000dea <cbvprintf+0x3a6>
				OUTC('0');
 8000ddc:	4659      	mov	r1, fp
 8000dde:	2030      	movs	r0, #48	; 0x30
 8000de0:	47d0      	blx	sl
 8000de2:	2800      	cmp	r0, #0
 8000de4:	f6ff af49 	blt.w	8000c7a <cbvprintf+0x236>
 8000de8:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 8000dea:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8000dee:	06db      	lsls	r3, r3, #27
 8000df0:	d507      	bpl.n	8000e02 <cbvprintf+0x3be>
				OUTC(conv->specifier);
 8000df2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8000df6:	4659      	mov	r1, fp
 8000df8:	47d0      	blx	sl
 8000dfa:	2800      	cmp	r0, #0
 8000dfc:	f6ff af3d 	blt.w	8000c7a <cbvprintf+0x236>
 8000e00:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8000e02:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8000e04:	442e      	add	r6, r5
 8000e06:	1b73      	subs	r3, r6, r5
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	dc1a      	bgt.n	8000e42 <cbvprintf+0x3fe>
			OUTS(bps, bpe);
 8000e0c:	463b      	mov	r3, r7
 8000e0e:	464a      	mov	r2, r9
 8000e10:	4659      	mov	r1, fp
 8000e12:	4650      	mov	r0, sl
 8000e14:	f005 fc0c 	bl	8006630 <outs>
 8000e18:	2800      	cmp	r0, #0
 8000e1a:	f6ff af2e 	blt.w	8000c7a <cbvprintf+0x236>
 8000e1e:	4405      	add	r5, r0
		while (width > 0) {
 8000e20:	44a8      	add	r8, r5
 8000e22:	eba8 0305 	sub.w	r3, r8, r5
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f77f ae84 	ble.w	8000b34 <cbvprintf+0xf0>
			OUTC(' ');
 8000e2c:	4659      	mov	r1, fp
 8000e2e:	2020      	movs	r0, #32
 8000e30:	47d0      	blx	sl
 8000e32:	2800      	cmp	r0, #0
 8000e34:	f6ff af21 	blt.w	8000c7a <cbvprintf+0x236>
 8000e38:	3501      	adds	r5, #1
			--width;
 8000e3a:	e7f2      	b.n	8000e22 <cbvprintf+0x3de>
				char pad = ' ';
 8000e3c:	2320      	movs	r3, #32
 8000e3e:	4445      	add	r5, r8
 8000e40:	e7b6      	b.n	8000db0 <cbvprintf+0x36c>
				OUTC('0');
 8000e42:	4659      	mov	r1, fp
 8000e44:	2030      	movs	r0, #48	; 0x30
 8000e46:	47d0      	blx	sl
 8000e48:	2800      	cmp	r0, #0
 8000e4a:	f6ff af16 	blt.w	8000c7a <cbvprintf+0x236>
 8000e4e:	3501      	adds	r5, #1
 8000e50:	e7d9      	b.n	8000e06 <cbvprintf+0x3c2>
 8000e52:	bf00      	nop
 8000e54:	080093d5 	.word	0x080093d5

08000e58 <stm32l4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8000e58:	f04f 0210 	mov.w	r2, #16
 8000e5c:	f3ef 8311 	mrs	r3, BASEPRI
 8000e60:	f382 8811 	msr	BASEPRI, r2
 8000e64:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8000e68:	f383 8811 	msr	BASEPRI, r3
 8000e6c:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 8000e70:	4b02      	ldr	r3, [pc, #8]	; (8000e7c <stm32l4_init+0x24>)
 8000e72:	4a03      	ldr	r2, [pc, #12]	; (8000e80 <stm32l4_init+0x28>)
 8000e74:	601a      	str	r2, [r3, #0]

	return 0;
}
 8000e76:	2000      	movs	r0, #0
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000168 	.word	0x20000168
 8000e80:	003d0900 	.word	0x003d0900

08000e84 <log_generic>:
	return args;
}

void log_generic(struct log_msg_ids src_level, const char *fmt, va_list ap,
		 enum log_strdup_action strdup_action)
{
 8000e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		uint32_t timestamp = timestamp_func();
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <log_generic+0x50>)
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
 8000e8a:	4c13      	ldr	r4, [pc, #76]	; (8000ed8 <log_generic+0x54>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
{
 8000e8e:	b085      	sub	sp, #20
 8000e90:	4607      	mov	r7, r0
 8000e92:	4688      	mov	r8, r1
 8000e94:	4616      	mov	r6, r2
		uint32_t timestamp = timestamp_func();
 8000e96:	4798      	blx	r3
 8000e98:	4b10      	ldr	r3, [pc, #64]	; (8000edc <log_generic+0x58>)
 8000e9a:	1b1b      	subs	r3, r3, r4
 8000e9c:	4681      	mov	r9, r0
 8000e9e:	ea4f 1a23 	mov.w	sl, r3, asr #4

		for (int i = 0; i < log_backend_count_get(); i++) {
 8000ea2:	f04f 0b00 	mov.w	fp, #0
 8000ea6:	45da      	cmp	sl, fp
 8000ea8:	dc02      	bgt.n	8000eb0 <log_generic+0x2c>
				mask &= ~BIT(idx);
			}
		}
		log_n(fmt, args, nargs, src_level);
	}
}
 8000eaa:	b005      	add	sp, #20
 8000eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 8000eb0:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend)) {
 8000eb2:	795b      	ldrb	r3, [r3, #5]
 8000eb4:	b14b      	cbz	r3, 8000eca <log_generic+0x46>
	if (backend->api->put_sync_string) {
 8000eb6:	6823      	ldr	r3, [r4, #0]
				va_copy(ap_tmp, ap);
 8000eb8:	9603      	str	r6, [sp, #12]
 8000eba:	685d      	ldr	r5, [r3, #4]
 8000ebc:	b12d      	cbz	r5, 8000eca <log_generic+0x46>
		backend->api->put_sync_string(backend, src_level,
 8000ebe:	9600      	str	r6, [sp, #0]
 8000ec0:	4643      	mov	r3, r8
 8000ec2:	464a      	mov	r2, r9
 8000ec4:	4639      	mov	r1, r7
 8000ec6:	4620      	mov	r0, r4
 8000ec8:	47a8      	blx	r5
		for (int i = 0; i < log_backend_count_get(); i++) {
 8000eca:	f10b 0b01 	add.w	fp, fp, #1
 8000ece:	3410      	adds	r4, #16
 8000ed0:	e7e9      	b.n	8000ea6 <log_generic+0x22>
 8000ed2:	bf00      	nop
 8000ed4:	20000028 	.word	0x20000028
 8000ed8:	08008d8c 	.word	0x08008d8c
 8000edc:	08008d9c 	.word	0x08008d9c

08000ee0 <log_core_init>:
					CONFIG_LOG_STRDUP_BUF_COUNT);
	}

	/* Set default timestamp. */
	if (sys_clock_hw_cycles_per_sec() > 1000000) {
		timestamp_func = k_uptime_get_32;
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <log_core_init+0x10>)
 8000ee2:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <log_core_init+0x14>)
 8000ee4:	601a      	str	r2, [r3, #0]
	} else {
		timestamp_func = k_cycle_get_32_wrapper;
		freq = sys_clock_hw_cycles_per_sec();
	}

	log_output_timestamp_freq_set(freq);
 8000ee6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eea:	f000 ba15 	b.w	8001318 <log_output_timestamp_freq_set>
 8000eee:	bf00      	nop
 8000ef0:	20000028 	.word	0x20000028
 8000ef4:	0800665f 	.word	0x0800665f

08000ef8 <log_source_name_get>:
 8000ef8:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <log_source_name_get+0x14>)
 8000efa:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <log_source_name_get+0x18>)
 8000efc:	1a9b      	subs	r3, r3, r2
	return log_sources_count();
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
 8000efe:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
 8000f02:	bf34      	ite	cc
 8000f04:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
 8000f08:	2000      	movcs	r0, #0
}
 8000f0a:	4770      	bx	lr
 8000f0c:	08008d1c 	.word	0x08008d1c
 8000f10:	08008d8c 	.word	0x08008d8c

08000f14 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <log_backend_enable+0x28>)

	log_backend_id_set(backend, id);
 8000f16:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
 8000f18:	1ac3      	subs	r3, r0, r3
 8000f1a:	111b      	asrs	r3, r3, #4
 8000f1c:	3301      	adds	r3, #1
{
 8000f1e:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
 8000f20:	7113      	strb	r3, [r2, #4]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);
 8000f22:	6843      	ldr	r3, [r0, #4]

	/* Wakeup logger thread after attaching first backend. It might be
	 * blocked with log messages pending.
	 */
	if (!backend_attached) {
 8000f24:	4c06      	ldr	r4, [pc, #24]	; (8000f40 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
 8000f26:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
 8000f28:	2201      	movs	r2, #1
 8000f2a:	715a      	strb	r2, [r3, #5]
 8000f2c:	7822      	ldrb	r2, [r4, #0]
 8000f2e:	b912      	cbnz	r2, 8000f36 <log_backend_enable+0x22>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8000f30:	4804      	ldr	r0, [pc, #16]	; (8000f44 <log_backend_enable+0x30>)
 8000f32:	f004 ffb5 	bl	8005ea0 <z_impl_k_sem_give>
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
 8000f36:	2301      	movs	r3, #1
 8000f38:	7023      	strb	r3, [r4, #0]
}
 8000f3a:	bd10      	pop	{r4, pc}
 8000f3c:	08008d8c 	.word	0x08008d8c
 8000f40:	20000876 	.word	0x20000876
 8000f44:	200002e4 	.word	0x200002e4

08000f48 <log_init>:
{
 8000f48:	b570      	push	{r4, r5, r6, lr}
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <log_init+0x48>)
 8000f4c:	f3bf 8f5b 	dmb	ish
 8000f50:	e853 5f00 	ldrex	r5, [r3]
 8000f54:	1c6a      	adds	r2, r5, #1
 8000f56:	e843 2100 	strex	r1, r2, [r3]
 8000f5a:	2900      	cmp	r1, #0
 8000f5c:	d1f8      	bne.n	8000f50 <log_init+0x8>
 8000f5e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
 8000f62:	b92d      	cbnz	r5, 8000f70 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
 8000f64:	4c0b      	ldr	r4, [pc, #44]	; (8000f94 <log_init+0x4c>)
 8000f66:	4e0c      	ldr	r6, [pc, #48]	; (8000f98 <log_init+0x50>)
 8000f68:	1b36      	subs	r6, r6, r4
 8000f6a:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
 8000f6c:	42b5      	cmp	r5, r6
 8000f6e:	db00      	blt.n	8000f72 <log_init+0x2a>
}
 8000f70:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
 8000f72:	7b23      	ldrb	r3, [r4, #12]
 8000f74:	b143      	cbz	r3, 8000f88 <log_init+0x40>
			if (backend->api->init != NULL) {
 8000f76:	6823      	ldr	r3, [r4, #0]
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	b103      	cbz	r3, 8000f7e <log_init+0x36>
				backend->api->init();
 8000f7c:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
 8000f7e:	2204      	movs	r2, #4
 8000f80:	2100      	movs	r1, #0
 8000f82:	4620      	mov	r0, r4
 8000f84:	f7ff ffc6 	bl	8000f14 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 8000f88:	3501      	adds	r5, #1
 8000f8a:	3410      	adds	r4, #16
 8000f8c:	e7ee      	b.n	8000f6c <log_init+0x24>
 8000f8e:	bf00      	nop
 8000f90:	20000654 	.word	0x20000654
 8000f94:	08008d8c 	.word	0x08008d8c
 8000f98:	08008d9c 	.word	0x08008d9c

08000f9c <z_impl_log_panic>:
{
 8000f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
 8000f9e:	4f0c      	ldr	r7, [pc, #48]	; (8000fd0 <z_impl_log_panic+0x34>)
 8000fa0:	783d      	ldrb	r5, [r7, #0]
 8000fa2:	b94d      	cbnz	r5, 8000fb8 <z_impl_log_panic+0x1c>
 8000fa4:	4c0b      	ldr	r4, [pc, #44]	; (8000fd4 <z_impl_log_panic+0x38>)
 8000fa6:	4e0c      	ldr	r6, [pc, #48]	; (8000fd8 <z_impl_log_panic+0x3c>)
	log_init();
 8000fa8:	f7ff ffce 	bl	8000f48 <log_init>
 8000fac:	1b36      	subs	r6, r6, r4
 8000fae:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
 8000fb0:	42b5      	cmp	r5, r6
 8000fb2:	db02      	blt.n	8000fba <z_impl_log_panic+0x1e>
	panic_mode = true;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	703b      	strb	r3, [r7, #0]
}
 8000fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
 8000fba:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
 8000fbc:	795b      	ldrb	r3, [r3, #5]
 8000fbe:	b11b      	cbz	r3, 8000fc8 <z_impl_log_panic+0x2c>
	backend->api->panic(backend);
 8000fc0:	6823      	ldr	r3, [r4, #0]
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	691b      	ldr	r3, [r3, #16]
 8000fc6:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
 8000fc8:	3501      	adds	r5, #1
 8000fca:	3410      	adds	r4, #16
 8000fcc:	e7f0      	b.n	8000fb0 <z_impl_log_panic+0x14>
 8000fce:	bf00      	nop
 8000fd0:	20000877 	.word	0x20000877
 8000fd4:	08008d8c 	.word	0x08008d8c
 8000fd8:	08008d9c 	.word	0x08008d9c

08000fdc <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
 8000fdc:	b40e      	push	{r1, r2, r3}
 8000fde:	b503      	push	{r0, r1, lr}
 8000fe0:	ab03      	add	r3, sp, #12
 8000fe2:	4601      	mov	r1, r0
 8000fe4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
 8000fe8:	4804      	ldr	r0, [pc, #16]	; (8000ffc <print_formatted+0x20>)
	va_start(args, fmt);
 8000fea:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
 8000fec:	f7ff fd2a 	bl	8000a44 <cbvprintf>
	va_end(args);

	return length;
}
 8000ff0:	b002      	add	sp, #8
 8000ff2:	f85d eb04 	ldr.w	lr, [sp], #4
 8000ff6:	b003      	add	sp, #12
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	080066a7 	.word	0x080066a7

08001000 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
 8001000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001004:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
 8001006:	f011 0402 	ands.w	r4, r1, #2
{
 800100a:	4690      	mov	r8, r2
 800100c:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8001010:	4606      	mov	r6, r0
 8001012:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 8001014:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 8001018:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
 800101c:	d007      	beq.n	800102e <prefix_print+0x2e>
	if (!format) {
 800101e:	f011 0f44 	tst.w	r1, #68	; 0x44
 8001022:	d137      	bne.n	8001094 <prefix_print+0x94>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
 8001024:	4932      	ldr	r1, [pc, #200]	; (80010f0 <prefix_print+0xf0>)
 8001026:	f7ff ffd9 	bl	8000fdc <print_formatted>
			length = print_formatted(log_output,
 800102a:	4601      	mov	r1, r0
		length += timestamp_print(log_output, flags, timestamp);
 800102c:	460c      	mov	r4, r1
	if (color) {
 800102e:	f1b9 0f00 	cmp.w	r9, #0
 8001032:	d00a      	beq.n	800104a <prefix_print+0x4a>
		const char *log_color = start && (colors[level] != NULL) ?
 8001034:	4b2f      	ldr	r3, [pc, #188]	; (80010f4 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
 8001036:	4930      	ldr	r1, [pc, #192]	; (80010f8 <prefix_print+0xf8>)
		const char *log_color = start && (colors[level] != NULL) ?
 8001038:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
 800103c:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <prefix_print+0xfc>)
 800103e:	4630      	mov	r0, r6
 8001040:	2a00      	cmp	r2, #0
 8001042:	bf08      	it	eq
 8001044:	461a      	moveq	r2, r3
 8001046:	f7ff ffc9 	bl	8000fdc <print_formatted>
	if (level_on) {
 800104a:	b13d      	cbz	r5, 800105c <prefix_print+0x5c>
		total += print_formatted(log_output, "<%s> ", severity[level]);
 800104c:	4b2c      	ldr	r3, [pc, #176]	; (8001100 <prefix_print+0x100>)
 800104e:	492d      	ldr	r1, [pc, #180]	; (8001104 <prefix_print+0x104>)
 8001050:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
 8001054:	4630      	mov	r0, r6
 8001056:	f7ff ffc1 	bl	8000fdc <print_formatted>
 800105a:	4605      	mov	r5, r0
	total += print_formatted(log_output,
 800105c:	f1b8 0f00 	cmp.w	r8, #0
 8001060:	d043      	beq.n	80010ea <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
 8001062:	2301      	movs	r3, #1
 8001064:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
 8001068:	4b27      	ldr	r3, [pc, #156]	; (8001108 <prefix_print+0x108>)
 800106a:	f017 0f10 	tst.w	r7, #16
 800106e:	4f27      	ldr	r7, [pc, #156]	; (800110c <prefix_print+0x10c>)
 8001070:	bf18      	it	ne
 8001072:	461f      	movne	r7, r3
 8001074:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8001078:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800107c:	f7ff ff3c 	bl	8000ef8 <log_source_name_get>
 8001080:	4639      	mov	r1, r7
 8001082:	4602      	mov	r2, r0
 8001084:	4630      	mov	r0, r6
 8001086:	f7ff ffa9 	bl	8000fdc <print_formatted>
 800108a:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
 800108c:	4420      	add	r0, r4
 800108e:	b005      	add	sp, #20
 8001090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
 8001094:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <prefix_print+0x110>)
 8001096:	6819      	ldr	r1, [r3, #0]
 8001098:	2900      	cmp	r1, #0
 800109a:	d0c7      	beq.n	800102c <prefix_print+0x2c>
		timestamp /= timestamp_div;
 800109c:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <prefix_print+0x114>)
 800109e:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
 80010a8:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		total_seconds = timestamp / freq;
 80010ac:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
 80010b0:	fbb4 f2fe 	udiv	r2, r4, lr
 80010b4:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
 80010b8:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
 80010bc:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
 80010c0:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 80010c4:	fbb4 fbf1 	udiv	fp, r4, r1
 80010c8:	fb01 441b 	mls	r4, r1, fp, r4
 80010cc:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
 80010d0:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 80010d4:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
 80010d8:	e9cd b101 	strd	fp, r1, [sp, #4]
 80010dc:	fb0a e113 	mls	r1, sl, r3, lr
 80010e0:	9100      	str	r1, [sp, #0]
 80010e2:	490d      	ldr	r1, [pc, #52]	; (8001118 <prefix_print+0x118>)
 80010e4:	f7ff ff7a 	bl	8000fdc <print_formatted>
 80010e8:	e79f      	b.n	800102a <prefix_print+0x2a>
	total += print_formatted(log_output,
 80010ea:	4f08      	ldr	r7, [pc, #32]	; (800110c <prefix_print+0x10c>)
 80010ec:	e7c2      	b.n	8001074 <prefix_print+0x74>
 80010ee:	bf00      	nop
 80010f0:	080093e8 	.word	0x080093e8
 80010f4:	08008dc4 	.word	0x08008dc4
 80010f8:	0800940d 	.word	0x0800940d
 80010fc:	080093da 	.word	0x080093da
 8001100:	08008dd8 	.word	0x08008dd8
 8001104:	08009410 	.word	0x08009410
 8001108:	080093e4 	.word	0x080093e4
 800110c:	080093df 	.word	0x080093df
 8001110:	20000658 	.word	0x20000658
 8001114:	2000065c 	.word	0x2000065c
 8001118:	080093f1 	.word	0x080093f1

0800111c <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
 800111c:	b538      	push	{r3, r4, r5, lr}
 800111e:	460c      	mov	r4, r1
	if (color) {
 8001120:	07e1      	lsls	r1, r4, #31
{
 8001122:	4605      	mov	r5, r0
	if (color) {
 8001124:	d503      	bpl.n	800112e <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
 8001126:	4a08      	ldr	r2, [pc, #32]	; (8001148 <postfix_print+0x2c>)
 8001128:	4908      	ldr	r1, [pc, #32]	; (800114c <postfix_print+0x30>)
 800112a:	f7ff ff57 	bl	8000fdc <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 800112e:	06e2      	lsls	r2, r4, #27
 8001130:	d408      	bmi.n	8001144 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 8001132:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
 8001134:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
 8001136:	bf4c      	ite	mi
 8001138:	4905      	ldrmi	r1, [pc, #20]	; (8001150 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
 800113a:	4906      	ldrpl	r1, [pc, #24]	; (8001154 <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
 800113c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
 8001140:	f7ff bf4c 	b.w	8000fdc <print_formatted>
}
 8001144:	bd38      	pop	{r3, r4, r5, pc}
 8001146:	bf00      	nop
 8001148:	080093da 	.word	0x080093da
 800114c:	0800940d 	.word	0x0800940d
 8001150:	080091e4 	.word	0x080091e4
 8001154:	080091e3 	.word	0x080091e3

08001158 <hexdump_line_print>:
{
 8001158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800115c:	461d      	mov	r5, r3
 800115e:	9b08      	ldr	r3, [sp, #32]
 8001160:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 8001162:	06da      	lsls	r2, r3, #27
{
 8001164:	4604      	mov	r4, r0
 8001166:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 8001168:	d405      	bmi.n	8001176 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 800116a:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
 800116c:	bf4c      	ite	mi
 800116e:	492a      	ldrmi	r1, [pc, #168]	; (8001218 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
 8001170:	492a      	ldrpl	r1, [pc, #168]	; (800121c <hexdump_line_print+0xc4>)
 8001172:	f7ff ff33 	bl	8000fdc <print_formatted>
		print_formatted(log_output, " ");
 8001176:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8001224 <hexdump_line_print+0xcc>
{
 800117a:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
 800117e:	45a8      	cmp	r8, r5
 8001180:	db2a      	blt.n	80011d8 <hexdump_line_print+0x80>
			print_formatted(log_output, "   ");
 8001182:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8001228 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
 8001186:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800122c <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
 800118a:	f8df a098 	ldr.w	sl, [pc, #152]	; 8001224 <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 800118e:	2500      	movs	r5, #0
		if (i < length) {
 8001190:	42bd      	cmp	r5, r7
 8001192:	d22f      	bcs.n	80011f4 <hexdump_line_print+0x9c>
			print_formatted(log_output, "%02x ", data[i]);
 8001194:	5d72      	ldrb	r2, [r6, r5]
 8001196:	4649      	mov	r1, r9
 8001198:	4620      	mov	r0, r4
 800119a:	f7ff ff1f 	bl	8000fdc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 800119e:	3501      	adds	r5, #1
 80011a0:	2d10      	cmp	r5, #16
 80011a2:	d120      	bne.n	80011e6 <hexdump_line_print+0x8e>
	print_formatted(log_output, "|");
 80011a4:	491e      	ldr	r1, [pc, #120]	; (8001220 <hexdump_line_print+0xc8>)
			print_formatted(log_output, " ");
 80011a6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8001224 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%c",
 80011aa:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8001230 <hexdump_line_print+0xd8>
	print_formatted(log_output, "|");
 80011ae:	4620      	mov	r0, r4
 80011b0:	f7ff ff14 	bl	8000fdc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80011b4:	2500      	movs	r5, #0
		if (i < length) {
 80011b6:	42af      	cmp	r7, r5
 80011b8:	d928      	bls.n	800120c <hexdump_line_print+0xb4>
			      isprint((int)c) ? c : '.');
 80011ba:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
 80011bc:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(log_output, "%c",
 80011c0:	2b5f      	cmp	r3, #95	; 0x5f
 80011c2:	bf28      	it	cs
 80011c4:	222e      	movcs	r2, #46	; 0x2e
 80011c6:	4649      	mov	r1, r9
 80011c8:	4620      	mov	r0, r4
 80011ca:	f7ff ff07 	bl	8000fdc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80011ce:	3501      	adds	r5, #1
 80011d0:	2d10      	cmp	r5, #16
 80011d2:	d114      	bne.n	80011fe <hexdump_line_print+0xa6>
}
 80011d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
 80011d8:	4649      	mov	r1, r9
 80011da:	4620      	mov	r0, r4
 80011dc:	f7ff fefe 	bl	8000fdc <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 80011e0:	f108 0801 	add.w	r8, r8, #1
 80011e4:	e7cb      	b.n	800117e <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
 80011e6:	076a      	lsls	r2, r5, #29
 80011e8:	d1d2      	bne.n	8001190 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
 80011ea:	4651      	mov	r1, sl
 80011ec:	4620      	mov	r0, r4
 80011ee:	f7ff fef5 	bl	8000fdc <print_formatted>
 80011f2:	e7cd      	b.n	8001190 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
 80011f4:	4641      	mov	r1, r8
 80011f6:	4620      	mov	r0, r4
 80011f8:	f7ff fef0 	bl	8000fdc <print_formatted>
 80011fc:	e7cf      	b.n	800119e <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
 80011fe:	076b      	lsls	r3, r5, #29
 8001200:	d1d9      	bne.n	80011b6 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
 8001202:	4641      	mov	r1, r8
 8001204:	4620      	mov	r0, r4
 8001206:	f7ff fee9 	bl	8000fdc <print_formatted>
 800120a:	e7d4      	b.n	80011b6 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
 800120c:	4641      	mov	r1, r8
 800120e:	4620      	mov	r0, r4
 8001210:	f7ff fee4 	bl	8000fdc <print_formatted>
 8001214:	e7db      	b.n	80011ce <hexdump_line_print+0x76>
 8001216:	bf00      	nop
 8001218:	080091e4 	.word	0x080091e4
 800121c:	080091e3 	.word	0x080091e3
 8001220:	0800941c 	.word	0x0800941c
 8001224:	08009edf 	.word	0x08009edf
 8001228:	08009edd 	.word	0x08009edd
 800122c:	08009416 	.word	0x08009416
 8001230:	0800941e 	.word	0x0800941e

08001234 <log_output_string>:
}

void log_output_string(const struct log_output *log_output,
		       struct log_msg_ids src_level, uint32_t timestamp,
		       const char *fmt, va_list ap, uint32_t flags)
{
 8001234:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		log_output_string_syst_process(log_output,
				src_level, fmt, ap, flags);
		return;
	}

	if (!raw_string) {
 8001238:	f011 0607 	ands.w	r6, r1, #7
{
 800123c:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	; 0x28
 8001240:	4605      	mov	r5, r0
 8001242:	461c      	mov	r4, r3
	if (!raw_string) {
 8001244:	d00b      	beq.n	800125e <log_output_string+0x2a>
		prefix_print(log_output, flags, true, timestamp,
 8001246:	f3c1 1389 	ubfx	r3, r1, #6, #10
 800124a:	f3c1 01c2 	ubfx	r1, r1, #3, #3
 800124e:	e9cd 6100 	strd	r6, r1, [sp]
 8001252:	9302      	str	r3, [sp, #8]
 8001254:	4639      	mov	r1, r7
 8001256:	4613      	mov	r3, r2
 8001258:	2201      	movs	r2, #1
 800125a:	f7ff fed1 	bl	8001000 <prefix_print>
				level, domain_id, source_id);
	}

	length = cbvprintf(out_func, (void *)log_output, fmt, ap);
 800125e:	480f      	ldr	r0, [pc, #60]	; (800129c <log_output_string+0x68>)
 8001260:	4643      	mov	r3, r8
 8001262:	4622      	mov	r2, r4
 8001264:	4629      	mov	r1, r5
 8001266:	f7ff fbed 	bl	8000a44 <cbvprintf>

	(void)length;

	if (raw_string) {
 800126a:	b98e      	cbnz	r6, 8001290 <log_output_string+0x5c>
 800126c:	3c01      	subs	r4, #1
	while (*fmt != '\0') {
 800126e:	4633      	mov	r3, r6
 8001270:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 8001274:	2e00      	cmp	r6, #0
 8001276:	d1fa      	bne.n	800126e <log_output_string+0x3a>
		/* add \r if string ends with newline. */
		if (ends_with_newline(fmt)) {
 8001278:	2b0a      	cmp	r3, #10
 800127a:	d103      	bne.n	8001284 <log_output_string+0x50>
			print_formatted(log_output, "\r");
 800127c:	4908      	ldr	r1, [pc, #32]	; (80012a0 <log_output_string+0x6c>)
 800127e:	4628      	mov	r0, r5
 8001280:	f7ff feac 	bl	8000fdc <print_formatted>
		}
	} else {
		postfix_print(log_output, flags, level);
	}

	log_output_flush(log_output);
 8001284:	4628      	mov	r0, r5
}
 8001286:	b004      	add	sp, #16
 8001288:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	log_output_flush(log_output);
 800128c:	f005 ba24 	b.w	80066d8 <log_output_flush>
		postfix_print(log_output, flags, level);
 8001290:	4632      	mov	r2, r6
 8001292:	4639      	mov	r1, r7
 8001294:	4628      	mov	r0, r5
 8001296:	f7ff ff41 	bl	800111c <postfix_print>
 800129a:	e7f3      	b.n	8001284 <log_output_string+0x50>
 800129c:	080066a7 	.word	0x080066a7
 80012a0:	08009421 	.word	0x08009421

080012a4 <log_output_hexdump>:

void log_output_hexdump(const struct log_output *log_output,
			     struct log_msg_ids src_level, uint32_t timestamp,
			     const char *metadata, const uint8_t *data,
			     uint32_t length, uint32_t flags)
{
 80012a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80012a8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80012aa:	4698      	mov	r8, r3
	uint32_t prefix_offset;
	uint8_t level = (uint8_t)src_level.level;
 80012ac:	f001 0907 	and.w	r9, r1, #7
		log_output_hexdump_syst_process(log_output,
				src_level, data, length, flags);
		return;
	}

	prefix_offset = prefix_print(log_output, flags, true, timestamp,
 80012b0:	f3c1 1389 	ubfx	r3, r1, #6, #10
 80012b4:	f3c1 01c2 	ubfx	r1, r1, #3, #3
 80012b8:	e9cd 9100 	strd	r9, r1, [sp]
 80012bc:	9302      	str	r3, [sp, #8]
 80012be:	4631      	mov	r1, r6
 80012c0:	4613      	mov	r3, r2
 80012c2:	2201      	movs	r2, #1
{
 80012c4:	4604      	mov	r4, r0
 80012c6:	e9dd 750c 	ldrd	r7, r5, [sp, #48]	; 0x30
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
 80012ca:	f7ff fe99 	bl	8001000 <prefix_print>
				     level, domain_id, source_id);

	/* Print metadata */
	print_formatted(log_output, "%s", metadata);
 80012ce:	4911      	ldr	r1, [pc, #68]	; (8001314 <log_output_hexdump+0x70>)
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
 80012d0:	4682      	mov	sl, r0
	print_formatted(log_output, "%s", metadata);
 80012d2:	4642      	mov	r2, r8
 80012d4:	4620      	mov	r0, r4
 80012d6:	f7ff fe81 	bl	8000fdc <print_formatted>

	while (length) {
 80012da:	b955      	cbnz	r5, 80012f2 <log_output_hexdump+0x4e>

		data += part_len;
		length -= part_len;
	};

	postfix_print(log_output, flags, level);
 80012dc:	4620      	mov	r0, r4
 80012de:	464a      	mov	r2, r9
 80012e0:	4631      	mov	r1, r6
 80012e2:	f7ff ff1b 	bl	800111c <postfix_print>
	log_output_flush(log_output);
 80012e6:	4620      	mov	r0, r4
}
 80012e8:	b004      	add	sp, #16
 80012ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(log_output);
 80012ee:	f005 b9f3 	b.w	80066d8 <log_output_flush>
		uint32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
 80012f2:	2d10      	cmp	r5, #16
 80012f4:	46a8      	mov	r8, r5
 80012f6:	bf28      	it	cs
 80012f8:	f04f 0810 	movcs.w	r8, #16
		hexdump_line_print(log_output, data, part_len,
 80012fc:	4639      	mov	r1, r7
 80012fe:	9600      	str	r6, [sp, #0]
 8001300:	4653      	mov	r3, sl
 8001302:	4642      	mov	r2, r8
 8001304:	4620      	mov	r0, r4
 8001306:	f7ff ff27 	bl	8001158 <hexdump_line_print>
		data += part_len;
 800130a:	4447      	add	r7, r8
		length -= part_len;
 800130c:	eba5 0508 	sub.w	r5, r5, r8
 8001310:	e7e3      	b.n	80012da <log_output_hexdump+0x36>
 8001312:	bf00      	nop
 8001314:	0800940d 	.word	0x0800940d

08001318 <log_output_timestamp_freq_set>:
		     log_output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
 8001318:	4a08      	ldr	r2, [pc, #32]	; (800133c <log_output_timestamp_freq_set+0x24>)
{
 800131a:	b510      	push	{r4, lr}
	timestamp_div = 1U;
 800131c:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 800131e:	4c08      	ldr	r4, [pc, #32]	; (8001340 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
 8001320:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
 8001322:	2100      	movs	r1, #0
 8001324:	42a0      	cmp	r0, r4
 8001326:	d804      	bhi.n	8001332 <log_output_timestamp_freq_set+0x1a>
 8001328:	b101      	cbz	r1, 800132c <log_output_timestamp_freq_set+0x14>
 800132a:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <log_output_timestamp_freq_set+0x2c>)
 800132e:	6018      	str	r0, [r3, #0]
}
 8001330:	bd10      	pop	{r4, pc}
		frequency /= 2U;
 8001332:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2101      	movs	r1, #1
 8001338:	e7f4      	b.n	8001324 <log_output_timestamp_freq_set+0xc>
 800133a:	bf00      	nop
 800133c:	2000065c 	.word	0x2000065c
 8001340:	000f4240 	.word	0x000f4240
 8001344:	20000658 	.word	0x20000658

08001348 <char_out>:
#include <sys/__assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
 8001348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
 800134a:	4f07      	ldr	r7, [pc, #28]	; (8001368 <char_out+0x20>)
{
 800134c:	460d      	mov	r5, r1
 800134e:	4604      	mov	r4, r0
 8001350:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
 8001352:	42b4      	cmp	r4, r6
 8001354:	d101      	bne.n	800135a <char_out+0x12>
	}

	return length;
}
 8001356:	4628      	mov	r0, r5
 8001358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
 800135a:	6838      	ldr	r0, [r7, #0]
 800135c:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 8001360:	6883      	ldr	r3, [r0, #8]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
 8001366:	e7f4      	b.n	8001352 <char_out+0xa>
 8001368:	20000674 	.word	0x20000674

0800136c <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
 800136c:	4801      	ldr	r0, [pc, #4]	; (8001374 <panic+0x8>)
 800136e:	f005 b9b3 	b.w	80066d8 <log_output_flush>
 8001372:	bf00      	nop
 8001374:	08008e04 	.word	0x08008e04

08001378 <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
 8001378:	b508      	push	{r3, lr}
 800137a:	4803      	ldr	r0, [pc, #12]	; (8001388 <log_backend_uart_init+0x10>)
 800137c:	f003 ff68 	bl	8005250 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 8001380:	4b02      	ldr	r3, [pc, #8]	; (800138c <log_backend_uart_init+0x14>)
 8001382:	6018      	str	r0, [r3, #0]
	__ASSERT_NO_MSG((void *)uart_dev);
}
 8001384:	bd08      	pop	{r3, pc}
 8001386:	bf00      	nop
 8001388:	08009443 	.word	0x08009443
 800138c:	20000674 	.word	0x20000674

08001390 <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, uint32_t timestamp,
			 const char *metadata, const uint8_t *data, uint32_t length)
{
 8001390:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		 * by another one, lock context for whole log processing.
		 */
		key = irq_lock();
	}

	log_output_hexdump(log_output, src_level, timestamp,
 8001392:	200f      	movs	r0, #15
 8001394:	9002      	str	r0, [sp, #8]
 8001396:	9807      	ldr	r0, [sp, #28]
 8001398:	9001      	str	r0, [sp, #4]
 800139a:	9806      	ldr	r0, [sp, #24]
 800139c:	9000      	str	r0, [sp, #0]
 800139e:	4803      	ldr	r0, [pc, #12]	; (80013ac <sync_hexdump+0x1c>)
 80013a0:	f7ff ff80 	bl	80012a4 <log_output_hexdump>
	uint32_t flag = IS_ENABLED(CONFIG_LOG_BACKEND_UART_SYST_ENABLE) ?
		LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_backend_std_sync_hexdump(&log_output_uart, flag, src_level,
				     timestamp, metadata, data, length);
}
 80013a4:	b005      	add	sp, #20
 80013a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80013aa:	bf00      	nop
 80013ac:	08008e04 	.word	0x08008e04

080013b0 <sync_string>:
{
 80013b0:	b507      	push	{r0, r1, r2, lr}
	log_output_string(log_output, src_level, timestamp, fmt, ap, flags);
 80013b2:	200f      	movs	r0, #15
 80013b4:	9001      	str	r0, [sp, #4]
 80013b6:	9804      	ldr	r0, [sp, #16]
 80013b8:	9000      	str	r0, [sp, #0]
 80013ba:	4803      	ldr	r0, [pc, #12]	; (80013c8 <sync_string+0x18>)
 80013bc:	f7ff ff3a 	bl	8001234 <log_output_string>
}
 80013c0:	b003      	add	sp, #12
 80013c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80013c6:	bf00      	nop
 80013c8:	08008e04 	.word	0x08008e04

080013cc <disk_init>:
	k_mutex_unlock(&mutex);
	return rc;
}

static int disk_init(const struct device *dev)
{
 80013cc:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
 80013ce:	4804      	ldr	r0, [pc, #16]	; (80013e0 <disk_init+0x14>)
 80013d0:	f007 f9a1 	bl	8008716 <z_impl_k_mutex_init>
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <disk_init+0x18>)
	ARG_UNUSED(dev);

	k_mutex_init(&mutex);
	sys_dlist_init(&disk_access_list);
	return 0;
}
 80013d6:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
 80013d8:	e9c3 3300 	strd	r3, r3, [r3]
 80013dc:	bd08      	pop	{r3, pc}
 80013de:	bf00      	nop
 80013e0:	20000680 	.word	0x20000680
 80013e4:	20000678 	.word	0x20000678

080013e8 <disk_access_get_di>:
{
 80013e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ea:	4607      	mov	r7, r0
	size_t name_len = strlen(name);
 80013ec:	f005 fc2d 	bl	8006c4a <strlen>
 80013f0:	4606      	mov	r6, r0
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 80013f2:	4d12      	ldr	r5, [pc, #72]	; (800143c <disk_access_get_di+0x54>)
	return z_impl_k_mutex_lock(mutex, timeout);
 80013f4:	4812      	ldr	r0, [pc, #72]	; (8001440 <disk_access_get_di+0x58>)
 80013f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013fe:	f004 f90d 	bl	800561c <z_impl_k_mutex_lock>
 8001402:	682c      	ldr	r4, [r5, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8001404:	42ac      	cmp	r4, r5
 8001406:	d10e      	bne.n	8001426 <disk_access_get_di+0x3e>
	struct disk_info *disk = NULL, *itr;
 8001408:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
 800140a:	480d      	ldr	r0, [pc, #52]	; (8001440 <disk_access_get_di+0x58>)
 800140c:	f004 f97e 	bl	800570c <z_impl_k_mutex_unlock>
}
 8001410:	4620      	mov	r0, r4
 8001412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (strlen(itr->name) != name_len) {
 8001414:	68a0      	ldr	r0, [r4, #8]
 8001416:	f005 fc18 	bl	8006c4a <strlen>
 800141a:	42b0      	cmp	r0, r6
 800141c:	d006      	beq.n	800142c <disk_access_get_di+0x44>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
 800141e:	686b      	ldr	r3, [r5, #4]
 8001420:	429c      	cmp	r4, r3
 8001422:	d0f1      	beq.n	8001408 <disk_access_get_di+0x20>
 8001424:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_NODE(&disk_access_list, node) {
 8001426:	2c00      	cmp	r4, #0
 8001428:	d1f4      	bne.n	8001414 <disk_access_get_di+0x2c>
 800142a:	e7ed      	b.n	8001408 <disk_access_get_di+0x20>
		if (strncmp(name, itr->name, name_len) == 0) {
 800142c:	68a1      	ldr	r1, [r4, #8]
 800142e:	4632      	mov	r2, r6
 8001430:	4638      	mov	r0, r7
 8001432:	f005 fc1d 	bl	8006c70 <strncmp>
 8001436:	2800      	cmp	r0, #0
 8001438:	d1f1      	bne.n	800141e <disk_access_get_di+0x36>
 800143a:	e7e6      	b.n	800140a <disk_access_get_di+0x22>
 800143c:	20000678 	.word	0x20000678
 8001440:	20000680 	.word	0x20000680

08001444 <disk_access_register>:
{
 8001444:	b538      	push	{r3, r4, r5, lr}
 8001446:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 8001448:	4816      	ldr	r0, [pc, #88]	; (80014a4 <disk_access_register+0x60>)
 800144a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800144e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001452:	f004 f8e3 	bl	800561c <z_impl_k_mutex_lock>
	if ((disk == NULL) || (disk->name == NULL)) {
 8001456:	b10d      	cbz	r5, 800145c <disk_access_register+0x18>
 8001458:	68a8      	ldr	r0, [r5, #8]
 800145a:	b980      	cbnz	r0, 800147e <disk_access_register+0x3a>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
 800145c:	4812      	ldr	r0, [pc, #72]	; (80014a8 <disk_access_register+0x64>)
 800145e:	4b13      	ldr	r3, [pc, #76]	; (80014ac <disk_access_register+0x68>)
		LOG_ERR("invalid disk interface!!");
 8001460:	4913      	ldr	r1, [pc, #76]	; (80014b0 <disk_access_register+0x6c>)
 8001462:	1ac0      	subs	r0, r0, r3
 8001464:	08c0      	lsrs	r0, r0, #3
 8001466:	0180      	lsls	r0, r0, #6
		LOG_ERR("disk interface already registered!!");
 8001468:	f040 0001 	orr.w	r0, r0, #1
 800146c:	f005 f907 	bl	800667e <log_string_sync>
		rc = -EINVAL;
 8001470:	f06f 0415 	mvn.w	r4, #21
	return z_impl_k_mutex_unlock(mutex);
 8001474:	480b      	ldr	r0, [pc, #44]	; (80014a4 <disk_access_register+0x60>)
 8001476:	f004 f949 	bl	800570c <z_impl_k_mutex_unlock>
}
 800147a:	4620      	mov	r0, r4
 800147c:	bd38      	pop	{r3, r4, r5, pc}
	if (disk_access_get_di(disk->name) != NULL) {
 800147e:	f7ff ffb3 	bl	80013e8 <disk_access_get_di>
 8001482:	4604      	mov	r4, r0
 8001484:	b130      	cbz	r0, 8001494 <disk_access_register+0x50>
 8001486:	4808      	ldr	r0, [pc, #32]	; (80014a8 <disk_access_register+0x64>)
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <disk_access_register+0x68>)
		LOG_ERR("disk interface already registered!!");
 800148a:	490a      	ldr	r1, [pc, #40]	; (80014b4 <disk_access_register+0x70>)
 800148c:	1ac0      	subs	r0, r0, r3
 800148e:	08c0      	lsrs	r0, r0, #3
 8001490:	0180      	lsls	r0, r0, #6
 8001492:	e7e9      	b.n	8001468 <disk_access_register+0x24>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <disk_access_register+0x74>)
 8001496:	602b      	str	r3, [r5, #0]
	node->prev = list->tail;
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	606a      	str	r2, [r5, #4]

	list->tail->next = node;
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	6015      	str	r5, [r2, #0]
	list->tail = node;
 80014a0:	605d      	str	r5, [r3, #4]
}
 80014a2:	e7e7      	b.n	8001474 <disk_access_register+0x30>
 80014a4:	20000680 	.word	0x20000680
 80014a8:	08008d1c 	.word	0x08008d1c
 80014ac:	08008d1c 	.word	0x08008d1c
 80014b0:	0800945b 	.word	0x0800945b
 80014b4:	08009474 	.word	0x08009474
 80014b8:	20000678 	.word	0x20000678

080014bc <disk_spi_sdhc_access_ioctl>:
	return err;
}

static int disk_spi_sdhc_access_ioctl(struct disk_info *disk,
	uint8_t cmd, void *buf)
{
 80014bc:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev = disk->dev;
	struct sdhc_spi_data *data = dev->data;
 80014be:	6903      	ldr	r3, [r0, #16]
}

/* Converts disk status into an error code */
static inline int sdhc_map_disk_status(int status)
{
	return sdhc_map_flags(sdhc_disk_status_flags, status);
 80014c0:	480c      	ldr	r0, [pc, #48]	; (80014f4 <disk_spi_sdhc_access_ioctl+0x38>)
 80014c2:	68de      	ldr	r6, [r3, #12]
{
 80014c4:	460c      	mov	r4, r1
 80014c6:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
 80014ca:	4615      	mov	r5, r2
 80014cc:	f005 f99a 	bl	8006804 <sdhc_map_flags>
	int err;

	err = sdhc_map_disk_status(data->status);
	if (err != 0) {
 80014d0:	b948      	cbnz	r0, 80014e6 <disk_spi_sdhc_access_ioctl+0x2a>
		return err;
	}

	switch (cmd) {
 80014d2:	1e61      	subs	r1, r4, #1
 80014d4:	2904      	cmp	r1, #4
 80014d6:	d80a      	bhi.n	80014ee <disk_spi_sdhc_access_ioctl+0x32>
 80014d8:	e8df f001 	tbb	[pc, r1]
 80014dc:	06090603 	.word	0x06090603
 80014e0:	05          	.byte	0x05
 80014e1:	00          	.byte	0x00
	case DISK_IOCTL_CTRL_SYNC:
		break;
	case DISK_IOCTL_GET_SECTOR_COUNT:
		*(uint32_t *)buf = data->sector_count;
 80014e2:	6a33      	ldr	r3, [r6, #32]
		break;
	case DISK_IOCTL_GET_SECTOR_SIZE:
		*(uint32_t *)buf = SDMMC_DEFAULT_BLOCK_SIZE;
 80014e4:	602b      	str	r3, [r5, #0]
	default:
		return -EINVAL;
	}

	return 0;
}
 80014e6:	bd70      	pop	{r4, r5, r6, pc}
		*(uint32_t *)buf = SDMMC_DEFAULT_BLOCK_SIZE;
 80014e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ec:	e7fa      	b.n	80014e4 <disk_spi_sdhc_access_ioctl+0x28>
		return -EINVAL;
 80014ee:	f06f 0015 	mvn.w	r0, #21
 80014f2:	e7f8      	b.n	80014e6 <disk_spi_sdhc_access_ioctl+0x2a>
 80014f4:	0800953d 	.word	0x0800953d

080014f8 <sdhc_spi_rx_bytes>:
{
 80014f8:	b510      	push	{r4, lr}
	struct spi_buf tx_bufs[] = {
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <sdhc_spi_rx_bytes+0x30>)
{
 80014fc:	b088      	sub	sp, #32
	struct spi_buf tx_bufs[] = {
 80014fe:	e9cd 3200 	strd	r3, r2, [sp]
	const struct spi_buf_set tx = {
 8001502:	2301      	movs	r3, #1
	struct spi_buf rx_bufs[] = {
 8001504:	e9cd 3103 	strd	r3, r1, [sp, #12]
	return sdhc_spi_trace(data, -1,
 8001508:	4601      	mov	r1, r0
	struct spi_buf rx_bufs[] = {
 800150a:	9205      	str	r2, [sp, #20]
	const struct spi_buf_set rx = {
 800150c:	aa04      	add	r2, sp, #16
 800150e:	e9cd 2306 	strd	r2, r3, [sp, #24]
	return sdhc_spi_trace(data, -1,
 8001512:	f851 0b04 	ldr.w	r0, [r1], #4
	const struct spi_buf_set tx = {
 8001516:	f8cd d008 	str.w	sp, [sp, #8]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
 800151a:	6883      	ldr	r3, [r0, #8]
 800151c:	aa02      	add	r2, sp, #8
 800151e:	681c      	ldr	r4, [r3, #0]
 8001520:	ab06      	add	r3, sp, #24
 8001522:	47a0      	blx	r4
}
 8001524:	b008      	add	sp, #32
 8001526:	bd10      	pop	{r4, pc}
 8001528:	08009545 	.word	0x08009545

0800152c <sdhc_spi_init>:
{
 800152c:	b538      	push	{r3, r4, r5, lr}
 800152e:	4605      	mov	r5, r0
	struct sdhc_spi_data *data = dev->data;
 8001530:	68c4      	ldr	r4, [r0, #12]
 8001532:	480e      	ldr	r0, [pc, #56]	; (800156c <sdhc_spi_init+0x40>)
 8001534:	f003 fe8c 	bl	8005250 <z_impl_device_get_binding>
	data->cfg.operation = SPI_WORD_SET(8) | SPI_HOLD_ON_CS;
 8001538:	4a0d      	ldr	r2, [pc, #52]	; (8001570 <sdhc_spi_init+0x44>)
	data->spi = device_get_binding(DT_BUS_LABEL(SPI_SDHC_NODE));
 800153a:	6020      	str	r0, [r4, #0]
	data->cfg.operation = SPI_WORD_SET(8) | SPI_HOLD_ON_CS;
 800153c:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8001540:	e9c4 2301 	strd	r2, r3, [r4, #4]
 8001544:	480b      	ldr	r0, [pc, #44]	; (8001574 <sdhc_spi_init+0x48>)
 8001546:	f003 fe83 	bl	8005250 <z_impl_device_get_binding>
	data->cs.gpio_pin = DT_SPI_DEV_CS_GPIOS_PIN(SPI_SDHC_NODE);
 800154a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800154e:	8323      	strh	r3, [r4, #24]
	data->cfg.cs = &data->cs;
 8001550:	f104 0310 	add.w	r3, r4, #16
 8001554:	60e3      	str	r3, [r4, #12]

static int disk_spi_sdhc_init(const struct device *dev)
{
	struct sdhc_spi_data *data = dev->data;

	data->status = DISK_STATUS_UNINIT;
 8001556:	68eb      	ldr	r3, [r5, #12]
	data->cs.gpio_dev =
 8001558:	6120      	str	r0, [r4, #16]
	data->status = DISK_STATUS_UNINIT;
 800155a:	2201      	movs	r2, #1

	spi_sdhc_disk.dev = dev;
 800155c:	4806      	ldr	r0, [pc, #24]	; (8001578 <sdhc_spi_init+0x4c>)
	data->status = DISK_STATUS_UNINIT;
 800155e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	spi_sdhc_disk.dev = dev;
 8001562:	6105      	str	r5, [r0, #16]

	return disk_access_register(&spi_sdhc_disk);
 8001564:	f7ff ff6e 	bl	8001444 <disk_access_register>
}
 8001568:	2000      	movs	r0, #0
 800156a:	bd38      	pop	{r3, r4, r5, pc}
 800156c:	0800949d 	.word	0x0800949d
 8001570:	00061a80 	.word	0x00061a80
 8001574:	080091e6 	.word	0x080091e6
 8001578:	2000002c 	.word	0x2000002c

0800157c <sdhc_spi_rx_block>:
{
 800157c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001580:	b088      	sub	sp, #32
 8001582:	4606      	mov	r6, r0
 8001584:	4688      	mov	r8, r1
 8001586:	4615      	mov	r5, r2

/* Initialises a retry helper */
static inline void sdhc_retry_init(struct sdhc_retry *retry, uint32_t timeout,
			    uint16_t sleep)
{
	retry->end = k_uptime_get_32() + timeout;
 8001588:	f005 f92f 	bl	80067ea <k_uptime_get_32>
	retry->tries = 0;
 800158c:	2300      	movs	r3, #0
	retry->end = k_uptime_get_32() + timeout;
 800158e:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 8001592:	9006      	str	r0, [sp, #24]
	retry->tries = 0;
 8001594:	9307      	str	r3, [sp, #28]
		err = sdhc_spi_rx_u8(data);
 8001596:	4630      	mov	r0, r6
 8001598:	f005 f95c 	bl	8006854 <sdhc_spi_rx_u8>
		if (err != discard) {
 800159c:	28ff      	cmp	r0, #255	; 0xff
		err = sdhc_spi_rx_u8(data);
 800159e:	4604      	mov	r4, r0
		if (err != discard) {
 80015a0:	d115      	bne.n	80015ce <sdhc_spi_rx_block+0x52>
	} while (sdhc_retry_ok(&retry));
 80015a2:	a806      	add	r0, sp, #24
 80015a4:	f005 f93a 	bl	800681c <sdhc_retry_ok>
 80015a8:	2800      	cmp	r0, #0
 80015aa:	d1f4      	bne.n	8001596 <sdhc_spi_rx_block+0x1a>
 80015ac:	4b29      	ldr	r3, [pc, #164]	; (8001654 <sdhc_spi_rx_block+0xd8>)
 80015ae:	482a      	ldr	r0, [pc, #168]	; (8001658 <sdhc_spi_rx_block+0xdc>)
	LOG_WRN("Timeout while waiting for !%d", discard);
 80015b0:	492a      	ldr	r1, [pc, #168]	; (800165c <sdhc_spi_rx_block+0xe0>)
 80015b2:	1ac0      	subs	r0, r0, r3
 80015b4:	08c0      	lsrs	r0, r0, #3
 80015b6:	0180      	lsls	r0, r0, #6
 80015b8:	4622      	mov	r2, r4
 80015ba:	f040 0002 	orr.w	r0, r0, #2
 80015be:	f005 f85e 	bl	800667e <log_string_sync>
	return -ETIMEDOUT;
 80015c2:	f06f 043b 	mvn.w	r4, #59	; 0x3b
}
 80015c6:	4620      	mov	r0, r4
 80015c8:	b008      	add	sp, #32
 80015ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (token < 0) {
 80015ce:	2800      	cmp	r0, #0
 80015d0:	dbf9      	blt.n	80015c6 <sdhc_spi_rx_block+0x4a>
	if (token != SDHC_TOKEN_SINGLE) {
 80015d2:	28fe      	cmp	r0, #254	; 0xfe
 80015d4:	d13a      	bne.n	800164c <sdhc_spi_rx_block+0xd0>
		struct spi_buf tx_bufs[] = {
 80015d6:	f8df a088 	ldr.w	sl, [pc, #136]	; 8001660 <sdhc_spi_rx_block+0xe4>
	for (i = 0; i < len; i += sizeof(sdhc_ones)) {
 80015da:	2700      	movs	r7, #0
		const struct spi_buf_set tx = {
 80015dc:	f04f 0901 	mov.w	r9, #1
		int remain = MIN(sizeof(sdhc_ones), len - i);
 80015e0:	1beb      	subs	r3, r5, r7
 80015e2:	2b40      	cmp	r3, #64	; 0x40
 80015e4:	bf28      	it	cs
 80015e6:	2340      	movcs	r3, #64	; 0x40
		struct spi_buf rx_bufs[] = {
 80015e8:	eb08 0207 	add.w	r2, r8, r7
		err = sdhc_spi_trace(data, -1,
 80015ec:	4631      	mov	r1, r6
		struct spi_buf tx_bufs[] = {
 80015ee:	e9cd a300 	strd	sl, r3, [sp]
		struct spi_buf rx_bufs[] = {
 80015f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
		const struct spi_buf_set rx = {
 80015f6:	ab04      	add	r3, sp, #16
 80015f8:	e9cd 3906 	strd	r3, r9, [sp, #24]
		err = sdhc_spi_trace(data, -1,
 80015fc:	f851 0b04 	ldr.w	r0, [r1], #4
		const struct spi_buf_set tx = {
 8001600:	f8cd d008 	str.w	sp, [sp, #8]
 8001604:	f8cd 900c 	str.w	r9, [sp, #12]
 8001608:	6883      	ldr	r3, [r0, #8]
 800160a:	aa02      	add	r2, sp, #8
 800160c:	681c      	ldr	r4, [r3, #0]
 800160e:	ab06      	add	r3, sp, #24
 8001610:	47a0      	blx	r4
		if (err != 0) {
 8001612:	4604      	mov	r4, r0
 8001614:	2800      	cmp	r0, #0
 8001616:	d1d6      	bne.n	80015c6 <sdhc_spi_rx_block+0x4a>
	for (i = 0; i < len; i += sizeof(sdhc_ones)) {
 8001618:	3740      	adds	r7, #64	; 0x40
 800161a:	42bd      	cmp	r5, r7
 800161c:	dce0      	bgt.n	80015e0 <sdhc_spi_rx_block+0x64>
	err = sdhc_spi_rx_bytes(data, crc, sizeof(crc));
 800161e:	2203      	movs	r2, #3
 8001620:	a906      	add	r1, sp, #24
 8001622:	4630      	mov	r0, r6
 8001624:	f7ff ff68 	bl	80014f8 <sdhc_spi_rx_bytes>
	if (err != 0) {
 8001628:	4604      	mov	r4, r0
 800162a:	2800      	cmp	r0, #0
 800162c:	d1cb      	bne.n	80015c6 <sdhc_spi_rx_block+0x4a>
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_be16(const uint8_t src[2])
{
	return ((uint16_t)src[0] << 8) | src[1];
 800162e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001632:	f89d 6019 	ldrb.w	r6, [sp, #25]
	if (sys_get_be16(crc) != crc16_itu_t(0, buf, len)) {
 8001636:	462a      	mov	r2, r5
 8001638:	4641      	mov	r1, r8
 800163a:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 800163e:	f004 fe93 	bl	8006368 <crc16_itu_t>
		return -EILSEQ;
 8001642:	4286      	cmp	r6, r0
 8001644:	bf18      	it	ne
 8001646:	f06f 0489 	mvnne.w	r4, #137	; 0x89
 800164a:	e7bc      	b.n	80015c6 <sdhc_spi_rx_block+0x4a>
		return -EIO;
 800164c:	f06f 0404 	mvn.w	r4, #4
 8001650:	e7b9      	b.n	80015c6 <sdhc_spi_rx_block+0x4a>
 8001652:	bf00      	nop
 8001654:	08008d1c 	.word	0x08008d1c
 8001658:	08008d74 	.word	0x08008d74
 800165c:	080094a3 	.word	0x080094a3
 8001660:	08009545 	.word	0x08009545

08001664 <sdhc_spi_cmd_r1_raw>:
{
 8001664:	b570      	push	{r4, r5, r6, lr}
 8001666:	4605      	mov	r5, r0
 8001668:	460e      	mov	r6, r1
	err = sdhc_spi_tx_cmd(data, cmd, payload);
 800166a:	f005 f968 	bl	800693e <sdhc_spi_tx_cmd>
	if (err != 0) {
 800166e:	4604      	mov	r4, r0
 8001670:	b968      	cbnz	r0, 800168e <sdhc_spi_cmd_r1_raw+0x2a>
	err = sdhc_spi_skip_until_start(data);
 8001672:	4628      	mov	r0, r5
 8001674:	f005 f8f9 	bl	800686a <sdhc_spi_skip_until_start>
	if (cmd != SDHC_SEND_CSD && cmd != SDHC_SEND_CID &&
 8001678:	2e19      	cmp	r6, #25
	err = sdhc_spi_skip_until_start(data);
 800167a:	4604      	mov	r4, r0
	if (cmd != SDHC_SEND_CSD && cmd != SDHC_SEND_CID &&
 800167c:	d804      	bhi.n	8001688 <sdhc_spi_cmd_r1_raw+0x24>
 800167e:	4905      	ldr	r1, [pc, #20]	; (8001694 <sdhc_spi_cmd_r1_raw+0x30>)
 8001680:	fa21 f606 	lsr.w	r6, r1, r6
 8001684:	07f3      	lsls	r3, r6, #31
 8001686:	d402      	bmi.n	800168e <sdhc_spi_cmd_r1_raw+0x2a>
		sdhc_spi_rx_u8(data);
 8001688:	4628      	mov	r0, r5
 800168a:	f005 f8e3 	bl	8006854 <sdhc_spi_rx_u8>
}
 800168e:	4620      	mov	r0, r4
 8001690:	bd70      	pop	{r4, r5, r6, pc}
 8001692:	bf00      	nop
 8001694:	03060600 	.word	0x03060600

08001698 <sdhc_spi_cmd_r1>:
{
 8001698:	b508      	push	{r3, lr}
	return sdhc_map_r1_status(sdhc_spi_cmd_r1_raw(data, cmd, payload));
 800169a:	f7ff ffe3 	bl	8001664 <sdhc_spi_cmd_r1_raw>
}
 800169e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return sdhc_map_r1_status(sdhc_spi_cmd_r1_raw(data, cmd, payload));
 80016a2:	4601      	mov	r1, r0
	return sdhc_map_flags(sdhc_r1_flags, status);
 80016a4:	4801      	ldr	r0, [pc, #4]	; (80016ac <sdhc_spi_cmd_r1+0x14>)
 80016a6:	f005 b8ad 	b.w	8006804 <sdhc_map_flags>
 80016aa:	bf00      	nop
 80016ac:	08009585 	.word	0x08009585

080016b0 <sdhc_spi_write_multi.part.0>:
static int sdhc_spi_write_multi(struct sdhc_spi_data *data,
 80016b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80016b4:	461e      	mov	r6, r3
	if (data->high_capacity) {
 80016b6:	7f03      	ldrb	r3, [r0, #28]
static int sdhc_spi_write_multi(struct sdhc_spi_data *data,
 80016b8:	4605      	mov	r5, r0
 80016ba:	460f      	mov	r7, r1
	if (data->high_capacity) {
 80016bc:	b903      	cbnz	r3, 80016c0 <sdhc_spi_write_multi.part.0+0x10>
		addr = sector * SDMMC_DEFAULT_BLOCK_SIZE;
 80016be:	0252      	lsls	r2, r2, #9
	err = sdhc_spi_cmd_r1(data, SDHC_WRITE_MULTIPLE_BLOCK, addr);
 80016c0:	2119      	movs	r1, #25
 80016c2:	4628      	mov	r0, r5
 80016c4:	f7ff ffe8 	bl	8001698 <sdhc_spi_cmd_r1>
	if (err < 0) {
 80016c8:	1e04      	subs	r4, r0, #0
 80016ca:	db0d      	blt.n	80016e8 <sdhc_spi_write_multi.part.0+0x38>
	return sdhc_map_flags(sdhc_data_response_flags, status);
 80016cc:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8001768 <sdhc_spi_write_multi.part.0+0xb8>
		block[0] = SDHC_TOKEN_MULTI_WRITE;
 80016d0:	f04f 08fc 	mov.w	r8, #252	; 0xfc
	for (; count != 0U; count--) {
 80016d4:	b986      	cbnz	r6, 80016f8 <sdhc_spi_write_multi.part.0+0x48>
	sdhc_spi_tx_cmd(data, SDHC_STOP_TRANSMISSION, 0);
 80016d6:	4632      	mov	r2, r6
 80016d8:	210c      	movs	r1, #12
 80016da:	4628      	mov	r0, r5
 80016dc:	f005 f92f 	bl	800693e <sdhc_spi_tx_cmd>
	err = sdhc_spi_skip_until_ready(data);
 80016e0:	4628      	mov	r0, r5
 80016e2:	f005 f8f5 	bl	80068d0 <sdhc_spi_skip_until_ready>
 80016e6:	4604      	mov	r4, r0
	spi_release(data->spi, &data->cfg);
 80016e8:	6828      	ldr	r0, [r5, #0]
 80016ea:	1d29      	adds	r1, r5, #4
 80016ec:	f005 f868 	bl	80067c0 <spi_release>
}
 80016f0:	4620      	mov	r0, r4
 80016f2:	b003      	add	sp, #12
 80016f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = sdhc_spi_tx(data, block, 1);
 80016f8:	2201      	movs	r2, #1
 80016fa:	a901      	add	r1, sp, #4
 80016fc:	4628      	mov	r0, r5
		block[0] = SDHC_TOKEN_MULTI_WRITE;
 80016fe:	f88d 8004 	strb.w	r8, [sp, #4]
		err = sdhc_spi_tx(data, block, 1);
 8001702:	f005 f90b 	bl	800691c <sdhc_spi_tx>
		if (err != 0) {
 8001706:	4604      	mov	r4, r0
 8001708:	2800      	cmp	r0, #0
 800170a:	d1ed      	bne.n	80016e8 <sdhc_spi_write_multi.part.0+0x38>
		err = sdhc_spi_tx(data, buf, SDMMC_DEFAULT_BLOCK_SIZE);
 800170c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001710:	4639      	mov	r1, r7
 8001712:	4628      	mov	r0, r5
 8001714:	f005 f902 	bl	800691c <sdhc_spi_tx>
		if (err != 0) {
 8001718:	4604      	mov	r4, r0
 800171a:	2800      	cmp	r0, #0
 800171c:	d1e4      	bne.n	80016e8 <sdhc_spi_write_multi.part.0+0x38>
		sys_put_be16(crc16_itu_t(0, buf, SDMMC_DEFAULT_BLOCK_SIZE),
 800171e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001722:	4639      	mov	r1, r7
 8001724:	f004 fe20 	bl	8006368 <crc16_itu_t>
	dst[0] = val >> 8;
 8001728:	ba40      	rev16	r0, r0
 800172a:	f8ad 0004 	strh.w	r0, [sp, #4]
		err = sdhc_spi_tx(data, block, sizeof(block));
 800172e:	2202      	movs	r2, #2
 8001730:	a901      	add	r1, sp, #4
 8001732:	4628      	mov	r0, r5
 8001734:	f005 f8f2 	bl	800691c <sdhc_spi_tx>
		if (err != 0) {
 8001738:	4604      	mov	r4, r0
 800173a:	2800      	cmp	r0, #0
 800173c:	d1d4      	bne.n	80016e8 <sdhc_spi_write_multi.part.0+0x38>
		err = sdhc_map_data_status(sdhc_spi_rx_u8(data));
 800173e:	4628      	mov	r0, r5
 8001740:	f005 f888 	bl	8006854 <sdhc_spi_rx_u8>
 8001744:	4601      	mov	r1, r0
 8001746:	4648      	mov	r0, r9
 8001748:	f005 f85c 	bl	8006804 <sdhc_map_flags>
		if (err != 0) {
 800174c:	4604      	mov	r4, r0
 800174e:	2800      	cmp	r0, #0
 8001750:	d1ca      	bne.n	80016e8 <sdhc_spi_write_multi.part.0+0x38>
		err = sdhc_spi_skip_until_ready(data);
 8001752:	4628      	mov	r0, r5
 8001754:	f005 f8bc 	bl	80068d0 <sdhc_spi_skip_until_ready>
		if (err != 0) {
 8001758:	4604      	mov	r4, r0
 800175a:	2800      	cmp	r0, #0
 800175c:	d1c4      	bne.n	80016e8 <sdhc_spi_write_multi.part.0+0x38>
		buf += SDMMC_DEFAULT_BLOCK_SIZE;
 800175e:	f507 7700 	add.w	r7, r7, #512	; 0x200
	for (; count != 0U; count--) {
 8001762:	3e01      	subs	r6, #1
 8001764:	e7b6      	b.n	80016d4 <sdhc_spi_write_multi.part.0+0x24>
 8001766:	bf00      	nop
 8001768:	08009535 	.word	0x08009535

0800176c <sdhc_spi_write.part.0>:
static int sdhc_spi_write(struct sdhc_spi_data *data,
 800176c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001770:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 800185c <sdhc_spi_write.part.0+0xf0>
	return sdhc_map_flags(sdhc_r1_flags, status);
 8001774:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8001860 <sdhc_spi_write.part.0+0xf4>
 8001778:	4605      	mov	r5, r0
 800177a:	460f      	mov	r7, r1
 800177c:	4616      	mov	r6, r2
 800177e:	eb02 0803 	add.w	r8, r2, r3
	for (; count != 0U; count--) {
 8001782:	4546      	cmp	r6, r8
 8001784:	d108      	bne.n	8001798 <sdhc_spi_write.part.0+0x2c>
	err = 0;
 8001786:	2400      	movs	r4, #0
	spi_release(data->spi, &data->cfg);
 8001788:	6828      	ldr	r0, [r5, #0]
 800178a:	1d29      	adds	r1, r5, #4
 800178c:	f005 f818 	bl	80067c0 <spi_release>
}
 8001790:	4620      	mov	r0, r4
 8001792:	b003      	add	sp, #12
 8001794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (data->high_capacity) {
 8001798:	7f2b      	ldrb	r3, [r5, #28]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d15a      	bne.n	8001854 <sdhc_spi_write.part.0+0xe8>
			addr = sector * SDMMC_DEFAULT_BLOCK_SIZE;
 800179e:	0272      	lsls	r2, r6, #9
		err = sdhc_spi_cmd_r1(data, SDHC_WRITE_BLOCK, addr);
 80017a0:	2118      	movs	r1, #24
 80017a2:	4628      	mov	r0, r5
 80017a4:	f7ff ff78 	bl	8001698 <sdhc_spi_cmd_r1>
		if (err < 0) {
 80017a8:	1e04      	subs	r4, r0, #0
 80017aa:	dbed      	blt.n	8001788 <sdhc_spi_write.part.0+0x1c>
	buf[0] = SDHC_TOKEN_SINGLE;
 80017ac:	23fe      	movs	r3, #254	; 0xfe
	err = sdhc_spi_tx(data, buf, 1);
 80017ae:	2201      	movs	r2, #1
 80017b0:	a901      	add	r1, sp, #4
 80017b2:	4628      	mov	r0, r5
	buf[0] = SDHC_TOKEN_SINGLE;
 80017b4:	f88d 3004 	strb.w	r3, [sp, #4]
	err = sdhc_spi_tx(data, buf, 1);
 80017b8:	f005 f8b0 	bl	800691c <sdhc_spi_tx>
	if (err != 0) {
 80017bc:	4604      	mov	r4, r0
 80017be:	2800      	cmp	r0, #0
 80017c0:	d1e2      	bne.n	8001788 <sdhc_spi_write.part.0+0x1c>
	err = sdhc_spi_tx(data, send, len);
 80017c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c6:	4639      	mov	r1, r7
 80017c8:	4628      	mov	r0, r5
 80017ca:	f005 f8a7 	bl	800691c <sdhc_spi_tx>
	if (err != 0) {
 80017ce:	4604      	mov	r4, r0
 80017d0:	2800      	cmp	r0, #0
 80017d2:	d1d9      	bne.n	8001788 <sdhc_spi_write.part.0+0x1c>
	sys_put_be16(crc16_itu_t(0, send, len), buf);
 80017d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d8:	4639      	mov	r1, r7
 80017da:	f004 fdc5 	bl	8006368 <crc16_itu_t>
 80017de:	ba40      	rev16	r0, r0
 80017e0:	f8ad 0004 	strh.w	r0, [sp, #4]
	err = sdhc_spi_tx(data, buf, sizeof(buf));
 80017e4:	2202      	movs	r2, #2
 80017e6:	a901      	add	r1, sp, #4
 80017e8:	4628      	mov	r0, r5
 80017ea:	f005 f897 	bl	800691c <sdhc_spi_tx>
	if (err != 0) {
 80017ee:	4604      	mov	r4, r0
 80017f0:	2800      	cmp	r0, #0
 80017f2:	d1c9      	bne.n	8001788 <sdhc_spi_write.part.0+0x1c>
	return sdhc_map_data_status(sdhc_spi_rx_u8(data));
 80017f4:	4628      	mov	r0, r5
 80017f6:	f005 f82d 	bl	8006854 <sdhc_spi_rx_u8>
 80017fa:	4601      	mov	r1, r0
	return sdhc_map_flags(sdhc_data_response_flags, status);
 80017fc:	4648      	mov	r0, r9
 80017fe:	f005 f801 	bl	8006804 <sdhc_map_flags>
		if (err != 0) {
 8001802:	4604      	mov	r4, r0
 8001804:	2800      	cmp	r0, #0
 8001806:	d1bf      	bne.n	8001788 <sdhc_spi_write.part.0+0x1c>
		err = sdhc_spi_skip_until_ready(data);
 8001808:	4628      	mov	r0, r5
 800180a:	f005 f861 	bl	80068d0 <sdhc_spi_skip_until_ready>
		if (err != 0) {
 800180e:	4604      	mov	r4, r0
 8001810:	2800      	cmp	r0, #0
 8001812:	d1b9      	bne.n	8001788 <sdhc_spi_write.part.0+0x1c>
	err = sdhc_spi_tx_cmd(data, cmd, payload);
 8001814:	4602      	mov	r2, r0
 8001816:	210d      	movs	r1, #13
 8001818:	4628      	mov	r0, r5
 800181a:	f005 f890 	bl	800693e <sdhc_spi_tx_cmd>
	if (err != 0) {
 800181e:	4604      	mov	r4, r0
 8001820:	2800      	cmp	r0, #0
 8001822:	d1b1      	bne.n	8001788 <sdhc_spi_write.part.0+0x1c>
	r1 = sdhc_map_r1_status(sdhc_spi_skip_until_start(data));
 8001824:	4628      	mov	r0, r5
 8001826:	f005 f820 	bl	800686a <sdhc_spi_skip_until_start>
 800182a:	4601      	mov	r1, r0
	return sdhc_map_flags(sdhc_r1_flags, status);
 800182c:	4650      	mov	r0, sl
 800182e:	f004 ffe9 	bl	8006804 <sdhc_map_flags>
 8001832:	4604      	mov	r4, r0
	r2 = sdhc_spi_rx_u8(data);
 8001834:	4628      	mov	r0, r5
 8001836:	f005 f80d 	bl	8006854 <sdhc_spi_rx_u8>
 800183a:	4683      	mov	fp, r0
	sdhc_spi_rx_u8(data);
 800183c:	4628      	mov	r0, r5
 800183e:	f005 f809 	bl	8006854 <sdhc_spi_rx_u8>
	if (r1 < 0) {
 8001842:	2c00      	cmp	r4, #0
 8001844:	dba0      	blt.n	8001788 <sdhc_spi_write.part.0+0x1c>
		if (err != 0) {
 8001846:	f1bb 0f00 	cmp.w	fp, #0
 800184a:	d105      	bne.n	8001858 <sdhc_spi_write.part.0+0xec>
		buf += SDMMC_DEFAULT_BLOCK_SIZE;
 800184c:	f507 7700 	add.w	r7, r7, #512	; 0x200
		sector++;
 8001850:	3601      	adds	r6, #1
	for (; count != 0U; count--) {
 8001852:	e796      	b.n	8001782 <sdhc_spi_write.part.0+0x16>
 8001854:	4632      	mov	r2, r6
 8001856:	e7a3      	b.n	80017a0 <sdhc_spi_write.part.0+0x34>
	r2 = sdhc_spi_rx_u8(data);
 8001858:	465c      	mov	r4, fp
 800185a:	e795      	b.n	8001788 <sdhc_spi_write.part.0+0x1c>
 800185c:	08009535 	.word	0x08009535
 8001860:	08009585 	.word	0x08009585

08001864 <disk_spi_sdhc_access_init>:
{
 8001864:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct sdhc_spi_data *data = dev->data;
 8001866:	6903      	ldr	r3, [r0, #16]
	sdhc_spi_tx(data, sdhc_ones, 10);
 8001868:	4ca1      	ldr	r4, [pc, #644]	; (8001af0 <disk_spi_sdhc_access_init+0x28c>)
	struct sdhc_spi_data *data = dev->data;
 800186a:	68dd      	ldr	r5, [r3, #12]
	data->cfg.frequency = SDHC_SPI_INITIAL_SPEED;
 800186c:	4ba1      	ldr	r3, [pc, #644]	; (8001af4 <disk_spi_sdhc_access_init+0x290>)
 800186e:	606b      	str	r3, [r5, #4]
	data->status = DISK_STATUS_UNINIT;
 8001870:	2301      	movs	r3, #1
{
 8001872:	b091      	sub	sp, #68	; 0x44
	data->status = DISK_STATUS_UNINIT;
 8001874:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
	retry->end = k_uptime_get_32() + timeout;
 8001878:	f004 ffb7 	bl	80067ea <k_uptime_get_32>
 800187c:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
 8001880:	3008      	adds	r0, #8
	retry->tries = 0;
 8001882:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
	return sdhc_map_flags(sdhc_r1_flags, status);
 8001886:	4e9c      	ldr	r6, [pc, #624]	; (8001af8 <disk_spi_sdhc_access_init+0x294>)
	retry->end = k_uptime_get_32() + timeout;
 8001888:	900a      	str	r0, [sp, #40]	; 0x28
	retry->tries = 0;
 800188a:	930b      	str	r3, [sp, #44]	; 0x2c
	sdhc_spi_tx(data, sdhc_ones, 10);
 800188c:	220a      	movs	r2, #10
 800188e:	4621      	mov	r1, r4
 8001890:	4628      	mov	r0, r5
	spi_release(data->spi, &data->cfg);
 8001892:	1d2f      	adds	r7, r5, #4
	sdhc_spi_tx(data, sdhc_ones, 10);
 8001894:	f005 f842 	bl	800691c <sdhc_spi_tx>
	spi_release(data->spi, &data->cfg);
 8001898:	4639      	mov	r1, r7
 800189a:	6828      	ldr	r0, [r5, #0]
 800189c:	f004 ff90 	bl	80067c0 <spi_release>
	return sdhc_map_r1_idle_status(sdhc_spi_cmd_r1_raw(data, cmd, payload));
 80018a0:	2200      	movs	r2, #0
 80018a2:	4611      	mov	r1, r2
 80018a4:	4628      	mov	r0, r5
 80018a6:	f7ff fedd 	bl	8001664 <sdhc_spi_cmd_r1_raw>
	if (status < 0) {
 80018aa:	1e01      	subs	r1, r0, #0
 80018ac:	db42      	blt.n	8001934 <disk_spi_sdhc_access_init+0xd0>
	if (status == SDHC_R1_IDLE) {
 80018ae:	2901      	cmp	r1, #1
 80018b0:	d004      	beq.n	80018bc <disk_spi_sdhc_access_init+0x58>
	return sdhc_map_flags(sdhc_r1_flags, status);
 80018b2:	4630      	mov	r0, r6
 80018b4:	f004 ffa6 	bl	8006804 <sdhc_map_flags>
		if (err == 0) {
 80018b8:	2800      	cmp	r0, #0
 80018ba:	d13b      	bne.n	8001934 <disk_spi_sdhc_access_init+0xd0>
	err = sdhc_spi_tx_cmd(data, cmd, payload);
 80018bc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80018c0:	2108      	movs	r1, #8
 80018c2:	4628      	mov	r0, r5
 80018c4:	f005 f83b 	bl	800693e <sdhc_spi_tx_cmd>
	if (err != 0) {
 80018c8:	4606      	mov	r6, r0
 80018ca:	b920      	cbnz	r0, 80018d6 <disk_spi_sdhc_access_init+0x72>
 80018cc:	a90c      	add	r1, sp, #48	; 0x30
 80018ce:	4628      	mov	r0, r5
 80018d0:	f004 ffe4 	bl	800689c <sdhc_spi_cmd_r37_raw.part.0>
 80018d4:	4606      	mov	r6, r0
	if (status < 0) {
 80018d6:	2e00      	cmp	r6, #0
 80018d8:	db13      	blt.n	8001902 <disk_spi_sdhc_access_init+0x9e>
	if (status == SDHC_R1_IDLE) {
 80018da:	2e01      	cmp	r6, #1
 80018dc:	d005      	beq.n	80018ea <disk_spi_sdhc_access_init+0x86>
	return sdhc_map_flags(sdhc_r1_flags, status);
 80018de:	4631      	mov	r1, r6
 80018e0:	4885      	ldr	r0, [pc, #532]	; (8001af8 <disk_spi_sdhc_access_init+0x294>)
 80018e2:	f004 ff8f 	bl	8006804 <sdhc_map_flags>
	if (err != 0) {
 80018e6:	4606      	mov	r6, r0
 80018e8:	b958      	cbnz	r0, 8001902 <disk_spi_sdhc_access_init+0x9e>
	if ((cond & 0xFF) != SDHC_CHECK) {
 80018ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	2aaa      	cmp	r2, #170	; 0xaa
 80018f0:	d11d      	bne.n	800192e <disk_spi_sdhc_access_init+0xca>
	if ((cond & SDHC_VHS_MASK) != SDHC_VHS_3V3) {
 80018f2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
		return -ENOTSUP;
 80018f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018fa:	bf0c      	ite	eq
 80018fc:	2600      	moveq	r6, #0
 80018fe:	f06f 0622 	mvnne.w	r6, #34	; 0x22
	return sdhc_map_r1_idle_status(sdhc_spi_cmd_r1_raw(data, cmd, payload));
 8001902:	2201      	movs	r2, #1
 8001904:	213b      	movs	r1, #59	; 0x3b
 8001906:	4628      	mov	r0, r5
 8001908:	f7ff feac 	bl	8001664 <sdhc_spi_cmd_r1_raw>
	if (status < 0) {
 800190c:	1e04      	subs	r4, r0, #0
 800190e:	db07      	blt.n	8001920 <disk_spi_sdhc_access_init+0xbc>
	if (status == SDHC_R1_IDLE) {
 8001910:	2c01      	cmp	r4, #1
 8001912:	d017      	beq.n	8001944 <disk_spi_sdhc_access_init+0xe0>
	return sdhc_map_flags(sdhc_r1_flags, status);
 8001914:	4621      	mov	r1, r4
 8001916:	4878      	ldr	r0, [pc, #480]	; (8001af8 <disk_spi_sdhc_access_init+0x294>)
 8001918:	f004 ff74 	bl	8006804 <sdhc_map_flags>
	if (err != 0) {
 800191c:	4604      	mov	r4, r0
 800191e:	b188      	cbz	r0, 8001944 <disk_spi_sdhc_access_init+0xe0>
	spi_release(data->spi, &data->cfg);
 8001920:	6828      	ldr	r0, [r5, #0]
 8001922:	4639      	mov	r1, r7
 8001924:	f004 ff4c 	bl	80067c0 <spi_release>
}
 8001928:	4620      	mov	r0, r4
 800192a:	b011      	add	sp, #68	; 0x44
 800192c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOENT;
 800192e:	f06f 0601 	mvn.w	r6, #1
 8001932:	e7e6      	b.n	8001902 <disk_spi_sdhc_access_init+0x9e>
		if (!sdhc_retry_ok(&retry)) {
 8001934:	a80a      	add	r0, sp, #40	; 0x28
 8001936:	f004 ff71 	bl	800681c <sdhc_retry_ok>
 800193a:	2800      	cmp	r0, #0
 800193c:	d1a6      	bne.n	800188c <disk_spi_sdhc_access_init+0x28>
			return -ENOENT;
 800193e:	f06f 0401 	mvn.w	r4, #1
 8001942:	e7ed      	b.n	8001920 <disk_spi_sdhc_access_init+0xbc>
 8001944:	2e00      	cmp	r6, #0
 8001946:	bf0c      	ite	eq
 8001948:	f04f 4480 	moveq.w	r4, #1073741824	; 0x40000000
 800194c:	2400      	movne	r4, #0
		sdhc_spi_cmd_r1_raw(data, SDHC_APP_CMD, 0);
 800194e:	2200      	movs	r2, #0
 8001950:	2137      	movs	r1, #55	; 0x37
 8001952:	4628      	mov	r0, r5
 8001954:	f7ff fe86 	bl	8001664 <sdhc_spi_cmd_r1_raw>
		err = sdhc_spi_cmd_r1(data, SDHC_SEND_OP_COND, is_v2 ? SDHC_HCS : 0);
 8001958:	4622      	mov	r2, r4
 800195a:	2129      	movs	r1, #41	; 0x29
 800195c:	4628      	mov	r0, r5
 800195e:	f7ff fe9b 	bl	8001698 <sdhc_spi_cmd_r1>
		if (err == 0) {
 8001962:	2800      	cmp	r0, #0
 8001964:	f000 8082 	beq.w	8001a6c <disk_spi_sdhc_access_init+0x208>
	} while (sdhc_retry_ok(&retry));
 8001968:	a80a      	add	r0, sp, #40	; 0x28
 800196a:	f004 ff57 	bl	800681c <sdhc_retry_ok>
 800196e:	2800      	cmp	r0, #0
 8001970:	d1ed      	bne.n	800194e <disk_spi_sdhc_access_init+0xea>
		return -ETIMEDOUT;
 8001972:	f06f 043b 	mvn.w	r4, #59	; 0x3b
 8001976:	e7d3      	b.n	8001920 <disk_spi_sdhc_access_init+0xbc>
		data->high_capacity = false;
 8001978:	2300      	movs	r3, #0
 800197a:	772b      	strb	r3, [r5, #28]
		err = sdhc_spi_cmd_r1(data, SDHC_SET_BLOCK_SIZE, SDMMC_DEFAULT_BLOCK_SIZE);
 800197c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001980:	2110      	movs	r1, #16
 8001982:	4628      	mov	r0, r5
 8001984:	f7ff fe88 	bl	8001698 <sdhc_spi_cmd_r1>
		if (err != 0) {
 8001988:	4604      	mov	r4, r0
 800198a:	2800      	cmp	r0, #0
 800198c:	f000 8093 	beq.w	8001ab6 <disk_spi_sdhc_access_init+0x252>
 8001990:	e7c6      	b.n	8001920 <disk_spi_sdhc_access_init+0xbc>
		readbllen = buf[5] & ((1 << 4) - 1);
 8001992:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
 8001996:	f004 040f 	and.w	r4, r4, #15
		if ((readbllen < 9) || (readbllen > 11)) {
 800199a:	f1a4 0309 	sub.w	r3, r4, #9
 800199e:	2b02      	cmp	r3, #2
 80019a0:	f200 80a2 	bhi.w	8001ae8 <disk_spi_sdhc_access_init+0x284>
		csize = (sys_get_be32(&buf[6]) >> 14) & ((1 << 12) - 1);
 80019a4:	f10d 0036 	add.w	r0, sp, #54	; 0x36
 80019a8:	f004 feff 	bl	80067aa <sys_get_be32>
	return ((uint16_t)src[0] << 8) | src[1];
 80019ac:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 80019b0:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		csizemult = (uint8_t) ((sys_get_be16(&buf[9]) >> 7) & ((1 << 3) - 1));
 80019b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		csize = (sys_get_be32(&buf[6]) >> 14) & ((1 << 12) - 1);
 80019b8:	f3c0 308b 	ubfx	r0, r0, #14, #12
		data->sector_count = ((csize + 1) << (csizemult + 2 + readbllen - 9));
 80019bc:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 80019c0:	3c07      	subs	r4, #7
 80019c2:	3001      	adds	r0, #1
 80019c4:	4423      	add	r3, r4
 80019c6:	4098      	lsls	r0, r3
 80019c8:	4b4c      	ldr	r3, [pc, #304]	; (8001afc <disk_spi_sdhc_access_init+0x298>)
 80019ca:	4e4d      	ldr	r6, [pc, #308]	; (8001b00 <disk_spi_sdhc_access_init+0x29c>)
		data->sector_count = (csize + 1) *
 80019cc:	6228      	str	r0, [r5, #32]
 80019ce:	1af6      	subs	r6, r6, r3
 80019d0:	08f6      	lsrs	r6, r6, #3
	LOG_INF("Found a ~%u MiB SDHC card.",
 80019d2:	6a2a      	ldr	r2, [r5, #32]
 80019d4:	494b      	ldr	r1, [pc, #300]	; (8001b04 <disk_spi_sdhc_access_init+0x2a0>)
 80019d6:	01b6      	lsls	r6, r6, #6
 80019d8:	f046 0603 	orr.w	r6, r6, #3
 80019dc:	0ad2      	lsrs	r2, r2, #11
 80019de:	4630      	mov	r0, r6
 80019e0:	f004 fe4d 	bl	800667e <log_string_sync>
	err = sdhc_spi_cmd_r1(data, SDHC_SEND_CID, 0);
 80019e4:	2200      	movs	r2, #0
 80019e6:	210a      	movs	r1, #10
 80019e8:	4628      	mov	r0, r5
 80019ea:	f7ff fe55 	bl	8001698 <sdhc_spi_cmd_r1>
	if (err != 0) {
 80019ee:	4604      	mov	r4, r0
 80019f0:	2800      	cmp	r0, #0
 80019f2:	d195      	bne.n	8001920 <disk_spi_sdhc_access_init+0xbc>
	err = sdhc_spi_rx_block(data, buf, sizeof(buf));
 80019f4:	2210      	movs	r2, #16
 80019f6:	a90c      	add	r1, sp, #48	; 0x30
 80019f8:	4628      	mov	r0, r5
 80019fa:	f7ff fdbf 	bl	800157c <sdhc_spi_rx_block>
	if (err != 0) {
 80019fe:	4604      	mov	r4, r0
 8001a00:	2800      	cmp	r0, #0
 8001a02:	d18d      	bne.n	8001920 <disk_spi_sdhc_access_init+0xbc>
	LOG_INF("Manufacturer ID=%d OEM='%c%c' Name='%c%c%c%c%c' "
 8001a04:	f10d 0039 	add.w	r0, sp, #57	; 0x39
 8001a08:	f004 fecf 	bl	80067aa <sys_get_be32>
 8001a0c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8001a10:	9306      	str	r3, [sp, #24]
 8001a12:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8001a16:	9305      	str	r3, [sp, #20]
 8001a18:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8001a1c:	9304      	str	r3, [sp, #16]
 8001a1e:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
 8001a22:	9303      	str	r3, [sp, #12]
 8001a24:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8001a28:	9302      	str	r3, [sp, #8]
 8001a2a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8001a2e:	9301      	str	r3, [sp, #4]
 8001a30:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8001a34:	9007      	str	r0, [sp, #28]
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8001a3c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8001a40:	4931      	ldr	r1, [pc, #196]	; (8001b08 <disk_spi_sdhc_access_init+0x2a4>)
 8001a42:	4630      	mov	r0, r6
 8001a44:	f004 fe1b 	bl	800667e <log_string_sync>
	data->cfg.frequency = SDHC_SPI_SPEED;
 8001a48:	4b30      	ldr	r3, [pc, #192]	; (8001b0c <disk_spi_sdhc_access_init+0x2a8>)
 8001a4a:	606b      	str	r3, [r5, #4]
	data->status = DISK_STATUS_OK;
 8001a4c:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
	return 0;
 8001a50:	e766      	b.n	8001920 <disk_spi_sdhc_access_init+0xbc>
		csize = sys_get_be32(&buf[6]) & ((1 << 22) - 1);
 8001a52:	f10d 0036 	add.w	r0, sp, #54	; 0x36
 8001a56:	f004 fea8 	bl	80067aa <sys_get_be32>
		if (csize < 4112) {
 8001a5a:	f241 030f 	movw	r3, #4111	; 0x100f
		csize = sys_get_be32(&buf[6]) & ((1 << 22) - 1);
 8001a5e:	f3c0 0015 	ubfx	r0, r0, #0, #22
		if (csize < 4112) {
 8001a62:	4298      	cmp	r0, r3
 8001a64:	d940      	bls.n	8001ae8 <disk_spi_sdhc_access_init+0x284>
		data->sector_count = (csize + 1) *
 8001a66:	3001      	adds	r0, #1
 8001a68:	0280      	lsls	r0, r0, #10
 8001a6a:	e7ad      	b.n	80019c8 <disk_spi_sdhc_access_init+0x164>
	ocr = 0;
 8001a6c:	9009      	str	r0, [sp, #36]	; 0x24
	if (is_v2) {
 8001a6e:	2e00      	cmp	r6, #0
 8001a70:	d182      	bne.n	8001978 <disk_spi_sdhc_access_init+0x114>
 8001a72:	4e21      	ldr	r6, [pc, #132]	; (8001af8 <disk_spi_sdhc_access_init+0x294>)
	err = sdhc_spi_tx_cmd(data, cmd, payload);
 8001a74:	213a      	movs	r1, #58	; 0x3a
 8001a76:	2200      	movs	r2, #0
 8001a78:	4628      	mov	r0, r5
 8001a7a:	f004 ff60 	bl	800693e <sdhc_spi_tx_cmd>
	if (err != 0) {
 8001a7e:	4601      	mov	r1, r0
 8001a80:	b920      	cbnz	r0, 8001a8c <disk_spi_sdhc_access_init+0x228>
 8001a82:	a909      	add	r1, sp, #36	; 0x24
 8001a84:	4628      	mov	r0, r5
 8001a86:	f004 ff09 	bl	800689c <sdhc_spi_cmd_r37_raw.part.0>
 8001a8a:	4601      	mov	r1, r0
 8001a8c:	4630      	mov	r0, r6
 8001a8e:	f004 feb9 	bl	8006804 <sdhc_map_flags>
			if (err != 0) {
 8001a92:	4604      	mov	r4, r0
 8001a94:	2800      	cmp	r0, #0
 8001a96:	f47f af43 	bne.w	8001920 <disk_spi_sdhc_access_init+0xbc>
			if ((ocr & SDHC_BUSY) != 0U) {
 8001a9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	db04      	blt.n	8001aaa <disk_spi_sdhc_access_init+0x246>
		} while (sdhc_retry_ok(&retry));
 8001aa0:	a80a      	add	r0, sp, #40	; 0x28
 8001aa2:	f004 febb 	bl	800681c <sdhc_retry_ok>
 8001aa6:	2800      	cmp	r0, #0
 8001aa8:	d1e4      	bne.n	8001a74 <disk_spi_sdhc_access_init+0x210>
	if ((ocr & SDHC_CCS) != 0U) {
 8001aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	f57f af63 	bpl.w	8001978 <disk_spi_sdhc_access_init+0x114>
		data->high_capacity = true;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	772b      	strb	r3, [r5, #28]
	err = sdhc_spi_cmd_r1(data, SDHC_SEND_CSD, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2109      	movs	r1, #9
 8001aba:	4628      	mov	r0, r5
 8001abc:	f7ff fdec 	bl	8001698 <sdhc_spi_cmd_r1>
	if (err != 0) {
 8001ac0:	4604      	mov	r4, r0
 8001ac2:	2800      	cmp	r0, #0
 8001ac4:	f47f af2c 	bne.w	8001920 <disk_spi_sdhc_access_init+0xbc>
	err = sdhc_spi_rx_block(data, buf, sizeof(buf));
 8001ac8:	2210      	movs	r2, #16
 8001aca:	a90c      	add	r1, sp, #48	; 0x30
 8001acc:	4628      	mov	r0, r5
 8001ace:	f7ff fd55 	bl	800157c <sdhc_spi_rx_block>
	if (err != 0) {
 8001ad2:	4604      	mov	r4, r0
 8001ad4:	2800      	cmp	r0, #0
 8001ad6:	f47f af23 	bne.w	8001920 <disk_spi_sdhc_access_init+0xbc>
	structure = (buf[0] >> 6);
 8001ada:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
	switch (structure) {
 8001ade:	099b      	lsrs	r3, r3, #6
 8001ae0:	f43f af57 	beq.w	8001992 <disk_spi_sdhc_access_init+0x12e>
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d0b4      	beq.n	8001a52 <disk_spi_sdhc_access_init+0x1ee>
			return -ENOTSUP;
 8001ae8:	f06f 0422 	mvn.w	r4, #34	; 0x22
 8001aec:	e718      	b.n	8001920 <disk_spi_sdhc_access_init+0xbc>
 8001aee:	bf00      	nop
 8001af0:	08009545 	.word	0x08009545
 8001af4:	00061a80 	.word	0x00061a80
 8001af8:	08009585 	.word	0x08009585
 8001afc:	08008d1c 	.word	0x08008d1c
 8001b00:	08008d74 	.word	0x08008d74
 8001b04:	080094c1 	.word	0x080094c1
 8001b08:	080094dc 	.word	0x080094dc
 8001b0c:	003d0900 	.word	0x003d0900

08001b10 <disk_spi_sdhc_access_read>:
{
 8001b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b14:	4698      	mov	r8, r3
	struct sdhc_spi_data *data = dev->data;
 8001b16:	6903      	ldr	r3, [r0, #16]
	return sdhc_map_flags(sdhc_disk_status_flags, status);
 8001b18:	4815      	ldr	r0, [pc, #84]	; (8001b70 <disk_spi_sdhc_access_read+0x60>)
 8001b1a:	68dd      	ldr	r5, [r3, #12]
{
 8001b1c:	460e      	mov	r6, r1
 8001b1e:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
 8001b22:	4617      	mov	r7, r2
 8001b24:	f004 fe6e 	bl	8006804 <sdhc_map_flags>
	if (err != 0) {
 8001b28:	4604      	mov	r4, r0
 8001b2a:	b938      	cbnz	r0, 8001b3c <disk_spi_sdhc_access_read+0x2c>
 8001b2c:	4643      	mov	r3, r8
 8001b2e:	463a      	mov	r2, r7
 8001b30:	4631      	mov	r1, r6
 8001b32:	4628      	mov	r0, r5
 8001b34:	f004 ff27 	bl	8006986 <sdhc_spi_read.part.0>
	if (err != 0 && sdhc_is_retryable(err)) {
 8001b38:	4604      	mov	r4, r0
 8001b3a:	b1a8      	cbz	r0, 8001b68 <disk_spi_sdhc_access_read+0x58>
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	f004 fe42 	bl	80067c6 <sdhc_is_retryable>
 8001b42:	b188      	cbz	r0, 8001b68 <disk_spi_sdhc_access_read+0x58>
		sdhc_spi_recover(data);
 8001b44:	4628      	mov	r0, r5
 8001b46:	f004 ff1a 	bl	800697e <sdhc_spi_recover>
 8001b4a:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
 8001b4e:	4808      	ldr	r0, [pc, #32]	; (8001b70 <disk_spi_sdhc_access_read+0x60>)
 8001b50:	f004 fe58 	bl	8006804 <sdhc_map_flags>
	if (err != 0) {
 8001b54:	4604      	mov	r4, r0
 8001b56:	b938      	cbnz	r0, 8001b68 <disk_spi_sdhc_access_read+0x58>
 8001b58:	4643      	mov	r3, r8
 8001b5a:	463a      	mov	r2, r7
 8001b5c:	4631      	mov	r1, r6
 8001b5e:	4628      	mov	r0, r5
}
 8001b60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b64:	f004 bf0f 	b.w	8006986 <sdhc_spi_read.part.0>
 8001b68:	4620      	mov	r0, r4
 8001b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b6e:	bf00      	nop
 8001b70:	0800953d 	.word	0x0800953d

08001b74 <disk_spi_sdhc_access_write>:
{
 8001b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b78:	461e      	mov	r6, r3
	struct sdhc_spi_data *data = dev->data;
 8001b7a:	6903      	ldr	r3, [r0, #16]
 8001b7c:	482a      	ldr	r0, [pc, #168]	; (8001c28 <disk_spi_sdhc_access_write+0xb4>)
 8001b7e:	68dd      	ldr	r5, [r3, #12]
	if (count > 2) {
 8001b80:	2e02      	cmp	r6, #2
{
 8001b82:	460f      	mov	r7, r1
 8001b84:	4690      	mov	r8, r2
 8001b86:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
	if (count > 2) {
 8001b8a:	d927      	bls.n	8001bdc <disk_spi_sdhc_access_write+0x68>
 8001b8c:	f004 fe3a 	bl	8006804 <sdhc_map_flags>
	if (err != 0) {
 8001b90:	4604      	mov	r4, r0
 8001b92:	b958      	cbnz	r0, 8001bac <disk_spi_sdhc_access_write+0x38>
 8001b94:	4633      	mov	r3, r6
 8001b96:	4642      	mov	r2, r8
 8001b98:	4639      	mov	r1, r7
 8001b9a:	4628      	mov	r0, r5
 8001b9c:	f7ff fd88 	bl	80016b0 <sdhc_spi_write_multi.part.0>
		if (err != 0 && sdhc_is_retryable(err)) {
 8001ba0:	4604      	mov	r4, r0
 8001ba2:	b918      	cbnz	r0, 8001bac <disk_spi_sdhc_access_write+0x38>
{
 8001ba4:	2400      	movs	r4, #0
}
 8001ba6:	4620      	mov	r0, r4
 8001ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (err != 0 && sdhc_is_retryable(err)) {
 8001bac:	4620      	mov	r0, r4
 8001bae:	f004 fe0a 	bl	80067c6 <sdhc_is_retryable>
 8001bb2:	2800      	cmp	r0, #0
 8001bb4:	d0f7      	beq.n	8001ba6 <disk_spi_sdhc_access_write+0x32>
			sdhc_spi_recover(data);
 8001bb6:	4628      	mov	r0, r5
 8001bb8:	f004 fee1 	bl	800697e <sdhc_spi_recover>
 8001bbc:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
 8001bc0:	4819      	ldr	r0, [pc, #100]	; (8001c28 <disk_spi_sdhc_access_write+0xb4>)
 8001bc2:	f004 fe1f 	bl	8006804 <sdhc_map_flags>
	if (err != 0) {
 8001bc6:	4604      	mov	r4, r0
 8001bc8:	2800      	cmp	r0, #0
 8001bca:	d1ec      	bne.n	8001ba6 <disk_spi_sdhc_access_write+0x32>
 8001bcc:	4633      	mov	r3, r6
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4639      	mov	r1, r7
 8001bd2:	4628      	mov	r0, r5
}
 8001bd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001bd8:	f7ff bd6a 	b.w	80016b0 <sdhc_spi_write_multi.part.0>
 8001bdc:	f004 fe12 	bl	8006804 <sdhc_map_flags>
	if (err != 0) {
 8001be0:	4604      	mov	r4, r0
 8001be2:	b940      	cbnz	r0, 8001bf6 <disk_spi_sdhc_access_write+0x82>
 8001be4:	4633      	mov	r3, r6
 8001be6:	4642      	mov	r2, r8
 8001be8:	4639      	mov	r1, r7
 8001bea:	4628      	mov	r0, r5
 8001bec:	f7ff fdbe 	bl	800176c <sdhc_spi_write.part.0>
		if (err != 0 && sdhc_is_retryable(err)) {
 8001bf0:	4604      	mov	r4, r0
 8001bf2:	2800      	cmp	r0, #0
 8001bf4:	d0d6      	beq.n	8001ba4 <disk_spi_sdhc_access_write+0x30>
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	f004 fde5 	bl	80067c6 <sdhc_is_retryable>
 8001bfc:	2800      	cmp	r0, #0
 8001bfe:	d0d2      	beq.n	8001ba6 <disk_spi_sdhc_access_write+0x32>
			sdhc_spi_recover(data);
 8001c00:	4628      	mov	r0, r5
 8001c02:	f004 febc 	bl	800697e <sdhc_spi_recover>
 8001c06:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
 8001c0a:	4807      	ldr	r0, [pc, #28]	; (8001c28 <disk_spi_sdhc_access_write+0xb4>)
 8001c0c:	f004 fdfa 	bl	8006804 <sdhc_map_flags>
	if (err != 0) {
 8001c10:	4604      	mov	r4, r0
 8001c12:	2800      	cmp	r0, #0
 8001c14:	d1c7      	bne.n	8001ba6 <disk_spi_sdhc_access_write+0x32>
 8001c16:	4633      	mov	r3, r6
 8001c18:	4642      	mov	r2, r8
 8001c1a:	4639      	mov	r1, r7
 8001c1c:	4628      	mov	r0, r5
}
 8001c1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c22:	f7ff bda3 	b.w	800176c <sdhc_spi_write.part.0>
 8001c26:	bf00      	nop
 8001c28:	0800953d 	.word	0x0800953d

08001c2c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 8001c2c:	b510      	push	{r4, lr}
 8001c2e:	4807      	ldr	r0, [pc, #28]	; (8001c4c <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
 8001c30:	4c07      	ldr	r4, [pc, #28]	; (8001c50 <uart_console_init+0x24>)
 8001c32:	f003 fb0d 	bl	8005250 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 8001c36:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <uart_console_init+0x28>)
 8001c38:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
 8001c3a:	4620      	mov	r0, r4
 8001c3c:	f001 f8a2 	bl	8002d84 <__stdout_hook_install>
	__printk_hook_install(console_out);
 8001c40:	4620      	mov	r0, r4
 8001c42:	f7fe fda1 	bl	8000788 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
 8001c46:	2000      	movs	r0, #0
 8001c48:	bd10      	pop	{r4, pc}
 8001c4a:	bf00      	nop
 8001c4c:	08009443 	.word	0x08009443
 8001c50:	08001c59 	.word	0x08001c59
 8001c54:	200006bc 	.word	0x200006bc

08001c58 <console_out>:
	if ('\n' == c) {
 8001c58:	280a      	cmp	r0, #10
{
 8001c5a:	b538      	push	{r3, r4, r5, lr}
 8001c5c:	4d07      	ldr	r5, [pc, #28]	; (8001c7c <console_out+0x24>)
 8001c5e:	4604      	mov	r4, r0
	if ('\n' == c) {
 8001c60:	d104      	bne.n	8001c6c <console_out+0x14>
 8001c62:	6828      	ldr	r0, [r5, #0]
 8001c64:	6883      	ldr	r3, [r0, #8]
 8001c66:	210d      	movs	r1, #13
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
 8001c6c:	6828      	ldr	r0, [r5, #0]
 8001c6e:	6883      	ldr	r3, [r0, #8]
 8001c70:	b2e1      	uxtb	r1, r4
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	4798      	blx	r3
}
 8001c76:	4620      	mov	r0, r4
 8001c78:	bd38      	pop	{r3, r4, r5, pc}
 8001c7a:	bf00      	nop
 8001c7c:	200006bc 	.word	0x200006bc

08001c80 <__stm32_exti_isr.isra.0>:
 *
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 8001c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001c84:	4f0d      	ldr	r7, [pc, #52]	; (8001cbc <__stm32_exti_isr.isra.0+0x3c>)
 8001c86:	4604      	mov	r4, r0
 8001c88:	460e      	mov	r6, r1
 8001c8a:	4615      	mov	r5, r2
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8001c8c:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8001c90:	f102 0904 	add.w	r9, r2, #4
	for (line = min; line < max; line++) {
 8001c94:	42b4      	cmp	r4, r6
 8001c96:	db01      	blt.n	8001c9c <__stm32_exti_isr.isra.0+0x1c>
		}
	}
}
 8001c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c9c:	697a      	ldr	r2, [r7, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8001c9e:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 8001ca2:	ea33 0202 	bics.w	r2, r3, r2
 8001ca6:	d107      	bne.n	8001cb8 <__stm32_exti_isr.isra.0+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001ca8:	617b      	str	r3, [r7, #20]
			if (!data->cb[line].cb) {
 8001caa:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 8001cae:	b11b      	cbz	r3, 8001cb8 <__stm32_exti_isr.isra.0+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 8001cb0:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	4798      	blx	r3
	for (line = min; line < max; line++) {
 8001cb8:	3401      	adds	r4, #1
 8001cba:	e7eb      	b.n	8001c94 <__stm32_exti_isr.isra.0+0x14>
 8001cbc:	40010400 	.word	0x40010400

08001cc0 <stm32_exti_enable>:
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001cc0:	4a04      	ldr	r2, [pc, #16]	; (8001cd4 <stm32_exti_enable+0x14>)
	LL_EXTI_EnableIT_0_31(1 << line);
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	6811      	ldr	r1, [r2, #0]
 8001cc6:	4083      	lsls	r3, r0
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 8001ccc:	4b02      	ldr	r3, [pc, #8]	; (8001cd8 <stm32_exti_enable+0x18>)
 8001cce:	5618      	ldrsb	r0, [r3, r0]
 8001cd0:	f000 bc0c 	b.w	80024ec <arch_irq_enable>
 8001cd4:	40010400 	.word	0x40010400
 8001cd8:	080095a0 	.word	0x080095a0

08001cdc <stm32_exti_disable>:
	if (line < 32) {
 8001cdc:	281f      	cmp	r0, #31
 8001cde:	dc07      	bgt.n	8001cf0 <stm32_exti_disable+0x14>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001ce0:	4904      	ldr	r1, [pc, #16]	; (8001cf4 <stm32_exti_disable+0x18>)
		LL_EXTI_DisableIT_0_31(1 << line);
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	680b      	ldr	r3, [r1, #0]
 8001ce6:	fa02 f000 	lsl.w	r0, r2, r0
 8001cea:	ea23 0000 	bic.w	r0, r3, r0
 8001cee:	6008      	str	r0, [r1, #0]
}
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40010400 	.word	0x40010400

08001cf8 <stm32_exti_trigger>:
	switch (trigger) {
 8001cf8:	2903      	cmp	r1, #3
 8001cfa:	d80f      	bhi.n	8001d1c <stm32_exti_trigger+0x24>
 8001cfc:	e8df f001 	tbb	[pc, r1]
 8001d00:	23170f02 	.word	0x23170f02
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001d04:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <stm32_exti_trigger+0x64>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8001d06:	2201      	movs	r2, #1
 8001d08:	6899      	ldr	r1, [r3, #8]
 8001d0a:	fa02 f000 	lsl.w	r0, r2, r0
 8001d0e:	ea21 0100 	bic.w	r1, r1, r0
 8001d12:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	ea22 0000 	bic.w	r0, r2, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001d1a:	60d8      	str	r0, [r3, #12]
}
 8001d1c:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8001d1e:	2301      	movs	r3, #1
 8001d20:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001d24:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <stm32_exti_trigger+0x64>)
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	4302      	orrs	r2, r0
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	e7f2      	b.n	8001d14 <stm32_exti_trigger+0x1c>
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8001d2e:	2301      	movs	r3, #1
 8001d30:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001d34:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <stm32_exti_trigger+0x64>)
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	4302      	orrs	r2, r0
 8001d3a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	ea22 0000 	bic.w	r0, r2, r0
 8001d42:	6098      	str	r0, [r3, #8]
}
 8001d44:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8001d46:	2301      	movs	r3, #1
 8001d48:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001d4c:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <stm32_exti_trigger+0x64>)
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	4302      	orrs	r2, r0
 8001d52:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	4310      	orrs	r0, r2
 8001d58:	e7df      	b.n	8001d1a <stm32_exti_trigger+0x22>
 8001d5a:	bf00      	nop
 8001d5c:	40010400 	.word	0x40010400

08001d60 <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 8001d60:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <stm32_exti_set_callback+0x20>)
{
 8001d62:	b510      	push	{r4, lr}
 8001d64:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 8001d66:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8001d6a:	b928      	cbnz	r0, 8001d78 <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8001d6c:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 8001d70:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001d74:	605a      	str	r2, [r3, #4]

	return 0;
}
 8001d76:	bd10      	pop	{r4, pc}
		return -EBUSY;
 8001d78:	f06f 000f 	mvn.w	r0, #15
 8001d7c:	e7fb      	b.n	8001d76 <stm32_exti_set_callback+0x16>
 8001d7e:	bf00      	nop
 8001d80:	200006c0 	.word	0x200006c0

08001d84 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8001d84:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <stm32_exti_unset_callback+0x10>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8001d8c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8001d90:	605a      	str	r2, [r3, #4]
}
 8001d92:	4770      	bx	lr
 8001d94:	200006c0 	.word	0x200006c0

08001d98 <stm32_clock_control_on>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8001d98:	680b      	ldr	r3, [r1, #0]
{
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d838      	bhi.n	8001e12 <stm32_clock_control_on+0x7a>
 8001da0:	e8df f003 	tbb	[pc, r3]
 8001da4:	2d190f03 	.word	0x2d190f03
 8001da8:	23          	.byte	0x23
 8001da9:	00          	.byte	0x00
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001daa:	4a1b      	ldr	r2, [pc, #108]	; (8001e18 <stm32_clock_control_on+0x80>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8001dac:	684b      	ldr	r3, [r1, #4]
 8001dae:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8001db0:	4319      	orrs	r1, r3
 8001db2:	6491      	str	r1, [r2, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001db4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001db6:	4013      	ands	r3, r2
 8001db8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001dba:	9b01      	ldr	r3, [sp, #4]
#endif /* CONFIG_SOC_SERIES_STM32L0X || CONFIG_SOC_SERIES_STM32G0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8001dbc:	2000      	movs	r0, #0
}
 8001dbe:	b006      	add	sp, #24
 8001dc0:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001dc2:	4a15      	ldr	r2, [pc, #84]	; (8001e18 <stm32_clock_control_on+0x80>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 8001dc4:	684b      	ldr	r3, [r1, #4]
 8001dc6:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8001dc8:	4319      	orrs	r1, r3
 8001dca:	64d1      	str	r1, [r2, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001dcc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001dce:	4013      	ands	r3, r2
 8001dd0:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8001dd2:	9b02      	ldr	r3, [sp, #8]
 8001dd4:	e7f2      	b.n	8001dbc <stm32_clock_control_on+0x24>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001dd6:	4a10      	ldr	r2, [pc, #64]	; (8001e18 <stm32_clock_control_on+0x80>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8001dd8:	684b      	ldr	r3, [r1, #4]
 8001dda:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8001ddc:	4319      	orrs	r1, r3
 8001dde:	6591      	str	r1, [r2, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001de0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001de2:	4013      	ands	r3, r2
 8001de4:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8001de6:	9b03      	ldr	r3, [sp, #12]
 8001de8:	e7e8      	b.n	8001dbc <stm32_clock_control_on+0x24>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001dea:	4a0b      	ldr	r2, [pc, #44]	; (8001e18 <stm32_clock_control_on+0x80>)
		LL_APB1_GRP2_EnableClock(pclken->enr);
 8001dec:	684b      	ldr	r3, [r1, #4]
 8001dee:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8001df0:	4319      	orrs	r1, r3
 8001df2:	65d1      	str	r1, [r2, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001df4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001df6:	4013      	ands	r3, r2
 8001df8:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8001dfa:	9b04      	ldr	r3, [sp, #16]
 8001dfc:	e7de      	b.n	8001dbc <stm32_clock_control_on+0x24>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001dfe:	4a06      	ldr	r2, [pc, #24]	; (8001e18 <stm32_clock_control_on+0x80>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8001e00:	684b      	ldr	r3, [r1, #4]
 8001e02:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8001e04:	4319      	orrs	r1, r3
 8001e06:	6611      	str	r1, [r2, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001e08:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8001e0e:	9b05      	ldr	r3, [sp, #20]
 8001e10:	e7d4      	b.n	8001dbc <stm32_clock_control_on+0x24>
	switch (pclken->bus) {
 8001e12:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8001e16:	e7d2      	b.n	8001dbe <stm32_clock_control_on+0x26>
 8001e18:	40021000 	.word	0x40021000

08001e1c <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8001e1c:	680b      	ldr	r3, [r1, #0]
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d828      	bhi.n	8001e74 <stm32_clock_control_off+0x58>
 8001e22:	e8df f003 	tbb	[pc, r3]
 8001e26:	0b03      	.short	0x0b03
 8001e28:	2012      	.short	0x2012
 8001e2a:	19          	.byte	0x19
 8001e2b:	00          	.byte	0x00
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8001e2c:	4a13      	ldr	r2, [pc, #76]	; (8001e7c <stm32_clock_control_off+0x60>)
 8001e2e:	6849      	ldr	r1, [r1, #4]
 8001e30:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8001e32:	ea23 0301 	bic.w	r3, r3, r1
 8001e36:	6493      	str	r3, [r2, #72]	; 0x48
#endif /* CONFIG_SOC_SERIES_STM32L0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8001e38:	2000      	movs	r0, #0
}
 8001e3a:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8001e3c:	4a0f      	ldr	r2, [pc, #60]	; (8001e7c <stm32_clock_control_off+0x60>)
 8001e3e:	6849      	ldr	r1, [r1, #4]
 8001e40:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001e42:	ea23 0301 	bic.w	r3, r3, r1
 8001e46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e48:	e7f6      	b.n	8001e38 <stm32_clock_control_off+0x1c>
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001e4a:	4a0c      	ldr	r2, [pc, #48]	; (8001e7c <stm32_clock_control_off+0x60>)
 8001e4c:	6849      	ldr	r1, [r1, #4]
 8001e4e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001e50:	ea23 0301 	bic.w	r3, r3, r1
 8001e54:	6593      	str	r3, [r2, #88]	; 0x58
 8001e56:	e7ef      	b.n	8001e38 <stm32_clock_control_off+0x1c>
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8001e58:	4a08      	ldr	r2, [pc, #32]	; (8001e7c <stm32_clock_control_off+0x60>)
 8001e5a:	6849      	ldr	r1, [r1, #4]
 8001e5c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8001e5e:	ea23 0301 	bic.w	r3, r3, r1
 8001e62:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001e64:	e7e8      	b.n	8001e38 <stm32_clock_control_off+0x1c>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001e66:	4a05      	ldr	r2, [pc, #20]	; (8001e7c <stm32_clock_control_off+0x60>)
 8001e68:	6849      	ldr	r1, [r1, #4]
 8001e6a:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001e6c:	ea23 0301 	bic.w	r3, r3, r1
 8001e70:	6613      	str	r3, [r2, #96]	; 0x60
 8001e72:	e7e1      	b.n	8001e38 <stm32_clock_control_off+0x1c>
	switch (pclken->bus) {
 8001e74:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40021000 	.word	0x40021000

08001e80 <stm32_clock_control_get_subsys_rate>:
				CONFIG_CLOCK_STM32_APB2_PRESCALER);
#endif /* CONFIG_SOC_SERIES_STM32F0X && CONFIG_SOC_SERIES_STM32G0X */

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8001e80:	680b      	ldr	r3, [r1, #0]
 8001e82:	2b04      	cmp	r3, #4
	uint32_t ahb_clock = SystemCoreClock;
 8001e84:	bf9f      	itttt	ls
 8001e86:	4b04      	ldrls	r3, [pc, #16]	; (8001e98 <stm32_clock_control_get_subsys_rate+0x18>)
 8001e88:	681b      	ldrls	r3, [r3, #0]
#endif /* CONFIG_SOC_SERIES_STM32G0X */
		*rate = apb1_clock;
		break;
#if !defined (CONFIG_SOC_SERIES_STM32F0X) && !defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_APB2:
		*rate = apb2_clock;
 8001e8a:	6013      	strls	r3, [r2, #0]
#endif /* CONFIG_SOC_SERIES_STM32F0X && CONFIG_SOC_SERIES_STM32G0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8001e8c:	2000      	movls	r0, #0
	switch (pclken->bus) {
 8001e8e:	bf88      	it	hi
 8001e90:	f06f 0022 	mvnhi.w	r0, #34	; 0x22
}
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	20000168 	.word	0x20000168

08001e9c <stm32_clock_control_init>:
			 mco2_prescaler(CONFIG_CLOCK_STM32_MCO2_DIV));
#endif /* CONFIG_CLOCK_STM32_MCO2_SRC_NOCLOCK */
}

static int stm32_clock_control_init(const struct device *dev)
{
 8001e9c:	b510      	push	{r4, lr}
 8001e9e:	b086      	sub	sp, #24
	clk_init->AHBCLKDivider = ahb_prescaler(
 8001ea0:	2300      	movs	r3, #0
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001ea2:	4c1d      	ldr	r4, [pc, #116]	; (8001f18 <stm32_clock_control_init+0x7c>)
	clk_init->APB2CLKDivider = apb2_prescaler(
 8001ea4:	9302      	str	r3, [sp, #8]
	clk_init->APB1CLKDivider = apb1_prescaler(
 8001ea6:	e9cd 3300 	strd	r3, r3, [sp]
#else
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
#endif /* CONFIG_SOC_SERIES_STM32WBX */

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8001eaa:	f004 fde8 	bl	8006a7e <config_enable_default_clocks>

#ifdef CONFIG_CLOCK_STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8001eae:	a803      	add	r0, sp, #12
 8001eb0:	f004 fddd 	bl	8006a6e <config_pll_init>
 8001eb4:	6823      	ldr	r3, [r4, #0]
 8001eb6:	055a      	lsls	r2, r3, #21
 8001eb8:	d406      	bmi.n	8001ec8 <stm32_clock_control_init+0x2c>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001eba:	6823      	ldr	r3, [r4, #0]
 8001ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec0:	6023      	str	r3, [r4, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	055b      	lsls	r3, r3, #21
 8001ec6:	d5fc      	bpl.n	8001ec2 <stm32_clock_control_init+0x26>
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001ec8:	68a3      	ldr	r3, [r4, #8]
 8001eca:	f023 0303 	bic.w	r3, r3, #3
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001ed4:	68a3      	ldr	r3, [r4, #8]
 8001ed6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001eda:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001edc:	68a3      	ldr	r3, [r4, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d1fa      	bne.n	8001edc <stm32_clock_control_init+0x40>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001ee6:	6823      	ldr	r3, [r4, #0]
 8001ee8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eec:	6023      	str	r3, [r4, #0]
		 }
	 }
#endif

#ifdef CONFIG_CLOCK_STM32_PLL_Q_DIVISOR
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8001eee:	68e3      	ldr	r3, [r4, #12]
 8001ef0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001ef4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ef8:	60e3      	str	r3, [r4, #12]
	LL_RCC_HSI_Disable();
	LL_RCC_HSE_Disable();

#elif CONFIG_CLOCK_STM32_PLL_SRC_HSI
	/* Switch to PLL with HSI as clock source */
	LL_PLL_ConfigSystemClock_HSI(&s_PLLInitStruct, &s_ClkInitStruct);
 8001efa:	4669      	mov	r1, sp
 8001efc:	a803      	add	r0, sp, #12
 8001efe:	f003 f939 	bl	8005174 <LL_PLL_ConfigSystemClock_HSI>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001f02:	6823      	ldr	r3, [r4, #0]
 8001f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f08:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001f0a:	6823      	ldr	r3, [r4, #0]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f023 0301 	bic.w	r3, r3, #1
 8001f12:	6023      	str	r3, [r4, #0]
 8001f14:	b006      	add	sp, #24
 8001f16:	bd10      	pop	{r4, pc}
 8001f18:	40021000 	.word	0x40021000

08001f1c <enable_port>:
 * @param clk  optional clock device
 *
 * @return 0 on success, error otherwise
 */
static int enable_port(uint32_t port, const struct device *clk)
{
 8001f1c:	b513      	push	{r0, r1, r4, lr}
 8001f1e:	4604      	mov	r4, r0
	/* enable port clock */
	if (!clk) {
 8001f20:	4608      	mov	r0, r1
 8001f22:	b911      	cbnz	r1, 8001f2a <enable_port+0xe>
 8001f24:	4809      	ldr	r0, [pc, #36]	; (8001f4c <enable_port+0x30>)
 8001f26:	f003 f993 	bl	8005250 <z_impl_device_get_binding>
		clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
	}

	struct stm32_pclken pclken;

	pclken.bus = STM32_CLOCK_BUS_GPIO;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	9300      	str	r3, [sp, #0]
	pclken.enr = ports_enable[port];
 8001f2e:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <enable_port+0x34>)
 8001f30:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8001f34:	9301      	str	r3, [sp, #4]

	if (pclken.enr == STM32_PORT_NOT_AVAILABLE) {
 8001f36:	3301      	adds	r3, #1
 8001f38:	d005      	beq.n	8001f46 <enable_port+0x2a>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 8001f3a:	6883      	ldr	r3, [r0, #8]
 8001f3c:	4669      	mov	r1, sp
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4798      	blx	r3
		return -EIO;
	}

	return clock_control_on(clk, (clock_control_subsys_t *) &pclken);
}
 8001f42:	b002      	add	sp, #8
 8001f44:	bd10      	pop	{r4, pc}
		return -EIO;
 8001f46:	f06f 0004 	mvn.w	r0, #4
 8001f4a:	e7fa      	b.n	8001f42 <enable_port+0x26>
 8001f4c:	080095b0 	.word	0x080095b0
 8001f50:	08008e28 	.word	0x08008e28

08001f54 <stm32_dt_pinctrl_configure>:
 *
 * @return 0 on success, -EINVAL otherwise
 */
int stm32_dt_pinctrl_configure(const struct soc_gpio_pinctrl *pinctrl,
			       size_t list_size, uint32_t base)
{
 8001f54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f58:	4607      	mov	r7, r0
	const struct device *clk;
	uint32_t pin, mux;
	uint32_t func = 0;

	if (!list_size) {
 8001f5a:	460e      	mov	r6, r1
 8001f5c:	b331      	cbz	r1, 8001fac <stm32_dt_pinctrl_configure+0x58>
 8001f5e:	4818      	ldr	r0, [pc, #96]	; (8001fc0 <stm32_dt_pinctrl_configure+0x6c>)
 8001f60:	f003 f976 	bl	8005250 <z_impl_device_get_binding>
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	/* make sure to enable port clock first */
	clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);

	for (int i = 0; i < list_size; i++) {
 8001f64:	2500      	movs	r5, #0
 8001f66:	4680      	mov	r8, r0
	uint32_t func = 0;
 8001f68:	46ab      	mov	fp, r5
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#else
		if (STM32_DT_PINMUX_FUNC(mux) < ANALOG) {
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
 8001f6a:	f107 0a04 	add.w	sl, r7, #4
		mux = pinctrl[i].pinmux;
 8001f6e:	f857 4035 	ldr.w	r4, [r7, r5, lsl #3]
		if (STM32_DT_PINMUX_FUNC(mux) < ANALOG) {
 8001f72:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 8001f76:	b2e3      	uxtb	r3, r4
 8001f78:	d11c      	bne.n	8001fb4 <stm32_dt_pinctrl_configure+0x60>
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
 8001f7a:	f85a 2035 	ldr.w	r2, [sl, r5, lsl #3]
 8001f7e:	f042 0b20 	orr.w	fp, r2, #32
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8001f82:	f3c4 2907 	ubfx	r9, r4, #8, #8
			       STM32_DT_PINMUX_LINE(mux));

		enable_port(STM32_PORT(pin), clk);
 8001f86:	f3c4 3403 	ubfx	r4, r4, #12, #4
 8001f8a:	4641      	mov	r1, r8
 8001f8c:	4620      	mov	r0, r4
	uint32_t offset = STM32_PORT(pin) * GPIO_REG_SIZE;
 8001f8e:	02a4      	lsls	r4, r4, #10
 8001f90:	9301      	str	r3, [sp, #4]
	for (int i = 0; i < list_size; i++) {
 8001f92:	3501      	adds	r5, #1
		enable_port(STM32_PORT(pin), clk);
 8001f94:	f7ff ffc2 	bl	8001f1c <enable_port>
	return gpio_stm32_configure((uint32_t *)port_base,
 8001f98:	9b01      	ldr	r3, [sp, #4]
 8001f9a:	465a      	mov	r2, fp
 8001f9c:	f009 010f 	and.w	r1, r9, #15
 8001fa0:	f104 4090 	add.w	r0, r4, #1207959552	; 0x48000000
 8001fa4:	f004 ff46 	bl	8006e34 <gpio_stm32_configure>
	for (int i = 0; i < list_size; i++) {
 8001fa8:	42ae      	cmp	r6, r5
 8001faa:	d1e0      	bne.n	8001f6e <stm32_dt_pinctrl_configure+0x1a>

		stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
	}

	return 0;
}
 8001fac:	2000      	movs	r0, #0
 8001fae:	b003      	add	sp, #12
 8001fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			func = STM32_MODER_ANALOG_MODE;
 8001fb4:	2b10      	cmp	r3, #16
 8001fb6:	bf08      	it	eq
 8001fb8:	f04f 0b30 	moveq.w	fp, #48	; 0x30
 8001fbc:	e7e1      	b.n	8001f82 <stm32_dt_pinctrl_configure+0x2e>
 8001fbe:	bf00      	nop
 8001fc0:	080095b0 	.word	0x080095b0

08001fc4 <flash_stm32_get_parameters>:
flash_stm32_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_stm32_parameters;
}
 8001fc4:	4800      	ldr	r0, [pc, #0]	; (8001fc8 <flash_stm32_get_parameters+0x4>)
 8001fc6:	4770      	bx	lr
 8001fc8:	08008e6c 	.word	0x08008e6c

08001fcc <flash_stm32_read>:
{
 8001fcc:	b570      	push	{r4, r5, r6, lr}
 8001fce:	461c      	mov	r4, r3
 8001fd0:	4616      	mov	r6, r2
	if (!flash_stm32_valid_range(dev, offset, len, false)) {
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	4622      	mov	r2, r4
{
 8001fd6:	460d      	mov	r5, r1
	if (!flash_stm32_valid_range(dev, offset, len, false)) {
 8001fd8:	f004 fd59 	bl	8006a8e <flash_stm32_valid_range>
 8001fdc:	b970      	cbnz	r0, 8001ffc <flash_stm32_read+0x30>
 8001fde:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <flash_stm32_read+0x48>)
 8001fe0:	480d      	ldr	r0, [pc, #52]	; (8002018 <flash_stm32_read+0x4c>)
		LOG_ERR("Read range invalid. Offset: %ld, len: %zu",
 8001fe2:	490e      	ldr	r1, [pc, #56]	; (800201c <flash_stm32_read+0x50>)
 8001fe4:	1ac0      	subs	r0, r0, r3
 8001fe6:	08c0      	lsrs	r0, r0, #3
 8001fe8:	0180      	lsls	r0, r0, #6
 8001fea:	f040 0001 	orr.w	r0, r0, #1
 8001fee:	4623      	mov	r3, r4
 8001ff0:	462a      	mov	r2, r5
 8001ff2:	f004 fb44 	bl	800667e <log_string_sync>
		return -EINVAL;
 8001ff6:	f06f 0015 	mvn.w	r0, #21
}
 8001ffa:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
 8001ffc:	b13c      	cbz	r4, 800200e <flash_stm32_read+0x42>
	memcpy(data, (uint8_t *) CONFIG_FLASH_BASE_ADDRESS + offset, len);
 8001ffe:	4622      	mov	r2, r4
 8002000:	f105 6100 	add.w	r1, r5, #134217728	; 0x8000000
 8002004:	4630      	mov	r0, r6
 8002006:	f004 fe42 	bl	8006c8e <memcpy>
	return 0;
 800200a:	2000      	movs	r0, #0
 800200c:	e7f5      	b.n	8001ffa <flash_stm32_read+0x2e>
		return 0;
 800200e:	4620      	mov	r0, r4
 8002010:	e7f3      	b.n	8001ffa <flash_stm32_read+0x2e>
 8002012:	bf00      	nop
 8002014:	08008d1c 	.word	0x08008d1c
 8002018:	08008d2c 	.word	0x08008d2c
 800201c:	080095b9 	.word	0x080095b9

08002020 <flash_stm32_write>:
{
 8002020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002022:	461c      	mov	r4, r3
 8002024:	4617      	mov	r7, r2
	if (!flash_stm32_valid_range(dev, offset, len, true)) {
 8002026:	2301      	movs	r3, #1
 8002028:	4622      	mov	r2, r4
{
 800202a:	4605      	mov	r5, r0
 800202c:	460e      	mov	r6, r1
	if (!flash_stm32_valid_range(dev, offset, len, true)) {
 800202e:	f004 fd2e 	bl	8006a8e <flash_stm32_valid_range>
 8002032:	b978      	cbnz	r0, 8002054 <flash_stm32_write+0x34>
 8002034:	4b10      	ldr	r3, [pc, #64]	; (8002078 <flash_stm32_write+0x58>)
 8002036:	4811      	ldr	r0, [pc, #68]	; (800207c <flash_stm32_write+0x5c>)
		LOG_ERR("Write range invalid. Offset: %ld, len: %zu",
 8002038:	4911      	ldr	r1, [pc, #68]	; (8002080 <flash_stm32_write+0x60>)
 800203a:	1ac0      	subs	r0, r0, r3
 800203c:	08c0      	lsrs	r0, r0, #3
 800203e:	0180      	lsls	r0, r0, #6
 8002040:	4623      	mov	r3, r4
 8002042:	4632      	mov	r2, r6
 8002044:	f040 0001 	orr.w	r0, r0, #1
 8002048:	f004 fb19 	bl	800667e <log_string_sync>
		return -EINVAL;
 800204c:	f06f 0415 	mvn.w	r4, #21
}
 8002050:	4620      	mov	r0, r4
 8002052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!len) {
 8002054:	2c00      	cmp	r4, #0
 8002056:	d0fb      	beq.n	8002050 <flash_stm32_write+0x30>
	flash_stm32_sem_take(dev);
 8002058:	68e8      	ldr	r0, [r5, #12]
 800205a:	f004 fd11 	bl	8006a80 <_flash_stm32_sem_take.isra.0>
	rc = flash_stm32_write_range(dev, offset, data, len);
 800205e:	4623      	mov	r3, r4
 8002060:	463a      	mov	r2, r7
 8002062:	4631      	mov	r1, r6
 8002064:	4628      	mov	r0, r5
 8002066:	f004 fd6e 	bl	8006b46 <flash_stm32_write_range>
 800206a:	4604      	mov	r4, r0
	k_sem_give(&FLASH_STM32_PRIV(dev)->sem);
 800206c:	68e8      	ldr	r0, [r5, #12]
 800206e:	300c      	adds	r0, #12
	z_impl_k_sem_give(sem);
 8002070:	f003 ff16 	bl	8005ea0 <z_impl_k_sem_give>
}
 8002074:	e7ec      	b.n	8002050 <flash_stm32_write+0x30>
 8002076:	bf00      	nop
 8002078:	08008d1c 	.word	0x08008d1c
 800207c:	08008d2c 	.word	0x08008d2c
 8002080:	080095e3 	.word	0x080095e3

08002084 <flash_stm32_erase>:
{
 8002084:	b570      	push	{r4, r5, r6, lr}
	if (!flash_stm32_valid_range(dev, offset, len, true)) {
 8002086:	2301      	movs	r3, #1
{
 8002088:	4604      	mov	r4, r0
 800208a:	460e      	mov	r6, r1
 800208c:	4615      	mov	r5, r2
	if (!flash_stm32_valid_range(dev, offset, len, true)) {
 800208e:	f004 fcfe 	bl	8006a8e <flash_stm32_valid_range>
 8002092:	b978      	cbnz	r0, 80020b4 <flash_stm32_erase+0x30>
 8002094:	4819      	ldr	r0, [pc, #100]	; (80020fc <flash_stm32_erase+0x78>)
 8002096:	4c1a      	ldr	r4, [pc, #104]	; (8002100 <flash_stm32_erase+0x7c>)
		LOG_ERR("Erase range invalid. Offset: %ld, len: %zu",
 8002098:	491a      	ldr	r1, [pc, #104]	; (8002104 <flash_stm32_erase+0x80>)
 800209a:	1a24      	subs	r4, r4, r0
 800209c:	08e4      	lsrs	r4, r4, #3
 800209e:	01a4      	lsls	r4, r4, #6
 80020a0:	462b      	mov	r3, r5
 80020a2:	4632      	mov	r2, r6
 80020a4:	f044 0001 	orr.w	r0, r4, #1
 80020a8:	f004 fae9 	bl	800667e <log_string_sync>
		return -EINVAL;
 80020ac:	f06f 0515 	mvn.w	r5, #21
}
 80020b0:	4628      	mov	r0, r5
 80020b2:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
 80020b4:	2d00      	cmp	r5, #0
 80020b6:	d0fb      	beq.n	80020b0 <flash_stm32_erase+0x2c>
	flash_stm32_sem_take(dev);
 80020b8:	68e0      	ldr	r0, [r4, #12]
 80020ba:	f004 fce1 	bl	8006a80 <_flash_stm32_sem_take.isra.0>
	rc = flash_stm32_block_erase_loop(dev, offset, len);
 80020be:	462a      	mov	r2, r5
 80020c0:	4631      	mov	r1, r6
 80020c2:	4620      	mov	r0, r4
 80020c4:	f004 fcff 	bl	8006ac6 <flash_stm32_block_erase_loop>
 80020c8:	4605      	mov	r5, r0
	flash_stm32_flush_caches(dev, offset, len);
 80020ca:	68e0      	ldr	r0, [r4, #12]
	FLASH_TypeDef *regs = FLASH_STM32_REGS(dev);
 80020cc:	6801      	ldr	r1, [r0, #0]
	if (regs->ACR & FLASH_ACR_DCEN) {
 80020ce:	680b      	ldr	r3, [r1, #0]
 80020d0:	055b      	lsls	r3, r3, #21
 80020d2:	d50f      	bpl.n	80020f4 <flash_stm32_erase+0x70>
		regs->ACR &= ~FLASH_ACR_DCEN;
 80020d4:	680b      	ldr	r3, [r1, #0]
 80020d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020da:	600b      	str	r3, [r1, #0]
		regs->ACR |= FLASH_ACR_DCRST;
 80020dc:	680b      	ldr	r3, [r1, #0]
 80020de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020e2:	600b      	str	r3, [r1, #0]
		regs->ACR &= ~FLASH_ACR_DCRST;
 80020e4:	680b      	ldr	r3, [r1, #0]
 80020e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020ea:	600b      	str	r3, [r1, #0]
		regs->ACR |= FLASH_ACR_DCEN;
 80020ec:	680b      	ldr	r3, [r1, #0]
 80020ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020f2:	600b      	str	r3, [r1, #0]
	z_impl_k_sem_give(sem);
 80020f4:	300c      	adds	r0, #12
 80020f6:	f003 fed3 	bl	8005ea0 <z_impl_k_sem_give>
}
 80020fa:	e7d9      	b.n	80020b0 <flash_stm32_erase+0x2c>
 80020fc:	08008d1c 	.word	0x08008d1c
 8002100:	08008d2c 	.word	0x08008d2c
 8002104:	0800960e 	.word	0x0800960e

08002108 <flash_stm32_wait_flash_idle>:
{
 8002108:	b5d0      	push	{r4, r6, r7, lr}
 800210a:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
 800210c:	f006 fc08 	bl	8008920 <z_impl_k_uptime_ticks>
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
			return ((uint32_t)t) / (from_hz / to_hz);
		} else {
			return t / (from_hz / to_hz);
 8002110:	220a      	movs	r2, #10
 8002112:	2300      	movs	r3, #0
 8002114:	f7fe f838 	bl	8000188 <__aeabi_uldivmod>
	if (FLASH_STM32_REGS(dev)->SR & error) {
 8002118:	68e3      	ldr	r3, [r4, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	691a      	ldr	r2, [r3, #16]
	int64_t timeout_time = k_uptime_get() + STM32_FLASH_TIMEOUT;
 800211e:	f110 0632 	adds.w	r6, r0, #50	; 0x32
	if (FLASH_STM32_REGS(dev)->SR & error) {
 8002122:	f244 03b2 	movw	r3, #16562	; 0x40b2
	int64_t timeout_time = k_uptime_get() + STM32_FLASH_TIMEOUT;
 8002126:	f141 0700 	adc.w	r7, r1, #0
	if (FLASH_STM32_REGS(dev)->SR & error) {
 800212a:	421a      	tst	r2, r3
 800212c:	d018      	beq.n	8002160 <flash_stm32_wait_flash_idle+0x58>
		return -EIO;
 800212e:	f06f 0004 	mvn.w	r0, #4
 8002132:	e01b      	b.n	800216c <flash_stm32_wait_flash_idle+0x64>
 8002134:	f006 fbf4 	bl	8008920 <z_impl_k_uptime_ticks>
 8002138:	2300      	movs	r3, #0
 800213a:	220a      	movs	r2, #10
 800213c:	f7fe f824 	bl	8000188 <__aeabi_uldivmod>
		if (k_uptime_get() > timeout_time) {
 8002140:	4286      	cmp	r6, r0
 8002142:	eb77 0301 	sbcs.w	r3, r7, r1
 8002146:	da0b      	bge.n	8002160 <flash_stm32_wait_flash_idle+0x58>
 8002148:	4b09      	ldr	r3, [pc, #36]	; (8002170 <flash_stm32_wait_flash_idle+0x68>)
 800214a:	480a      	ldr	r0, [pc, #40]	; (8002174 <flash_stm32_wait_flash_idle+0x6c>)
			LOG_ERR("Timeout! val: %d", STM32_FLASH_TIMEOUT);
 800214c:	490a      	ldr	r1, [pc, #40]	; (8002178 <flash_stm32_wait_flash_idle+0x70>)
 800214e:	1ac0      	subs	r0, r0, r3
 8002150:	08c0      	lsrs	r0, r0, #3
 8002152:	0180      	lsls	r0, r0, #6
 8002154:	2232      	movs	r2, #50	; 0x32
 8002156:	f040 0001 	orr.w	r0, r0, #1
 800215a:	f004 fa90 	bl	800667e <log_string_sync>
			return -EIO;
 800215e:	e7e6      	b.n	800212e <flash_stm32_wait_flash_idle+0x26>
	while ((FLASH_STM32_REGS(dev)->SR & FLASH_SR_BSY)) {
 8002160:	68e3      	ldr	r3, [r4, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6918      	ldr	r0, [r3, #16]
 8002166:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 800216a:	d1e3      	bne.n	8002134 <flash_stm32_wait_flash_idle+0x2c>
}
 800216c:	bdd0      	pop	{r4, r6, r7, pc}
 800216e:	bf00      	nop
 8002170:	08008d1c 	.word	0x08008d1c
 8002174:	08008d2c 	.word	0x08008d2c
 8002178:	08009639 	.word	0x08009639

0800217c <flash_stm32_write_protection>:
{
 800217c:	b570      	push	{r4, r5, r6, lr}
 800217e:	4604      	mov	r4, r0
	FLASH_TypeDef *regs = FLASH_STM32_REGS(dev);
 8002180:	68c0      	ldr	r0, [r0, #12]
{
 8002182:	460d      	mov	r5, r1
	FLASH_TypeDef *regs = FLASH_STM32_REGS(dev);
 8002184:	6806      	ldr	r6, [r0, #0]
	flash_stm32_sem_take(dev);
 8002186:	f004 fc7b 	bl	8006a80 <_flash_stm32_sem_take.isra.0>
	if (enable) {
 800218a:	b155      	cbz	r5, 80021a2 <flash_stm32_write_protection+0x26>
		rc = flash_stm32_wait_flash_idle(dev);
 800218c:	4620      	mov	r0, r4
 800218e:	f7ff ffbb 	bl	8002108 <flash_stm32_wait_flash_idle>
		if (rc) {
 8002192:	4605      	mov	r5, r0
 8002194:	b198      	cbz	r0, 80021be <flash_stm32_write_protection+0x42>
	k_sem_give(&FLASH_STM32_PRIV(dev)->sem);
 8002196:	68e0      	ldr	r0, [r4, #12]
 8002198:	300c      	adds	r0, #12
	z_impl_k_sem_give(sem);
 800219a:	f003 fe81 	bl	8005ea0 <z_impl_k_sem_give>
}
 800219e:	4628      	mov	r0, r5
 80021a0:	bd70      	pop	{r4, r5, r6, pc}
		if (regs->CR & FLASH_CR_LOCK) {
 80021a2:	6973      	ldr	r3, [r6, #20]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	da04      	bge.n	80021b2 <flash_stm32_write_protection+0x36>
			regs->KEYR = FLASH_KEY1;
 80021a8:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <flash_stm32_write_protection+0x4c>)
 80021aa:	60b3      	str	r3, [r6, #8]
			regs->KEYR = FLASH_KEY2;
 80021ac:	f103 3388 	add.w	r3, r3, #2290649224	; 0x88888888
 80021b0:	60b3      	str	r3, [r6, #8]
	k_sem_give(&FLASH_STM32_PRIV(dev)->sem);
 80021b2:	68e0      	ldr	r0, [r4, #12]
 80021b4:	300c      	adds	r0, #12
 80021b6:	f003 fe73 	bl	8005ea0 <z_impl_k_sem_give>
	return rc;
 80021ba:	2500      	movs	r5, #0
}
 80021bc:	e7ef      	b.n	800219e <flash_stm32_write_protection+0x22>
		regs->CR |= FLASH_CR_LOCK;
 80021be:	6973      	ldr	r3, [r6, #20]
 80021c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021c4:	6173      	str	r3, [r6, #20]
 80021c6:	e7f4      	b.n	80021b2 <flash_stm32_write_protection+0x36>
 80021c8:	45670123 	.word	0x45670123

080021cc <stm32_flash_init>:
	.page_layout = flash_stm32_page_layout,
#endif
};

static int stm32_flash_init(const struct device *dev)
{
 80021cc:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32F0X) || \
	defined(CONFIG_SOC_SERIES_STM32F1X) || \
	defined(CONFIG_SOC_SERIES_STM32F3X) || \
	defined(CONFIG_SOC_SERIES_STM32G0X)
	struct flash_stm32_priv *p = FLASH_STM32_PRIV(dev);
 80021ce:	68c5      	ldr	r5, [r0, #12]
{
 80021d0:	4604      	mov	r4, r0
 80021d2:	4811      	ldr	r0, [pc, #68]	; (8002218 <stm32_flash_init+0x4c>)
 80021d4:	f003 f83c 	bl	8005250 <z_impl_device_get_binding>
 80021d8:	6883      	ldr	r3, [r0, #8]
 80021da:	1d29      	adds	r1, r5, #4
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4798      	blx	r3
	while (!LL_RCC_HSI_IsReady()) {
	}
#endif

	/* enable clock */
	if (clock_control_on(clk, (clock_control_subsys_t *)&p->pclken) != 0) {
 80021e0:	4605      	mov	r5, r0
 80021e2:	b958      	cbnz	r0, 80021fc <stm32_flash_init+0x30>

#ifdef CONFIG_SOC_SERIES_STM32WBX
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_HSEM);
#endif /* CONFIG_SOC_SERIES_STM32WBX */

	flash_stm32_sem_init(dev);
 80021e4:	68e0      	ldr	r0, [r4, #12]
 80021e6:	300c      	adds	r0, #12
	return z_impl_k_sem_init(sem, initial_count, limit);
 80021e8:	2201      	movs	r2, #1
 80021ea:	4611      	mov	r1, r2
 80021ec:	f006 fb46 	bl	800887c <z_impl_k_sem_init>
		LOG_DBG("Block %zu: bs: %zu count: %zu", i,
			layout[i].pages_size, layout[i].pages_count);
	}
#endif

	return flash_stm32_write_protection(dev, false);
 80021f0:	4629      	mov	r1, r5
 80021f2:	4620      	mov	r0, r4
}
 80021f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return flash_stm32_write_protection(dev, false);
 80021f8:	f7ff bfc0 	b.w	800217c <flash_stm32_write_protection>
 80021fc:	4b07      	ldr	r3, [pc, #28]	; (800221c <stm32_flash_init+0x50>)
 80021fe:	4808      	ldr	r0, [pc, #32]	; (8002220 <stm32_flash_init+0x54>)
		LOG_ERR("Failed to enable clock");
 8002200:	4908      	ldr	r1, [pc, #32]	; (8002224 <stm32_flash_init+0x58>)
 8002202:	1ac0      	subs	r0, r0, r3
 8002204:	08c0      	lsrs	r0, r0, #3
 8002206:	0180      	lsls	r0, r0, #6
 8002208:	f040 0001 	orr.w	r0, r0, #1
 800220c:	f004 fa37 	bl	800667e <log_string_sync>
}
 8002210:	f06f 0004 	mvn.w	r0, #4
 8002214:	bd38      	pop	{r3, r4, r5, pc}
 8002216:	bf00      	nop
 8002218:	080095b0 	.word	0x080095b0
 800221c:	08008d1c 	.word	0x08008d1c
 8002220:	08008d2c 	.word	0x08008d2c
 8002224:	0800964a 	.word	0x0800964a

08002228 <flash_stm32_page_layout>:
		.pages_size = 0,
	};

	ARG_UNUSED(dev);

	if (stm32l4_flash_layout.pages_count == 0) {
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <flash_stm32_page_layout+0x30>)
 800222a:	6818      	ldr	r0, [r3, #0]
{
 800222c:	b530      	push	{r4, r5, lr}
	if (stm32l4_flash_layout.pages_count == 0) {
 800222e:	b970      	cbnz	r0, 800224e <flash_stm32_page_layout+0x26>
		stm32l4_flash_layout.pages_count = FLASH_SIZE / FLASH_PAGE_SIZE;
 8002230:	480a      	ldr	r0, [pc, #40]	; (800225c <flash_stm32_page_layout+0x34>)
 8002232:	6800      	ldr	r0, [r0, #0]
 8002234:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002238:	b285      	uxth	r5, r0
 800223a:	42a5      	cmp	r5, r4
 800223c:	bf14      	ite	ne
 800223e:	f3c0 004e 	ubfxne	r0, r0, #1, #15
 8002242:	f44f 7000 	moveq.w	r0, #512	; 0x200
 8002246:	6018      	str	r0, [r3, #0]
		stm32l4_flash_layout.pages_size = FLASH_PAGE_SIZE;
 8002248:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800224c:	6058      	str	r0, [r3, #4]
	}

	*layout = &stm32l4_flash_layout;
 800224e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
 8002250:	2301      	movs	r3, #1
 8002252:	6013      	str	r3, [r2, #0]
}
 8002254:	bd30      	pop	{r4, r5, pc}
 8002256:	bf00      	nop
 8002258:	20000740 	.word	0x20000740
 800225c:	1fff75e0 	.word	0x1fff75e0

08002260 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 8002260:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <elapsed+0x30>)
 8002262:	689a      	ldr	r2, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8002264:	6819      	ldr	r1, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
 8002266:	6898      	ldr	r0, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8002268:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <elapsed+0x34>)
 800226a:	f411 3f80 	tst.w	r1, #65536	; 0x10000
{
 800226e:	b510      	push	{r4, lr}
 8002270:	4909      	ldr	r1, [pc, #36]	; (8002298 <elapsed+0x38>)
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8002272:	d101      	bne.n	8002278 <elapsed+0x18>
	    || (val1 < val2)) {
 8002274:	4282      	cmp	r2, r0
 8002276:	d205      	bcs.n	8002284 <elapsed+0x24>
		overflow_cyc += last_load;
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	680c      	ldr	r4, [r1, #0]
 800227c:	4422      	add	r2, r4
 800227e:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8002280:	4a03      	ldr	r2, [pc, #12]	; (8002290 <elapsed+0x30>)
 8002282:	6812      	ldr	r2, [r2, #0]
	}

	return (last_load - val2) + overflow_cyc;
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	680a      	ldr	r2, [r1, #0]
 8002288:	4413      	add	r3, r2
}
 800228a:	1a18      	subs	r0, r3, r0
 800228c:	bd10      	pop	{r4, pc}
 800228e:	bf00      	nop
 8002290:	e000e010 	.word	0xe000e010
 8002294:	20000754 	.word	0x20000754
 8002298:	20000750 	.word	0x20000750

0800229c <z_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void z_clock_isr(void *arg)
{
 800229c:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	uint32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
 800229e:	f7ff ffdf 	bl	8002260 <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
 80022a2:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <z_clock_isr+0x38>)
 80022a4:	4a0c      	ldr	r2, [pc, #48]	; (80022d8 <z_clock_isr+0x3c>)
 80022a6:	6818      	ldr	r0, [r3, #0]
 80022a8:	6811      	ldr	r1, [r2, #0]
 80022aa:	4408      	add	r0, r1
 80022ac:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 80022b2:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <z_clock_isr+0x40>)
 80022b4:	6811      	ldr	r1, [r2, #0]
 80022b6:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80022ba:	1a40      	subs	r0, r0, r1
 80022bc:	fbb0 f0f3 	udiv	r0, r0, r3
		announced_cycles += dticks * CYC_PER_TICK;
 80022c0:	fb03 1300 	mla	r3, r3, r0, r1
 80022c4:	6013      	str	r3, [r2, #0]
		z_clock_announce(dticks);
 80022c6:	f003 ffb7 	bl	8006238 <z_clock_announce>
	} else {
		z_clock_announce(1);
	}
	z_arm_int_exit();
}
 80022ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 80022ce:	f000 bc47 	b.w	8002b60 <z_arm_exc_exit>
 80022d2:	bf00      	nop
 80022d4:	20000754 	.word	0x20000754
 80022d8:	2000074c 	.word	0x2000074c
 80022dc:	20000748 	.word	0x20000748

080022e0 <z_clock_driver_init>:
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e0:	4b09      	ldr	r3, [pc, #36]	; (8002308 <z_clock_driver_init+0x28>)
 80022e2:	2210      	movs	r2, #16
 80022e4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
int z_clock_driver_init(const struct device *device)
{
	ARG_UNUSED(device);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 80022e8:	4b08      	ldr	r3, [pc, #32]	; (800230c <z_clock_driver_init+0x2c>)
 80022ea:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80022ee:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 80022f0:	4b07      	ldr	r3, [pc, #28]	; (8002310 <z_clock_driver_init+0x30>)
 80022f2:	2000      	movs	r0, #0
 80022f4:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 80022f6:	4b07      	ldr	r3, [pc, #28]	; (8002314 <z_clock_driver_init+0x34>)
 80022f8:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 80022fa:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	f042 0207 	orr.w	r2, r2, #7
 8002302:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000ed00 	.word	0xe000ed00
 800230c:	20000750 	.word	0x20000750
 8002310:	20000754 	.word	0x20000754
 8002314:	e000e010 	.word	0xe000e010

08002318 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
 8002318:	b570      	push	{r4, r5, r6, lr}
 800231a:	4d2a      	ldr	r5, [pc, #168]	; (80023c4 <z_clock_set_timeout+0xac>)
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_IDLE) && idle
 800231c:	b151      	cbz	r1, 8002334 <z_clock_set_timeout+0x1c>
	    && ticks == K_TICKS_FOREVER) {
 800231e:	1c42      	adds	r2, r0, #1
 8002320:	d10c      	bne.n	800233c <z_clock_set_timeout+0x24>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8002322:	4a29      	ldr	r2, [pc, #164]	; (80023c8 <z_clock_set_timeout+0xb0>)
 8002324:	6813      	ldr	r3, [r2, #0]
 8002326:	f023 0301 	bic.w	r3, r3, #1
 800232a:	6013      	str	r3, [r2, #0]
		last_load = TIMER_STOPPED;
 800232c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002330:	602b      	str	r3, [r5, #0]
	SysTick->LOAD = last_load - 1;
	SysTick->VAL = 0; /* resets timer to last_load */

	k_spin_unlock(&lock, key);
#endif
}
 8002332:	bd70      	pop	{r4, r5, r6, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8002334:	1c43      	adds	r3, r0, #1
 8002336:	bf08      	it	eq
 8002338:	f44f 6003 	moveq.w	r0, #2096	; 0x830
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 800233c:	1e44      	subs	r4, r0, #1
 800233e:	2c00      	cmp	r4, #0
 8002340:	dd27      	ble.n	8002392 <z_clock_set_timeout+0x7a>
 8002342:	f5b4 6f03 	cmp.w	r4, #2096	; 0x830
 8002346:	bfa8      	it	ge
 8002348:	f44f 6403 	movge.w	r4, #2096	; 0x830
	__asm__ volatile(
 800234c:	f04f 0310 	mov.w	r3, #16
 8002350:	f3ef 8611 	mrs	r6, BASEPRI
 8002354:	f383 8811 	msr	BASEPRI, r3
 8002358:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 800235c:	f7ff ff80 	bl	8002260 <elapsed>
	cycle_count += pending;
 8002360:	4b1a      	ldr	r3, [pc, #104]	; (80023cc <z_clock_set_timeout+0xb4>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4410      	add	r0, r2
 8002366:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
 8002368:	4b19      	ldr	r3, [pc, #100]	; (80023d0 <z_clock_set_timeout+0xb8>)
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 800236e:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <z_clock_set_timeout+0xbc>)
 8002370:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 8002372:	1ac1      	subs	r1, r0, r3
 8002374:	d50f      	bpl.n	8002396 <z_clock_set_timeout+0x7e>
		last_load = MIN_DELAY;
 8002376:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = MAX_CYCLES;
 800237a:	602b      	str	r3, [r5, #0]
	SysTick->LOAD = last_load - 1;
 800237c:	682b      	ldr	r3, [r5, #0]
 800237e:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <z_clock_set_timeout+0xb0>)
 8002380:	3b01      	subs	r3, #1
 8002382:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8002384:	2300      	movs	r3, #0
 8002386:	6093      	str	r3, [r2, #8]
	__asm__ volatile(
 8002388:	f386 8811 	msr	BASEPRI, r6
 800238c:	f3bf 8f6f 	isb	sy
 8002390:	e7cf      	b.n	8002332 <z_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8002392:	2400      	movs	r4, #0
 8002394:	e7da      	b.n	800234c <z_clock_set_timeout+0x34>
		delay = ticks * CYC_PER_TICK;
 8002396:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
		delay += unannounced;
 800239a:	fb02 1404 	mla	r4, r2, r4, r1
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 800239e:	f504 54f9 	add.w	r4, r4, #7968	; 0x1f20
		delay -= unannounced;
 80023a2:	1a18      	subs	r0, r3, r0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 80023a4:	341f      	adds	r4, #31
 80023a6:	fbb4 f4f2 	udiv	r4, r4, r2
		delay -= unannounced;
 80023aa:	fb02 0004 	mla	r0, r2, r4, r0
		delay = MAX(delay, MIN_DELAY);
 80023ae:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80023b2:	d904      	bls.n	80023be <z_clock_set_timeout+0xa6>
		if (delay > MAX_CYCLES) {
 80023b4:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <z_clock_set_timeout+0xc0>)
 80023b6:	4298      	cmp	r0, r3
 80023b8:	d8df      	bhi.n	800237a <z_clock_set_timeout+0x62>
			last_load = delay;
 80023ba:	6028      	str	r0, [r5, #0]
 80023bc:	e7de      	b.n	800237c <z_clock_set_timeout+0x64>
		delay = MAX(delay, MIN_DELAY);
 80023be:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80023c2:	e7fa      	b.n	80023ba <z_clock_set_timeout+0xa2>
 80023c4:	20000750 	.word	0x20000750
 80023c8:	e000e010 	.word	0xe000e010
 80023cc:	2000074c 	.word	0x2000074c
 80023d0:	20000754 	.word	0x20000754
 80023d4:	20000748 	.word	0x20000748
 80023d8:	00ffdc00 	.word	0x00ffdc00

080023dc <z_clock_elapsed>:

uint32_t z_clock_elapsed(void)
{
 80023dc:	b510      	push	{r4, lr}
	__asm__ volatile(
 80023de:	f04f 0310 	mov.w	r3, #16
 80023e2:	f3ef 8411 	mrs	r4, BASEPRI
 80023e6:	f383 8811 	msr	BASEPRI, r3
 80023ea:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 80023ee:	f7ff ff37 	bl	8002260 <elapsed>
 80023f2:	4b07      	ldr	r3, [pc, #28]	; (8002410 <z_clock_elapsed+0x34>)
 80023f4:	4a07      	ldr	r2, [pc, #28]	; (8002414 <z_clock_elapsed+0x38>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6812      	ldr	r2, [r2, #0]
 80023fa:	1a9b      	subs	r3, r3, r2
 80023fc:	4403      	add	r3, r0
	__asm__ volatile(
 80023fe:	f384 8811 	msr	BASEPRI, r4
 8002402:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
 8002406:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800240a:	fbb3 f0f0 	udiv	r0, r3, r0
 800240e:	bd10      	pop	{r4, pc}
 8002410:	2000074c 	.word	0x2000074c
 8002414:	20000748 	.word	0x20000748

08002418 <z_timer_cycle_get_32>:

uint32_t z_timer_cycle_get_32(void)
{
 8002418:	b510      	push	{r4, lr}
	__asm__ volatile(
 800241a:	f04f 0310 	mov.w	r3, #16
 800241e:	f3ef 8411 	mrs	r4, BASEPRI
 8002422:	f383 8811 	msr	BASEPRI, r3
 8002426:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = elapsed() + cycle_count;
 800242a:	f7ff ff19 	bl	8002260 <elapsed>
 800242e:	4b04      	ldr	r3, [pc, #16]	; (8002440 <z_timer_cycle_get_32+0x28>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4418      	add	r0, r3
	__asm__ volatile(
 8002434:	f384 8811 	msr	BASEPRI, r4
 8002438:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
 800243c:	bd10      	pop	{r4, pc}
 800243e:	bf00      	nop
 8002440:	2000074c 	.word	0x2000074c

08002444 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8002444:	4a09      	ldr	r2, [pc, #36]	; (800246c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8002446:	490a      	ldr	r1, [pc, #40]	; (8002470 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8002448:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 800244a:	6809      	ldr	r1, [r1, #0]
 800244c:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800244e:	4909      	ldr	r1, [pc, #36]	; (8002474 <arch_swap+0x30>)
	_current->arch.basepri = key;
 8002450:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8002452:	684b      	ldr	r3, [r1, #4]
 8002454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002458:	604b      	str	r3, [r1, #4]
 800245a:	2300      	movs	r3, #0
 800245c:	f383 8811 	msr	BASEPRI, r3
 8002460:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8002464:	6893      	ldr	r3, [r2, #8]
}
 8002466:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	20000834 	.word	0x20000834
 8002470:	0800917c 	.word	0x0800917c
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8002478:	4912      	ldr	r1, [pc, #72]	; (80024c4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 800247a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 800247c:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
 8002480:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8002482:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8002486:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 800248a:	2010      	movs	r0, #16
    msr BASEPRI, r0
 800248c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8002490:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8002494:	4f0c      	ldr	r7, [pc, #48]	; (80024c8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8002496:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 800249a:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
 800249c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 800249e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 80024a0:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
 80024a2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 80024a4:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 80024a6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 80024aa:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 80024ac:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 80024ae:	f000 fb9f 	bl	8002bf0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 80024b2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 80024b6:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
 80024ba:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 80024be:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
 80024c2:	4770      	bx	lr
    ldr r1, =_kernel
 80024c4:	20000834 	.word	0x20000834
    ldr v4, =_SCS_ICSR
 80024c8:	e000ed04 	.word	0xe000ed04

080024cc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
 80024cc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 80024d0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 80024d2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 80024d6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 80024da:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 80024dc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 80024e0:	2902      	cmp	r1, #2
    beq _oops
 80024e2:	d0ff      	beq.n	80024e4 <_oops>

080024e4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 80024e4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 80024e6:	f004 fb88 	bl	8006bfa <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 80024ea:	bd01      	pop	{r0, pc}

080024ec <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 80024ec:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	db08      	blt.n	8002504 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024f2:	2201      	movs	r2, #1
 80024f4:	f000 001f 	and.w	r0, r0, #31
 80024f8:	fa02 f000 	lsl.w	r0, r2, r0
 80024fc:	095b      	lsrs	r3, r3, #5
 80024fe:	4a02      	ldr	r2, [pc, #8]	; (8002508 <arch_irq_enable+0x1c>)
 8002500:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	e000e100 	.word	0xe000e100

0800250c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 800250c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 800250e:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002510:	bfa8      	it	ge
 8002512:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
 8002516:	f101 0101 	add.w	r1, r1, #1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251a:	bfb8      	it	lt
 800251c:	4b06      	ldrlt	r3, [pc, #24]	; (8002538 <z_arm_irq_priority_set+0x2c>)
 800251e:	ea4f 1101 	mov.w	r1, r1, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002522:	bfac      	ite	ge
 8002524:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002528:	f000 000f 	andlt.w	r0, r0, #15
 800252c:	b2c9      	uxtb	r1, r1
 800252e:	bfb4      	ite	lt
 8002530:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002532:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
 8002536:	4770      	bx	lr
 8002538:	e000ed14 	.word	0xe000ed14

0800253c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 800253c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8002540:	9b00      	ldr	r3, [sp, #0]
 8002542:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 8002546:	490a      	ldr	r1, [pc, #40]	; (8002570 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
 8002548:	9b01      	ldr	r3, [sp, #4]
 800254a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 800254e:	9b02      	ldr	r3, [sp, #8]
 8002550:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 8002554:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8002558:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800255c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 8002560:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8002564:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8002566:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 8002568:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
 800256a:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	080063cf 	.word	0x080063cf

08002574 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8002574:	4a0b      	ldr	r2, [pc, #44]	; (80025a4 <z_check_thread_stack_fail+0x30>)
{
 8002576:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 8002578:	6890      	ldr	r0, [r2, #8]

	if (!thread) {
 800257a:	b190      	cbz	r0, 80025a2 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 800257c:	f113 0f16 	cmn.w	r3, #22
 8002580:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8002582:	d005      	beq.n	8002590 <z_check_thread_stack_fail+0x1c>
 8002584:	f1a0 0220 	sub.w	r2, r0, #32
 8002588:	429a      	cmp	r2, r3
 800258a:	d806      	bhi.n	800259a <z_check_thread_stack_fail+0x26>
 800258c:	4283      	cmp	r3, r0
 800258e:	d204      	bcs.n	800259a <z_check_thread_stack_fail+0x26>
 8002590:	4281      	cmp	r1, r0
 8002592:	bf2c      	ite	cs
 8002594:	2100      	movcs	r1, #0
 8002596:	2101      	movcc	r1, #1
 8002598:	e000      	b.n	800259c <z_check_thread_stack_fail+0x28>
 800259a:	2100      	movs	r1, #0
 800259c:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 800259e:	bf08      	it	eq
 80025a0:	2000      	moveq	r0, #0
}
 80025a2:	4770      	bx	lr
 80025a4:	20000834 	.word	0x20000834

080025a8 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 80025a8:	b508      	push	{r3, lr}
 80025aa:	4604      	mov	r4, r0
 80025ac:	460e      	mov	r6, r1
 80025ae:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
 80025b0:	f000 fb12 	bl	8002bd8 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 80025b4:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <arch_switch_to_main_thread+0x30>)
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 80025b6:	4620      	mov	r0, r4
	_current = main_thread;
 80025b8:	609c      	str	r4, [r3, #8]
	z_arm_configure_dynamic_mpu_regions(main_thread);
 80025ba:	f000 fb19 	bl	8002bf0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 80025be:	4628      	mov	r0, r5
 80025c0:	f386 8809 	msr	PSP, r6
 80025c4:	2100      	movs	r1, #0
 80025c6:	b663      	cpsie	if
 80025c8:	f381 8811 	msr	BASEPRI, r1
 80025cc:	f3bf 8f6f 	isb	sy
 80025d0:	2200      	movs	r2, #0
 80025d2:	2300      	movs	r3, #0
 80025d4:	f003 fefb 	bl	80063ce <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 80025d8:	20000834 	.word	0x20000834

080025dc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 80025dc:	4901      	ldr	r1, [pc, #4]	; (80025e4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 80025de:	2210      	movs	r2, #16
	str	r2, [r1]
 80025e0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 80025e2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 80025e4:	e000ed10 	.word	0xe000ed10

080025e8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 80025e8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 80025ea:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 80025ec:	f380 8811 	msr	BASEPRI, r0
	isb
 80025f0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 80025f4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 80025f8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 80025fa:	b662      	cpsie	i
	isb
 80025fc:	f3bf 8f6f 	isb	sy

	bx	lr
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop

08002604 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8002604:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002606:	4606      	mov	r6, r0

	if (esf != NULL) {
 8002608:	460c      	mov	r4, r1
 800260a:	b301      	cbz	r1, 800264e <z_arm_fatal_error+0x4a>
 800260c:	4b13      	ldr	r3, [pc, #76]	; (800265c <z_arm_fatal_error+0x58>)
 800260e:	4d14      	ldr	r5, [pc, #80]	; (8002660 <z_arm_fatal_error+0x5c>)
 8002610:	1aed      	subs	r5, r5, r3
 8002612:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8002614:	688b      	ldr	r3, [r1, #8]
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	01ad      	lsls	r5, r5, #6
 800261a:	f045 0501 	orr.w	r5, r5, #1
 800261e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8002622:	4628      	mov	r0, r5
 8002624:	490f      	ldr	r1, [pc, #60]	; (8002664 <z_arm_fatal_error+0x60>)
 8002626:	f004 f82a 	bl	800667e <log_string_sync>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 800262a:	6963      	ldr	r3, [r4, #20]
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 8002632:	490d      	ldr	r1, [pc, #52]	; (8002668 <z_arm_fatal_error+0x64>)
 8002634:	4628      	mov	r0, r5
 8002636:	f004 f822 	bl	800667e <log_string_sync>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 800263a:	69e2      	ldr	r2, [r4, #28]
 800263c:	490b      	ldr	r1, [pc, #44]	; (800266c <z_arm_fatal_error+0x68>)
 800263e:	4628      	mov	r0, r5
 8002640:	f004 f81d 	bl	800667e <log_string_sync>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 8002644:	69a2      	ldr	r2, [r4, #24]
 8002646:	490a      	ldr	r1, [pc, #40]	; (8002670 <z_arm_fatal_error+0x6c>)
 8002648:	4628      	mov	r0, r5
 800264a:	f004 f818 	bl	800667e <log_string_sync>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 800264e:	4621      	mov	r1, r4
 8002650:	4630      	mov	r0, r6
}
 8002652:	b002      	add	sp, #8
 8002654:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
 8002658:	f002 be3a 	b.w	80052d0 <z_fatal_error>
 800265c:	08008d1c 	.word	0x08008d1c
 8002660:	08008d64 	.word	0x08008d64
 8002664:	08009690 	.word	0x08009690
 8002668:	080096bf 	.word	0x080096bf
 800266c:	080096ee 	.word	0x080096ee
 8002670:	080096fd 	.word	0x080096fd

08002674 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8002674:	bf30      	wfi
    b z_SysNmiOnReset
 8002676:	f7ff bffd 	b.w	8002674 <z_SysNmiOnReset>
 800267a:	bf00      	nop

0800267c <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 800267c:	4a0e      	ldr	r2, [pc, #56]	; (80026b8 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 800267e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8002680:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <z_arm_prep_c+0x40>)
 8002682:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8002686:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002688:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800268c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8002690:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002694:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800269c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 80026a0:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80026a4:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 80026a8:	f002 fe6e 	bl	8005388 <z_bss_zero>
	z_data_copy();
 80026ac:	f002 fe76 	bl	800539c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 80026b0:	f000 fa64 	bl	8002b7c <z_arm_interrupt_init>
	z_cstart();
 80026b4:	f002 feb0 	bl	8005418 <z_cstart>
 80026b8:	08000000 	.word	0x08000000
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 80026c0:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 80026c2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 80026c6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 80026ca:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 80026ce:	4904      	ldr	r1, [pc, #16]	; (80026e0 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 80026d0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 80026d2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 80026d4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 80026d6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 80026da:	4902      	ldr	r1, [pc, #8]	; (80026e4 <_isr_wrapper+0x24>)
	bx r1
 80026dc:	4708      	bx	r1
 80026de:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 80026e0:	08008a8c 	.word	0x08008a8c
	ldr r1, =z_arm_int_exit
 80026e4:	08002b61 	.word	0x08002b61

080026e8 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80026e8:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80026ea:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 80026ee:	4808      	ldr	r0, [pc, #32]	; (8002710 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 80026f0:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 80026f4:	1840      	adds	r0, r0, r1
    msr PSP, r0
 80026f6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 80026fa:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 80026fe:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8002700:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8002702:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8002706:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 800270a:	f7ff ffb7 	bl	800267c <z_arm_prep_c>
 800270e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8002710:	20001200 	.word	0x20001200

08002714 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8002714:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8002718:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 800271c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 800271e:	4672      	mov	r2, lr
	bl z_arm_fault
 8002720:	f000 f948 	bl	80029b4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 8002724:	bd01      	pop	{r0, pc}
 8002726:	bf00      	nop

08002728 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
 8002728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800272c:	4b33      	ldr	r3, [pc, #204]	; (80027fc <mem_manage_fault+0xd4>)
 800272e:	4c34      	ldr	r4, [pc, #208]	; (8002800 <mem_manage_fault+0xd8>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8002730:	4d34      	ldr	r5, [pc, #208]	; (8002804 <mem_manage_fault+0xdc>)
 8002732:	1ae4      	subs	r4, r4, r3
 8002734:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
 8002736:	01a4      	lsls	r4, r4, #6
 8002738:	f044 0901 	orr.w	r9, r4, #1
{
 800273c:	4607      	mov	r7, r0
 800273e:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
 8002740:	4648      	mov	r0, r9
 8002742:	4931      	ldr	r1, [pc, #196]	; (8002808 <mem_manage_fault+0xe0>)
{
 8002744:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
 8002746:	f003 ff9a 	bl	800667e <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 800274a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800274c:	06d0      	lsls	r0, r2, #27
 800274e:	d503      	bpl.n	8002758 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
 8002750:	492e      	ldr	r1, [pc, #184]	; (800280c <mem_manage_fault+0xe4>)
 8002752:	4648      	mov	r0, r9
 8002754:	f003 ff93 	bl	800667e <log_string_sync>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8002758:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800275a:	0719      	lsls	r1, r3, #28
 800275c:	d504      	bpl.n	8002768 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
 800275e:	492c      	ldr	r1, [pc, #176]	; (8002810 <mem_manage_fault+0xe8>)
 8002760:	f044 0001 	orr.w	r0, r4, #1
 8002764:	f003 ff8b 	bl	800667e <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8002768:	4d26      	ldr	r5, [pc, #152]	; (8002804 <mem_manage_fault+0xdc>)
 800276a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800276c:	079a      	lsls	r2, r3, #30
 800276e:	d535      	bpl.n	80027dc <mem_manage_fault+0xb4>
		PR_FAULT_INFO("  Data Access Violation");
 8002770:	f044 0a01 	orr.w	sl, r4, #1
 8002774:	4927      	ldr	r1, [pc, #156]	; (8002814 <mem_manage_fault+0xec>)
 8002776:	4650      	mov	r0, sl
 8002778:	f003 ff81 	bl	800667e <log_string_sync>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
 800277c:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8002780:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002782:	061b      	lsls	r3, r3, #24
 8002784:	d50b      	bpl.n	800279e <mem_manage_fault+0x76>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 8002786:	4924      	ldr	r1, [pc, #144]	; (8002818 <mem_manage_fault+0xf0>)
 8002788:	464a      	mov	r2, r9
 800278a:	4650      	mov	r0, sl
 800278c:	f003 ff77 	bl	800667e <log_string_sync>
			if (from_hard_fault) {
 8002790:	f1b8 0f00 	cmp.w	r8, #0
 8002794:	d003      	beq.n	800279e <mem_manage_fault+0x76>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8002796:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002798:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800279c:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 800279e:	4d19      	ldr	r5, [pc, #100]	; (8002804 <mem_manage_fault+0xdc>)
 80027a0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80027a2:	07d0      	lsls	r0, r2, #31
 80027a4:	d504      	bpl.n	80027b0 <mem_manage_fault+0x88>
		PR_FAULT_INFO("  Instruction Access Violation");
 80027a6:	491d      	ldr	r1, [pc, #116]	; (800281c <mem_manage_fault+0xf4>)
 80027a8:	f044 0001 	orr.w	r0, r4, #1
 80027ac:	f003 ff67 	bl	800667e <log_string_sync>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 80027b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80027b2:	0699      	lsls	r1, r3, #26
 80027b4:	d504      	bpl.n	80027c0 <mem_manage_fault+0x98>
		PR_FAULT_INFO(
 80027b6:	491a      	ldr	r1, [pc, #104]	; (8002820 <mem_manage_fault+0xf8>)
 80027b8:	f044 0001 	orr.w	r0, r4, #1
 80027bc:	f003 ff5f 	bl	800667e <log_string_sync>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
 80027c0:	4b10      	ldr	r3, [pc, #64]	; (8002804 <mem_manage_fault+0xdc>)
 80027c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027c4:	06d2      	lsls	r2, r2, #27
 80027c6:	d40c      	bmi.n	80027e2 <mem_manage_fault+0xba>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80027c8:	2000      	movs	r0, #0
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 80027ca:	4a0e      	ldr	r2, [pc, #56]	; (8002804 <mem_manage_fault+0xdc>)
 80027cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80027ce:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80027d2:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
 80027d4:	2300      	movs	r3, #0
 80027d6:	7033      	strb	r3, [r6, #0]

	return reason;
}
 80027d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t mmfar = -EINVAL;
 80027dc:	f06f 0915 	mvn.w	r9, #21
 80027e0:	e7dd      	b.n	800279e <mem_manage_fault+0x76>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	051b      	lsls	r3, r3, #20
 80027e6:	d5ef      	bpl.n	80027c8 <mem_manage_fault+0xa0>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 80027e8:	4639      	mov	r1, r7
 80027ea:	4648      	mov	r0, r9
 80027ec:	f7ff fec2 	bl	8002574 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 80027f0:	2800      	cmp	r0, #0
 80027f2:	d0e9      	beq.n	80027c8 <mem_manage_fault+0xa0>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80027f4:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 80027f8:	2002      	movs	r0, #2
 80027fa:	e7e6      	b.n	80027ca <mem_manage_fault+0xa2>
 80027fc:	08008d1c 	.word	0x08008d1c
 8002800:	08008d64 	.word	0x08008d64
 8002804:	e000ed00 	.word	0xe000ed00
 8002808:	0800972b 	.word	0x0800972b
 800280c:	08009741 	.word	0x08009741
 8002810:	08009774 	.word	0x08009774
 8002814:	08009787 	.word	0x08009787
 8002818:	0800979f 	.word	0x0800979f
 800281c:	080097b5 	.word	0x080097b5
 8002820:	080097d4 	.word	0x080097d4

08002824 <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 8002824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002828:	4b29      	ldr	r3, [pc, #164]	; (80028d0 <bus_fault.isra.0+0xac>)
 800282a:	4c2a      	ldr	r4, [pc, #168]	; (80028d4 <bus_fault.isra.0+0xb0>)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 800282c:	4d2a      	ldr	r5, [pc, #168]	; (80028d8 <bus_fault.isra.0+0xb4>)
 800282e:	1ae4      	subs	r4, r4, r3
 8002830:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
 8002832:	01a4      	lsls	r4, r4, #6
 8002834:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
 8002838:	4607      	mov	r7, r0
 800283a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
 800283c:	4640      	mov	r0, r8
 800283e:	4927      	ldr	r1, [pc, #156]	; (80028dc <bus_fault.isra.0+0xb8>)
 8002840:	f003 ff1d 	bl	800667e <log_string_sync>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8002844:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002846:	04d1      	lsls	r1, r2, #19
 8002848:	d503      	bpl.n	8002852 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
 800284a:	4925      	ldr	r1, [pc, #148]	; (80028e0 <bus_fault.isra.0+0xbc>)
 800284c:	4640      	mov	r0, r8
 800284e:	f003 ff16 	bl	800667e <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8002852:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002854:	051a      	lsls	r2, r3, #20
 8002856:	d504      	bpl.n	8002862 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
 8002858:	4922      	ldr	r1, [pc, #136]	; (80028e4 <bus_fault.isra.0+0xc0>)
 800285a:	f044 0001 	orr.w	r0, r4, #1
 800285e:	f003 ff0e 	bl	800667e <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8002862:	4d1d      	ldr	r5, [pc, #116]	; (80028d8 <bus_fault.isra.0+0xb4>)
 8002864:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002866:	059b      	lsls	r3, r3, #22
 8002868:	d512      	bpl.n	8002890 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
 800286a:	f044 0801 	orr.w	r8, r4, #1
 800286e:	4640      	mov	r0, r8
 8002870:	491d      	ldr	r1, [pc, #116]	; (80028e8 <bus_fault.isra.0+0xc4>)
 8002872:	f003 ff04 	bl	800667e <log_string_sync>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 8002876:	6baa      	ldr	r2, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8002878:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800287a:	0418      	lsls	r0, r3, #16
 800287c:	d508      	bpl.n	8002890 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 800287e:	491b      	ldr	r1, [pc, #108]	; (80028ec <bus_fault.isra.0+0xc8>)
 8002880:	4640      	mov	r0, r8
 8002882:	f003 fefc 	bl	800667e <log_string_sync>
			if (from_hard_fault) {
 8002886:	b11f      	cbz	r7, 8002890 <bus_fault.isra.0+0x6c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8002888:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800288a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800288e:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8002890:	4d11      	ldr	r5, [pc, #68]	; (80028d8 <bus_fault.isra.0+0xb4>)
 8002892:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002894:	0559      	lsls	r1, r3, #21
 8002896:	d504      	bpl.n	80028a2 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
 8002898:	4915      	ldr	r1, [pc, #84]	; (80028f0 <bus_fault.isra.0+0xcc>)
 800289a:	f044 0001 	orr.w	r0, r4, #1
 800289e:	f003 feee 	bl	800667e <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 80028a2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80028a4:	05da      	lsls	r2, r3, #23
 80028a6:	d50d      	bpl.n	80028c4 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
 80028a8:	4912      	ldr	r1, [pc, #72]	; (80028f4 <bus_fault.isra.0+0xd0>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 80028aa:	f044 0001 	orr.w	r0, r4, #1
 80028ae:	f003 fee6 	bl	800667e <log_string_sync>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 80028b2:	4a09      	ldr	r2, [pc, #36]	; (80028d8 <bus_fault.isra.0+0xb4>)
 80028b4:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
 80028b6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 80028b8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80028bc:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
 80028be:	7030      	strb	r0, [r6, #0]

	return reason;
}
 80028c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 80028c4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80028c6:	049b      	lsls	r3, r3, #18
 80028c8:	d5f3      	bpl.n	80028b2 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 80028ca:	490b      	ldr	r1, [pc, #44]	; (80028f8 <bus_fault.isra.0+0xd4>)
 80028cc:	e7ed      	b.n	80028aa <bus_fault.isra.0+0x86>
 80028ce:	bf00      	nop
 80028d0:	08008d1c 	.word	0x08008d1c
 80028d4:	08008d64 	.word	0x08008d64
 80028d8:	e000ed00 	.word	0xe000ed00
 80028dc:	08009803 	.word	0x08009803
 80028e0:	08009819 	.word	0x08009819
 80028e4:	08009774 	.word	0x08009774
 80028e8:	0800982a 	.word	0x0800982a
 80028ec:	08009843 	.word	0x08009843
 80028f0:	08009858 	.word	0x08009858
 80028f4:	08009873 	.word	0x08009873
 80028f8:	080097d4 	.word	0x080097d4

080028fc <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
 80028fc:	b570      	push	{r4, r5, r6, lr}
 80028fe:	4b23      	ldr	r3, [pc, #140]	; (800298c <usage_fault.isra.0+0x90>)
 8002900:	4c23      	ldr	r4, [pc, #140]	; (8002990 <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8002902:	4d24      	ldr	r5, [pc, #144]	; (8002994 <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
 8002904:	4924      	ldr	r1, [pc, #144]	; (8002998 <usage_fault.isra.0+0x9c>)
 8002906:	1ae4      	subs	r4, r4, r3
 8002908:	08e4      	lsrs	r4, r4, #3
 800290a:	01a4      	lsls	r4, r4, #6
 800290c:	f044 0601 	orr.w	r6, r4, #1
 8002910:	4630      	mov	r0, r6
 8002912:	f003 feb4 	bl	800667e <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8002916:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002918:	0193      	lsls	r3, r2, #6
 800291a:	d503      	bpl.n	8002924 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
 800291c:	491f      	ldr	r1, [pc, #124]	; (800299c <usage_fault.isra.0+0xa0>)
 800291e:	4630      	mov	r0, r6
 8002920:	f003 fead 	bl	800667e <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8002924:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002926:	01dd      	lsls	r5, r3, #7
 8002928:	d504      	bpl.n	8002934 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
 800292a:	491d      	ldr	r1, [pc, #116]	; (80029a0 <usage_fault.isra.0+0xa4>)
 800292c:	f044 0001 	orr.w	r0, r4, #1
 8002930:	f003 fea5 	bl	800667e <log_string_sync>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8002934:	4d17      	ldr	r5, [pc, #92]	; (8002994 <usage_fault.isra.0+0x98>)
 8002936:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002938:	0310      	lsls	r0, r2, #12
 800293a:	d504      	bpl.n	8002946 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
 800293c:	4919      	ldr	r1, [pc, #100]	; (80029a4 <usage_fault.isra.0+0xa8>)
 800293e:	f044 0001 	orr.w	r0, r4, #1
 8002942:	f003 fe9c 	bl	800667e <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8002946:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002948:	0359      	lsls	r1, r3, #13
 800294a:	d504      	bpl.n	8002956 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 800294c:	4916      	ldr	r1, [pc, #88]	; (80029a8 <usage_fault.isra.0+0xac>)
 800294e:	f044 0001 	orr.w	r0, r4, #1
 8002952:	f003 fe94 	bl	800667e <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8002956:	4d0f      	ldr	r5, [pc, #60]	; (8002994 <usage_fault.isra.0+0x98>)
 8002958:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800295a:	0392      	lsls	r2, r2, #14
 800295c:	d504      	bpl.n	8002968 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
 800295e:	4913      	ldr	r1, [pc, #76]	; (80029ac <usage_fault.isra.0+0xb0>)
 8002960:	f044 0001 	orr.w	r0, r4, #1
 8002964:	f003 fe8b 	bl	800667e <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8002968:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800296a:	03db      	lsls	r3, r3, #15
 800296c:	d504      	bpl.n	8002978 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 800296e:	4910      	ldr	r1, [pc, #64]	; (80029b0 <usage_fault.isra.0+0xb4>)
 8002970:	f044 0001 	orr.w	r0, r4, #1
 8002974:	f003 fe83 	bl	800667e <log_string_sync>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8002978:	4a06      	ldr	r2, [pc, #24]	; (8002994 <usage_fault.isra.0+0x98>)
 800297a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800297c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8002980:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8002984:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
 8002986:	2000      	movs	r0, #0
 8002988:	bd70      	pop	{r4, r5, r6, pc}
 800298a:	bf00      	nop
 800298c:	08008d1c 	.word	0x08008d1c
 8002990:	08008d64 	.word	0x08008d64
 8002994:	e000ed00 	.word	0xe000ed00
 8002998:	0800988b 	.word	0x0800988b
 800299c:	080098a3 	.word	0x080098a3
 80029a0:	080098b6 	.word	0x080098b6
 80029a4:	080098d0 	.word	0x080098d0
 80029a8:	080098ee 	.word	0x080098ee
 80029ac:	08009913 	.word	0x08009913
 80029b0:	0800992d 	.word	0x0800992d

080029b4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 80029b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80029b8:	4b57      	ldr	r3, [pc, #348]	; (8002b18 <z_arm_fault+0x164>)
 80029ba:	685e      	ldr	r6, [r3, #4]
{
 80029bc:	b08a      	sub	sp, #40	; 0x28
 80029be:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80029c0:	f3c6 0408 	ubfx	r4, r6, #0, #9
 80029c4:	2500      	movs	r5, #0
 80029c6:	f385 8811 	msr	BASEPRI, r5
 80029ca:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 80029ce:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 80029d2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80029d6:	d10d      	bne.n	80029f4 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 80029d8:	f002 030c 	and.w	r3, r2, #12
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d10b      	bne.n	80029f8 <z_arm_fault+0x44>
 80029e0:	484e      	ldr	r0, [pc, #312]	; (8002b1c <z_arm_fault+0x168>)
 80029e2:	4b4f      	ldr	r3, [pc, #316]	; (8002b20 <z_arm_fault+0x16c>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 80029e4:	494f      	ldr	r1, [pc, #316]	; (8002b24 <z_arm_fault+0x170>)
 80029e6:	1ac0      	subs	r0, r0, r3
 80029e8:	08c0      	lsrs	r0, r0, #3
 80029ea:	0180      	lsls	r0, r0, #6
 80029ec:	f040 0001 	orr.w	r0, r0, #1
 80029f0:	f003 fe45 	bl	800667e <log_string_sync>
		return NULL;
 80029f4:	462f      	mov	r7, r5
 80029f6:	e003      	b.n	8002a00 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 80029f8:	0712      	lsls	r2, r2, #28
 80029fa:	d401      	bmi.n	8002a00 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
 80029fc:	4607      	mov	r7, r0
			*nested_exc = true;
 80029fe:	2501      	movs	r5, #1
	*recoverable = false;
 8002a00:	2300      	movs	r3, #0
 8002a02:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
 8002a06:	1ee3      	subs	r3, r4, #3
 8002a08:	2b09      	cmp	r3, #9
 8002a0a:	d86b      	bhi.n	8002ae4 <z_arm_fault+0x130>
 8002a0c:	e8df f003 	tbb	[pc, r3]
 8002a10:	3d5d5905 	.word	0x3d5d5905
 8002a14:	6a6a6a6a 	.word	0x6a6a6a6a
 8002a18:	616a      	.short	0x616a
 8002a1a:	4b41      	ldr	r3, [pc, #260]	; (8002b20 <z_arm_fault+0x16c>)
 8002a1c:	4e3f      	ldr	r6, [pc, #252]	; (8002b1c <z_arm_fault+0x168>)
	PR_FAULT_INFO("***** HARD FAULT *****");
 8002a1e:	4942      	ldr	r1, [pc, #264]	; (8002b28 <z_arm_fault+0x174>)
 8002a20:	1af6      	subs	r6, r6, r3
 8002a22:	08f6      	lsrs	r6, r6, #3
 8002a24:	01b6      	lsls	r6, r6, #6
 8002a26:	f046 0601 	orr.w	r6, r6, #1
 8002a2a:	4630      	mov	r0, r6
 8002a2c:	f003 fe27 	bl	800667e <log_string_sync>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8002a30:	4b39      	ldr	r3, [pc, #228]	; (8002b18 <z_arm_fault+0x164>)
 8002a32:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
 8002a34:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8002a38:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
 8002a3c:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8002a40:	d005      	beq.n	8002a4e <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
 8002a42:	493a      	ldr	r1, [pc, #232]	; (8002b2c <z_arm_fault+0x178>)
 8002a44:	4630      	mov	r0, r6
	PR_FAULT_INFO(
 8002a46:	f003 fe1a 	bl	800667e <log_string_sync>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8002a4a:	2400      	movs	r4, #0
}
 8002a4c:	e020      	b.n	8002a90 <z_arm_fault+0xdc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8002a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	d51d      	bpl.n	8002a90 <z_arm_fault+0xdc>
		PR_EXC("  Fault escalation (see below)");
 8002a54:	4936      	ldr	r1, [pc, #216]	; (8002b30 <z_arm_fault+0x17c>)
 8002a56:	4630      	mov	r0, r6
 8002a58:	f003 fe11 	bl	800667e <log_string_sync>
		if (SCB_MMFSR != 0) {
 8002a5c:	4b35      	ldr	r3, [pc, #212]	; (8002b34 <z_arm_fault+0x180>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	b133      	cbz	r3, 8002a70 <z_arm_fault+0xbc>
			reason = mem_manage_fault(esf, 1, recoverable);
 8002a62:	f10d 0207 	add.w	r2, sp, #7
 8002a66:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 8002a68:	4638      	mov	r0, r7
 8002a6a:	f7ff fe5d 	bl	8002728 <mem_manage_fault>
 8002a6e:	e00e      	b.n	8002a8e <z_arm_fault+0xda>
		} else if (SCB_BFSR != 0) {
 8002a70:	4b31      	ldr	r3, [pc, #196]	; (8002b38 <z_arm_fault+0x184>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	b12b      	cbz	r3, 8002a82 <z_arm_fault+0xce>
			reason = bus_fault(esf, 1, recoverable);
 8002a76:	f10d 0107 	add.w	r1, sp, #7
 8002a7a:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 8002a7c:	f7ff fed2 	bl	8002824 <bus_fault.isra.0>
 8002a80:	e005      	b.n	8002a8e <z_arm_fault+0xda>
		} else if (SCB_UFSR != 0) {
 8002a82:	4b2e      	ldr	r3, [pc, #184]	; (8002b3c <z_arm_fault+0x188>)
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	b113      	cbz	r3, 8002a90 <z_arm_fault+0xdc>
			reason = usage_fault(esf);
 8002a8a:	f7ff ff37 	bl	80028fc <usage_fault.isra.0>
 8002a8e:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 8002a90:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002a94:	b993      	cbnz	r3, 8002abc <z_arm_fault+0x108>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8002a96:	2220      	movs	r2, #32
 8002a98:	4639      	mov	r1, r7
 8002a9a:	a802      	add	r0, sp, #8
 8002a9c:	f004 f8f7 	bl	8006c8e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 8002aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002aa2:	b39d      	cbz	r5, 8002b0c <z_arm_fault+0x158>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8002aa4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002aa8:	b922      	cbnz	r2, 8002ab4 <z_arm_fault+0x100>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8002aaa:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8002aae:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8002ab2:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 8002ab4:	a902      	add	r1, sp, #8
 8002ab6:	4620      	mov	r0, r4
 8002ab8:	f7ff fda4 	bl	8002604 <z_arm_fatal_error>
}
 8002abc:	b00a      	add	sp, #40	; 0x28
 8002abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
 8002ac2:	f10d 0207 	add.w	r2, sp, #7
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	e7ce      	b.n	8002a68 <z_arm_fault+0xb4>
		reason = bus_fault(esf, 0, recoverable);
 8002aca:	f10d 0107 	add.w	r1, sp, #7
 8002ace:	2000      	movs	r0, #0
 8002ad0:	e7d4      	b.n	8002a7c <z_arm_fault+0xc8>
 8002ad2:	4812      	ldr	r0, [pc, #72]	; (8002b1c <z_arm_fault+0x168>)
 8002ad4:	4b12      	ldr	r3, [pc, #72]	; (8002b20 <z_arm_fault+0x16c>)
	PR_FAULT_INFO(
 8002ad6:	491a      	ldr	r1, [pc, #104]	; (8002b40 <z_arm_fault+0x18c>)
 8002ad8:	1ac0      	subs	r0, r0, r3
 8002ada:	08c0      	lsrs	r0, r0, #3
 8002adc:	0180      	lsls	r0, r0, #6
 8002ade:	f040 0001 	orr.w	r0, r0, #1
 8002ae2:	e7b0      	b.n	8002a46 <z_arm_fault+0x92>
 8002ae4:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <z_arm_fault+0x16c>)
 8002ae6:	480d      	ldr	r0, [pc, #52]	; (8002b1c <z_arm_fault+0x168>)
	PR_FAULT_INFO("***** %s %d) *****",
 8002ae8:	4916      	ldr	r1, [pc, #88]	; (8002b44 <z_arm_fault+0x190>)
 8002aea:	4a17      	ldr	r2, [pc, #92]	; (8002b48 <z_arm_fault+0x194>)
 8002aec:	1ac0      	subs	r0, r0, r3
 8002aee:	08c0      	lsrs	r0, r0, #3
 8002af0:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
 8002af4:	ea4f 1080 	mov.w	r0, r0, lsl #6
 8002af8:	bf08      	it	eq
 8002afa:	460a      	moveq	r2, r1
 8002afc:	f1a4 0310 	sub.w	r3, r4, #16
 8002b00:	4912      	ldr	r1, [pc, #72]	; (8002b4c <z_arm_fault+0x198>)
 8002b02:	f040 0001 	orr.w	r0, r0, #1
 8002b06:	f003 fdba 	bl	800667e <log_string_sync>
 8002b0a:	e79e      	b.n	8002a4a <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8002b0c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002b10:	f023 0301 	bic.w	r3, r3, #1
 8002b14:	e7cd      	b.n	8002ab2 <z_arm_fault+0xfe>
 8002b16:	bf00      	nop
 8002b18:	e000ed00 	.word	0xe000ed00
 8002b1c:	08008d64 	.word	0x08008d64
 8002b20:	08008d1c 	.word	0x08008d1c
 8002b24:	08009986 	.word	0x08009986
 8002b28:	080099b1 	.word	0x080099b1
 8002b2c:	080099c8 	.word	0x080099c8
 8002b30:	080099e9 	.word	0x080099e9
 8002b34:	e000ed28 	.word	0xe000ed28
 8002b38:	e000ed29 	.word	0xe000ed29
 8002b3c:	e000ed2a 	.word	0xe000ed2a
 8002b40:	08009a08 	.word	0x08009a08
 8002b44:	08009958 	.word	0x08009958
 8002b48:	0800996d 	.word	0x0800996d
 8002b4c:	08009a3e 	.word	0x08009a3e

08002b50 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8002b50:	4a02      	ldr	r2, [pc, #8]	; (8002b5c <z_arm_fault_init+0xc>)
 8002b52:	6953      	ldr	r3, [r2, #20]
 8002b54:	f043 0310 	orr.w	r3, r3, #16
 8002b58:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 8002b5a:	4770      	bx	lr
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8002b60:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8002b62:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8002b64:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
 8002b66:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 8002b68:	d003      	beq.n	8002b72 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 8002b6a:	4903      	ldr	r1, [pc, #12]	; (8002b78 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8002b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8002b70:	600a      	str	r2, [r1, #0]

08002b72 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8002b72:	4770      	bx	lr
	ldr r3, =_kernel
 8002b74:	20000834 	.word	0x20000834
	ldr r1, =_SCS_ICSR
 8002b78:	e000ed04 	.word	0xe000ed04

08002b7c <z_arm_interrupt_init>:
 8002b7c:	4804      	ldr	r0, [pc, #16]	; (8002b90 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	2110      	movs	r1, #16
 8002b82:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8002b84:	3301      	adds	r3, #1
 8002b86:	2b52      	cmp	r3, #82	; 0x52
 8002b88:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8002b8c:	d1f9      	bne.n	8002b82 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8002b8e:	4770      	bx	lr
 8002b90:	e000e100 	.word	0xe000e100

08002b94 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
 8002b94:	b508      	push	{r3, lr}
	if (_current == thread) {
 8002b96:	4b0e      	ldr	r3, [pc, #56]	; (8002bd0 <z_impl_k_thread_abort+0x3c>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	4283      	cmp	r3, r0
 8002b9c:	d107      	bne.n	8002bae <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b9e:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8002ba2:	b193      	cbz	r3, 8002bca <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8002ba4:	4a0b      	ldr	r2, [pc, #44]	; (8002bd4 <z_impl_k_thread_abort+0x40>)
 8002ba6:	6853      	ldr	r3, [r2, #4]
 8002ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bac:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
 8002bae:	f002 ffaf 	bl	8005b10 <z_thread_single_abort>
	__asm__ volatile(
 8002bb2:	f04f 0310 	mov.w	r3, #16
 8002bb6:	f3ef 8011 	mrs	r0, BASEPRI
 8002bba:	f383 8811 	msr	BASEPRI, r3
 8002bbe:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
 8002bc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
 8002bc6:	f005 bdad 	b.w	8008724 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
 8002bca:	f003 fa49 	bl	8006060 <z_self_abort>
 8002bce:	bf00      	nop
 8002bd0:	20000834 	.word	0x20000834
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8002bd8:	4b02      	ldr	r3, [pc, #8]	; (8002be4 <z_arm_configure_static_mpu_regions+0xc>)
 8002bda:	4a03      	ldr	r2, [pc, #12]	; (8002be8 <z_arm_configure_static_mpu_regions+0x10>)
 8002bdc:	4803      	ldr	r0, [pc, #12]	; (8002bec <z_arm_configure_static_mpu_regions+0x14>)
 8002bde:	2101      	movs	r1, #1
 8002be0:	f000 b8b0 	b.w	8002d44 <arm_core_mpu_configure_static_mpu_regions>
 8002be4:	20018000 	.word	0x20018000
 8002be8:	20000000 	.word	0x20000000
 8002bec:	08008e74 	.word	0x08008e74

08002bf0 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 8002bf0:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 8002bf2:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
 8002bf4:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
 8002bf6:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 8002bf8:	4a04      	ldr	r2, [pc, #16]	; (8002c0c <z_arm_configure_dynamic_mpu_regions+0x1c>)
 8002bfa:	2120      	movs	r1, #32
 8002bfc:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8002c00:	4618      	mov	r0, r3
 8002c02:	2101      	movs	r1, #1
 8002c04:	f000 b8a8 	b.w	8002d58 <arm_core_mpu_configure_dynamic_mpu_regions>
 8002c08:	20000758 	.word	0x20000758
 8002c0c:	150b0000 	.word	0x150b0000

08002c10 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8002c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
 8002c12:	4f27      	ldr	r7, [pc, #156]	; (8002cb0 <mpu_configure_regions+0xa0>)
	int i;
	int reg_index = start_reg_index;
 8002c14:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
 8002c16:	2200      	movs	r2, #0
 8002c18:	428a      	cmp	r2, r1
 8002c1a:	da14      	bge.n	8002c46 <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
 8002c1c:	6844      	ldr	r4, [r0, #4]
 8002c1e:	2c00      	cmp	r4, #0
 8002c20:	d043      	beq.n	8002caa <mpu_configure_regions+0x9a>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
 8002c22:	b1c3      	cbz	r3, 8002c56 <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 8002c24:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 8002c28:	ea14 0f0c 	tst.w	r4, ip
 8002c2c:	d00d      	beq.n	8002c4a <mpu_configure_regions+0x3a>
 8002c2e:	4821      	ldr	r0, [pc, #132]	; (8002cb4 <mpu_configure_regions+0xa4>)
 8002c30:	4b21      	ldr	r3, [pc, #132]	; (8002cb8 <mpu_configure_regions+0xa8>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
 8002c32:	4922      	ldr	r1, [pc, #136]	; (8002cbc <mpu_configure_regions+0xac>)
 8002c34:	1ac0      	subs	r0, r0, r3
 8002c36:	08c0      	lsrs	r0, r0, #3
 8002c38:	0180      	lsls	r0, r0, #6
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 8002c3a:	f040 0001 	orr.w	r0, r0, #1
 8002c3e:	f003 fd1e 	bl	800667e <log_string_sync>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8002c42:	f06f 0515 	mvn.w	r5, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 8002c46:	4628      	mov	r0, r5
 8002c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
 8002c4a:	2c1f      	cmp	r4, #31
 8002c4c:	d9ef      	bls.n	8002c2e <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
 8002c4e:	6806      	ldr	r6, [r0, #0]
		&&
 8002c50:	ea1c 0f06 	tst.w	ip, r6
 8002c54:	d1eb      	bne.n	8002c2e <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 8002c56:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
 8002c58:	6806      	ldr	r6, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
 8002c5a:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8002c5e:	b2ed      	uxtb	r5, r5
 8002c60:	d914      	bls.n	8002c8c <mpu_configure_regions+0x7c>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
 8002c62:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8002c66:	d813      	bhi.n	8002c90 <mpu_configure_regions+0x80>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 8002c68:	3c01      	subs	r4, #1
 8002c6a:	fab4 f484 	clz	r4, r4
 8002c6e:	f1c4 041f 	rsb	r4, r4, #31
 8002c72:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 8002c74:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8002c76:	ea4c 0404 	orr.w	r4, ip, r4
 8002c7a:	d90b      	bls.n	8002c94 <mpu_configure_regions+0x84>
 8002c7c:	480d      	ldr	r0, [pc, #52]	; (8002cb4 <mpu_configure_regions+0xa4>)
 8002c7e:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <mpu_configure_regions+0xa8>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 8002c80:	490f      	ldr	r1, [pc, #60]	; (8002cc0 <mpu_configure_regions+0xb0>)
 8002c82:	1ac0      	subs	r0, r0, r3
 8002c84:	08c0      	lsrs	r0, r0, #3
 8002c86:	0180      	lsls	r0, r0, #6
 8002c88:	462a      	mov	r2, r5
 8002c8a:	e7d6      	b.n	8002c3a <mpu_configure_regions+0x2a>
		return REGION_32B;
 8002c8c:	2408      	movs	r4, #8
 8002c8e:	e7f1      	b.n	8002c74 <mpu_configure_regions+0x64>
		return REGION_4G;
 8002c90:	243e      	movs	r4, #62	; 0x3e
 8002c92:	e7ef      	b.n	8002c74 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8002c94:	f026 061f 	bic.w	r6, r6, #31
				| MPU_RBAR_VALID_Msk | index;
 8002c98:	432e      	orrs	r6, r5
 8002c9a:	f046 0610 	orr.w	r6, r6, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8002c9e:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
 8002ca2:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8002ca4:	60fe      	str	r6, [r7, #12]
		reg_index++;
 8002ca6:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8002ca8:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
 8002caa:	3201      	adds	r2, #1
 8002cac:	300c      	adds	r0, #12
 8002cae:	e7b3      	b.n	8002c18 <mpu_configure_regions+0x8>
 8002cb0:	e000ed90 	.word	0xe000ed90
 8002cb4:	08008d5c 	.word	0x08008d5c
 8002cb8:	08008d1c 	.word	0x08008d1c
 8002cbc:	08009a55 	.word	0x08009a55
 8002cc0:	08009a78 	.word	0x08009a78

08002cc4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8002cc4:	4b03      	ldr	r3, [pc, #12]	; (8002cd4 <arm_core_mpu_enable+0x10>)
 8002cc6:	2205      	movs	r2, #5
 8002cc8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8002cca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002cce:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8002cd2:	4770      	bx	lr
 8002cd4:	e000ed90 	.word	0xe000ed90

08002cd8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002cd8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8002cdc:	4b01      	ldr	r3, [pc, #4]	; (8002ce4 <arm_core_mpu_disable+0xc>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	605a      	str	r2, [r3, #4]
}
 8002ce2:	4770      	bx	lr
 8002ce4:	e000ed90 	.word	0xe000ed90

08002ce8 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8002ce8:	4913      	ldr	r1, [pc, #76]	; (8002d38 <arm_mpu_init+0x50>)
 8002cea:	6808      	ldr	r0, [r1, #0]
 8002cec:	2808      	cmp	r0, #8
{
 8002cee:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 8002cf0:	d81e      	bhi.n	8002d30 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8002cf2:	f7ff fff1 	bl	8002cd8 <arm_core_mpu_disable>
	MPU->RNR = index;
 8002cf6:	4c11      	ldr	r4, [pc, #68]	; (8002d3c <arm_mpu_init+0x54>)
 8002cf8:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	4290      	cmp	r0, r2
 8002cfe:	f101 010c 	add.w	r1, r1, #12
 8002d02:	d105      	bne.n	8002d10 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8002d04:	4b0e      	ldr	r3, [pc, #56]	; (8002d40 <arm_mpu_init+0x58>)
 8002d06:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 8002d08:	f7ff ffdc 	bl	8002cc4 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
 8002d0c:	2000      	movs	r0, #0
}
 8002d0e:	bd10      	pop	{r4, pc}
 8002d10:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8002d12:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 8002d16:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8002d20:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8002d22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8002d2c:	3201      	adds	r2, #1
 8002d2e:	e7e5      	b.n	8002cfc <arm_mpu_init+0x14>
		return -1;
 8002d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d34:	e7eb      	b.n	8002d0e <arm_mpu_init+0x26>
 8002d36:	bf00      	nop
 8002d38:	08008e80 	.word	0x08008e80
 8002d3c:	e000ed90 	.word	0xe000ed90
 8002d40:	20000879 	.word	0x20000879

08002d44 <arm_core_mpu_configure_static_mpu_regions>:
{
 8002d44:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 8002d46:	4c03      	ldr	r4, [pc, #12]	; (8002d54 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8002d48:	2301      	movs	r3, #1
 8002d4a:	7822      	ldrb	r2, [r4, #0]
 8002d4c:	f7ff ff60 	bl	8002c10 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8002d50:	7020      	strb	r0, [r4, #0]
}
 8002d52:	bd10      	pop	{r4, pc}
 8002d54:	20000879 	.word	0x20000879

08002d58 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
 8002d58:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 8002d5a:	4a08      	ldr	r2, [pc, #32]	; (8002d7c <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	7812      	ldrb	r2, [r2, #0]
 8002d60:	f7ff ff56 	bl	8002c10 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8002d64:	f110 0f16 	cmn.w	r0, #22
 8002d68:	d003      	beq.n	8002d72 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8002d6a:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
 8002d6c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 8002d6e:	2807      	cmp	r0, #7
 8002d70:	dd00      	ble.n	8002d74 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
 8002d72:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
 8002d74:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
 8002d76:	611a      	str	r2, [r3, #16]
 8002d78:	3001      	adds	r0, #1
 8002d7a:	e7f8      	b.n	8002d6e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
 8002d7c:	20000879 	.word	0x20000879
 8002d80:	e000ed90 	.word	0xe000ed90

08002d84 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 8002d84:	4b01      	ldr	r3, [pc, #4]	; (8002d8c <__stdout_hook_install+0x8>)
 8002d86:	6018      	str	r0, [r3, #0]
}
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	20000070 	.word	0x20000070

08002d90 <registry_find>:

	return rv;
}

static struct registry_entry *registry_find(int type)
{
 8002d90:	4602      	mov	r2, r0
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
		struct registry_entry *ep = &registry[i];

		if ((ep->fstp != NULL) && (ep->type == type)) {
 8002d92:	4808      	ldr	r0, [pc, #32]	; (8002db4 <registry_find+0x24>)
 8002d94:	6841      	ldr	r1, [r0, #4]
 8002d96:	4603      	mov	r3, r0
 8002d98:	b111      	cbz	r1, 8002da0 <registry_find+0x10>
 8002d9a:	6801      	ldr	r1, [r0, #0]
 8002d9c:	428a      	cmp	r2, r1
 8002d9e:	d007      	beq.n	8002db0 <registry_find+0x20>
 8002da0:	68d8      	ldr	r0, [r3, #12]
 8002da2:	b128      	cbz	r0, 8002db0 <registry_find+0x20>
 8002da4:	6898      	ldr	r0, [r3, #8]
		struct registry_entry *ep = &registry[i];
 8002da6:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <registry_find+0x28>)
 8002da8:	4282      	cmp	r2, r0
 8002daa:	bf0c      	ite	eq
 8002dac:	4618      	moveq	r0, r3
 8002dae:	2000      	movne	r0, #0
			return ep;
		}
	}
	return NULL;
}
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	20000780 	.word	0x20000780
 8002db8:	20000788 	.word	0x20000788

08002dbc <k_mutex_unlock.constprop.0>:
	return z_impl_k_mutex_unlock(mutex);
 8002dbc:	4801      	ldr	r0, [pc, #4]	; (8002dc4 <k_mutex_unlock.constprop.0+0x8>)
 8002dbe:	f002 bca5 	b.w	800570c <z_impl_k_mutex_unlock>
 8002dc2:	bf00      	nop
 8002dc4:	2000076c 	.word	0x2000076c

08002dc8 <k_mutex_lock.constprop.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 8002dcc:	4801      	ldr	r0, [pc, #4]	; (8002dd4 <k_mutex_lock.constprop.0+0xc>)
 8002dce:	f002 bc25 	b.w	800561c <z_impl_k_mutex_lock>
 8002dd2:	bf00      	nop
 8002dd4:	2000076c 	.word	0x2000076c

08002dd8 <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
 8002dd8:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
 8002dda:	4804      	ldr	r0, [pc, #16]	; (8002dec <fs_init+0x14>)
 8002ddc:	f005 fc9b 	bl	8008716 <z_impl_k_mutex_init>
	list->head = (sys_dnode_t *)list;
 8002de0:	4b03      	ldr	r3, [pc, #12]	; (8002df0 <fs_init+0x18>)
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
 8002de2:	2000      	movs	r0, #0
	list->tail = (sys_dnode_t *)list;
 8002de4:	e9c3 3300 	strd	r3, r3, [r3]
 8002de8:	bd08      	pop	{r3, pc}
 8002dea:	bf00      	nop
 8002dec:	2000076c 	.word	0x2000076c
 8002df0:	20000764 	.word	0x20000764

08002df4 <fs_get_mnt_point>:
{
 8002df4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002df8:	4682      	mov	sl, r0
	size_t len, name_len = strlen(name);
 8002dfa:	4608      	mov	r0, r1
{
 8002dfc:	4688      	mov	r8, r1
 8002dfe:	4615      	mov	r5, r2
	size_t len, name_len = strlen(name);
 8002e00:	f003 ff23 	bl	8006c4a <strlen>
	k_mutex_lock(&mutex, K_FOREVER);
 8002e04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	size_t len, name_len = strlen(name);
 8002e08:	4683      	mov	fp, r0
	k_mutex_lock(&mutex, K_FOREVER);
 8002e0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e0e:	f7ff ffdb 	bl	8002dc8 <k_mutex_lock.constprop.0>
	return list->head == list;
 8002e12:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <fs_get_mnt_point+0x8c>)
 8002e14:	681c      	ldr	r4, [r3, #0]
 8002e16:	4699      	mov	r9, r3
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002e18:	429c      	cmp	r4, r3
 8002e1a:	bf08      	it	eq
 8002e1c:	2400      	moveq	r4, #0
	return (node == list->tail) ? NULL : node->next;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	461f      	mov	r7, r3
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
 8002e22:	b95c      	cbnz	r4, 8002e3c <fs_get_mnt_point+0x48>
	k_mutex_unlock(&mutex);
 8002e24:	f7ff ffca 	bl	8002dbc <k_mutex_unlock.constprop.0>
	if (mnt_p == NULL) {
 8002e28:	b32f      	cbz	r7, 8002e76 <fs_get_mnt_point+0x82>
	*mnt_pntp = mnt_p;
 8002e2a:	f8ca 7000 	str.w	r7, [sl]
	if (match_len)
 8002e2e:	b32d      	cbz	r5, 8002e7c <fs_get_mnt_point+0x88>
		*match_len = mnt_p->mountp_len;
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	602b      	str	r3, [r5, #0]
	return 0;
 8002e34:	2000      	movs	r0, #0
}
 8002e36:	b003      	add	sp, #12
 8002e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		len = itr->mountp_len;
 8002e3c:	69a6      	ldr	r6, [r4, #24]
		if ((len < longest_match) || (len > name_len)) {
 8002e3e:	42b3      	cmp	r3, r6
 8002e40:	d813      	bhi.n	8002e6a <fs_get_mnt_point+0x76>
 8002e42:	45b3      	cmp	fp, r6
 8002e44:	d311      	bcc.n	8002e6a <fs_get_mnt_point+0x76>
		if ((len > 1) && (name[len] != '/') && (name[len] != '\0')) {
 8002e46:	2e01      	cmp	r6, #1
 8002e48:	d904      	bls.n	8002e54 <fs_get_mnt_point+0x60>
 8002e4a:	f818 2006 	ldrb.w	r2, [r8, r6]
 8002e4e:	2a2f      	cmp	r2, #47	; 0x2f
 8002e50:	d000      	beq.n	8002e54 <fs_get_mnt_point+0x60>
 8002e52:	b952      	cbnz	r2, 8002e6a <fs_get_mnt_point+0x76>
		if (strncmp(name, itr->mnt_point, len) == 0) {
 8002e54:	68e1      	ldr	r1, [r4, #12]
 8002e56:	9301      	str	r3, [sp, #4]
 8002e58:	4632      	mov	r2, r6
 8002e5a:	4640      	mov	r0, r8
 8002e5c:	f003 ff08 	bl	8006c70 <strncmp>
 8002e60:	2800      	cmp	r0, #0
 8002e62:	9b01      	ldr	r3, [sp, #4]
 8002e64:	bf04      	itt	eq
 8002e66:	4627      	moveq	r7, r4
 8002e68:	4633      	moveq	r3, r6
 8002e6a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002e6e:	4294      	cmp	r4, r2
 8002e70:	d0d8      	beq.n	8002e24 <fs_get_mnt_point+0x30>
 8002e72:	6824      	ldr	r4, [r4, #0]
 8002e74:	e7d5      	b.n	8002e22 <fs_get_mnt_point+0x2e>
		return -ENOENT;
 8002e76:	f06f 0001 	mvn.w	r0, #1
 8002e7a:	e7dc      	b.n	8002e36 <fs_get_mnt_point+0x42>
	return 0;
 8002e7c:	4628      	mov	r0, r5
 8002e7e:	e7da      	b.n	8002e36 <fs_get_mnt_point+0x42>
 8002e80:	20000764 	.word	0x20000764

08002e84 <fs_opendir>:
{
 8002e84:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e86:	4606      	mov	r6, r0
	if ((abs_path == NULL) ||
 8002e88:	460d      	mov	r5, r1
 8002e8a:	b971      	cbnz	r1, 8002eaa <fs_opendir+0x26>
 8002e8c:	4b2a      	ldr	r3, [pc, #168]	; (8002f38 <fs_opendir+0xb4>)
 8002e8e:	482b      	ldr	r0, [pc, #172]	; (8002f3c <fs_opendir+0xb8>)
		LOG_ERR("invalid file name!!");
 8002e90:	492b      	ldr	r1, [pc, #172]	; (8002f40 <fs_opendir+0xbc>)
 8002e92:	1ac0      	subs	r0, r0, r3
 8002e94:	08c0      	lsrs	r0, r0, #3
 8002e96:	0180      	lsls	r0, r0, #6
 8002e98:	f040 0001 	orr.w	r0, r0, #1
 8002e9c:	f003 fbef 	bl	800667e <log_string_sync>
		return -EINVAL;
 8002ea0:	f06f 0415 	mvn.w	r4, #21
}
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	b002      	add	sp, #8
 8002ea8:	bd70      	pop	{r4, r5, r6, pc}
			(strlen(abs_path) < 1) || (abs_path[0] != '/')) {
 8002eaa:	4608      	mov	r0, r1
 8002eac:	f003 fecd 	bl	8006c4a <strlen>
	if ((abs_path == NULL) ||
 8002eb0:	2800      	cmp	r0, #0
 8002eb2:	d0eb      	beq.n	8002e8c <fs_opendir+0x8>
			(strlen(abs_path) < 1) || (abs_path[0] != '/')) {
 8002eb4:	782b      	ldrb	r3, [r5, #0]
 8002eb6:	2b2f      	cmp	r3, #47	; 0x2f
 8002eb8:	d1e8      	bne.n	8002e8c <fs_opendir+0x8>
	if (strcmp(abs_path, "/") == 0) {
 8002eba:	4922      	ldr	r1, [pc, #136]	; (8002f44 <fs_opendir+0xc0>)
 8002ebc:	4628      	mov	r0, r5
 8002ebe:	f003 fecb 	bl	8006c58 <strcmp>
 8002ec2:	4604      	mov	r4, r0
 8002ec4:	b978      	cbnz	r0, 8002ee6 <fs_opendir+0x62>
		k_mutex_lock(&mutex, K_FOREVER);
 8002ec6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002eca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ece:	f7ff ff7b 	bl	8002dc8 <k_mutex_lock.constprop.0>
	return list->head == list;
 8002ed2:	4a1d      	ldr	r2, [pc, #116]	; (8002f48 <fs_opendir+0xc4>)
		zdp->mp = NULL;
 8002ed4:	6074      	str	r4, [r6, #4]
 8002ed6:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	bf08      	it	eq
 8002edc:	2300      	moveq	r3, #0
		zdp->dirp = sys_dlist_peek_head(&fs_mnt_list);
 8002ede:	6033      	str	r3, [r6, #0]
		k_mutex_unlock(&mutex);
 8002ee0:	f7ff ff6c 	bl	8002dbc <k_mutex_unlock.constprop.0>
		return 0;
 8002ee4:	e7de      	b.n	8002ea4 <fs_opendir+0x20>
	rc = fs_get_mnt_point(&mp, abs_path, NULL);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	4629      	mov	r1, r5
 8002eea:	a801      	add	r0, sp, #4
 8002eec:	f7ff ff82 	bl	8002df4 <fs_get_mnt_point>
	if (rc < 0) {
 8002ef0:	1e04      	subs	r4, r0, #0
 8002ef2:	da0b      	bge.n	8002f0c <fs_opendir+0x88>
 8002ef4:	4811      	ldr	r0, [pc, #68]	; (8002f3c <fs_opendir+0xb8>)
 8002ef6:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <fs_opendir+0xb4>)
		LOG_ERR("%s:mount point not found!!", __func__);
 8002ef8:	4a14      	ldr	r2, [pc, #80]	; (8002f4c <fs_opendir+0xc8>)
 8002efa:	4915      	ldr	r1, [pc, #84]	; (8002f50 <fs_opendir+0xcc>)
 8002efc:	1ac0      	subs	r0, r0, r3
 8002efe:	08c0      	lsrs	r0, r0, #3
 8002f00:	0180      	lsls	r0, r0, #6
		LOG_ERR("directory open error (%d)", rc);
 8002f02:	f040 0001 	orr.w	r0, r0, #1
 8002f06:	f003 fbba 	bl	800667e <log_string_sync>
 8002f0a:	e7cb      	b.n	8002ea4 <fs_opendir+0x20>
	CHECKIF(mp->fs->opendir == NULL) {
 8002f0c:	9a01      	ldr	r2, [sp, #4]
 8002f0e:	69d3      	ldr	r3, [r2, #28]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	b16b      	cbz	r3, 8002f30 <fs_opendir+0xac>
	zdp->mp = mp;
 8002f14:	6072      	str	r2, [r6, #4]
	rc = zdp->mp->fs->opendir(zdp, abs_path);
 8002f16:	4629      	mov	r1, r5
 8002f18:	4630      	mov	r0, r6
 8002f1a:	4798      	blx	r3
	if (rc < 0) {
 8002f1c:	1e04      	subs	r4, r0, #0
 8002f1e:	dac1      	bge.n	8002ea4 <fs_opendir+0x20>
 8002f20:	4806      	ldr	r0, [pc, #24]	; (8002f3c <fs_opendir+0xb8>)
 8002f22:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <fs_opendir+0xb4>)
		LOG_ERR("directory open error (%d)", rc);
 8002f24:	490b      	ldr	r1, [pc, #44]	; (8002f54 <fs_opendir+0xd0>)
 8002f26:	1ac0      	subs	r0, r0, r3
 8002f28:	08c0      	lsrs	r0, r0, #3
 8002f2a:	0180      	lsls	r0, r0, #6
 8002f2c:	4622      	mov	r2, r4
 8002f2e:	e7e8      	b.n	8002f02 <fs_opendir+0x7e>
		return -ENOTSUP;
 8002f30:	f06f 0422 	mvn.w	r4, #34	; 0x22
 8002f34:	e7b6      	b.n	8002ea4 <fs_opendir+0x20>
 8002f36:	bf00      	nop
 8002f38:	08008d1c 	.word	0x08008d1c
 8002f3c:	08008d3c 	.word	0x08008d3c
 8002f40:	08009aad 	.word	0x08009aad
 8002f44:	08009af1 	.word	0x08009af1
 8002f48:	20000764 	.word	0x20000764
 8002f4c:	08009c1c 	.word	0x08009c1c
 8002f50:	08009ac1 	.word	0x08009ac1
 8002f54:	08009af3 	.word	0x08009af3

08002f58 <fs_readdir>:
{
 8002f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (zdp->mp) {
 8002f5c:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
 8002f60:	4606      	mov	r6, r0
 8002f62:	460d      	mov	r5, r1
	if (zdp->mp) {
 8002f64:	f1b8 0f00 	cmp.w	r8, #0
 8002f68:	d023      	beq.n	8002fb2 <fs_readdir+0x5a>
		CHECKIF(zdp->mp->fs->readdir == NULL) {
 8002f6a:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d053      	beq.n	800301c <fs_readdir+0xc4>
			if ((strcmp(entry->name, ".") != 0)
 8002f74:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8003054 <fs_readdir+0xfc>
 8002f78:	1c4f      	adds	r7, r1, #1
			rc = zdp->mp->fs->readdir(zdp, entry);
 8002f7a:	6873      	ldr	r3, [r6, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	4629      	mov	r1, r5
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	4630      	mov	r0, r6
 8002f84:	4798      	blx	r3
			if (rc < 0) {
 8002f86:	1e04      	subs	r4, r0, #0
 8002f88:	db4e      	blt.n	8003028 <fs_readdir+0xd0>
			if (entry->name[0] == 0) {
 8002f8a:	786b      	ldrb	r3, [r5, #1]
 8002f8c:	b173      	cbz	r3, 8002fac <fs_readdir+0x54>
			if (entry->type != FS_DIR_ENTRY_DIR) {
 8002f8e:	782b      	ldrb	r3, [r5, #0]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d10b      	bne.n	8002fac <fs_readdir+0x54>
			if ((strcmp(entry->name, ".") != 0)
 8002f94:	4641      	mov	r1, r8
 8002f96:	4638      	mov	r0, r7
 8002f98:	f003 fe5e 	bl	8006c58 <strcmp>
 8002f9c:	2800      	cmp	r0, #0
 8002f9e:	d0ec      	beq.n	8002f7a <fs_readdir+0x22>
			    && (strcmp(entry->name, "..") != 0)) {
 8002fa0:	4927      	ldr	r1, [pc, #156]	; (8003040 <fs_readdir+0xe8>)
 8002fa2:	4638      	mov	r0, r7
 8002fa4:	f003 fe58 	bl	8006c58 <strcmp>
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	d0e6      	beq.n	8002f7a <fs_readdir+0x22>
}
 8002fac:	4620      	mov	r0, r4
 8002fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (zdp->dirp == NULL) {
 8002fb2:	6804      	ldr	r4, [r0, #0]
 8002fb4:	b90c      	cbnz	r4, 8002fba <fs_readdir+0x62>
		entry->name[0] = 0;
 8002fb6:	704c      	strb	r4, [r1, #1]
		return 0;
 8002fb8:	e7f8      	b.n	8002fac <fs_readdir+0x54>
	k_mutex_lock(&mutex, K_FOREVER);
 8002fba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fbe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002fc2:	f7ff ff01 	bl	8002dc8 <k_mutex_lock.constprop.0>
	return list->head == list;
 8002fc6:	4b1f      	ldr	r3, [pc, #124]	; (8003044 <fs_readdir+0xec>)
 8002fc8:	681f      	ldr	r7, [r3, #0]
 8002fca:	4699      	mov	r9, r3
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002fcc:	429f      	cmp	r7, r3
 8002fce:	bf08      	it	eq
 8002fd0:	2700      	moveq	r7, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8002fd2:	685b      	ldr	r3, [r3, #4]
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
 8002fd4:	b917      	cbnz	r7, 8002fdc <fs_readdir+0x84>
	sys_dnode_t *node, *next = NULL;
 8002fd6:	46b8      	mov	r8, r7
	bool found = false;
 8002fd8:	2400      	movs	r4, #0
 8002fda:	e014      	b.n	8003006 <fs_readdir+0xae>
		if (node == zdp->dirp) {
 8002fdc:	6832      	ldr	r2, [r6, #0]
 8002fde:	42ba      	cmp	r2, r7
 8002fe0:	d118      	bne.n	8003014 <fs_readdir+0xbc>
			entry->type = FS_DIR_ENTRY_DIR;
 8002fe2:	4628      	mov	r0, r5
 8002fe4:	2401      	movs	r4, #1
 8002fe6:	f800 4b01 	strb.w	r4, [r0], #1
			strncpy(entry->name, mnt->mnt_point + 1,
 8002fea:	68f9      	ldr	r1, [r7, #12]
 8002fec:	220c      	movs	r2, #12
 8002fee:	4421      	add	r1, r4
 8002ff0:	f003 fe18 	bl	8006c24 <strncpy>
			entry->name[sizeof(entry->name) - 1] = 0;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	736b      	strb	r3, [r5, #13]
			entry->size = 0;
 8002ff8:	612b      	str	r3, [r5, #16]
	return (node == list->tail) ? NULL : node->next;
 8002ffa:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002ffe:	429f      	cmp	r7, r3
 8003000:	d001      	beq.n	8003006 <fs_readdir+0xae>
 8003002:	f8d7 8000 	ldr.w	r8, [r7]
	k_mutex_unlock(&mutex);
 8003006:	f7ff fed9 	bl	8002dbc <k_mutex_unlock.constprop.0>
	if (!found) {
 800300a:	b154      	cbz	r4, 8003022 <fs_readdir+0xca>
	zdp->dirp = next;
 800300c:	f8c6 8000 	str.w	r8, [r6]
	return 0;
 8003010:	2400      	movs	r4, #0
 8003012:	e7cb      	b.n	8002fac <fs_readdir+0x54>
 8003014:	429f      	cmp	r7, r3
 8003016:	d0df      	beq.n	8002fd8 <fs_readdir+0x80>
 8003018:	683f      	ldr	r7, [r7, #0]
 800301a:	e7db      	b.n	8002fd4 <fs_readdir+0x7c>
			return  -ENOTSUP;
 800301c:	f06f 0422 	mvn.w	r4, #34	; 0x22
 8003020:	e7c4      	b.n	8002fac <fs_readdir+0x54>
		return -ENOENT;
 8003022:	f06f 0401 	mvn.w	r4, #1
 8003026:	e7c1      	b.n	8002fac <fs_readdir+0x54>
 8003028:	4b07      	ldr	r3, [pc, #28]	; (8003048 <fs_readdir+0xf0>)
 800302a:	4808      	ldr	r0, [pc, #32]	; (800304c <fs_readdir+0xf4>)
			LOG_ERR("directory read error (%d)", rc);
 800302c:	4908      	ldr	r1, [pc, #32]	; (8003050 <fs_readdir+0xf8>)
 800302e:	1ac0      	subs	r0, r0, r3
 8003030:	08c0      	lsrs	r0, r0, #3
 8003032:	0180      	lsls	r0, r0, #6
 8003034:	4622      	mov	r2, r4
 8003036:	f040 0001 	orr.w	r0, r0, #1
 800303a:	f003 fb20 	bl	800667e <log_string_sync>
 800303e:	e7b5      	b.n	8002fac <fs_readdir+0x54>
 8003040:	08009b0d 	.word	0x08009b0d
 8003044:	20000764 	.word	0x20000764
 8003048:	08008d1c 	.word	0x08008d1c
 800304c:	08008d3c 	.word	0x08008d3c
 8003050:	08009b10 	.word	0x08009b10
 8003054:	08009e8a 	.word	0x08009e8a

08003058 <fs_closedir>:
{
 8003058:	b538      	push	{r3, r4, r5, lr}
	if (zdp->mp == NULL) {
 800305a:	6844      	ldr	r4, [r0, #4]
{
 800305c:	4605      	mov	r5, r0
	if (zdp->mp == NULL) {
 800305e:	b914      	cbnz	r4, 8003066 <fs_closedir+0xe>
		zdp->dirp = NULL;
 8003060:	6004      	str	r4, [r0, #0]
}
 8003062:	4620      	mov	r0, r4
 8003064:	bd38      	pop	{r3, r4, r5, pc}
	CHECKIF(zdp->mp->fs->closedir == NULL) {
 8003066:	69e3      	ldr	r3, [r4, #28]
 8003068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306a:	b18b      	cbz	r3, 8003090 <fs_closedir+0x38>
	rc = zdp->mp->fs->closedir(zdp);
 800306c:	4798      	blx	r3
	if (rc < 0) {
 800306e:	1e04      	subs	r4, r0, #0
 8003070:	da0b      	bge.n	800308a <fs_closedir+0x32>
 8003072:	4b09      	ldr	r3, [pc, #36]	; (8003098 <fs_closedir+0x40>)
 8003074:	4809      	ldr	r0, [pc, #36]	; (800309c <fs_closedir+0x44>)
		LOG_ERR("directory close error (%d)", rc);
 8003076:	490a      	ldr	r1, [pc, #40]	; (80030a0 <fs_closedir+0x48>)
 8003078:	1ac0      	subs	r0, r0, r3
 800307a:	08c0      	lsrs	r0, r0, #3
 800307c:	0180      	lsls	r0, r0, #6
 800307e:	4622      	mov	r2, r4
 8003080:	f040 0001 	orr.w	r0, r0, #1
 8003084:	f003 fafb 	bl	800667e <log_string_sync>
		return rc;
 8003088:	e7eb      	b.n	8003062 <fs_closedir+0xa>
	zdp->mp = NULL;
 800308a:	2300      	movs	r3, #0
 800308c:	606b      	str	r3, [r5, #4]
	return rc;
 800308e:	e7e8      	b.n	8003062 <fs_closedir+0xa>
		return -ENOTSUP;
 8003090:	f06f 0422 	mvn.w	r4, #34	; 0x22
 8003094:	e7e5      	b.n	8003062 <fs_closedir+0xa>
 8003096:	bf00      	nop
 8003098:	08008d1c 	.word	0x08008d1c
 800309c:	08008d3c 	.word	0x08008d3c
 80030a0:	08009b2a 	.word	0x08009b2a

080030a4 <fs_mount>:
{
 80030a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((mp == NULL) || (mp->mnt_point == NULL)) {
 80030a8:	4604      	mov	r4, r0
 80030aa:	b108      	cbz	r0, 80030b0 <fs_mount+0xc>
 80030ac:	68c0      	ldr	r0, [r0, #12]
 80030ae:	b970      	cbnz	r0, 80030ce <fs_mount+0x2a>
 80030b0:	484e      	ldr	r0, [pc, #312]	; (80031ec <fs_mount+0x148>)
 80030b2:	4b4f      	ldr	r3, [pc, #316]	; (80031f0 <fs_mount+0x14c>)
		LOG_ERR("mount point not initialized!!");
 80030b4:	494f      	ldr	r1, [pc, #316]	; (80031f4 <fs_mount+0x150>)
 80030b6:	1ac0      	subs	r0, r0, r3
 80030b8:	08c0      	lsrs	r0, r0, #3
 80030ba:	0180      	lsls	r0, r0, #6
		LOG_ERR("invalid mount point!!");
 80030bc:	f040 0001 	orr.w	r0, r0, #1
 80030c0:	f003 fadd 	bl	800667e <log_string_sync>
		return -EINVAL;
 80030c4:	f06f 0515 	mvn.w	r5, #21
}
 80030c8:	4628      	mov	r0, r5
 80030ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	len = strlen(mp->mnt_point);
 80030ce:	f003 fdbc 	bl	8006c4a <strlen>
	if ((len <= 1) || (mp->mnt_point[0] != '/')) {
 80030d2:	2801      	cmp	r0, #1
	len = strlen(mp->mnt_point);
 80030d4:	4607      	mov	r7, r0
	if ((len <= 1) || (mp->mnt_point[0] != '/')) {
 80030d6:	d903      	bls.n	80030e0 <fs_mount+0x3c>
 80030d8:	68e3      	ldr	r3, [r4, #12]
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b2f      	cmp	r3, #47	; 0x2f
 80030de:	d006      	beq.n	80030ee <fs_mount+0x4a>
 80030e0:	4842      	ldr	r0, [pc, #264]	; (80031ec <fs_mount+0x148>)
 80030e2:	4b43      	ldr	r3, [pc, #268]	; (80031f0 <fs_mount+0x14c>)
		LOG_ERR("invalid mount point!!");
 80030e4:	4944      	ldr	r1, [pc, #272]	; (80031f8 <fs_mount+0x154>)
 80030e6:	1ac0      	subs	r0, r0, r3
 80030e8:	08c0      	lsrs	r0, r0, #3
 80030ea:	0180      	lsls	r0, r0, #6
 80030ec:	e7e6      	b.n	80030bc <fs_mount+0x18>
	return list->head == list;
 80030ee:	4e43      	ldr	r6, [pc, #268]	; (80031fc <fs_mount+0x158>)
	k_mutex_lock(&mutex, K_FOREVER);
 80030f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030f8:	f7ff fe66 	bl	8002dc8 <k_mutex_lock.constprop.0>
 80030fc:	6835      	ldr	r5, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80030fe:	42b5      	cmp	r5, r6
 8003100:	d115      	bne.n	800312e <fs_mount+0x8a>
	fs = fs_type_get(mp->type);
 8003102:	68a5      	ldr	r5, [r4, #8]
	struct registry_entry *ep = registry_find(type);
 8003104:	4628      	mov	r0, r5
 8003106:	f7ff fe43 	bl	8002d90 <registry_find>
	return (ep != NULL) ? ep->fstp : NULL;
 800310a:	bb58      	cbnz	r0, 8003164 <fs_mount+0xc0>
 800310c:	4b38      	ldr	r3, [pc, #224]	; (80031f0 <fs_mount+0x14c>)
 800310e:	4837      	ldr	r0, [pc, #220]	; (80031ec <fs_mount+0x148>)
		LOG_ERR("requested file system type not registered!!");
 8003110:	493b      	ldr	r1, [pc, #236]	; (8003200 <fs_mount+0x15c>)
 8003112:	1ac0      	subs	r0, r0, r3
 8003114:	08c0      	lsrs	r0, r0, #3
 8003116:	0180      	lsls	r0, r0, #6
 8003118:	f040 0001 	orr.w	r0, r0, #1
 800311c:	f003 faaf 	bl	800667e <log_string_sync>
		rc = -ENOENT;
 8003120:	f06f 0501 	mvn.w	r5, #1
		goto mount_err;
 8003124:	e01b      	b.n	800315e <fs_mount+0xba>
	return (node == list->tail) ? NULL : node->next;
 8003126:	6873      	ldr	r3, [r6, #4]
 8003128:	429d      	cmp	r5, r3
 800312a:	d0ea      	beq.n	8003102 <fs_mount+0x5e>
 800312c:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
 800312e:	2d00      	cmp	r5, #0
 8003130:	d0e7      	beq.n	8003102 <fs_mount+0x5e>
		if (len != itr->mountp_len) {
 8003132:	69ab      	ldr	r3, [r5, #24]
 8003134:	42bb      	cmp	r3, r7
 8003136:	d1f6      	bne.n	8003126 <fs_mount+0x82>
		if (strncmp(mp->mnt_point, itr->mnt_point, len) == 0) {
 8003138:	68e9      	ldr	r1, [r5, #12]
 800313a:	68e0      	ldr	r0, [r4, #12]
 800313c:	463a      	mov	r2, r7
 800313e:	f003 fd97 	bl	8006c70 <strncmp>
 8003142:	2800      	cmp	r0, #0
 8003144:	d1ef      	bne.n	8003126 <fs_mount+0x82>
 8003146:	4b2a      	ldr	r3, [pc, #168]	; (80031f0 <fs_mount+0x14c>)
 8003148:	4828      	ldr	r0, [pc, #160]	; (80031ec <fs_mount+0x148>)
			LOG_ERR("mount point already exists!!");
 800314a:	492e      	ldr	r1, [pc, #184]	; (8003204 <fs_mount+0x160>)
 800314c:	1ac0      	subs	r0, r0, r3
 800314e:	08c0      	lsrs	r0, r0, #3
 8003150:	0180      	lsls	r0, r0, #6
 8003152:	f040 0001 	orr.w	r0, r0, #1
 8003156:	f003 fa92 	bl	800667e <log_string_sync>
			rc = -EBUSY;
 800315a:	f06f 050f 	mvn.w	r5, #15
	k_mutex_unlock(&mutex);
 800315e:	f7ff fe2d 	bl	8002dbc <k_mutex_unlock.constprop.0>
	return rc;
 8003162:	e7b1      	b.n	80030c8 <fs_mount+0x24>
	return (ep != NULL) ? ep->fstp : NULL;
 8003164:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (fs == NULL) {
 8003168:	f1b8 0f00 	cmp.w	r8, #0
 800316c:	d0ce      	beq.n	800310c <fs_mount+0x68>
	CHECKIF(fs->mount == NULL) {
 800316e:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8003172:	b96b      	cbnz	r3, 8003190 <fs_mount+0xec>
 8003174:	4b1e      	ldr	r3, [pc, #120]	; (80031f0 <fs_mount+0x14c>)
 8003176:	481d      	ldr	r0, [pc, #116]	; (80031ec <fs_mount+0x148>)
		LOG_ERR("fs type %d does not support mounting", mp->type);
 8003178:	4923      	ldr	r1, [pc, #140]	; (8003208 <fs_mount+0x164>)
 800317a:	1ac0      	subs	r0, r0, r3
 800317c:	08c0      	lsrs	r0, r0, #3
 800317e:	0180      	lsls	r0, r0, #6
 8003180:	462a      	mov	r2, r5
 8003182:	f040 0001 	orr.w	r0, r0, #1
 8003186:	f003 fa7a 	bl	800667e <log_string_sync>
		rc = -ENOTSUP;
 800318a:	f06f 0522 	mvn.w	r5, #34	; 0x22
		goto mount_err;
 800318e:	e7e6      	b.n	800315e <fs_mount+0xba>
	if (fs->unmount == NULL) {
 8003190:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8003194:	b973      	cbnz	r3, 80031b4 <fs_mount+0x110>
 8003196:	4b16      	ldr	r3, [pc, #88]	; (80031f0 <fs_mount+0x14c>)
 8003198:	4d14      	ldr	r5, [pc, #80]	; (80031ec <fs_mount+0x148>)
		LOG_WRN("mount path %s is not unmountable",
 800319a:	68e0      	ldr	r0, [r4, #12]
 800319c:	1aed      	subs	r5, r5, r3
 800319e:	08ed      	lsrs	r5, r5, #3
 80031a0:	f003 fa80 	bl	80066a4 <log_strdup>
 80031a4:	01ad      	lsls	r5, r5, #6
 80031a6:	f045 0502 	orr.w	r5, r5, #2
 80031aa:	4602      	mov	r2, r0
 80031ac:	4917      	ldr	r1, [pc, #92]	; (800320c <fs_mount+0x168>)
 80031ae:	4628      	mov	r0, r5
 80031b0:	f003 fa65 	bl	800667e <log_string_sync>
	rc = fs->mount(mp);
 80031b4:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 80031b8:	4620      	mov	r0, r4
 80031ba:	4798      	blx	r3
	if (rc < 0) {
 80031bc:	1e05      	subs	r5, r0, #0
 80031be:	da0b      	bge.n	80031d8 <fs_mount+0x134>
 80031c0:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <fs_mount+0x14c>)
 80031c2:	480a      	ldr	r0, [pc, #40]	; (80031ec <fs_mount+0x148>)
		LOG_ERR("fs mount error (%d)", rc);
 80031c4:	4912      	ldr	r1, [pc, #72]	; (8003210 <fs_mount+0x16c>)
 80031c6:	1ac0      	subs	r0, r0, r3
 80031c8:	08c0      	lsrs	r0, r0, #3
 80031ca:	0180      	lsls	r0, r0, #6
 80031cc:	462a      	mov	r2, r5
 80031ce:	f040 0001 	orr.w	r0, r0, #1
 80031d2:	f003 fa54 	bl	800667e <log_string_sync>
		goto mount_err;
 80031d6:	e7c2      	b.n	800315e <fs_mount+0xba>
	node->prev = list->tail;
 80031d8:	6873      	ldr	r3, [r6, #4]
 80031da:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
 80031dc:	6873      	ldr	r3, [r6, #4]
	node->next = list;
 80031de:	6026      	str	r6, [r4, #0]
	mp->fs = fs;
 80031e0:	e9c4 7806 	strd	r7, r8, [r4, #24]
	list->tail->next = node;
 80031e4:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80031e6:	6074      	str	r4, [r6, #4]
}
 80031e8:	e7b9      	b.n	800315e <fs_mount+0xba>
 80031ea:	bf00      	nop
 80031ec:	08008d3c 	.word	0x08008d3c
 80031f0:	08008d1c 	.word	0x08008d1c
 80031f4:	08009b45 	.word	0x08009b45
 80031f8:	08009b63 	.word	0x08009b63
 80031fc:	20000764 	.word	0x20000764
 8003200:	08009b96 	.word	0x08009b96
 8003204:	08009b79 	.word	0x08009b79
 8003208:	08009bc2 	.word	0x08009bc2
 800320c:	08009be7 	.word	0x08009be7
 8003210:	08009c08 	.word	0x08009c08

08003214 <fs_register>:
{
 8003214:	b538      	push	{r3, r4, r5, lr}
 8003216:	4604      	mov	r4, r0
 8003218:	460d      	mov	r5, r1
	k_mutex_lock(&mutex, K_FOREVER);
 800321a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800321e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003222:	f7ff fdd1 	bl	8002dc8 <k_mutex_lock.constprop.0>
	struct registry_entry *ep = registry_find(type);
 8003226:	4620      	mov	r0, r4
 8003228:	f7ff fdb2 	bl	8002d90 <registry_find>
	return (ep != NULL) ? ep->fstp : NULL;
 800322c:	b108      	cbz	r0, 8003232 <fs_register+0x1e>
	if (fs_type_get(type) != NULL) {
 800322e:	6843      	ldr	r3, [r0, #4]
 8003230:	b97b      	cbnz	r3, 8003252 <fs_register+0x3e>
		if (ep->fstp == NULL) {
 8003232:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <fs_register+0x4c>)
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	b112      	cbz	r2, 800323e <fs_register+0x2a>
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	b96a      	cbnz	r2, 8003258 <fs_register+0x44>
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
 800323c:	2201      	movs	r2, #1
			ep->type = type;
 800323e:	f843 4032 	str.w	r4, [r3, r2, lsl #3]
			ep->fstp = fstp;
 8003242:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
			rv = 0;
 8003246:	2400      	movs	r4, #0
			ep->fstp = fstp;
 8003248:	605d      	str	r5, [r3, #4]
	k_mutex_unlock(&mutex);
 800324a:	f7ff fdb7 	bl	8002dbc <k_mutex_unlock.constprop.0>
}
 800324e:	4620      	mov	r0, r4
 8003250:	bd38      	pop	{r3, r4, r5, pc}
		rc = -EALREADY;
 8003252:	f06f 0444 	mvn.w	r4, #68	; 0x44
 8003256:	e7f8      	b.n	800324a <fs_register+0x36>
	int rv = -ENOSPC;
 8003258:	f06f 041b 	mvn.w	r4, #27
 800325c:	e7f5      	b.n	800324a <fs_register+0x36>
 800325e:	bf00      	nop
 8003260:	20000780 	.word	0x20000780

08003264 <fatfs_init>:

static int fatfs_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	return fs_register(FS_FATFS, &fatfs_fs);
 8003264:	4901      	ldr	r1, [pc, #4]	; (800326c <fatfs_init+0x8>)
 8003266:	2000      	movs	r0, #0
 8003268:	f7ff bfd4 	b.w	8003214 <fs_register>
 800326c:	08008ea0 	.word	0x08008ea0

08003270 <fatfs_stat>:
{
 8003270:	b530      	push	{r4, r5, lr}
 8003272:	4608      	mov	r0, r1
 8003274:	b087      	sub	sp, #28
	res = f_stat(&path[1], &fno);
 8003276:	4669      	mov	r1, sp
 8003278:	3001      	adds	r0, #1
{
 800327a:	4615      	mov	r5, r2
	res = f_stat(&path[1], &fno);
 800327c:	f004 ffd9 	bl	8008232 <f_stat>
	if (res == FR_OK) {
 8003280:	4604      	mov	r4, r0
 8003282:	b980      	cbnz	r0, 80032a6 <fatfs_stat+0x36>
			       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
 8003284:	f89d 3008 	ldrb.w	r3, [sp, #8]
		entry->type = ((fno.fattrib & AM_DIR) ?
 8003288:	4628      	mov	r0, r5
			       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
 800328a:	f3c3 1300 	ubfx	r3, r3, #4, #1
		entry->type = ((fno.fattrib & AM_DIR) ?
 800328e:	f800 3b01 	strb.w	r3, [r0], #1
		strcpy(entry->name, fno.fname);
 8003292:	f10d 0109 	add.w	r1, sp, #9
 8003296:	f003 fcbb 	bl	8006c10 <strcpy>
		entry->size = fno.fsize;
 800329a:	9b00      	ldr	r3, [sp, #0]
 800329c:	612b      	str	r3, [r5, #16]
 800329e:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <fatfs_stat+0x40>)
 80032a0:	5718      	ldrsb	r0, [r3, r4]
}
 80032a2:	b007      	add	sp, #28
 80032a4:	bd30      	pop	{r4, r5, pc}
	switch (error) {
 80032a6:	2813      	cmp	r0, #19
 80032a8:	d9f9      	bls.n	800329e <fatfs_stat+0x2e>
{
 80032aa:	f06f 0004 	mvn.w	r0, #4
	return translate_error(res);
 80032ae:	e7f8      	b.n	80032a2 <fatfs_stat+0x32>
 80032b0:	08009c27 	.word	0x08009c27

080032b4 <fatfs_mkdir>:
{
 80032b4:	b508      	push	{r3, lr}
	res = f_mkdir(&path[1]);
 80032b6:	1c48      	adds	r0, r1, #1
 80032b8:	f005 f8cd 	bl	8008456 <f_mkdir>
	switch (error) {
 80032bc:	2813      	cmp	r0, #19
 80032be:	bf96      	itet	ls
 80032c0:	4b02      	ldrls	r3, [pc, #8]	; (80032cc <fatfs_mkdir+0x18>)
	res = f_mkdir(&path[1]);
 80032c2:	f06f 0004 	mvnhi.w	r0, #4
	return res;
 80032c6:	5618      	ldrsbls	r0, [r3, r0]
}
 80032c8:	bd08      	pop	{r3, pc}
 80032ca:	bf00      	nop
 80032cc:	08009c27 	.word	0x08009c27

080032d0 <fatfs_unlink>:
{
 80032d0:	b508      	push	{r3, lr}
	res = f_unlink(&path[1]);
 80032d2:	1c48      	adds	r0, r1, #1
 80032d4:	f005 f872 	bl	80083bc <f_unlink>
	switch (error) {
 80032d8:	2813      	cmp	r0, #19
 80032da:	bf96      	itet	ls
 80032dc:	4b02      	ldrls	r3, [pc, #8]	; (80032e8 <fatfs_unlink+0x18>)
	res = f_unlink(&path[1]);
 80032de:	f06f 0004 	mvnhi.w	r0, #4
	return res;
 80032e2:	5618      	ldrsbls	r0, [r3, r0]
}
 80032e4:	bd08      	pop	{r3, pc}
 80032e6:	bf00      	nop
 80032e8:	08009c27 	.word	0x08009c27

080032ec <fatfs_rename>:
{
 80032ec:	b530      	push	{r4, r5, lr}
	res = f_stat(&to[1], &fno);
 80032ee:	1c54      	adds	r4, r2, #1
{
 80032f0:	b087      	sub	sp, #28
 80032f2:	460d      	mov	r5, r1
	res = f_stat(&to[1], &fno);
 80032f4:	4620      	mov	r0, r4
 80032f6:	4669      	mov	r1, sp
 80032f8:	f004 ff9b 	bl	8008232 <f_stat>
	if (FR_OK == res) {
 80032fc:	b948      	cbnz	r0, 8003312 <fatfs_rename+0x26>
		res = f_unlink(&to[1]);
 80032fe:	4620      	mov	r0, r4
 8003300:	f005 f85c 	bl	80083bc <f_unlink>
		if (FR_OK != res)
 8003304:	b128      	cbz	r0, 8003312 <fatfs_rename+0x26>
	switch (error) {
 8003306:	2813      	cmp	r0, #19
 8003308:	d908      	bls.n	800331c <fatfs_rename+0x30>
{
 800330a:	f06f 0004 	mvn.w	r0, #4
}
 800330e:	b007      	add	sp, #28
 8003310:	bd30      	pop	{r4, r5, pc}
	res = f_rename(&from[1], &to[1]);
 8003312:	4621      	mov	r1, r4
 8003314:	1c68      	adds	r0, r5, #1
 8003316:	f005 f951 	bl	80085bc <f_rename>
	switch (error) {
 800331a:	e7f4      	b.n	8003306 <fatfs_rename+0x1a>
 800331c:	4b01      	ldr	r3, [pc, #4]	; (8003324 <fatfs_rename+0x38>)
 800331e:	5618      	ldrsb	r0, [r3, r0]
 8003320:	e7f5      	b.n	800330e <fatfs_rename+0x22>
 8003322:	bf00      	nop
 8003324:	08009c27 	.word	0x08009c27

08003328 <fatfs_unmount>:
	res = f_mount(NULL, &mountp->mnt_point[1], 1);
 8003328:	68c1      	ldr	r1, [r0, #12]
 800332a:	2201      	movs	r2, #1
{
 800332c:	b508      	push	{r3, lr}
	res = f_mount(NULL, &mountp->mnt_point[1], 1);
 800332e:	4411      	add	r1, r2
 8003330:	2000      	movs	r0, #0
 8003332:	f001 f95f 	bl	80045f4 <f_mount>
	switch (error) {
 8003336:	2813      	cmp	r0, #19
 8003338:	bf96      	itet	ls
 800333a:	4b02      	ldrls	r3, [pc, #8]	; (8003344 <fatfs_unmount+0x1c>)
	res = f_mount(NULL, &mountp->mnt_point[1], 1);
 800333c:	f06f 0004 	mvnhi.w	r0, #4
 8003340:	5618      	ldrsbls	r0, [r3, r0]
}
 8003342:	bd08      	pop	{r3, pc}
 8003344:	08009c27 	.word	0x08009c27

08003348 <fatfs_mount>:
{
 8003348:	b510      	push	{r4, lr}
	res = f_mount((FATFS *)mountp->fs_data, &mountp->mnt_point[1], 1);
 800334a:	68c1      	ldr	r1, [r0, #12]
 800334c:	2201      	movs	r2, #1
{
 800334e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003352:	4604      	mov	r4, r0
	res = f_mount((FATFS *)mountp->fs_data, &mountp->mnt_point[1], 1);
 8003354:	4411      	add	r1, r2
 8003356:	6900      	ldr	r0, [r0, #16]
 8003358:	f001 f94c 	bl	80045f4 <f_mount>
	if (res == FR_NO_FILESYSTEM &&
 800335c:	280d      	cmp	r0, #13
 800335e:	d116      	bne.n	800338e <fatfs_mount+0x46>
	    (mountp->flags & FS_MOUNT_FLAG_READ_ONLY) != 0) {
 8003360:	f894 2020 	ldrb.w	r2, [r4, #32]
	if (res == FR_NO_FILESYSTEM &&
 8003364:	0793      	lsls	r3, r2, #30
 8003366:	d419      	bmi.n	800339c <fatfs_mount+0x54>
	if (res == FR_NO_FILESYSTEM &&
 8003368:	f012 0201 	ands.w	r2, r2, #1
 800336c:	d111      	bne.n	8003392 <fatfs_mount+0x4a>
		res = f_mkfs(&mountp->mnt_point[1],
 800336e:	68e0      	ldr	r0, [r4, #12]
 8003370:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	2109      	movs	r1, #9
 8003378:	ab02      	add	r3, sp, #8
 800337a:	3001      	adds	r0, #1
 800337c:	f001 f960 	bl	8004640 <f_mkfs>
		if (res == FR_OK) {
 8003380:	b928      	cbnz	r0, 800338e <fatfs_mount+0x46>
					&mountp->mnt_point[1], 1);
 8003382:	68e1      	ldr	r1, [r4, #12]
			res = f_mount((FATFS *)mountp->fs_data,
 8003384:	6920      	ldr	r0, [r4, #16]
 8003386:	2201      	movs	r2, #1
 8003388:	4411      	add	r1, r2
 800338a:	f001 f933 	bl	80045f4 <f_mount>
	switch (error) {
 800338e:	2813      	cmp	r0, #19
 8003390:	d807      	bhi.n	80033a2 <fatfs_mount+0x5a>
 8003392:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <fatfs_mount+0x60>)
 8003394:	5618      	ldrsb	r0, [r3, r0]
}
 8003396:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
 800339a:	bd10      	pop	{r4, pc}
		return -EROFS;
 800339c:	f06f 001d 	mvn.w	r0, #29
 80033a0:	e7f9      	b.n	8003396 <fatfs_mount+0x4e>
 80033a2:	f06f 0004 	mvn.w	r0, #4
 80033a6:	e7f6      	b.n	8003396 <fatfs_mount+0x4e>
 80033a8:	08009c27 	.word	0x08009c27

080033ac <fatfs_closedir>:
{
 80033ac:	b538      	push	{r3, r4, r5, lr}
 80033ae:	4605      	mov	r5, r0
	res = f_closedir(zdp->dirp);
 80033b0:	6800      	ldr	r0, [r0, #0]
 80033b2:	f004 ff14 	bl	80081de <f_closedir>
	k_mem_slab_free(&fatfs_dirp_pool, &zdp->dirp);
 80033b6:	4629      	mov	r1, r5
	res = f_closedir(zdp->dirp);
 80033b8:	4604      	mov	r4, r0
	k_mem_slab_free(&fatfs_dirp_pool, &zdp->dirp);
 80033ba:	4805      	ldr	r0, [pc, #20]	; (80033d0 <fatfs_closedir+0x24>)
 80033bc:	f002 f904 	bl	80055c8 <k_mem_slab_free>
	switch (error) {
 80033c0:	2c13      	cmp	r4, #19
 80033c2:	bf96      	itet	ls
 80033c4:	4b03      	ldrls	r3, [pc, #12]	; (80033d4 <fatfs_closedir+0x28>)
	k_mem_slab_free(&fatfs_dirp_pool, &zdp->dirp);
 80033c6:	f06f 0004 	mvnhi.w	r0, #4
 80033ca:	5718      	ldrsbls	r0, [r3, r4]
}
 80033cc:	bd38      	pop	{r3, r4, r5, pc}
 80033ce:	bf00      	nop
 80033d0:	200002ac 	.word	0x200002ac
 80033d4:	08009c27 	.word	0x08009c27

080033d8 <fatfs_readdir>:
{
 80033d8:	b530      	push	{r4, r5, lr}
 80033da:	b087      	sub	sp, #28
	res = f_readdir(zdp->dirp, &fno);
 80033dc:	6800      	ldr	r0, [r0, #0]
{
 80033de:	460c      	mov	r4, r1
	res = f_readdir(zdp->dirp, &fno);
 80033e0:	4669      	mov	r1, sp
 80033e2:	f004 ff05 	bl	80081f0 <f_readdir>
	if (res == FR_OK) {
 80033e6:	4605      	mov	r5, r0
 80033e8:	b988      	cbnz	r0, 800340e <fatfs_readdir+0x36>
		strcpy(entry->name, fno.fname);
 80033ea:	f10d 0109 	add.w	r1, sp, #9
 80033ee:	1c60      	adds	r0, r4, #1
 80033f0:	f003 fc0e 	bl	8006c10 <strcpy>
		if (entry->name[0] != 0) {
 80033f4:	7863      	ldrb	r3, [r4, #1]
 80033f6:	b133      	cbz	r3, 8003406 <fatfs_readdir+0x2e>
			       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
 80033f8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80033fc:	f3c3 1300 	ubfx	r3, r3, #4, #1
			entry->type = ((fno.fattrib & AM_DIR) ?
 8003400:	7023      	strb	r3, [r4, #0]
			entry->size = fno.fsize;
 8003402:	9b00      	ldr	r3, [sp, #0]
 8003404:	6123      	str	r3, [r4, #16]
 8003406:	4b04      	ldr	r3, [pc, #16]	; (8003418 <fatfs_readdir+0x40>)
 8003408:	5758      	ldrsb	r0, [r3, r5]
}
 800340a:	b007      	add	sp, #28
 800340c:	bd30      	pop	{r4, r5, pc}
	switch (error) {
 800340e:	2813      	cmp	r0, #19
 8003410:	d9f9      	bls.n	8003406 <fatfs_readdir+0x2e>
{
 8003412:	f06f 0004 	mvn.w	r0, #4
	return translate_error(res);
 8003416:	e7f8      	b.n	800340a <fatfs_readdir+0x32>
 8003418:	08009c27 	.word	0x08009c27

0800341c <fatfs_opendir>:
{
 800341c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (k_mem_slab_alloc(&fatfs_dirp_pool, &ptr, K_NO_WAIT) == 0) {
 800341e:	2200      	movs	r2, #0
{
 8003420:	4606      	mov	r6, r0
 8003422:	460c      	mov	r4, r1
	if (k_mem_slab_alloc(&fatfs_dirp_pool, &ptr, K_NO_WAIT) == 0) {
 8003424:	4811      	ldr	r0, [pc, #68]	; (800346c <fatfs_opendir+0x50>)
 8003426:	2300      	movs	r3, #0
 8003428:	a901      	add	r1, sp, #4
 800342a:	f002 f89b 	bl	8005564 <k_mem_slab_alloc>
 800342e:	4605      	mov	r5, r0
 8003430:	b9a8      	cbnz	r0, 800345e <fatfs_opendir+0x42>
		(void)memset(ptr, 0, sizeof(DIR));
 8003432:	4601      	mov	r1, r0
 8003434:	222c      	movs	r2, #44	; 0x2c
 8003436:	9801      	ldr	r0, [sp, #4]
 8003438:	f003 fc54 	bl	8006ce4 <memset>
		zdp->dirp = ptr;
 800343c:	9801      	ldr	r0, [sp, #4]
 800343e:	6030      	str	r0, [r6, #0]
	res = f_opendir(zdp->dirp, &path[1]);
 8003440:	1c61      	adds	r1, r4, #1
 8003442:	f004 fe99 	bl	8008178 <f_opendir>
	if (res != FR_OK) {
 8003446:	4604      	mov	r4, r0
 8003448:	b130      	cbz	r0, 8003458 <fatfs_opendir+0x3c>
		k_mem_slab_free(&fatfs_dirp_pool, &ptr);
 800344a:	4808      	ldr	r0, [pc, #32]	; (800346c <fatfs_opendir+0x50>)
 800344c:	a901      	add	r1, sp, #4
 800344e:	f002 f8bb 	bl	80055c8 <k_mem_slab_free>
		zdp->dirp = NULL;
 8003452:	2c13      	cmp	r4, #19
 8003454:	6035      	str	r5, [r6, #0]
	switch (error) {
 8003456:	d806      	bhi.n	8003466 <fatfs_opendir+0x4a>
 8003458:	4b05      	ldr	r3, [pc, #20]	; (8003470 <fatfs_opendir+0x54>)
 800345a:	5718      	ldrsb	r0, [r3, r4]
 800345c:	e001      	b.n	8003462 <fatfs_opendir+0x46>
		return -ENOMEM;
 800345e:	f06f 000b 	mvn.w	r0, #11
}
 8003462:	b002      	add	sp, #8
 8003464:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
 8003466:	f06f 0004 	mvn.w	r0, #4
 800346a:	e7fa      	b.n	8003462 <fatfs_opendir+0x46>
 800346c:	200002ac 	.word	0x200002ac
 8003470:	08009c27 	.word	0x08009c27

08003474 <fatfs_close>:
{
 8003474:	b538      	push	{r3, r4, r5, lr}
 8003476:	4604      	mov	r4, r0
	res = f_close(zfp->filep);
 8003478:	6800      	ldr	r0, [r0, #0]
 800347a:	f004 fdec 	bl	8008056 <f_close>
	k_mem_slab_free(&fatfs_filep_pool, &zfp->filep);
 800347e:	4621      	mov	r1, r4
	res = f_close(zfp->filep);
 8003480:	4605      	mov	r5, r0
	k_mem_slab_free(&fatfs_filep_pool, &zfp->filep);
 8003482:	4806      	ldr	r0, [pc, #24]	; (800349c <fatfs_close+0x28>)
 8003484:	f002 f8a0 	bl	80055c8 <k_mem_slab_free>
	zfp->filep = NULL;
 8003488:	2300      	movs	r3, #0
 800348a:	2d13      	cmp	r5, #19
 800348c:	6023      	str	r3, [r4, #0]
	switch (error) {
 800348e:	bf96      	itet	ls
 8003490:	4b03      	ldrls	r3, [pc, #12]	; (80034a0 <fatfs_close+0x2c>)
	zfp->filep = NULL;
 8003492:	f06f 0004 	mvnhi.w	r0, #4
 8003496:	5758      	ldrsbls	r0, [r3, r5]
}
 8003498:	bd38      	pop	{r3, r4, r5, pc}
 800349a:	bf00      	nop
 800349c:	200002c8 	.word	0x200002c8
 80034a0:	08009c27 	.word	0x08009c27

080034a4 <fatfs_sync>:
{
 80034a4:	b508      	push	{r3, lr}
	res = f_sync(zfp->filep);
 80034a6:	6800      	ldr	r0, [r0, #0]
 80034a8:	f004 fda0 	bl	8007fec <f_sync>
	switch (error) {
 80034ac:	2813      	cmp	r0, #19
 80034ae:	bf96      	itet	ls
 80034b0:	4b02      	ldrls	r3, [pc, #8]	; (80034bc <fatfs_sync+0x18>)
	res = f_sync(zfp->filep);
 80034b2:	f06f 0004 	mvnhi.w	r0, #4
	return res;
 80034b6:	5618      	ldrsbls	r0, [r3, r0]
}
 80034b8:	bd08      	pop	{r3, pc}
 80034ba:	bf00      	nop
 80034bc:	08009c27 	.word	0x08009c27

080034c0 <fatfs_seek>:
	switch (whence) {
 80034c0:	2a01      	cmp	r2, #1
{
 80034c2:	b508      	push	{r3, lr}
	switch (whence) {
 80034c4:	d005      	beq.n	80034d2 <fatfs_seek+0x12>
 80034c6:	2a02      	cmp	r2, #2
 80034c8:	d013      	beq.n	80034f2 <fatfs_seek+0x32>
 80034ca:	b12a      	cbz	r2, 80034d8 <fatfs_seek+0x18>
		return -EINVAL;
 80034cc:	f06f 0015 	mvn.w	r0, #21
 80034d0:	e00e      	b.n	80034f0 <fatfs_seek+0x30>
		pos = f_tell((FIL *)zfp->filep) + offset;
 80034d2:	6803      	ldr	r3, [r0, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
		pos = f_size((FIL *)zfp->filep) + offset;
 80034d6:	4419      	add	r1, r3
	if ((pos < 0) || (pos > f_size((FIL *)zfp->filep))) {
 80034d8:	2900      	cmp	r1, #0
 80034da:	dbf7      	blt.n	80034cc <fatfs_seek+0xc>
 80034dc:	6800      	ldr	r0, [r0, #0]
 80034de:	68c3      	ldr	r3, [r0, #12]
 80034e0:	428b      	cmp	r3, r1
 80034e2:	d3f3      	bcc.n	80034cc <fatfs_seek+0xc>
	res = f_lseek(zfp->filep, pos);
 80034e4:	f004 fdc4 	bl	8008070 <f_lseek>
	switch (error) {
 80034e8:	2813      	cmp	r0, #19
 80034ea:	d805      	bhi.n	80034f8 <fatfs_seek+0x38>
 80034ec:	4b04      	ldr	r3, [pc, #16]	; (8003500 <fatfs_seek+0x40>)
 80034ee:	5618      	ldrsb	r0, [r3, r0]
}
 80034f0:	bd08      	pop	{r3, pc}
		pos = f_size((FIL *)zfp->filep) + offset;
 80034f2:	6803      	ldr	r3, [r0, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	e7ee      	b.n	80034d6 <fatfs_seek+0x16>
	res = f_lseek(zfp->filep, pos);
 80034f8:	f06f 0004 	mvn.w	r0, #4
 80034fc:	e7f8      	b.n	80034f0 <fatfs_seek+0x30>
 80034fe:	bf00      	nop
 8003500:	08009c27 	.word	0x08009c27

08003504 <fatfs_truncate>:
{
 8003504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003506:	4604      	mov	r4, r0
	off_t cur_length = f_size((FIL *)zfp->filep);
 8003508:	6800      	ldr	r0, [r0, #0]
{
 800350a:	460e      	mov	r6, r1
	off_t cur_length = f_size((FIL *)zfp->filep);
 800350c:	68c7      	ldr	r7, [r0, #12]
	res = f_lseek(zfp->filep, length);
 800350e:	f004 fdaf 	bl	8008070 <f_lseek>
	if (res != FR_OK) {
 8003512:	b120      	cbz	r0, 800351e <fatfs_truncate+0x1a>
	switch (error) {
 8003514:	2813      	cmp	r0, #19
 8003516:	d80a      	bhi.n	800352e <fatfs_truncate+0x2a>
 8003518:	4b12      	ldr	r3, [pc, #72]	; (8003564 <fatfs_truncate+0x60>)
 800351a:	5618      	ldrsb	r0, [r3, r0]
 800351c:	e009      	b.n	8003532 <fatfs_truncate+0x2e>
	if (length < cur_length) {
 800351e:	42b7      	cmp	r7, r6
 8003520:	6820      	ldr	r0, [r4, #0]
	off_t cur_length = f_size((FIL *)zfp->filep);
 8003522:	463d      	mov	r5, r7
	if (length < cur_length) {
 8003524:	dd07      	ble.n	8003536 <fatfs_truncate+0x32>
		res = f_truncate(zfp->filep);
 8003526:	f004 ff0d 	bl	8008344 <f_truncate>
	switch (error) {
 800352a:	2813      	cmp	r0, #19
 800352c:	ddf4      	ble.n	8003518 <fatfs_truncate+0x14>
		if (res != FR_OK) {
 800352e:	f06f 0004 	mvn.w	r0, #4
}
 8003532:	b003      	add	sp, #12
 8003534:	bdf0      	pop	{r4, r5, r6, r7, pc}
		res = f_lseek(zfp->filep, cur_length);
 8003536:	4639      	mov	r1, r7
		length = f_tell((FIL *)zfp->filep);
 8003538:	6946      	ldr	r6, [r0, #20]
		res = f_lseek(zfp->filep, cur_length);
 800353a:	f004 fd99 	bl	8008070 <f_lseek>
		if (res != FR_OK) {
 800353e:	2800      	cmp	r0, #0
 8003540:	d1e8      	bne.n	8003514 <fatfs_truncate+0x10>
		uint8_t c = 0U;
 8003542:	f88d 0003 	strb.w	r0, [sp, #3]
		for (int i = cur_length; i < length; i++) {
 8003546:	42b5      	cmp	r5, r6
 8003548:	db01      	blt.n	800354e <fatfs_truncate+0x4a>
 800354a:	2000      	movs	r0, #0
 800354c:	e7e4      	b.n	8003518 <fatfs_truncate+0x14>
			res = f_write(zfp->filep, &c, 1, &bw);
 800354e:	6820      	ldr	r0, [r4, #0]
 8003550:	ab01      	add	r3, sp, #4
 8003552:	2201      	movs	r2, #1
 8003554:	f10d 0103 	add.w	r1, sp, #3
 8003558:	f004 fc8c 	bl	8007e74 <f_write>
			if (res != FR_OK) {
 800355c:	2800      	cmp	r0, #0
 800355e:	d1e4      	bne.n	800352a <fatfs_truncate+0x26>
		for (int i = cur_length; i < length; i++) {
 8003560:	3501      	adds	r5, #1
 8003562:	e7f0      	b.n	8003546 <fatfs_truncate+0x42>
 8003564:	08009c27 	.word	0x08009c27

08003568 <fatfs_write>:
{
 8003568:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (zfp->flags & FS_O_APPEND) {
 800356a:	7a03      	ldrb	r3, [r0, #8]
 800356c:	069b      	lsls	r3, r3, #26
{
 800356e:	4604      	mov	r4, r0
 8003570:	460d      	mov	r5, r1
 8003572:	4616      	mov	r6, r2
	if (zfp->flags & FS_O_APPEND) {
 8003574:	d40c      	bmi.n	8003590 <fatfs_write+0x28>
		res = f_write(zfp->filep, ptr, size, &bw);
 8003576:	6820      	ldr	r0, [r4, #0]
 8003578:	ab01      	add	r3, sp, #4
 800357a:	4632      	mov	r2, r6
 800357c:	4629      	mov	r1, r5
 800357e:	f004 fc79 	bl	8007e74 <f_write>
	if (res != FR_OK) {
 8003582:	b160      	cbz	r0, 800359e <fatfs_write+0x36>
	switch (error) {
 8003584:	2813      	cmp	r0, #19
 8003586:	dc0c      	bgt.n	80035a2 <fatfs_write+0x3a>
 8003588:	4b07      	ldr	r3, [pc, #28]	; (80035a8 <fatfs_write+0x40>)
 800358a:	5618      	ldrsb	r0, [r3, r0]
}
 800358c:	b002      	add	sp, #8
 800358e:	bd70      	pop	{r4, r5, r6, pc}
	off_t pos = f_size((FIL *)zfp->filep);
 8003590:	6800      	ldr	r0, [r0, #0]
		res = f_lseek(zfp->filep, pos);
 8003592:	68c1      	ldr	r1, [r0, #12]
 8003594:	f004 fd6c 	bl	8008070 <f_lseek>
	if (res == FR_OK) {
 8003598:	2800      	cmp	r0, #0
 800359a:	d0ec      	beq.n	8003576 <fatfs_write+0xe>
 800359c:	e7f2      	b.n	8003584 <fatfs_write+0x1c>
		res = bw;
 800359e:	9801      	ldr	r0, [sp, #4]
 80035a0:	e7f4      	b.n	800358c <fatfs_write+0x24>
{
 80035a2:	f06f 0004 	mvn.w	r0, #4
	return res;
 80035a6:	e7f1      	b.n	800358c <fatfs_write+0x24>
 80035a8:	08009c27 	.word	0x08009c27

080035ac <fatfs_read>:
{
 80035ac:	b507      	push	{r0, r1, r2, lr}
	res = f_read(zfp->filep, ptr, size, &br);
 80035ae:	6800      	ldr	r0, [r0, #0]
 80035b0:	ab01      	add	r3, sp, #4
 80035b2:	f004 fbc9 	bl	8007d48 <f_read>
	if (res != FR_OK) {
 80035b6:	b130      	cbz	r0, 80035c6 <fatfs_read+0x1a>
	switch (error) {
 80035b8:	2813      	cmp	r0, #19
 80035ba:	d806      	bhi.n	80035ca <fatfs_read+0x1e>
 80035bc:	4b04      	ldr	r3, [pc, #16]	; (80035d0 <fatfs_read+0x24>)
 80035be:	5618      	ldrsb	r0, [r3, r0]
}
 80035c0:	b003      	add	sp, #12
 80035c2:	f85d fb04 	ldr.w	pc, [sp], #4
	return br;
 80035c6:	9801      	ldr	r0, [sp, #4]
 80035c8:	e7fa      	b.n	80035c0 <fatfs_read+0x14>
	if (res != FR_OK) {
 80035ca:	f06f 0004 	mvn.w	r0, #4
 80035ce:	e7f7      	b.n	80035c0 <fatfs_read+0x14>
 80035d0:	08009c27 	.word	0x08009c27

080035d4 <fatfs_open>:
{
 80035d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (k_mem_slab_alloc(&fatfs_filep_pool, &ptr, K_NO_WAIT) == 0) {
 80035d6:	2300      	movs	r3, #0
{
 80035d8:	4606      	mov	r6, r0
 80035da:	460c      	mov	r4, r1
	if (k_mem_slab_alloc(&fatfs_filep_pool, &ptr, K_NO_WAIT) == 0) {
 80035dc:	4813      	ldr	r0, [pc, #76]	; (800362c <fatfs_open+0x58>)
{
 80035de:	4617      	mov	r7, r2
	if (k_mem_slab_alloc(&fatfs_filep_pool, &ptr, K_NO_WAIT) == 0) {
 80035e0:	a901      	add	r1, sp, #4
 80035e2:	2200      	movs	r2, #0
 80035e4:	f001 ffbe 	bl	8005564 <k_mem_slab_alloc>
 80035e8:	4605      	mov	r5, r0
 80035ea:	b9b8      	cbnz	r0, 800361c <fatfs_open+0x48>
		(void)memset(ptr, 0, sizeof(FIL));
 80035ec:	4601      	mov	r1, r0
 80035ee:	2228      	movs	r2, #40	; 0x28
 80035f0:	9801      	ldr	r0, [sp, #4]
 80035f2:	f003 fb77 	bl	8006ce4 <memset>
		zfp->filep = ptr;
 80035f6:	9801      	ldr	r0, [sp, #4]
 80035f8:	6030      	str	r0, [r6, #0]
	res = f_open(zfp->filep, &file_name[1], fs_mode);
 80035fa:	1c61      	adds	r1, r4, #1
 80035fc:	f007 0213 	and.w	r2, r7, #19
 8003600:	f004 fad0 	bl	8007ba4 <f_open>
	if (res != FR_OK) {
 8003604:	4604      	mov	r4, r0
 8003606:	b130      	cbz	r0, 8003616 <fatfs_open+0x42>
		k_mem_slab_free(&fatfs_filep_pool, &ptr);
 8003608:	4808      	ldr	r0, [pc, #32]	; (800362c <fatfs_open+0x58>)
 800360a:	a901      	add	r1, sp, #4
 800360c:	f001 ffdc 	bl	80055c8 <k_mem_slab_free>
		zfp->filep = NULL;
 8003610:	2c13      	cmp	r4, #19
 8003612:	6035      	str	r5, [r6, #0]
	switch (error) {
 8003614:	d806      	bhi.n	8003624 <fatfs_open+0x50>
 8003616:	4b06      	ldr	r3, [pc, #24]	; (8003630 <fatfs_open+0x5c>)
 8003618:	5718      	ldrsb	r0, [r3, r4]
 800361a:	e001      	b.n	8003620 <fatfs_open+0x4c>
		return -ENOMEM;
 800361c:	f06f 000b 	mvn.w	r0, #11
}
 8003620:	b003      	add	sp, #12
 8003622:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOMEM;
 8003624:	f06f 0004 	mvn.w	r0, #4
 8003628:	e7fa      	b.n	8003620 <fatfs_open+0x4c>
 800362a:	bf00      	nop
 800362c:	200002c8 	.word	0x200002c8
 8003630:	08009c27 	.word	0x08009c27

08003634 <gpio_stm32_init>:
static int gpio_stm32_init(const struct device *device)
{
	const struct gpio_stm32_config *cfg = device->config;
	struct gpio_stm32_data *data = device->data;

	data->dev = device;
 8003634:	68c3      	ldr	r3, [r0, #12]
{
 8003636:	b513      	push	{r0, r1, r4, lr}
	const struct gpio_stm32_config *cfg = device->config;
 8003638:	6844      	ldr	r4, [r0, #4]
	data->dev = device;
 800363a:	6058      	str	r0, [r3, #4]
 800363c:	4816      	ldr	r0, [pc, #88]	; (8003698 <gpio_stm32_init+0x64>)
 800363e:	f001 fe07 	bl	8005250 <z_impl_device_get_binding>
 8003642:	6883      	ldr	r3, [r0, #8]
 8003644:	f104 010c 	add.w	r1, r4, #12
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4798      	blx	r3

	/* enable clock for subsystem */
	const struct device *clk =
		device_get_binding(STM32_CLOCK_CONTROL_NAME);

	if (clock_control_on(clk,
 800364c:	bb00      	cbnz	r0, 8003690 <gpio_stm32_init+0x5c>
			     (clock_control_subsys_t *)&cfg->pclken) != 0) {
		return -EIO;
	}

#ifdef PWR_CR2_IOSV
	if (cfg->port == STM32_PORTG) {
 800364e:	68a3      	ldr	r3, [r4, #8]
 8003650:	2b06      	cmp	r3, #6
 8003652:	d109      	bne.n	8003668 <gpio_stm32_init+0x34>
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8003654:	4b11      	ldr	r3, [pc, #68]	; (800369c <gpio_stm32_init+0x68>)
 8003656:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003658:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800365c:	4a10      	ldr	r2, [pc, #64]	; (80036a0 <gpio_stm32_init+0x6c>)
 800365e:	d005      	beq.n	800366c <gpio_stm32_init+0x38>
  * @rmtoll CR2          IOSV          LL_PWR_EnableVddIO2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003660:	6853      	ldr	r3, [r2, #4]
 8003662:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003666:	6053      	str	r3, [r2, #4]
		z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
	}
#endif  /* PWR_CR2_IOSV */

	return 0;
}
 8003668:	b002      	add	sp, #8
 800366a:	bd10      	pop	{r4, pc}
  SET_BIT(RCC->APB1ENR1, Periphs);
 800366c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800366e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003672:	6599      	str	r1, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003674:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8003676:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800367a:	9101      	str	r1, [sp, #4]
  (void)tmpreg;
 800367c:	9901      	ldr	r1, [sp, #4]
 800367e:	6851      	ldr	r1, [r2, #4]
 8003680:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003684:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8003686:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003688:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800368c:	659a      	str	r2, [r3, #88]	; 0x58
 800368e:	e7eb      	b.n	8003668 <gpio_stm32_init+0x34>
		return -EIO;
 8003690:	f06f 0004 	mvn.w	r0, #4
 8003694:	e7e8      	b.n	8003668 <gpio_stm32_init+0x34>
 8003696:	bf00      	nop
 8003698:	080095b0 	.word	0x080095b0
 800369c:	40021000 	.word	0x40021000
 80036a0:	40007000 	.word	0x40007000

080036a4 <gpio_stm32_pin_interrupt_configure>:
{
 80036a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80036a8:	460c      	mov	r4, r1
 80036aa:	4611      	mov	r1, r2
	if (mode == GPIO_INT_MODE_DISABLED) {
 80036ac:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
	const struct gpio_stm32_config *cfg = dev->config;
 80036b0:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 80036b2:	68c2      	ldr	r2, [r0, #12]
{
 80036b4:	461e      	mov	r6, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 80036b6:	d123      	bne.n	8003700 <gpio_stm32_pin_interrupt_configure+0x5c>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80036b8:	f004 0303 	and.w	r3, r4, #3
 80036bc:	3304      	adds	r3, #4
 80036be:	009a      	lsls	r2, r3, #2
 80036c0:	230f      	movs	r3, #15
 80036c2:	4093      	lsls	r3, r2
 80036c4:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U)) >> POSITION_VAL(Line >> 16U));
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	4936      	ldr	r1, [pc, #216]	; (80037a4 <gpio_stm32_pin_interrupt_configure+0x100>)
 80036cc:	3202      	adds	r2, #2
 80036ce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80036d2:	0c19      	lsrs	r1, r3, #16
 80036d4:	ea02 4313 	and.w	r3, r2, r3, lsr #16
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d8:	fa91 f2a1 	rbit	r2, r1
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 80036dc:	fab2 f282 	clz	r2, r2
 80036e0:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d109      	bne.n	80036fc <gpio_stm32_pin_interrupt_configure+0x58>
			stm32_exti_disable(pin);
 80036e8:	4620      	mov	r0, r4
 80036ea:	f7fe faf7 	bl	8001cdc <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 80036ee:	4620      	mov	r0, r4
 80036f0:	f7fe fb48 	bl	8001d84 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 80036f4:	2100      	movs	r1, #0
 80036f6:	4620      	mov	r0, r4
 80036f8:	f7fe fafe 	bl	8001cf8 <stm32_exti_trigger>
	int err = 0;
 80036fc:	2500      	movs	r5, #0
 80036fe:	e043      	b.n	8003788 <gpio_stm32_pin_interrupt_configure+0xe4>
	if (mode == GPIO_INT_MODE_LEVEL) {
 8003700:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8003704:	d048      	beq.n	8003798 <gpio_stm32_pin_interrupt_configure+0xf4>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8003706:	4928      	ldr	r1, [pc, #160]	; (80037a8 <gpio_stm32_pin_interrupt_configure+0x104>)
 8003708:	4620      	mov	r0, r4
 800370a:	f7fe fb29 	bl	8001d60 <stm32_exti_set_callback>
 800370e:	4605      	mov	r5, r0
 8003710:	2800      	cmp	r0, #0
 8003712:	d144      	bne.n	800379e <gpio_stm32_pin_interrupt_configure+0xfa>
	gpio_stm32_enable_int(cfg->port, pin);
 8003714:	68bf      	ldr	r7, [r7, #8]
 8003716:	4825      	ldr	r0, [pc, #148]	; (80037ac <gpio_stm32_pin_interrupt_configure+0x108>)
 8003718:	f001 fd9a 	bl	8005250 <z_impl_device_get_binding>
	struct stm32_pclken pclken = {
 800371c:	4924      	ldr	r1, [pc, #144]	; (80037b0 <gpio_stm32_pin_interrupt_configure+0x10c>)
 800371e:	4603      	mov	r3, r0
 8003720:	c903      	ldmia	r1, {r0, r1}
 8003722:	466a      	mov	r2, sp
 8003724:	e882 0003 	stmia.w	r2, {r0, r1}
 8003728:	6899      	ldr	r1, [r3, #8]
 800372a:	4618      	mov	r0, r3
 800372c:	f8d1 8000 	ldr.w	r8, [r1]
 8003730:	4611      	mov	r1, r2
 8003732:	47c0      	blx	r8
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8003734:	f004 0103 	and.w	r1, r4, #3
 8003738:	3104      	adds	r1, #4
 800373a:	008b      	lsls	r3, r1, #2
 800373c:	210f      	movs	r1, #15
 800373e:	4099      	lsls	r1, r3
 8003740:	ea41 0194 	orr.w	r1, r1, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8003744:	b2ca      	uxtb	r2, r1
 8003746:	0092      	lsls	r2, r2, #2
 8003748:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800374c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003750:	0c0b      	lsrs	r3, r1, #16
 8003752:	6890      	ldr	r0, [r2, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003754:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8003758:	fab3 f383 	clz	r3, r3
 800375c:	ea20 4111 	bic.w	r1, r0, r1, lsr #16
 8003760:	409f      	lsls	r7, r3
 8003762:	430f      	orrs	r7, r1
	switch (trig) {
 8003764:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 8003768:	6097      	str	r7, [r2, #8]
 800376a:	d011      	beq.n	8003790 <gpio_stm32_pin_interrupt_configure+0xec>
 800376c:	f5b6 2fc0 	cmp.w	r6, #393216	; 0x60000
 8003770:	d010      	beq.n	8003794 <gpio_stm32_pin_interrupt_configure+0xf0>
 8003772:	f5b6 3f00 	cmp.w	r6, #131072	; 0x20000
 8003776:	bf14      	ite	ne
 8003778:	2100      	movne	r1, #0
 800377a:	2102      	moveq	r1, #2
	stm32_exti_trigger(pin, edge);
 800377c:	4620      	mov	r0, r4
 800377e:	f7fe fabb 	bl	8001cf8 <stm32_exti_trigger>
	stm32_exti_enable(pin);
 8003782:	4620      	mov	r0, r4
 8003784:	f7fe fa9c 	bl	8001cc0 <stm32_exti_enable>
}
 8003788:	4628      	mov	r0, r5
 800378a:	b002      	add	sp, #8
 800378c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		edge = STM32_EXTI_TRIG_RISING;
 8003790:	2101      	movs	r1, #1
 8003792:	e7f3      	b.n	800377c <gpio_stm32_pin_interrupt_configure+0xd8>
		edge = STM32_EXTI_TRIG_BOTH;
 8003794:	2103      	movs	r1, #3
 8003796:	e7f1      	b.n	800377c <gpio_stm32_pin_interrupt_configure+0xd8>
		err = -ENOTSUP;
 8003798:	f06f 0522 	mvn.w	r5, #34	; 0x22
 800379c:	e7f4      	b.n	8003788 <gpio_stm32_pin_interrupt_configure+0xe4>
		err = -EBUSY;
 800379e:	f06f 050f 	mvn.w	r5, #15
	return err;
 80037a2:	e7f1      	b.n	8003788 <gpio_stm32_pin_interrupt_configure+0xe4>
 80037a4:	40010000 	.word	0x40010000
 80037a8:	08006d69 	.word	0x08006d69
 80037ac:	080095b0 	.word	0x080095b0
 80037b0:	08008d9c 	.word	0x08008d9c

080037b4 <pwm_stm32_pin_set>:
}

static int pwm_stm32_pin_set(const struct device *dev, uint32_t pwm,
			     uint32_t period_cycles, uint32_t pulse_cycles,
			     pwm_flags_t flags)
{
 80037b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct pwm_stm32_config *cfg = dev->config;

	uint32_t channel;

	if (pwm < 1u || pwm > TIMER_MAX_CH) {
 80037b8:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 80037bc:	f1bc 0f05 	cmp.w	ip, #5
	const struct pwm_stm32_config *cfg = dev->config;
 80037c0:	6847      	ldr	r7, [r0, #4]
{
 80037c2:	b089      	sub	sp, #36	; 0x24
 80037c4:	4615      	mov	r5, r2
 80037c6:	4699      	mov	r9, r3
	if (pwm < 1u || pwm > TIMER_MAX_CH) {
 80037c8:	d90f      	bls.n	80037ea <pwm_stm32_pin_set+0x36>
 80037ca:	4868      	ldr	r0, [pc, #416]	; (800396c <pwm_stm32_pin_set+0x1b8>)
 80037cc:	4b68      	ldr	r3, [pc, #416]	; (8003970 <pwm_stm32_pin_set+0x1bc>)
 80037ce:	1ac0      	subs	r0, r0, r3
 80037d0:	08c0      	lsrs	r0, r0, #3
		LOG_ERR("Invalid channel (%d)", pwm);
 80037d2:	0180      	lsls	r0, r0, #6
 80037d4:	460a      	mov	r2, r1
 80037d6:	f040 0001 	orr.w	r0, r0, #1
 80037da:	4966      	ldr	r1, [pc, #408]	; (8003974 <pwm_stm32_pin_set+0x1c0>)
 80037dc:	f002 ff4f 	bl	800667e <log_string_sync>
		return -EINVAL;
	}

	if (pulse_cycles > period_cycles) {
		LOG_ERR("Invalid combination of pulse and period cycles");
		return -EINVAL;
 80037e0:	f06f 0015 	mvn.w	r0, #21
	}



	return 0;
}
 80037e4:	b009      	add	sp, #36	; 0x24
 80037e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (pulse_cycles > period_cycles) {
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d90a      	bls.n	8003804 <pwm_stm32_pin_set+0x50>
 80037ee:	4b60      	ldr	r3, [pc, #384]	; (8003970 <pwm_stm32_pin_set+0x1bc>)
 80037f0:	485e      	ldr	r0, [pc, #376]	; (800396c <pwm_stm32_pin_set+0x1b8>)
		LOG_ERR("Invalid combination of pulse and period cycles");
 80037f2:	4961      	ldr	r1, [pc, #388]	; (8003978 <pwm_stm32_pin_set+0x1c4>)
 80037f4:	1ac0      	subs	r0, r0, r3
 80037f6:	08c0      	lsrs	r0, r0, #3
 80037f8:	0180      	lsls	r0, r0, #6
 80037fa:	f040 0001 	orr.w	r0, r0, #1
 80037fe:	f002 ff3e 	bl	800667e <log_string_sync>
 8003802:	e7ed      	b.n	80037e0 <pwm_stm32_pin_set+0x2c>
	if (!IS_TIM_32B_COUNTER_INSTANCE(cfg->timer) &&
 8003804:	6838      	ldr	r0, [r7, #0]
 8003806:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800380a:	d006      	beq.n	800381a <pwm_stm32_pin_set+0x66>
 800380c:	4b5b      	ldr	r3, [pc, #364]	; (800397c <pwm_stm32_pin_set+0x1c8>)
 800380e:	4298      	cmp	r0, r3
 8003810:	d003      	beq.n	800381a <pwm_stm32_pin_set+0x66>
 8003812:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003816:	f200 80a6 	bhi.w	8003966 <pwm_stm32_pin_set+0x1b2>
	channel = ch2ll[pwm - 1u];
 800381a:	4b59      	ldr	r3, [pc, #356]	; (8003980 <pwm_stm32_pin_set+0x1cc>)
 800381c:	f853 402c 	ldr.w	r4, [r3, ip, lsl #2]
	if (period_cycles == 0u) {
 8003820:	b92d      	cbnz	r5, 800382e <pwm_stm32_pin_set+0x7a>
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  CLEAR_BIT(TIMx->CCER, Channels);
 8003822:	6a01      	ldr	r1, [r0, #32]
 8003824:	ea21 0104 	bic.w	r1, r1, r4
 8003828:	6201      	str	r1, [r0, #32]
	return 0;
 800382a:	2000      	movs	r0, #0
}
 800382c:	e7da      	b.n	80037e4 <pwm_stm32_pin_set+0x30>
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_CC_IsEnabledChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 800382e:	6a03      	ldr	r3, [r0, #32]
 8003830:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 8003834:	ea34 0303 	bics.w	r3, r4, r3
 8003838:	f006 0601 	and.w	r6, r6, #1
 800383c:	d105      	bne.n	800384a <pwm_stm32_pin_set+0x96>
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800383e:	2c01      	cmp	r4, #1
	return LL_TIM_OCPOLARITY_LOW;
 8003840:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8003844:	d15c      	bne.n	8003900 <pwm_stm32_pin_set+0x14c>
 8003846:	2200      	movs	r2, #0
 8003848:	e06e      	b.n	8003928 <pwm_stm32_pin_set+0x174>
		LL_TIM_OC_StructInit(&oc_init);
 800384a:	4668      	mov	r0, sp
 800384c:	f004 ff40 	bl	80086d0 <LL_TIM_OC_StructInit>
		oc_init.OCState = LL_TIM_OCSTATE_ENABLE;
 8003850:	f04f 0801 	mov.w	r8, #1
 8003854:	2360      	movs	r3, #96	; 0x60
 8003856:	e9cd 3800 	strd	r3, r8, [sp]
		return LL_TIM_OCPOLARITY_HIGH;
 800385a:	fa06 f608 	lsl.w	r6, r6, r8
		oc_init.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 800385e:	2300      	movs	r3, #0
		if (LL_TIM_OC_Init(cfg->timer, channel, &oc_init) != SUCCESS) {
 8003860:	6838      	ldr	r0, [r7, #0]
		oc_init.CompareValue = pulse_cycles;
 8003862:	f8cd 900c 	str.w	r9, [sp, #12]
		if (LL_TIM_OC_Init(cfg->timer, channel, &oc_init) != SUCCESS) {
 8003866:	466a      	mov	r2, sp
 8003868:	4621      	mov	r1, r4
		oc_init.OCPolarity = get_polarity(flags);
 800386a:	9604      	str	r6, [sp, #16]
		oc_init.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 800386c:	9306      	str	r3, [sp, #24]
		if (LL_TIM_OC_Init(cfg->timer, channel, &oc_init) != SUCCESS) {
 800386e:	f001 fa4f 	bl	8004d10 <LL_TIM_OC_Init>
 8003872:	b160      	cbz	r0, 800388e <pwm_stm32_pin_set+0xda>
 8003874:	4b3e      	ldr	r3, [pc, #248]	; (8003970 <pwm_stm32_pin_set+0x1bc>)
 8003876:	483d      	ldr	r0, [pc, #244]	; (800396c <pwm_stm32_pin_set+0x1b8>)
			LOG_ERR("Could not initialize timer channel output");
 8003878:	4942      	ldr	r1, [pc, #264]	; (8003984 <pwm_stm32_pin_set+0x1d0>)
 800387a:	1ac0      	subs	r0, r0, r3
 800387c:	08c0      	lsrs	r0, r0, #3
 800387e:	0180      	lsls	r0, r0, #6
 8003880:	ea40 0008 	orr.w	r0, r0, r8
 8003884:	f002 fefb 	bl	800667e <log_string_sync>
			return -EIO;
 8003888:	f06f 0004 	mvn.w	r0, #4
 800388c:	e7aa      	b.n	80037e4 <pwm_stm32_pin_set+0x30>
		LL_TIM_EnableARRPreload(cfg->timer);
 800388e:	683b      	ldr	r3, [r7, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8003890:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8003892:	2c01      	cmp	r4, #1
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8003894:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003898:	601a      	str	r2, [r3, #0]
   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800389a:	d013      	beq.n	80038c4 <pwm_stm32_pin_set+0x110>
 800389c:	2c04      	cmp	r4, #4
 800389e:	d023      	beq.n	80038e8 <pwm_stm32_pin_set+0x134>
 80038a0:	2c10      	cmp	r4, #16
 80038a2:	d023      	beq.n	80038ec <pwm_stm32_pin_set+0x138>
 80038a4:	2c40      	cmp	r4, #64	; 0x40
 80038a6:	d023      	beq.n	80038f0 <pwm_stm32_pin_set+0x13c>
 80038a8:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80038ac:	d022      	beq.n	80038f4 <pwm_stm32_pin_set+0x140>
 80038ae:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80038b2:	d021      	beq.n	80038f8 <pwm_stm32_pin_set+0x144>
 80038b4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80038b8:	d020      	beq.n	80038fc <pwm_stm32_pin_set+0x148>
 80038ba:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 80038be:	bf0c      	ite	eq
 80038c0:	2007      	moveq	r0, #7
 80038c2:	2008      	movne	r0, #8
   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80038c4:	4a30      	ldr	r2, [pc, #192]	; (8003988 <pwm_stm32_pin_set+0x1d4>)
 80038c6:	5c14      	ldrb	r4, [r2, r0]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80038c8:	4a30      	ldr	r2, [pc, #192]	; (800398c <pwm_stm32_pin_set+0x1d8>)
   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80038ca:	f103 0118 	add.w	r1, r3, #24
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80038ce:	5c10      	ldrb	r0, [r2, r0]
 80038d0:	5866      	ldr	r6, [r4, r1]
 80038d2:	2208      	movs	r2, #8
 80038d4:	4082      	lsls	r2, r0
 80038d6:	4332      	orrs	r2, r6
 80038d8:	5062      	str	r2, [r4, r1]
		LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
 80038da:	3d01      	subs	r5, #1
  WRITE_REG(TIMx->ARR, AutoReload);
 80038dc:	62dd      	str	r5, [r3, #44]	; 0x2c
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80038de:	695a      	ldr	r2, [r3, #20]
 80038e0:	f042 0201 	orr.w	r2, r2, #1
 80038e4:	615a      	str	r2, [r3, #20]
 80038e6:	e7a0      	b.n	800382a <pwm_stm32_pin_set+0x76>
   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80038e8:	4640      	mov	r0, r8
 80038ea:	e7eb      	b.n	80038c4 <pwm_stm32_pin_set+0x110>
 80038ec:	2002      	movs	r0, #2
 80038ee:	e7e9      	b.n	80038c4 <pwm_stm32_pin_set+0x110>
 80038f0:	2003      	movs	r0, #3
 80038f2:	e7e7      	b.n	80038c4 <pwm_stm32_pin_set+0x110>
 80038f4:	2004      	movs	r0, #4
 80038f6:	e7e5      	b.n	80038c4 <pwm_stm32_pin_set+0x110>
 80038f8:	2005      	movs	r0, #5
 80038fa:	e7e3      	b.n	80038c4 <pwm_stm32_pin_set+0x110>
 80038fc:	2006      	movs	r0, #6
 80038fe:	e7e1      	b.n	80038c4 <pwm_stm32_pin_set+0x110>
   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8003900:	2c04      	cmp	r4, #4
 8003902:	d024      	beq.n	800394e <pwm_stm32_pin_set+0x19a>
 8003904:	2c10      	cmp	r4, #16
 8003906:	d024      	beq.n	8003952 <pwm_stm32_pin_set+0x19e>
 8003908:	2c40      	cmp	r4, #64	; 0x40
 800390a:	d024      	beq.n	8003956 <pwm_stm32_pin_set+0x1a2>
 800390c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8003910:	d023      	beq.n	800395a <pwm_stm32_pin_set+0x1a6>
 8003912:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8003916:	d022      	beq.n	800395e <pwm_stm32_pin_set+0x1aa>
 8003918:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800391c:	d021      	beq.n	8003962 <pwm_stm32_pin_set+0x1ae>
 800391e:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8003922:	bf0c      	ite	eq
 8003924:	2207      	moveq	r2, #7
 8003926:	2208      	movne	r2, #8
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8003928:	4919      	ldr	r1, [pc, #100]	; (8003990 <pwm_stm32_pin_set+0x1dc>)
 800392a:	6a03      	ldr	r3, [r0, #32]
 800392c:	5c89      	ldrb	r1, [r1, r2]
 800392e:	2202      	movs	r2, #2
 8003930:	408a      	lsls	r2, r1
 8003932:	ea23 0302 	bic.w	r3, r3, r2
 8003936:	408e      	lsls	r6, r1
 8003938:	431e      	orrs	r6, r3
		set_timer_compare[pwm - 1u](cfg->timer, pulse_cycles);
 800393a:	4b16      	ldr	r3, [pc, #88]	; (8003994 <pwm_stm32_pin_set+0x1e0>)
 800393c:	6206      	str	r6, [r0, #32]
 800393e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8003942:	4649      	mov	r1, r9
 8003944:	4798      	blx	r3
		LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	3d01      	subs	r5, #1
  WRITE_REG(TIMx->ARR, AutoReload);
 800394a:	62dd      	str	r5, [r3, #44]	; 0x2c
 800394c:	e76d      	b.n	800382a <pwm_stm32_pin_set+0x76>
   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800394e:	2201      	movs	r2, #1
 8003950:	e7ea      	b.n	8003928 <pwm_stm32_pin_set+0x174>
 8003952:	2202      	movs	r2, #2
 8003954:	e7e8      	b.n	8003928 <pwm_stm32_pin_set+0x174>
 8003956:	2203      	movs	r2, #3
 8003958:	e7e6      	b.n	8003928 <pwm_stm32_pin_set+0x174>
 800395a:	2204      	movs	r2, #4
 800395c:	e7e4      	b.n	8003928 <pwm_stm32_pin_set+0x174>
 800395e:	2205      	movs	r2, #5
 8003960:	e7e2      	b.n	8003928 <pwm_stm32_pin_set+0x174>
 8003962:	2206      	movs	r2, #6
 8003964:	e7e0      	b.n	8003928 <pwm_stm32_pin_set+0x174>
		return -ENOTSUP;
 8003966:	f06f 0022 	mvn.w	r0, #34	; 0x22
 800396a:	e73b      	b.n	80037e4 <pwm_stm32_pin_set+0x30>
 800396c:	08008d6c 	.word	0x08008d6c
 8003970:	08008d1c 	.word	0x08008d1c
 8003974:	08009c65 	.word	0x08009c65
 8003978:	08009c7a 	.word	0x08009c7a
 800397c:	40000c00 	.word	0x40000c00
 8003980:	08008fac 	.word	0x08008fac
 8003984:	08009ca9 	.word	0x08009ca9
 8003988:	08009d58 	.word	0x08009d58
 800398c:	08009d6a 	.word	0x08009d6a
 8003990:	08009d61 	.word	0x08009d61
 8003994:	08008fec 	.word	0x08008fec

08003998 <pwm_stm32_init>:
	.pin_set = pwm_stm32_pin_set,
	.get_cycles_per_sec = pwm_stm32_get_cycles_per_sec,
};

static int pwm_stm32_init(const struct device *dev)
{
 8003998:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct pwm_stm32_data *data = dev->data;
 800399a:	68c7      	ldr	r7, [r0, #12]
	const struct pwm_stm32_config *cfg = dev->config;
 800399c:	6845      	ldr	r5, [r0, #4]
{
 800399e:	b087      	sub	sp, #28
 80039a0:	483b      	ldr	r0, [pc, #236]	; (8003a90 <pwm_stm32_init+0xf8>)
 80039a2:	f001 fc55 	bl	8005250 <z_impl_device_get_binding>
 80039a6:	6883      	ldr	r3, [r0, #8]

	/* enable clock and store its speed */
	clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
	__ASSERT_NO_MSG(clk);

	r = clock_control_on(clk, (clock_control_subsys_t *)&cfg->pclken);
 80039a8:	f105 0608 	add.w	r6, r5, #8
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4631      	mov	r1, r6
 80039b0:	4798      	blx	r3
	if (r < 0) {
 80039b2:	1e04      	subs	r4, r0, #0
 80039b4:	da0d      	bge.n	80039d2 <pwm_stm32_init+0x3a>
 80039b6:	4837      	ldr	r0, [pc, #220]	; (8003a94 <pwm_stm32_init+0xfc>)
 80039b8:	4b37      	ldr	r3, [pc, #220]	; (8003a98 <pwm_stm32_init+0x100>)
		LOG_ERR("Could not initialize clock (%d)", r);
 80039ba:	4938      	ldr	r1, [pc, #224]	; (8003a9c <pwm_stm32_init+0x104>)
 80039bc:	1ac0      	subs	r0, r0, r3
 80039be:	08c0      	lsrs	r0, r0, #3
 80039c0:	0180      	lsls	r0, r0, #6
 80039c2:	4622      	mov	r2, r4
	/* configure pinmux */
	r = stm32_dt_pinctrl_configure(cfg->pinctrl,
				       cfg->pinctrl_len,
				       (uint32_t)cfg->timer);
	if (r < 0) {
		LOG_ERR("PWM pinctrl setup failed (%d)", r);
 80039c4:	f040 0001 	orr.w	r0, r0, #1
 80039c8:	f002 fe59 	bl	800667e <log_string_sync>
	}

	LL_TIM_EnableCounter(cfg->timer);

	return 0;
}
 80039cc:	4620      	mov	r0, r4
 80039ce:	b007      	add	sp, #28
 80039d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039d2:	482f      	ldr	r0, [pc, #188]	; (8003a90 <pwm_stm32_init+0xf8>)
 80039d4:	f001 fc3c 	bl	8005250 <z_impl_device_get_binding>
		(const struct clock_control_driver_api *)dev->api;

	__ASSERT(api->get_rate != NULL, "%s not implemented for device %s",
		__func__, dev->name);

	return api->get_rate(dev, sys, rate);
 80039d8:	6883      	ldr	r3, [r0, #8]
 80039da:	aa01      	add	r2, sp, #4
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	4631      	mov	r1, r6
 80039e0:	4798      	blx	r3
	if (r < 0) {
 80039e2:	1e04      	subs	r4, r0, #0
 80039e4:	db10      	blt.n	8003a08 <pwm_stm32_init+0x70>
		*tim_clk = bus_clk;
 80039e6:	9b01      	ldr	r3, [sp, #4]
 80039e8:	603b      	str	r3, [r7, #0]
	r = stm32_dt_pinctrl_configure(cfg->pinctrl,
 80039ea:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80039ee:	682a      	ldr	r2, [r5, #0]
 80039f0:	f7fe fab0 	bl	8001f54 <stm32_dt_pinctrl_configure>
	if (r < 0) {
 80039f4:	1e04      	subs	r4, r0, #0
 80039f6:	da0f      	bge.n	8003a18 <pwm_stm32_init+0x80>
 80039f8:	4826      	ldr	r0, [pc, #152]	; (8003a94 <pwm_stm32_init+0xfc>)
 80039fa:	4b27      	ldr	r3, [pc, #156]	; (8003a98 <pwm_stm32_init+0x100>)
		LOG_ERR("PWM pinctrl setup failed (%d)", r);
 80039fc:	4928      	ldr	r1, [pc, #160]	; (8003aa0 <pwm_stm32_init+0x108>)
 80039fe:	1ac0      	subs	r0, r0, r3
 8003a00:	08c0      	lsrs	r0, r0, #3
 8003a02:	0180      	lsls	r0, r0, #6
 8003a04:	4622      	mov	r2, r4
 8003a06:	e7dd      	b.n	80039c4 <pwm_stm32_init+0x2c>
 8003a08:	4822      	ldr	r0, [pc, #136]	; (8003a94 <pwm_stm32_init+0xfc>)
 8003a0a:	4b23      	ldr	r3, [pc, #140]	; (8003a98 <pwm_stm32_init+0x100>)
		LOG_ERR("Could not obtain timer clock (%d)", r);
 8003a0c:	4925      	ldr	r1, [pc, #148]	; (8003aa4 <pwm_stm32_init+0x10c>)
 8003a0e:	1ac0      	subs	r0, r0, r3
 8003a10:	08c0      	lsrs	r0, r0, #3
 8003a12:	0180      	lsls	r0, r0, #6
 8003a14:	4622      	mov	r2, r4
 8003a16:	e7d5      	b.n	80039c4 <pwm_stm32_init+0x2c>
	LL_TIM_StructInit(&init);
 8003a18:	a801      	add	r0, sp, #4
 8003a1a:	f004 fe50 	bl	80086be <LL_TIM_StructInit>
	init.Prescaler = cfg->prescaler;
 8003a1e:	686b      	ldr	r3, [r5, #4]
 8003a20:	f8ad 3004 	strh.w	r3, [sp, #4]
	if (LL_TIM_Init(cfg->timer, &init) != SUCCESS) {
 8003a24:	6828      	ldr	r0, [r5, #0]
	init.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003a26:	2300      	movs	r3, #0
	if (LL_TIM_Init(cfg->timer, &init) != SUCCESS) {
 8003a28:	a901      	add	r1, sp, #4
	init.Autoreload = 0u;
 8003a2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	init.RepetitionCounter = 0u;
 8003a2e:	e9cd 3304 	strd	r3, r3, [sp, #16]
	if (LL_TIM_Init(cfg->timer, &init) != SUCCESS) {
 8003a32:	f001 f909 	bl	8004c48 <LL_TIM_Init>
 8003a36:	b160      	cbz	r0, 8003a52 <pwm_stm32_init+0xba>
 8003a38:	4b17      	ldr	r3, [pc, #92]	; (8003a98 <pwm_stm32_init+0x100>)
 8003a3a:	4816      	ldr	r0, [pc, #88]	; (8003a94 <pwm_stm32_init+0xfc>)
		LOG_ERR("Could not initialize timer");
 8003a3c:	491a      	ldr	r1, [pc, #104]	; (8003aa8 <pwm_stm32_init+0x110>)
 8003a3e:	1ac0      	subs	r0, r0, r3
 8003a40:	08c0      	lsrs	r0, r0, #3
 8003a42:	0180      	lsls	r0, r0, #6
 8003a44:	f040 0001 	orr.w	r0, r0, #1
 8003a48:	f002 fe19 	bl	800667e <log_string_sync>
		return -EIO;
 8003a4c:	f06f 0404 	mvn.w	r4, #4
 8003a50:	e7bc      	b.n	80039cc <pwm_stm32_init+0x34>
	if (IS_TIM_BREAK_INSTANCE(cfg->timer)) {
 8003a52:	682b      	ldr	r3, [r5, #0]
 8003a54:	4a15      	ldr	r2, [pc, #84]	; (8003aac <pwm_stm32_init+0x114>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00f      	beq.n	8003a7a <pwm_stm32_init+0xe2>
 8003a5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d00b      	beq.n	8003a7a <pwm_stm32_init+0xe2>
 8003a62:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d007      	beq.n	8003a7a <pwm_stm32_init+0xe2>
 8003a6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d003      	beq.n	8003a7a <pwm_stm32_init+0xe2>
 8003a72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d103      	bne.n	8003a82 <pwm_stm32_init+0xea>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8003a7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a80:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	f042 0201 	orr.w	r2, r2, #1
 8003a88:	601a      	str	r2, [r3, #0]
	return 0;
 8003a8a:	2400      	movs	r4, #0
 8003a8c:	e79e      	b.n	80039cc <pwm_stm32_init+0x34>
 8003a8e:	bf00      	nop
 8003a90:	080095b0 	.word	0x080095b0
 8003a94:	08008d6c 	.word	0x08008d6c
 8003a98:	08008d1c 	.word	0x08008d1c
 8003a9c:	08009cd3 	.word	0x08009cd3
 8003aa0:	08009d15 	.word	0x08009d15
 8003aa4:	08009cf3 	.word	0x08009cf3
 8003aa8:	08009d33 	.word	0x08009d33
 8003aac:	40012c00 	.word	0x40012c00

08003ab0 <spi_stm32_get_err>:
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
}

static int spi_stm32_get_err(SPI_TypeDef *spi)
{
	uint32_t sr = LL_SPI_ReadReg(spi, SR);
 8003ab0:	6883      	ldr	r3, [r0, #8]

	if (sr & SPI_STM32_ERR_MSK) {
 8003ab2:	f413 73b8 	ands.w	r3, r3, #368	; 0x170
{
 8003ab6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ab8:	4605      	mov	r5, r0
	if (sr & SPI_STM32_ERR_MSK) {
 8003aba:	d016      	beq.n	8003aea <spi_stm32_get_err+0x3a>
 8003abc:	480c      	ldr	r0, [pc, #48]	; (8003af0 <spi_stm32_get_err+0x40>)
 8003abe:	4c0d      	ldr	r4, [pc, #52]	; (8003af4 <spi_stm32_get_err+0x44>)
		LOG_ERR("%s: err=%d", __func__,
 8003ac0:	4a0d      	ldr	r2, [pc, #52]	; (8003af8 <spi_stm32_get_err+0x48>)
 8003ac2:	490e      	ldr	r1, [pc, #56]	; (8003afc <spi_stm32_get_err+0x4c>)
 8003ac4:	1a24      	subs	r4, r4, r0
 8003ac6:	08e4      	lsrs	r4, r4, #3
 8003ac8:	01a4      	lsls	r4, r4, #6
 8003aca:	f044 0001 	orr.w	r0, r4, #1
 8003ace:	f002 fdd6 	bl	800667e <log_string_sync>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_OVR(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 8003ad2:	68ab      	ldr	r3, [r5, #8]
 8003ad4:	065b      	lsls	r3, r3, #25
 8003ad6:	d505      	bpl.n	8003ae4 <spi_stm32_get_err+0x34>
  * @retval None
  */
__STATIC_INLINE void LL_SPI_ClearFlag_OVR(SPI_TypeDef *SPIx)
{
  __IO uint32_t tmpreg;
  tmpreg = SPIx->DR;
 8003ad8:	68eb      	ldr	r3, [r5, #12]
 8003ada:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003adc:	9b01      	ldr	r3, [sp, #4]
  tmpreg = SPIx->SR;
 8003ade:	68ab      	ldr	r3, [r5, #8]
 8003ae0:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003ae2:	9b01      	ldr	r3, [sp, #4]
		/* OVR error must be explicitly cleared */
		if (LL_SPI_IsActiveFlag_OVR(spi)) {
			LL_SPI_ClearFlag_OVR(spi);
		}

		return -EIO;
 8003ae4:	f06f 0004 	mvn.w	r0, #4
 8003ae8:	e000      	b.n	8003aec <spi_stm32_get_err+0x3c>
	}

	return 0;
 8003aea:	4618      	mov	r0, r3
}
 8003aec:	b003      	add	sp, #12
 8003aee:	bd30      	pop	{r4, r5, pc}
 8003af0:	08008d1c 	.word	0x08008d1c
 8003af4:	08008d7c 	.word	0x08008d7c
 8003af8:	08009e48 	.word	0x08009e48
 8003afc:	08009d73 	.word	0x08009d73

08003b00 <spi_stm32_init>:
#endif
	.release = spi_stm32_release,
};

static int spi_stm32_init(const struct device *dev)
{
 8003b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct spi_stm32_data *data __attribute__((unused)) = dev->data;
 8003b04:	f8d0 800c 	ldr.w	r8, [r0, #12]
	const struct spi_stm32_config *cfg = dev->config;
 8003b08:	6846      	ldr	r6, [r0, #4]
{
 8003b0a:	4605      	mov	r5, r0
 8003b0c:	4819      	ldr	r0, [pc, #100]	; (8003b74 <spi_stm32_init+0x74>)
 8003b0e:	f001 fb9f 	bl	8005250 <z_impl_device_get_binding>
	return api->on(dev, sys);
 8003b12:	6883      	ldr	r3, [r0, #8]
 8003b14:	4631      	mov	r1, r6
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4798      	blx	r3
	int err;

	__ASSERT_NO_MSG(device_get_binding(STM32_CLOCK_CONTROL_NAME));

	if (clock_control_on(device_get_binding(STM32_CLOCK_CONTROL_NAME),
 8003b1a:	4607      	mov	r7, r0
 8003b1c:	b170      	cbz	r0, 8003b3c <spi_stm32_init+0x3c>
 8003b1e:	4b16      	ldr	r3, [pc, #88]	; (8003b78 <spi_stm32_init+0x78>)
 8003b20:	4816      	ldr	r0, [pc, #88]	; (8003b7c <spi_stm32_init+0x7c>)
			       (clock_control_subsys_t) &cfg->pclken) != 0) {
		LOG_ERR("Could not enable SPI clock");
 8003b22:	4917      	ldr	r1, [pc, #92]	; (8003b80 <spi_stm32_init+0x80>)
 8003b24:	1ac0      	subs	r0, r0, r3
 8003b26:	08c0      	lsrs	r0, r0, #3
 8003b28:	0180      	lsls	r0, r0, #6
 8003b2a:	f040 0001 	orr.w	r0, r0, #1
 8003b2e:	f002 fda6 	bl	800667e <log_string_sync>
		return -EIO;
 8003b32:	f06f 0404 	mvn.w	r4, #4
	}
#endif /* CONFIG_SPI_STM32_DMA */
	spi_context_unlock_unconditionally(&data->ctx);

	return 0;
}
 8003b36:	4620      	mov	r0, r4
 8003b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = stm32_dt_pinctrl_configure(cfg->pinctrl_list,
 8003b3c:	e9d6 0103 	ldrd	r0, r1, [r6, #12]
 8003b40:	68b2      	ldr	r2, [r6, #8]
 8003b42:	f7fe fa07 	bl	8001f54 <stm32_dt_pinctrl_configure>
	if (err < 0) {
 8003b46:	1e04      	subs	r4, r0, #0
 8003b48:	da0b      	bge.n	8003b62 <spi_stm32_init+0x62>
 8003b4a:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <spi_stm32_init+0x78>)
 8003b4c:	480b      	ldr	r0, [pc, #44]	; (8003b7c <spi_stm32_init+0x7c>)
		LOG_ERR("SPI pinctrl setup failed (%d)", err);
 8003b4e:	490d      	ldr	r1, [pc, #52]	; (8003b84 <spi_stm32_init+0x84>)
 8003b50:	1ac0      	subs	r0, r0, r3
 8003b52:	08c0      	lsrs	r0, r0, #3
 8003b54:	0180      	lsls	r0, r0, #6
 8003b56:	4622      	mov	r2, r4
 8003b58:	f040 0001 	orr.w	r0, r0, #1
 8003b5c:	f002 fd8f 	bl	800667e <log_string_sync>
		return err;
 8003b60:	e7e9      	b.n	8003b36 <spi_stm32_init+0x36>
	cfg->irq_config(dev);
 8003b62:	6973      	ldr	r3, [r6, #20]
 8003b64:	4628      	mov	r0, r5
 8003b66:	4798      	blx	r3
	spi_context_unlock_unconditionally(&data->ctx);
 8003b68:	4640      	mov	r0, r8
 8003b6a:	f003 fa96 	bl	800709a <spi_context_unlock_unconditionally>
	return 0;
 8003b6e:	463c      	mov	r4, r7
 8003b70:	e7e1      	b.n	8003b36 <spi_stm32_init+0x36>
 8003b72:	bf00      	nop
 8003b74:	080095b0 	.word	0x080095b0
 8003b78:	08008d1c 	.word	0x08008d1c
 8003b7c:	08008d7c 	.word	0x08008d7c
 8003b80:	08009d7e 	.word	0x08009d7e
 8003b84:	08009d99 	.word	0x08009d99

08003b88 <spi_stm32_transceive>:
{
 8003b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b8c:	461e      	mov	r6, r3
	SPI_TypeDef *spi = cfg->spi;
 8003b8e:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = DEV_DATA(dev);
 8003b90:	68c5      	ldr	r5, [r0, #12]
	SPI_TypeDef *spi = cfg->spi;
 8003b92:	f8d3 8008 	ldr.w	r8, [r3, #8]
{
 8003b96:	b08d      	sub	sp, #52	; 0x34
 8003b98:	4604      	mov	r4, r0
 8003b9a:	460f      	mov	r7, r1
	if (!tx_bufs && !rx_bufs) {
 8003b9c:	4691      	mov	r9, r2
 8003b9e:	b90a      	cbnz	r2, 8003ba4 <spi_stm32_transceive+0x1c>
 8003ba0:	2e00      	cmp	r6, #0
 8003ba2:	d03e      	beq.n	8003c22 <spi_stm32_transceive+0x9a>
static inline void spi_context_lock(struct spi_context *ctx,
				    bool asynchronous,
				    struct k_poll_signal *signal,
				    const struct spi_config *spi_cfg)
{
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8003ba4:	88bb      	ldrh	r3, [r7, #4]
 8003ba6:	045b      	lsls	r3, r3, #17
 8003ba8:	d43f      	bmi.n	8003c2a <spi_stm32_transceive+0xa2>
	return z_impl_k_sem_take(sem, timeout);
 8003baa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bb2:	f105 0008 	add.w	r0, r5, #8
 8003bb6:	f002 f993 	bl	8005ee0 <z_impl_k_sem_take>
		(ctx->owner == spi_cfg)) {
			return;
	}

	k_sem_take(&ctx->lock, K_FOREVER);
	ctx->owner = spi_cfg;
 8003bba:	606f      	str	r7, [r5, #4]
	const uint32_t scaler[] = {
 8003bbc:	f8df c2b8 	ldr.w	ip, [pc, #696]	; 8003e78 <spi_stm32_transceive+0x2f0>
	struct spi_stm32_data *data = DEV_DATA(dev);
 8003bc0:	f8d4 a00c 	ldr.w	sl, [r4, #12]
	const struct spi_stm32_config *cfg = DEV_CFG(dev);
 8003bc4:	f8d4 b004 	ldr.w	fp, [r4, #4]
	const uint32_t scaler[] = {
 8003bc8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003bcc:	ac04      	add	r4, sp, #16
 8003bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bd0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8003bd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (spi_context_configured(&data->ctx, config)) {
 8003bd8:	f8da 3000 	ldr.w	r3, [sl]
 8003bdc:	429f      	cmp	r7, r3
 8003bde:	f000 80b5 	beq.w	8003d4c <spi_stm32_transceive+0x1c4>
	if ((SPI_WORD_SIZE_GET(config->operation) != 8)
 8003be2:	88bb      	ldrh	r3, [r7, #4]
 8003be4:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d002      	beq.n	8003bf2 <spi_stm32_transceive+0x6a>
	    && (SPI_WORD_SIZE_GET(config->operation) != 16)) {
 8003bec:	2b10      	cmp	r3, #16
 8003bee:	f040 8110 	bne.w	8003e12 <spi_stm32_transceive+0x28a>
	SPI_TypeDef *spi = cfg->spi;
 8003bf2:	f8db 4008 	ldr.w	r4, [fp, #8]
 8003bf6:	489a      	ldr	r0, [pc, #616]	; (8003e60 <spi_stm32_transceive+0x2d8>)
 8003bf8:	f001 fb2a 	bl	8005250 <z_impl_device_get_binding>
	return api->get_rate(dev, sys, rate);
 8003bfc:	6883      	ldr	r3, [r0, #8]
 8003bfe:	aa03      	add	r2, sp, #12
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	4659      	mov	r1, fp
 8003c04:	4798      	blx	r3
	if (clock_control_get_rate(device_get_binding(STM32_CLOCK_CONTROL_NAME),
 8003c06:	2800      	cmp	r0, #0
 8003c08:	da16      	bge.n	8003c38 <spi_stm32_transceive+0xb0>
 8003c0a:	4b96      	ldr	r3, [pc, #600]	; (8003e64 <spi_stm32_transceive+0x2dc>)
 8003c0c:	4896      	ldr	r0, [pc, #600]	; (8003e68 <spi_stm32_transceive+0x2e0>)
		LOG_ERR("Failed call clock_control_get_rate");
 8003c0e:	4997      	ldr	r1, [pc, #604]	; (8003e6c <spi_stm32_transceive+0x2e4>)
 8003c10:	1ac0      	subs	r0, r0, r3
 8003c12:	08c0      	lsrs	r0, r0, #3
 8003c14:	0180      	lsls	r0, r0, #6
 8003c16:	f040 0001 	orr.w	r0, r0, #1
 8003c1a:	f002 fd30 	bl	800667e <log_string_sync>
		return -EIO;
 8003c1e:	f06f 0604 	mvn.w	r6, #4
}
 8003c22:	4630      	mov	r0, r6
 8003c24:	b00d      	add	sp, #52	; 0x34
 8003c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
 8003c2a:	692b      	ldr	r3, [r5, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1bc      	bne.n	8003baa <spi_stm32_transceive+0x22>
		(k_sem_count_get(&ctx->lock) == 0) &&
 8003c30:	686b      	ldr	r3, [r5, #4]
 8003c32:	429f      	cmp	r7, r3
 8003c34:	d1b9      	bne.n	8003baa <spi_stm32_transceive+0x22>
 8003c36:	e7c1      	b.n	8003bbc <spi_stm32_transceive+0x34>
		uint32_t clk = clock >> br;
 8003c38:	9b03      	ldr	r3, [sp, #12]
		if (clk <= config->frequency) {
 8003c3a:	683a      	ldr	r2, [r7, #0]
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8003c3c:	2101      	movs	r1, #1
		uint32_t clk = clock >> br;
 8003c3e:	fa23 f001 	lsr.w	r0, r3, r1
		if (clk <= config->frequency) {
 8003c42:	4290      	cmp	r0, r2
 8003c44:	f240 80f5 	bls.w	8003e32 <spi_stm32_transceive+0x2aa>
	for (br = 1 ; br <= ARRAY_SIZE(scaler) ; ++br) {
 8003c48:	3101      	adds	r1, #1
 8003c4a:	2909      	cmp	r1, #9
 8003c4c:	d1f7      	bne.n	8003c3e <spi_stm32_transceive+0xb6>
 8003c4e:	4985      	ldr	r1, [pc, #532]	; (8003e64 <spi_stm32_transceive+0x2dc>)
 8003c50:	4885      	ldr	r0, [pc, #532]	; (8003e68 <spi_stm32_transceive+0x2e0>)
 8003c52:	1a40      	subs	r0, r0, r1
 8003c54:	08c0      	lsrs	r0, r0, #3
		LOG_ERR("Unsupported frequency %uHz, max %uHz, min %uHz",
 8003c56:	0a19      	lsrs	r1, r3, #8
 8003c58:	0180      	lsls	r0, r0, #6
 8003c5a:	9100      	str	r1, [sp, #0]
 8003c5c:	085b      	lsrs	r3, r3, #1
 8003c5e:	4984      	ldr	r1, [pc, #528]	; (8003e70 <spi_stm32_transceive+0x2e8>)
 8003c60:	f040 0001 	orr.w	r0, r0, #1
 8003c64:	f002 fd0b 	bl	800667e <log_string_sync>
		return -EINVAL;
 8003c68:	f06f 0615 	mvn.w	r6, #21
 8003c6c:	e7d9      	b.n	8003c22 <spi_stm32_transceive+0x9a>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8003c6e:	6822      	ldr	r2, [r4, #0]
 8003c70:	f042 0202 	orr.w	r2, r2, #2
 8003c74:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPHA, ClockPhase);
 8003c76:	6822      	ldr	r2, [r4, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPHA) {
 8003c78:	0758      	lsls	r0, r3, #29
 8003c7a:	bf4c      	ite	mi
 8003c7c:	f042 0201 	orrmi.w	r2, r2, #1
 8003c80:	f022 0201 	bicpl.w	r2, r2, #1
 8003c84:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_RXONLY | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE, TransferDirection);
 8003c86:	6822      	ldr	r2, [r4, #0]
 8003c88:	f422 4244 	bic.w	r2, r2, #50176	; 0xc400
 8003c8c:	6022      	str	r2, [r4, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_LSBFIRST, BitOrder);
 8003c8e:	6822      	ldr	r2, [r4, #0]
	if (config->operation & SPI_TRANSFER_LSB) {
 8003c90:	06d9      	lsls	r1, r3, #27
 8003c92:	bf4c      	ite	mi
 8003c94:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
 8003c98:	f022 0280 	bicpl.w	r2, r2, #128	; 0x80
 8003c9c:	6022      	str	r2, [r4, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_CRCEN);
 8003c9e:	6822      	ldr	r2, [r4, #0]
 8003ca0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ca4:	6022      	str	r2, [r4, #0]
	if (config->cs || !IS_ENABLED(CONFIG_SPI_STM32_USE_HW_SS)) {
 8003ca6:	68ba      	ldr	r2, [r7, #8]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8003ca8:	6821      	ldr	r1, [r4, #0]
 8003caa:	f003 0001 	and.w	r0, r3, #1
 8003cae:	b15a      	cbz	r2, 8003cc8 <spi_stm32_transceive+0x140>
 8003cb0:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003cb4:	6021      	str	r1, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8003cb6:	6861      	ldr	r1, [r4, #4]
 8003cb8:	f021 0104 	bic.w	r1, r1, #4
 8003cbc:	6061      	str	r1, [r4, #4]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 8003cbe:	b968      	cbnz	r0, 8003cdc <spi_stm32_transceive+0x154>
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8003cc0:	6821      	ldr	r1, [r4, #0]
 8003cc2:	f441 7182 	orr.w	r1, r1, #260	; 0x104
 8003cc6:	e00c      	b.n	8003ce2 <spi_stm32_transceive+0x15a>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8003cc8:	f421 7100 	bic.w	r1, r1, #512	; 0x200
		if (config->operation & SPI_OP_MODE_SLAVE) {
 8003ccc:	2800      	cmp	r0, #0
 8003cce:	f000 808d 	beq.w	8003dec <spi_stm32_transceive+0x264>
 8003cd2:	6021      	str	r1, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8003cd4:	6861      	ldr	r1, [r4, #4]
 8003cd6:	f021 0104 	bic.w	r1, r1, #4
 8003cda:	6061      	str	r1, [r4, #4]
  MODIFY_REG(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI, Mode);
 8003cdc:	6821      	ldr	r1, [r4, #0]
 8003cde:	f421 7182 	bic.w	r1, r1, #260	; 0x104
 8003ce2:	6021      	str	r1, [r4, #0]
	if (SPI_WORD_SIZE_GET(config->operation) ==  8) {
 8003ce4:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8003ce8:	2b08      	cmp	r3, #8
  MODIFY_REG(SPIx->CR2, SPI_CR2_DS, DataWidth);
 8003cea:	6863      	ldr	r3, [r4, #4]
 8003cec:	bf06      	itte	eq
 8003cee:	f423 6370 	biceq.w	r3, r3, #3840	; 0xf00
 8003cf2:	f443 63e0 	orreq.w	r3, r3, #1792	; 0x700
 8003cf6:	f443 6370 	orrne.w	r3, r3, #3840	; 0xf00
 8003cfa:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8003cfc:	6863      	ldr	r3, [r4, #4]
 8003cfe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d02:	6063      	str	r3, [r4, #4]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8003d04:	6863      	ldr	r3, [r4, #4]
 8003d06:	f023 0310 	bic.w	r3, r3, #16
 8003d0a:	6063      	str	r3, [r4, #4]
	data->ctx.config = config;
 8003d0c:	f8ca 7000 	str.w	r7, [sl]
	return GPIO_ACTIVE_LOW;
}

static inline void spi_context_cs_configure(struct spi_context *ctx)
{
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
 8003d10:	2a00      	cmp	r2, #0
 8003d12:	d073      	beq.n	8003dfc <spi_stm32_transceive+0x274>
 8003d14:	6810      	ldr	r0, [r2, #0]
 8003d16:	2800      	cmp	r0, #0
 8003d18:	d070      	beq.n	8003dfc <spi_stm32_transceive+0x274>
		__ASSERT(spi_context_cs_active_level(ctx) ==
			 (ctx->config->cs->gpio_dt_flags & GPIO_ACTIVE_LOW),
			 "Devicetree and spi_context CS levels are not equal");
		gpio_pin_configure(ctx->config->cs->gpio_dev,
				   ctx->config->cs->gpio_pin,
				   ctx->config->cs->gpio_dt_flags |
 8003d1a:	7a54      	ldrb	r4, [r2, #9]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
 8003d1c:	f892 a008 	ldrb.w	sl, [r2, #8]
	struct gpio_driver_data *data =
 8003d20:	68c7      	ldr	r7, [r0, #12]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
 8003d22:	07e3      	lsls	r3, r4, #31
 8003d24:	bf54      	ite	pl
 8003d26:	f444 54b0 	orrpl.w	r4, r4, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
 8003d2a:	f484 6420 	eormi.w	r4, r4, #2560	; 0xa00
	return api->pin_configure(port, pin, flags);
 8003d2e:	6883      	ldr	r3, [r0, #8]
 8003d30:	4622      	mov	r2, r4
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4651      	mov	r1, sl
 8003d36:	4798      	blx	r3
	if (ret != 0) {
 8003d38:	b940      	cbnz	r0, 8003d4c <spi_stm32_transceive+0x1c4>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	fa02 f10a 	lsl.w	r1, r2, sl
 8003d42:	07e0      	lsls	r0, r4, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
 8003d44:	bf4c      	ite	mi
 8003d46:	430b      	orrmi	r3, r1
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 8003d48:	438b      	bicpl	r3, r1
 8003d4a:	603b      	str	r3, [r7, #0]
			       const struct spi_buf_set *rx_bufs,
			       uint8_t dfs)
{
	LOG_DBG("tx_bufs %p - rx_bufs %p - %u", tx_bufs, rx_bufs, dfs);

	if (tx_bufs) {
 8003d4c:	f1b9 0f00 	cmp.w	r9, #0
 8003d50:	d062      	beq.n	8003e18 <spi_stm32_transceive+0x290>
		ctx->current_tx = tx_bufs->buffers;
 8003d52:	f8d9 3000 	ldr.w	r3, [r9]
		ctx->tx_count = tx_bufs->count;
 8003d56:	f8d9 2004 	ldr.w	r2, [r9, #4]
		ctx->current_tx = tx_bufs->buffers;
 8003d5a:	62eb      	str	r3, [r5, #44]	; 0x2c
		ctx->tx_count = tx_bufs->count;
 8003d5c:	632a      	str	r2, [r5, #48]	; 0x30
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8003d5e:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
 8003d60:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8003d62:	63ea      	str	r2, [r5, #60]	; 0x3c
		ctx->tx_len = ctx->current_tx->len / dfs;
 8003d64:	642b      	str	r3, [r5, #64]	; 0x40
		ctx->tx_count = 0;
		ctx->tx_buf = NULL;
		ctx->tx_len = 0;
	}

	if (rx_bufs) {
 8003d66:	2e00      	cmp	r6, #0
 8003d68:	d05b      	beq.n	8003e22 <spi_stm32_transceive+0x29a>
		ctx->current_rx = rx_bufs->buffers;
 8003d6a:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = rx_bufs->count;
 8003d6c:	6872      	ldr	r2, [r6, #4]
		ctx->current_rx = rx_bufs->buffers;
 8003d6e:	636b      	str	r3, [r5, #52]	; 0x34
		ctx->rx_count = rx_bufs->count;
 8003d70:	63aa      	str	r2, [r5, #56]	; 0x38
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8003d72:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
 8003d74:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8003d76:	646a      	str	r2, [r5, #68]	; 0x44
		ctx->rx_len = ctx->current_rx->len / dfs;
 8003d78:	64ab      	str	r3, [r5, #72]	; 0x48
		ctx->rx_count = 0;
		ctx->rx_buf = NULL;
		ctx->rx_len = 0;
	}

	ctx->sync_status = 0;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	62ab      	str	r3, [r5, #40]	; 0x28
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8003d7e:	f8d8 2008 	ldr.w	r2, [r8, #8]
	while (ll_func_rx_is_not_empty(spi)) {
 8003d82:	f012 0201 	ands.w	r2, r2, #1
 8003d86:	d151      	bne.n	8003e2c <spi_stm32_transceive+0x2a4>
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003d88:	f8d8 3000 	ldr.w	r3, [r8]
 8003d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d90:	f8c8 3000 	str.w	r3, [r8]
	_spi_context_cs_control(ctx, on, false);
 8003d94:	2101      	movs	r1, #1
 8003d96:	4628      	mov	r0, r5
 8003d98:	f003 f95a 	bl	8007050 <_spi_context_cs_control.isra.0>
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableIT_ERR(SPI_TypeDef *SPIx)
{
  SET_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 8003d9c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003da0:	f043 0320 	orr.w	r3, r3, #32
 8003da4:	f8c8 3004 	str.w	r3, [r8, #4]
	if (rx_bufs) {
 8003da8:	b12e      	cbz	r6, 8003db6 <spi_stm32_transceive+0x22e>
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableIT_RXNE(SPI_TypeDef *SPIx)
{
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8003daa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003db2:	f8c8 3004 	str.w	r3, [r8, #4]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableIT_TXE(SPI_TypeDef *SPIx)
{
  SET_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8003db6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dbe:	f8c8 3004 	str.w	r3, [r8, #4]
 8003dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003dc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003dca:	f105 0018 	add.w	r0, r5, #24
 8003dce:	f002 f887 	bl	8005ee0 <z_impl_k_sem_take>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 8003dd2:	682b      	ldr	r3, [r5, #0]
	status = ctx->sync_status;
 8003dd4:	6aae      	ldr	r6, [r5, #40]	; 0x28
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
 8003dd6:	889b      	ldrh	r3, [r3, #4]
 8003dd8:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
 8003ddc:	f47f af21 	bne.w	8003c22 <spi_stm32_transceive+0x9a>
		ctx->owner = NULL;
 8003de0:	606b      	str	r3, [r5, #4]
	z_impl_k_sem_give(sem);
 8003de2:	f105 0008 	add.w	r0, r5, #8
 8003de6:	f002 f85b 	bl	8005ea0 <z_impl_k_sem_give>
}
 8003dea:	e71a      	b.n	8003c22 <spi_stm32_transceive+0x9a>
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSM,  NSS);
 8003dec:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8003df0:	6021      	str	r1, [r4, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, ((uint32_t)(NSS >> 16U)));
 8003df2:	6861      	ldr	r1, [r4, #4]
 8003df4:	f041 0104 	orr.w	r1, r1, #4
 8003df8:	6061      	str	r1, [r4, #4]
	if (config->operation & SPI_OP_MODE_SLAVE) {
 8003dfa:	e761      	b.n	8003cc0 <spi_stm32_transceive+0x138>
 8003dfc:	4b19      	ldr	r3, [pc, #100]	; (8003e64 <spi_stm32_transceive+0x2dc>)
 8003dfe:	481a      	ldr	r0, [pc, #104]	; (8003e68 <spi_stm32_transceive+0x2e0>)
		LOG_INF("CS control inhibited (no GPIO device)");
 8003e00:	491c      	ldr	r1, [pc, #112]	; (8003e74 <spi_stm32_transceive+0x2ec>)
 8003e02:	1ac0      	subs	r0, r0, r3
 8003e04:	08c0      	lsrs	r0, r0, #3
 8003e06:	0180      	lsls	r0, r0, #6
 8003e08:	f040 0003 	orr.w	r0, r0, #3
 8003e0c:	f002 fc37 	bl	800667e <log_string_sync>
	if (ret) {
 8003e10:	e79c      	b.n	8003d4c <spi_stm32_transceive+0x1c4>
		return -ENOTSUP;
 8003e12:	f06f 0622 	mvn.w	r6, #34	; 0x22
 8003e16:	e704      	b.n	8003c22 <spi_stm32_transceive+0x9a>
		ctx->tx_count = 0;
 8003e18:	e9c5 990b 	strd	r9, r9, [r5, #44]	; 0x2c
		ctx->tx_len = 0;
 8003e1c:	e9c5 990f 	strd	r9, r9, [r5, #60]	; 0x3c
 8003e20:	e7a1      	b.n	8003d66 <spi_stm32_transceive+0x1de>
		ctx->rx_count = 0;
 8003e22:	e9c5 660d 	strd	r6, r6, [r5, #52]	; 0x34
		ctx->rx_len = 0;
 8003e26:	e9c5 6611 	strd	r6, r6, [r5, #68]	; 0x44
 8003e2a:	e7a6      	b.n	8003d7a <spi_stm32_transceive+0x1f2>
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
  return (uint8_t)(READ_REG(SPIx->DR));
 8003e2c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8003e30:	e7a5      	b.n	8003d7e <spi_stm32_transceive+0x1f6>
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003e32:	6823      	ldr	r3, [r4, #0]
	LL_SPI_SetBaudRatePrescaler(spi, scaler[br - 1]);
 8003e34:	aa0c      	add	r2, sp, #48	; 0x30
 8003e36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e3a:	6023      	str	r3, [r4, #0]
 8003e3c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8003e40:	6823      	ldr	r3, [r4, #0]
 8003e42:	f851 2c24 	ldr.w	r2, [r1, #-36]
 8003e46:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	6023      	str	r3, [r4, #0]
	if (SPI_MODE_GET(config->operation) & SPI_MODE_CPOL) {
 8003e4e:	88bb      	ldrh	r3, [r7, #4]
 8003e50:	079a      	lsls	r2, r3, #30
 8003e52:	f53f af0c 	bmi.w	8003c6e <spi_stm32_transceive+0xe6>
  MODIFY_REG(SPIx->CR1, SPI_CR1_CPOL, ClockPolarity);
 8003e56:	6822      	ldr	r2, [r4, #0]
 8003e58:	f022 0202 	bic.w	r2, r2, #2
 8003e5c:	e70a      	b.n	8003c74 <spi_stm32_transceive+0xec>
 8003e5e:	bf00      	nop
 8003e60:	080095b0 	.word	0x080095b0
 8003e64:	08008d1c 	.word	0x08008d1c
 8003e68:	08008d7c 	.word	0x08008d7c
 8003e6c:	08009db7 	.word	0x08009db7
 8003e70:	08009e00 	.word	0x08009e00
 8003e74:	08009dda 	.word	0x08009dda
 8003e78:	08008da4 	.word	0x08008da4

08003e7c <uart_stm32_set_baudrate>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);

	uint32_t clock_rate;

	/* Get clock rate */
	if (clock_control_get_rate(data->clock,
 8003e7c:	68c3      	ldr	r3, [r0, #12]
{
 8003e7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e80:	460c      	mov	r4, r1
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003e82:	6841      	ldr	r1, [r0, #4]
	if (clock_control_get_rate(data->clock,
 8003e84:	6858      	ldr	r0, [r3, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003e86:	f851 5b08 	ldr.w	r5, [r1], #8
 8003e8a:	6883      	ldr	r3, [r0, #8]
 8003e8c:	aa01      	add	r2, sp, #4
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	4798      	blx	r3
	if (clock_control_get_rate(data->clock,
 8003e92:	2800      	cmp	r0, #0
 8003e94:	da0b      	bge.n	8003eae <uart_stm32_set_baudrate+0x32>
 8003e96:	480a      	ldr	r0, [pc, #40]	; (8003ec0 <uart_stm32_set_baudrate+0x44>)
 8003e98:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <uart_stm32_set_baudrate+0x48>)
			       (clock_control_subsys_t *)&config->pclken,
			       &clock_rate) < 0) {
		LOG_ERR("Failed call clock_control_get_rate");
 8003e9a:	490b      	ldr	r1, [pc, #44]	; (8003ec8 <uart_stm32_set_baudrate+0x4c>)
 8003e9c:	1ac0      	subs	r0, r0, r3
 8003e9e:	08c0      	lsrs	r0, r0, #3
 8003ea0:	0180      	lsls	r0, r0, #6
 8003ea2:	f040 0001 	orr.w	r0, r0, #1
 8003ea6:	f002 fbea 	bl	800667e <log_string_sync>
				     baud_rate);

#if HAS_LPUART_1
	}
#endif /* HAS_LPUART_1 */
}
 8003eaa:	b003      	add	sp, #12
 8003eac:	bd30      	pop	{r4, r5, pc}
  else
  {
#if defined(USART_PRESC_PRESCALER)
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003eae:	9b01      	ldr	r3, [sp, #4]
 8003eb0:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 8003eb4:	fbb3 f3f4 	udiv	r3, r3, r4
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	60eb      	str	r3, [r5, #12]
 8003ebc:	e7f5      	b.n	8003eaa <uart_stm32_set_baudrate+0x2e>
 8003ebe:	bf00      	nop
 8003ec0:	08008d84 	.word	0x08008d84
 8003ec4:	08008d1c 	.word	0x08008d1c
 8003ec8:	08009db7 	.word	0x08009db7

08003ecc <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8003ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8003ed0:	6847      	ldr	r7, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8003ed2:	68c6      	ldr	r6, [r0, #12]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003ed4:	46b8      	mov	r8, r7
{
 8003ed6:	4605      	mov	r5, r0
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003ed8:	f858 4b08 	ldr.w	r4, [r8], #8
 8003edc:	482f      	ldr	r0, [pc, #188]	; (8003f9c <uart_stm32_init+0xd0>)
 8003ede:	f001 f9b7 	bl	8005250 <z_impl_device_get_binding>
	return api->on(dev, sys);
 8003ee2:	6883      	ldr	r3, [r0, #8]
	data->clock = clk;
 8003ee4:	6070      	str	r0, [r6, #4]
 8003ee6:	4641      	mov	r1, r8
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4798      	blx	r3
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 8003eec:	4680      	mov	r8, r0
 8003eee:	2800      	cmp	r0, #0
 8003ef0:	d150      	bne.n	8003f94 <uart_stm32_init+0xc8>
	}

	/* Configure dt provided device signals when available */
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
					 config->pinctrl_list_size,
					 (uint32_t)UART_STRUCT(dev));
 8003ef2:	686b      	ldr	r3, [r5, #4]
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
 8003ef4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	f7fe f82b 	bl	8001f54 <stm32_dt_pinctrl_configure>
	if (err < 0) {
 8003efe:	2800      	cmp	r0, #0
 8003f00:	db41      	blt.n	8003f86 <uart_stm32_init+0xba>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8003f02:	6823      	ldr	r3, [r4, #0]
				      LL_USART_DIRECTION_TX_RX);

	/* Determine the datawidth and parity. If we use other parity than
	 * 'none' we must use datawidth = 9 (to get 8 databit + 1 parity bit).
	 */
	if (config->parity == 2) {
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	f023 0301 	bic.w	r3, r3, #1
 8003f0a:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8003f0c:	6823      	ldr	r3, [r4, #0]
 8003f0e:	2a02      	cmp	r2, #2
 8003f10:	f043 030c 	orr.w	r3, r3, #12
 8003f14:	6023      	str	r3, [r4, #0]
 8003f16:	d00f      	beq.n	8003f38 <uart_stm32_init+0x6c>
		/* 8 databit, 1 parity bit, parity even */
		ll_parity = LL_USART_PARITY_EVEN;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else if (config->parity == 1) {
 8003f18:	2a01      	cmp	r2, #1
 8003f1a:	d036      	beq.n	8003f8a <uart_stm32_init+0xbe>
		/* 8 databit, 1 parity bit, parity odd */
		ll_parity = LL_USART_PARITY_ODD;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else {  /* Default to 8N0, but show warning if invalid value */
		if (config->parity != 0) {
 8003f1c:	b152      	cbz	r2, 8003f34 <uart_stm32_init+0x68>
 8003f1e:	4820      	ldr	r0, [pc, #128]	; (8003fa0 <uart_stm32_init+0xd4>)
 8003f20:	4b20      	ldr	r3, [pc, #128]	; (8003fa4 <uart_stm32_init+0xd8>)
			LOG_WRN("Invalid parity setting '%d'."
 8003f22:	4921      	ldr	r1, [pc, #132]	; (8003fa8 <uart_stm32_init+0xdc>)
 8003f24:	1a1b      	subs	r3, r3, r0
 8003f26:	08db      	lsrs	r3, r3, #3
 8003f28:	019b      	lsls	r3, r3, #6
 8003f2a:	f043 0002 	orr.w	r0, r3, #2
 8003f2e:	f002 fba6 	bl	800667e <log_string_sync>
				"Defaulting to 'none'.", config->parity);
		}
		/* 8 databit, parity none */
		ll_parity = LL_USART_PARITY_NONE;
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8003f32:	4642      	mov	r2, r8
		ll_parity = LL_USART_PARITY_NONE;
 8003f34:	4610      	mov	r0, r2
 8003f36:	e003      	b.n	8003f40 <uart_stm32_init+0x74>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8003f38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 8003f3c:	f44f 6080 	mov.w	r0, #1024	; 0x400
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8003f40:	6823      	ldr	r3, [r4, #0]
 8003f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f46:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f4a:	4302      	orrs	r2, r0
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	6022      	str	r2, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003f50:	6863      	ldr	r3, [r4, #4]
 8003f52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f56:	6063      	str	r3, [r4, #4]
	LL_USART_ConfigCharacter(UartInstance,
				 ll_datawidth,
				 ll_parity,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 8003f58:	7c3b      	ldrb	r3, [r7, #16]
 8003f5a:	b12b      	cbz	r3, 8003f68 <uart_stm32_init+0x9c>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003f5c:	686b      	ldr	r3, [r5, #4]
 8003f5e:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003f60:	6893      	ldr	r3, [r2, #8]
 8003f62:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003f66:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8003f68:	6831      	ldr	r1, [r6, #0]
 8003f6a:	4628      	mov	r0, r5
 8003f6c:	f7ff ff86 	bl	8003e7c <uart_stm32_set_baudrate>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003f70:	6823      	ldr	r3, [r4, #0]
 8003f72:	f043 0301 	orr.w	r3, r3, #1
 8003f76:	6023      	str	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8003f78:	69e3      	ldr	r3, [r4, #28]
 8003f7a:	029a      	lsls	r2, r3, #10
 8003f7c:	d5fc      	bpl.n	8003f78 <uart_stm32_init+0xac>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8003f7e:	69e3      	ldr	r3, [r4, #28]
 8003f80:	025b      	lsls	r3, r3, #9
 8003f82:	d5fc      	bpl.n	8003f7e <uart_stm32_init+0xb2>
#endif /* !USART_ISR_REACK */

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	config->uconf.irq_config_func(dev);
#endif
	return 0;
 8003f84:	2000      	movs	r0, #0
}
 8003f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8003f8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 8003f8e:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8003f92:	e7d5      	b.n	8003f40 <uart_stm32_init+0x74>
		return -EIO;
 8003f94:	f06f 0004 	mvn.w	r0, #4
 8003f98:	e7f5      	b.n	8003f86 <uart_stm32_init+0xba>
 8003f9a:	bf00      	nop
 8003f9c:	080095b0 	.word	0x080095b0
 8003fa0:	08008d1c 	.word	0x08008d1c
 8003fa4:	08008d84 	.word	0x08008d84
 8003fa8:	08009e5a 	.word	0x08009e5a

08003fac <uart_stm32_configure>:
{
 8003fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8003fb0:	790a      	ldrb	r2, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003fb2:	6843      	ldr	r3, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8003fb4:	68c6      	ldr	r6, [r0, #12]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003fb6:	681c      	ldr	r4, [r3, #0]
	switch (parity) {
 8003fb8:	2a01      	cmp	r2, #1
{
 8003fba:	460d      	mov	r5, r1
	switch (parity) {
 8003fbc:	f000 8081 	beq.w	80040c2 <uart_stm32_configure+0x116>
		return LL_USART_PARITY_NONE;
 8003fc0:	2a02      	cmp	r2, #2
 8003fc2:	bf0c      	ite	eq
 8003fc4:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8003fc8:	2100      	movne	r1, #0
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8003fca:	f895 9005 	ldrb.w	r9, [r5, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits);
 8003fce:	f895 8006 	ldrb.w	r8, [r5, #6]
 8003fd2:	f1b9 0f02 	cmp.w	r9, #2
 8003fd6:	bf96      	itet	ls
 8003fd8:	4b3e      	ldrls	r3, [pc, #248]	; (80040d4 <uart_stm32_configure+0x128>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8003fda:	f44f 5e00 	movhi.w	lr, #8192	; 0x2000
 8003fde:	f833 e019 	ldrhls.w	lr, [r3, r9, lsl #1]
	switch (db) {
 8003fe2:	f1b8 0f02 	cmp.w	r8, #2
 8003fe6:	d06f      	beq.n	80040c8 <uart_stm32_configure+0x11c>
		return LL_USART_DATAWIDTH_8B;
 8003fe8:	f1b8 0f04 	cmp.w	r8, #4
 8003fec:	bf0c      	ite	eq
 8003fee:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 8003ff2:	2300      	movne	r3, #0
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8003ff4:	79ef      	ldrb	r7, [r5, #7]
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 8003ff6:	3a03      	subs	r2, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 8003ff8:	2f01      	cmp	r7, #1
 8003ffa:	bf14      	ite	ne
 8003ffc:	f04f 0c00 	movne.w	ip, #0
 8004000:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 8004004:	2a01      	cmp	r2, #1
 8004006:	d962      	bls.n	80040ce <uart_stm32_configure+0x122>
	if (UART_CFG_STOP_BITS_0_5 == cfg->stop_bits) {
 8004008:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 800400c:	d05f      	beq.n	80040ce <uart_stm32_configure+0x122>
	if ((UART_CFG_DATA_BITS_5 == cfg->data_bits) ||
 800400e:	f1b8 0f01 	cmp.w	r8, #1
 8004012:	d95c      	bls.n	80040ce <uart_stm32_configure+0x122>
	if (UART_CFG_FLOW_CTRL_NONE != cfg->flow_ctrl) {
 8004014:	b1c7      	cbz	r7, 8004048 <uart_stm32_configure+0x9c>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 8004016:	4a30      	ldr	r2, [pc, #192]	; (80040d8 <uart_stm32_configure+0x12c>)
 8004018:	4294      	cmp	r4, r2
 800401a:	d013      	beq.n	8004044 <uart_stm32_configure+0x98>
 800401c:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8004020:	4294      	cmp	r4, r2
 8004022:	d00f      	beq.n	8004044 <uart_stm32_configure+0x98>
 8004024:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004028:	4294      	cmp	r4, r2
 800402a:	d00b      	beq.n	8004044 <uart_stm32_configure+0x98>
 800402c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004030:	4294      	cmp	r4, r2
 8004032:	d007      	beq.n	8004044 <uart_stm32_configure+0x98>
 8004034:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004038:	4294      	cmp	r4, r2
 800403a:	d003      	beq.n	8004044 <uart_stm32_configure+0x98>
 800403c:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8004040:	4294      	cmp	r4, r2
 8004042:	d144      	bne.n	80040ce <uart_stm32_configure+0x122>
 8004044:	2f01      	cmp	r7, #1
 8004046:	d142      	bne.n	80040ce <uart_stm32_configure+0x122>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8004048:	6822      	ldr	r2, [r4, #0]
 800404a:	f022 0201 	bic.w	r2, r2, #1
 800404e:	6022      	str	r2, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8004050:	6822      	ldr	r2, [r4, #0]
 8004052:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 8004056:	428a      	cmp	r2, r1
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8004058:	bf1f      	itttt	ne
 800405a:	6827      	ldrne	r7, [r4, #0]
 800405c:	f427 67c0 	bicne.w	r7, r7, #1536	; 0x600
 8004060:	430f      	orrne	r7, r1
 8004062:	6027      	strne	r7, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8004064:	6862      	ldr	r2, [r4, #4]
 8004066:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 800406a:	4596      	cmp	lr, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800406c:	bf1f      	itttt	ne
 800406e:	6861      	ldrne	r1, [r4, #4]
 8004070:	f421 5140 	bicne.w	r1, r1, #12288	; 0x3000
 8004074:	ea41 010e 	orrne.w	r1, r1, lr
 8004078:	6061      	strne	r1, [r4, #4]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800407a:	6822      	ldr	r2, [r4, #0]
	if (cfg->baudrate != data->baud_rate) {
 800407c:	6829      	ldr	r1, [r5, #0]
 800407e:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
	if (databits != uart_stm32_get_databits(dev)) {
 8004082:	429a      	cmp	r2, r3
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8004084:	bf1f      	itttt	ne
 8004086:	6822      	ldrne	r2, [r4, #0]
 8004088:	f022 2210 	bicne.w	r2, r2, #268439552	; 0x10001000
 800408c:	431a      	orrne	r2, r3
 800408e:	6022      	strne	r2, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8004090:	68a3      	ldr	r3, [r4, #8]
 8004092:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8004096:	459c      	cmp	ip, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004098:	bf1f      	itttt	ne
 800409a:	68a3      	ldrne	r3, [r4, #8]
 800409c:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 80040a0:	ea43 030c 	orrne.w	r3, r3, ip
 80040a4:	60a3      	strne	r3, [r4, #8]
	if (cfg->baudrate != data->baud_rate) {
 80040a6:	6833      	ldr	r3, [r6, #0]
 80040a8:	4299      	cmp	r1, r3
 80040aa:	d003      	beq.n	80040b4 <uart_stm32_configure+0x108>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 80040ac:	f7ff fee6 	bl	8003e7c <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 80040b0:	682b      	ldr	r3, [r5, #0]
 80040b2:	6033      	str	r3, [r6, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80040b4:	6823      	ldr	r3, [r4, #0]
 80040b6:	f043 0301 	orr.w	r3, r3, #1
 80040ba:	6023      	str	r3, [r4, #0]
	return 0;
 80040bc:	2000      	movs	r0, #0
};
 80040be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	switch (parity) {
 80040c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80040c6:	e780      	b.n	8003fca <uart_stm32_configure+0x1e>
	switch (db) {
 80040c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80040cc:	e792      	b.n	8003ff4 <uart_stm32_configure+0x48>
		return -ENOTSUP;
 80040ce:	f06f 0022 	mvn.w	r0, #34	; 0x22
 80040d2:	e7f4      	b.n	80040be <uart_stm32_configure+0x112>
 80040d4:	08009194 	.word	0x08009194
 80040d8:	40013800 	.word	0x40013800

080040dc <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80040dc:	6801      	ldr	r1, [r0, #0]
{
 80040de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040e0:	4604      	mov	r4, r0
	if (*path) {	/* If the pointer is not a null */
 80040e2:	b319      	cbz	r1, 800412c <get_ldnumber+0x50>
 80040e4:	460b      	mov	r3, r1
 80040e6:	461a      	mov	r2, r3
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80040e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80040ec:	2820      	cmp	r0, #32
 80040ee:	d928      	bls.n	8004142 <get_ldnumber+0x66>
 80040f0:	283a      	cmp	r0, #58	; 0x3a
 80040f2:	d1f8      	bne.n	80040e6 <get_ldnumber+0xa>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 80040f4:	780b      	ldrb	r3, [r1, #0]
 80040f6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80040fa:	2809      	cmp	r0, #9
 80040fc:	d919      	bls.n	8004132 <get_ldnumber+0x56>
					*path = ++tt;
				}
			}
#if _STR_VOLUME_ID
			 else {	/* No numeric drive number, find string drive id */
				i = 0; tt++;
 80040fe:	4e13      	ldr	r6, [pc, #76]	; (800414c <get_ldnumber+0x70>)
 8004100:	3201      	adds	r2, #1
 8004102:	2000      	movs	r0, #0
				do {
					sp = str[i]; tp = *path;
 8004104:	f856 cb04 	ldr.w	ip, [r6], #4
 8004108:	460d      	mov	r5, r1
					do {	/* Compare a string drive id with path name */
						c = *sp++; tc = *tp++;
 800410a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800410e:	f81c 7b01 	ldrb.w	r7, [ip], #1
						if (IsLower(tc)) tc -= 0x20;
 8004112:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
 8004116:	f1be 0f19 	cmp.w	lr, #25
 800411a:	bf9c      	itt	ls
 800411c:	3b20      	subls	r3, #32
 800411e:	b2db      	uxtbls	r3, r3
					} while (c && (TCHAR)c == tc);
 8004120:	b18f      	cbz	r7, 8004146 <get_ldnumber+0x6a>
 8004122:	42bb      	cmp	r3, r7
 8004124:	d0f1      	beq.n	800410a <get_ldnumber+0x2e>
				} while ((c || tp != tt) && ++i < _VOLUMES);	/* Repeat for each id until pattern match */
 8004126:	3001      	adds	r0, #1
 8004128:	2808      	cmp	r0, #8
 800412a:	d1eb      	bne.n	8004104 <get_ldnumber+0x28>
	int vol = -1;
 800412c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004130:	e008      	b.n	8004144 <get_ldnumber+0x68>
			i = *tp++ - '0'; 
 8004132:	1c4b      	adds	r3, r1, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004134:	429a      	cmp	r2, r3
 8004136:	d1e2      	bne.n	80040fe <get_ldnumber+0x22>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004138:	2807      	cmp	r0, #7
 800413a:	d8f7      	bhi.n	800412c <get_ldnumber+0x50>
					*path = ++tt;
 800413c:	3201      	adds	r2, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
					vol = (int)i;
					*path = tt;
 800413e:	6022      	str	r2, [r4, #0]
 8004140:	e000      	b.n	8004144 <get_ldnumber+0x68>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004142:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8004144:	bdf0      	pop	{r4, r5, r6, r7, pc}
				} while ((c || tp != tt) && ++i < _VOLUMES);	/* Repeat for each id until pattern match */
 8004146:	42aa      	cmp	r2, r5
 8004148:	d1ed      	bne.n	8004126 <get_ldnumber+0x4a>
 800414a:	e7f8      	b.n	800413e <get_ldnumber+0x62>
 800414c:	08009128 	.word	0x08009128

08004150 <check_fs>:
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT-VBR or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004150:	2300      	movs	r3, #0
{
 8004152:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004154:	70c3      	strb	r3, [r0, #3]
 8004156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800415a:	62c3      	str	r3, [r0, #44]	; 0x2c
{
 800415c:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800415e:	f003 fa56 	bl	800760e <move_window>
 8004162:	4601      	mov	r1, r0
 8004164:	bb30      	cbnz	r0, 80041b4 <check_fs+0x64>
	rv = rv << 8 | ptr[0];
 8004166:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 800416a:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
 800416e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8004172:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8004176:	4293      	cmp	r3, r2
 8004178:	d11e      	bne.n	80041b8 <check_fs+0x68>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800417a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800417e:	2be9      	cmp	r3, #233	; 0xe9
 8004180:	d005      	beq.n	800418e <check_fs+0x3e>
 8004182:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004184:	4a0e      	ldr	r2, [pc, #56]	; (80041c0 <check_fs+0x70>)
 8004186:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800418a:	4293      	cmp	r3, r2
 800418c:	d116      	bne.n	80041bc <check_fs+0x6c>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800418e:	f104 0066 	add.w	r0, r4, #102	; 0x66
 8004192:	f003 f987 	bl	80074a4 <ld_dword>
 8004196:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <check_fs+0x74>)
 8004198:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800419c:	4298      	cmp	r0, r3
 800419e:	d007      	beq.n	80041b0 <check_fs+0x60>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80041a0:	f104 0082 	add.w	r0, r4, #130	; 0x82
 80041a4:	f003 f97e 	bl	80074a4 <ld_dword>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80041a8:	4b07      	ldr	r3, [pc, #28]	; (80041c8 <check_fs+0x78>)
 80041aa:	4298      	cmp	r0, r3
 80041ac:	bf18      	it	ne
 80041ae:	2102      	movne	r1, #2
}
 80041b0:	4608      	mov	r0, r1
 80041b2:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80041b4:	2104      	movs	r1, #4
 80041b6:	e7fb      	b.n	80041b0 <check_fs+0x60>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80041b8:	2103      	movs	r1, #3
 80041ba:	e7f9      	b.n	80041b0 <check_fs+0x60>
	return 2;
 80041bc:	2102      	movs	r1, #2
 80041be:	e7f7      	b.n	80041b0 <check_fs+0x60>
 80041c0:	009000eb 	.word	0x009000eb
 80041c4:	00544146 	.word	0x00544146
 80041c8:	33544146 	.word	0x33544146

080041cc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80041cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80041d0:	2300      	movs	r3, #0
{
 80041d2:	b085      	sub	sp, #20
	*rfs = 0;
 80041d4:	600b      	str	r3, [r1, #0]
{
 80041d6:	460f      	mov	r7, r1
 80041d8:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 80041da:	f7ff ff7f 	bl	80040dc <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80041de:	1e06      	subs	r6, r0, #0
 80041e0:	f2c0 813d 	blt.w	800445e <find_volume+0x292>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80041e4:	4ba1      	ldr	r3, [pc, #644]	; (800446c <find_volume+0x2a0>)
 80041e6:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80041ea:	2c00      	cmp	r4, #0
 80041ec:	f000 8139 	beq.w	8004462 <find_volume+0x296>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80041f0:	603c      	str	r4, [r7, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
	if (fs->fs_type) {					/* If the volume has been mounted */
 80041f2:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80041f4:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80041f8:	b16b      	cbz	r3, 8004216 <find_volume+0x4a>
		stat = disk_status(fs->drv);
 80041fa:	7860      	ldrb	r0, [r4, #1]
 80041fc:	f000 fcde 	bl	8004bbc <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004200:	07c7      	lsls	r7, r0, #31
 8004202:	d408      	bmi.n	8004216 <find_volume+0x4a>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004204:	b11d      	cbz	r5, 800420e <find_volume+0x42>
 8004206:	f010 0504 	ands.w	r5, r0, #4
 800420a:	d000      	beq.n	800420e <find_volume+0x42>
				return FR_WRITE_PROTECTED;
 800420c:	250a      	movs	r5, #10
#endif
#if _FS_LOCK != 0		/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800420e:	4628      	mov	r0, r5
 8004210:	b005      	add	sp, #20
 8004212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8004216:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004218:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 800421a:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800421c:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800421e:	f000 fcd9 	bl	8004bd4 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004222:	07c1      	lsls	r1, r0, #31
 8004224:	f100 811f 	bmi.w	8004466 <find_volume+0x29a>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004228:	b10d      	cbz	r5, 800422e <find_volume+0x62>
 800422a:	0742      	lsls	r2, r0, #29
 800422c:	d4ee      	bmi.n	800420c <find_volume+0x40>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800422e:	2100      	movs	r1, #0
 8004230:	4620      	mov	r0, r4
 8004232:	f7ff ff8d 	bl	8004150 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004236:	2802      	cmp	r0, #2
 8004238:	f040 80f5 	bne.w	8004426 <find_volume+0x25a>
 800423c:	466e      	mov	r6, sp
 800423e:	f504 71fb 	add.w	r1, r4, #502	; 0x1f6
 8004242:	f204 2736 	addw	r7, r4, #566	; 0x236
 8004246:	4635      	mov	r5, r6
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004248:	f811 0c04 	ldrb.w	r0, [r1, #-4]
 800424c:	b110      	cbz	r0, 8004254 <find_volume+0x88>
 800424e:	4608      	mov	r0, r1
 8004250:	f003 f928 	bl	80074a4 <ld_dword>
 8004254:	3110      	adds	r1, #16
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004256:	428f      	cmp	r7, r1
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004258:	f845 0b04 	str.w	r0, [r5], #4
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800425c:	d1f4      	bne.n	8004248 <find_volume+0x7c>
 800425e:	2500      	movs	r5, #0
			bsect = br[i];
 8004260:	f856 8b04 	ldr.w	r8, [r6], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004264:	f1b8 0f00 	cmp.w	r8, #0
 8004268:	f000 80d4 	beq.w	8004414 <find_volume+0x248>
 800426c:	4641      	mov	r1, r8
 800426e:	4620      	mov	r0, r4
 8004270:	f7ff ff6e 	bl	8004150 <check_fs>
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
 8004274:	2801      	cmp	r0, #1
 8004276:	f200 80ce 	bhi.w	8004416 <find_volume+0x24a>
	rv = rv << 8 | ptr[0];
 800427a:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 800427e:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 8004282:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800428a:	f040 80d0 	bne.w	800442e <find_volume+0x262>
	rv = rv << 8 | ptr[0];
 800428e:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
 8004292:	f894 5046 	ldrb.w	r5, [r4, #70]	; 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004296:	ea55 2500 	orrs.w	r5, r5, r0, lsl #8
 800429a:	d104      	bne.n	80042a6 <find_volume+0xda>
 800429c:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80042a0:	f003 f900 	bl	80074a4 <ld_dword>
 80042a4:	4605      	mov	r5, r0
		fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FATs */
 80042a6:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
		fs->fsize = fasize;
 80042aa:	61a5      	str	r5, [r4, #24]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80042ac:	1e73      	subs	r3, r6, #1
 80042ae:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FATs */
 80042b0:	70a6      	strb	r6, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80042b2:	f200 80bc 	bhi.w	800442e <find_volume+0x262>
		fs->csize = fs->win[BPB_SecPerClus];				/* Cluster size */
 80042b6:	f894 903d 	ldrb.w	r9, [r4, #61]	; 0x3d
 80042ba:	f8a4 900a 	strh.w	r9, [r4, #10]
 80042be:	464b      	mov	r3, r9
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 80b4 	beq.w	800442e <find_volume+0x262>
 80042c6:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 80042ca:	ea13 0f09 	tst.w	r3, r9
 80042ce:	f040 80ae 	bne.w	800442e <find_volume+0x262>
	rv = rv << 8 | ptr[0];
 80042d2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80042d6:	f894 7041 	ldrb.w	r7, [r4, #65]	; 0x41
 80042da:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80042de:	073b      	lsls	r3, r7, #28
	rv = rv << 8 | ptr[0];
 80042e0:	b239      	sxth	r1, r7
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80042e2:	8127      	strh	r7, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80042e4:	f040 80a3 	bne.w	800442e <find_volume+0x262>
	rv = rv << 8 | ptr[0];
 80042e8:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 80042ec:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80042f0:	ea53 2000 	orrs.w	r0, r3, r0, lsl #8
 80042f4:	d103      	bne.n	80042fe <find_volume+0x132>
 80042f6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80042fa:	f003 f8d3 	bl	80074a4 <ld_dword>
	rv = rv << 8 | ptr[0];
 80042fe:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 8004302:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;				/* (Must not be 0) */
 8004306:	ea53 2202 	orrs.w	r2, r3, r2, lsl #8
 800430a:	f000 8090 	beq.w	800442e <find_volume+0x262>
		fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800430e:	fb05 fe06 	mul.w	lr, r5, r6
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004312:	eb02 1c17 	add.w	ip, r2, r7, lsr #4
 8004316:	44f4      	add	ip, lr
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004318:	4560      	cmp	r0, ip
 800431a:	f0c0 8088 	bcc.w	800442e <find_volume+0x262>
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800431e:	eba0 030c 	sub.w	r3, r0, ip
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
 8004322:	454b      	cmp	r3, r9
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8004324:	fbb3 f6f9 	udiv	r6, r3, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
 8004328:	f0c0 8081 	bcc.w	800442e <find_volume+0x262>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800432c:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 8004330:	429e      	cmp	r6, r3
 8004332:	f200 8081 	bhi.w	8004438 <find_volume+0x26c>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004336:	f640 79f5 	movw	r9, #4085	; 0xff5
 800433a:	454e      	cmp	r6, r9
 800433c:	bf8c      	ite	hi
 800433e:	f04f 0902 	movhi.w	r9, #2
 8004342:	f04f 0901 	movls.w	r9, #1
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004346:	eb02 0308 	add.w	r3, r2, r8
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800434a:	3602      	adds	r6, #2
		fs->database = bsect + sysect;						/* Data start sector */
 800434c:	eb0c 0208 	add.w	r2, ip, r8
		if (fmt == FS_FAT32) {
 8004350:	f1b9 0f03 	cmp.w	r9, #3
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8004354:	6166      	str	r6, [r4, #20]
		fs->volbase = bsect;								/* Volume start sector */
 8004356:	f8c4 801c 	str.w	r8, [r4, #28]
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800435a:	6223      	str	r3, [r4, #32]
		fs->database = bsect + sysect;						/* Data start sector */
 800435c:	62a2      	str	r2, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800435e:	d16e      	bne.n	800443e <find_volume+0x272>
	rv = rv << 8 | ptr[0];
 8004360:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
 8004364:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 8004368:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800436c:	4319      	orrs	r1, r3
 800436e:	b209      	sxth	r1, r1
 8004370:	2900      	cmp	r1, #0
 8004372:	d15c      	bne.n	800442e <find_volume+0x262>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004374:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004378:	f003 f894 	bl	80074a4 <ld_dword>
			szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800437c:	00b6      	lsls	r6, r6, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800437e:	6260      	str	r0, [r4, #36]	; 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004380:	f206 16ff 	addw	r6, r6, #511	; 0x1ff
 8004384:	ebb5 2f56 	cmp.w	r5, r6, lsr #9
 8004388:	d351      	bcc.n	800442e <find_volume+0x262>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800438a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800438e:	e9c4 3303 	strd	r3, r3, [r4, #12]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004392:	f1b9 0f03 	cmp.w	r9, #3
		fs->fsi_flag = 0x80;
 8004396:	f04f 0380 	mov.w	r3, #128	; 0x80
 800439a:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800439c:	d130      	bne.n	8004400 <find_volume+0x234>
	rv = rv << 8 | ptr[0];
 800439e:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 80043a2:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80043a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d128      	bne.n	8004400 <find_volume+0x234>
			&& move_window(fs, bsect + 1) == FR_OK)
 80043ae:	f108 0101 	add.w	r1, r8, #1
 80043b2:	4620      	mov	r0, r4
 80043b4:	f003 f92b 	bl	800760e <move_window>
 80043b8:	bb10      	cbnz	r0, 8004400 <find_volume+0x234>
	rv = rv << 8 | ptr[0];
 80043ba:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 80043be:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
			fs->fsi_flag = 0;
 80043c2:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 80043c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80043c8:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d117      	bne.n	8004400 <find_volume+0x234>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80043d0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80043d4:	f003 f866 	bl	80074a4 <ld_dword>
 80043d8:	4b25      	ldr	r3, [pc, #148]	; (8004470 <find_volume+0x2a4>)
 80043da:	4298      	cmp	r0, r3
 80043dc:	d110      	bne.n	8004400 <find_volume+0x234>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80043de:	f504 7005 	add.w	r0, r4, #532	; 0x214
 80043e2:	f003 f85f 	bl	80074a4 <ld_dword>
 80043e6:	4b23      	ldr	r3, [pc, #140]	; (8004474 <find_volume+0x2a8>)
 80043e8:	4298      	cmp	r0, r3
 80043ea:	d109      	bne.n	8004400 <find_volume+0x234>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80043ec:	f504 7006 	add.w	r0, r4, #536	; 0x218
 80043f0:	f003 f858 	bl	80074a4 <ld_dword>
 80043f4:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80043f6:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80043fa:	f003 f853 	bl	80074a4 <ld_dword>
 80043fe:	60e0      	str	r0, [r4, #12]
	fs->id = ++Fsid;	/* File system mount ID */
 8004400:	4a1d      	ldr	r2, [pc, #116]	; (8004478 <find_volume+0x2ac>)
	fs->fs_type = fmt;	/* FAT sub-type */
 8004402:	f884 9000 	strb.w	r9, [r4]
	fs->id = ++Fsid;	/* File system mount ID */
 8004406:	8813      	ldrh	r3, [r2, #0]
 8004408:	3301      	adds	r3, #1
 800440a:	b29b      	uxth	r3, r3
 800440c:	8013      	strh	r3, [r2, #0]
 800440e:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
 8004410:	2500      	movs	r5, #0
 8004412:	e6fc      	b.n	800420e <find_volume+0x42>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004414:	2003      	movs	r0, #3
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
 8004416:	3501      	adds	r5, #1
 8004418:	2d04      	cmp	r5, #4
 800441a:	f47f af21 	bne.w	8004260 <find_volume+0x94>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800441e:	2804      	cmp	r0, #4
 8004420:	d105      	bne.n	800442e <find_volume+0x262>
 8004422:	2501      	movs	r5, #1
 8004424:	e6f3      	b.n	800420e <find_volume+0x42>
 8004426:	2804      	cmp	r0, #4
 8004428:	d0fb      	beq.n	8004422 <find_volume+0x256>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800442a:	2801      	cmp	r0, #1
 800442c:	d901      	bls.n	8004432 <find_volume+0x266>
 800442e:	250d      	movs	r5, #13
 8004430:	e6ed      	b.n	800420e <find_volume+0x42>
	bsect = 0;
 8004432:	f04f 0800 	mov.w	r8, #0
 8004436:	e720      	b.n	800427a <find_volume+0xae>
		fmt = FS_FAT32;
 8004438:	f04f 0903 	mov.w	r9, #3
 800443c:	e783      	b.n	8004346 <find_volume+0x17a>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800443e:	2f00      	cmp	r7, #0
 8004440:	d0f5      	beq.n	800442e <find_volume+0x262>
			fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8004442:	4473      	add	r3, lr
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004444:	f1b9 0f02 	cmp.w	r9, #2
			fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8004448:	6263      	str	r3, [r4, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800444a:	ea4f 0346 	mov.w	r3, r6, lsl #1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800444e:	bf1b      	ittet	ne
 8004450:	199b      	addne	r3, r3, r6
 8004452:	f006 0601 	andne.w	r6, r6, #1
 8004456:	461e      	moveq	r6, r3
 8004458:	eb06 0653 	addne.w	r6, r6, r3, lsr #1
 800445c:	e790      	b.n	8004380 <find_volume+0x1b4>
	if (vol < 0) return FR_INVALID_DRIVE;
 800445e:	250b      	movs	r5, #11
 8004460:	e6d5      	b.n	800420e <find_volume+0x42>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004462:	250c      	movs	r5, #12
 8004464:	e6d3      	b.n	800420e <find_volume+0x42>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004466:	2503      	movs	r5, #3
 8004468:	e6d1      	b.n	800420e <find_volume+0x42>
 800446a:	bf00      	nop
 800446c:	20000814 	.word	0x20000814
 8004470:	41615252 	.word	0x41615252
 8004474:	61417272 	.word	0x61417272
 8004478:	20000874 	.word	0x20000874

0800447c <follow_path>:
{
 800447c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 8004480:	6806      	ldr	r6, [r0, #0]
{
 8004482:	4680      	mov	r8, r0
 8004484:	460c      	mov	r4, r1
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004486:	f811 3b01 	ldrb.w	r3, [r1], #1
 800448a:	2b2f      	cmp	r3, #47	; 0x2f
 800448c:	d0fa      	beq.n	8004484 <follow_path+0x8>
 800448e:	2b5c      	cmp	r3, #92	; 0x5c
 8004490:	d0f8      	beq.n	8004484 <follow_path+0x8>
		obj->sclust = 0;					/* Start from the root directory */
 8004492:	2300      	movs	r3, #0
 8004494:	f8c8 3008 	str.w	r3, [r8, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004498:	7823      	ldrb	r3, [r4, #0]
 800449a:	2b1f      	cmp	r3, #31
 800449c:	d958      	bls.n	8004550 <follow_path+0xd4>
	p = *path; sfn = dp->fn;
 800449e:	f108 0520 	add.w	r5, r8, #32
	mem_set(sfn, ' ', 11);
 80044a2:	220b      	movs	r2, #11
 80044a4:	4628      	mov	r0, r5
 80044a6:	2120      	movs	r1, #32
 80044a8:	f003 f80c 	bl	80074c4 <mem_set>
	si = i = 0; ni = 8;
 80044ac:	1e67      	subs	r7, r4, #1
 80044ae:	2200      	movs	r2, #0
 80044b0:	2008      	movs	r0, #8
 80044b2:	f1c4 0902 	rsb	r9, r4, #2
		c = (BYTE)p[si++];
 80044b6:	eb09 0107 	add.w	r1, r9, r7
 80044ba:	f817 3f01 	ldrb.w	r3, [r7, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 80044be:	2b20      	cmp	r3, #32
 80044c0:	d908      	bls.n	80044d4 <follow_path+0x58>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80044c2:	2b2f      	cmp	r3, #47	; 0x2f
 80044c4:	d001      	beq.n	80044ca <follow_path+0x4e>
 80044c6:	2b5c      	cmp	r3, #92	; 0x5c
 80044c8:	d14c      	bne.n	8004564 <follow_path+0xe8>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80044ca:	5c60      	ldrb	r0, [r4, r1]
 80044cc:	282f      	cmp	r0, #47	; 0x2f
 80044ce:	d047      	beq.n	8004560 <follow_path+0xe4>
 80044d0:	285c      	cmp	r0, #92	; 0x5c
 80044d2:	d045      	beq.n	8004560 <follow_path+0xe4>
	*path = p + si;						/* Return pointer to the next segment */
 80044d4:	440c      	add	r4, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80044d6:	2a00      	cmp	r2, #0
 80044d8:	d054      	beq.n	8004584 <follow_path+0x108>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80044da:	f898 2020 	ldrb.w	r2, [r8, #32]
	FATFS *fs = dp->obj.fs;
 80044de:	f8d8 7000 	ldr.w	r7, [r8]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80044e2:	2ae5      	cmp	r2, #229	; 0xe5
 80044e4:	bf04      	itt	eq
 80044e6:	2205      	moveq	r2, #5
 80044e8:	f888 2020 	strbeq.w	r2, [r8, #32]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80044ec:	2b21      	cmp	r3, #33	; 0x21
 80044ee:	bf34      	ite	cc
 80044f0:	2304      	movcc	r3, #4
 80044f2:	2300      	movcs	r3, #0
 80044f4:	f888 302b 	strb.w	r3, [r8, #43]	; 0x2b
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80044f8:	4640      	mov	r0, r8
 80044fa:	f003 fa51 	bl	80079a0 <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 80044fe:	2800      	cmp	r0, #0
 8004500:	d144      	bne.n	800458c <follow_path+0x110>
		res = move_window(fs, dp->sect);
 8004502:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8004506:	4638      	mov	r0, r7
 8004508:	f003 f881 	bl	800760e <move_window>
		if (res != FR_OK) break;
 800450c:	2800      	cmp	r0, #0
 800450e:	d13d      	bne.n	800458c <follow_path+0x110>
		c = dp->dir[DIR_Name];
 8004510:	f8d8 301c 	ldr.w	r3, [r8, #28]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004514:	781a      	ldrb	r2, [r3, #0]
 8004516:	2a00      	cmp	r2, #0
 8004518:	d043      	beq.n	80045a2 <follow_path+0x126>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800451a:	7ada      	ldrb	r2, [r3, #11]
 800451c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004520:	f888 2006 	strb.w	r2, [r8, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004524:	7ad8      	ldrb	r0, [r3, #11]
 8004526:	f010 0008 	ands.w	r0, r0, #8
 800452a:	d10c      	bne.n	8004546 <follow_path+0xca>
 800452c:	f103 0c0b 	add.w	ip, r3, #11
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004530:	4629      	mov	r1, r5
		r = *d++ - *s++;
 8004532:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004536:	f811 eb01 	ldrb.w	lr, [r1], #1
	} while (--cnt && r == 0);
 800453a:	459c      	cmp	ip, r3
		r = *d++ - *s++;
 800453c:	eba2 020e 	sub.w	r2, r2, lr
	} while (--cnt && r == 0);
 8004540:	d022      	beq.n	8004588 <follow_path+0x10c>
 8004542:	2a00      	cmp	r2, #0
 8004544:	d0f5      	beq.n	8004532 <follow_path+0xb6>
		res = dir_next(dp, 0);	/* Next entry */
 8004546:	2100      	movs	r1, #0
 8004548:	4640      	mov	r0, r8
 800454a:	f003 fa5b 	bl	8007a04 <dir_next>
 800454e:	e7d6      	b.n	80044fe <follow_path+0x82>
		dp->fn[NSFLAG] = NS_NONAME;
 8004550:	2380      	movs	r3, #128	; 0x80
 8004552:	f888 302b 	strb.w	r3, [r8, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 8004556:	4640      	mov	r0, r8
}
 8004558:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 800455c:	f003 ba20 	b.w	80079a0 <dir_sdi.constprop.0>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004560:	3101      	adds	r1, #1
 8004562:	e7b2      	b.n	80044ca <follow_path+0x4e>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004564:	2b2e      	cmp	r3, #46	; 0x2e
 8004566:	d033      	beq.n	80045d0 <follow_path+0x154>
 8004568:	4282      	cmp	r2, r0
 800456a:	d20b      	bcs.n	8004584 <follow_path+0x108>
		if (c >= 0x80) {				/* Extended character? */
 800456c:	b259      	sxtb	r1, r3
 800456e:	2900      	cmp	r1, #0
 8004570:	db08      	blt.n	8004584 <follow_path+0x108>
 8004572:	f8df e07c 	ldr.w	lr, [pc, #124]	; 80045f0 <follow_path+0x174>
	while (*str && *str != chr) str++;
 8004576:	f81e cb01 	ldrb.w	ip, [lr], #1
 800457a:	f1bc 0f00 	cmp.w	ip, #0
 800457e:	d02c      	beq.n	80045da <follow_path+0x15e>
 8004580:	4563      	cmp	r3, ip
 8004582:	d1f8      	bne.n	8004576 <follow_path+0xfa>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004584:	2006      	movs	r0, #6
	return res;
 8004586:	e00a      	b.n	800459e <follow_path+0x122>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004588:	2a00      	cmp	r2, #0
 800458a:	d1dc      	bne.n	8004546 <follow_path+0xca>
			ns = dp->fn[NSFLAG];
 800458c:	f898 302b 	ldrb.w	r3, [r8, #43]	; 0x2b
			if (res != FR_OK) {				/* Failed to find the object */
 8004590:	b148      	cbz	r0, 80045a6 <follow_path+0x12a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004592:	2804      	cmp	r0, #4
 8004594:	d103      	bne.n	800459e <follow_path+0x122>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004596:	f013 0f04 	tst.w	r3, #4
 800459a:	bf08      	it	eq
 800459c:	2005      	moveq	r0, #5
}
 800459e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80045a2:	2004      	movs	r0, #4
 80045a4:	e7f2      	b.n	800458c <follow_path+0x110>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80045a6:	075a      	lsls	r2, r3, #29
 80045a8:	d4f9      	bmi.n	800459e <follow_path+0x122>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80045aa:	f898 3006 	ldrb.w	r3, [r8, #6]
 80045ae:	06db      	lsls	r3, r3, #27
 80045b0:	d50c      	bpl.n	80045cc <follow_path+0x150>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80045b2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80045b6:	7830      	ldrb	r0, [r6, #0]
 80045b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045bc:	f106 0130 	add.w	r1, r6, #48	; 0x30
 80045c0:	4419      	add	r1, r3
 80045c2:	f002 ffb3 	bl	800752c <ld_clust.isra.0>
 80045c6:	f8c8 0008 	str.w	r0, [r8, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80045ca:	e76a      	b.n	80044a2 <follow_path+0x26>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80045cc:	2005      	movs	r0, #5
 80045ce:	e7e6      	b.n	800459e <follow_path+0x122>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80045d0:	280b      	cmp	r0, #11
 80045d2:	d0d7      	beq.n	8004584 <follow_path+0x108>
			i = 8; ni = 11;				/* Goto extension */
 80045d4:	2208      	movs	r2, #8
 80045d6:	200b      	movs	r0, #11
 80045d8:	e76d      	b.n	80044b6 <follow_path+0x3a>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80045da:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 80045de:	f1bc 0f19 	cmp.w	ip, #25
 80045e2:	d802      	bhi.n	80045ea <follow_path+0x16e>
 80045e4:	f1a1 0320 	sub.w	r3, r1, #32
 80045e8:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 80045ea:	54ab      	strb	r3, [r5, r2]
 80045ec:	3201      	adds	r2, #1
 80045ee:	e762      	b.n	80044b6 <follow_path+0x3a>
 80045f0:	08009e9e 	.word	0x08009e9e

080045f4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80045f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80045f6:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80045fa:	a803      	add	r0, sp, #12
{
 80045fc:	4614      	mov	r4, r2
	const TCHAR *rp = path;
 80045fe:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 8004600:	f7ff fd6c 	bl	80040dc <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004604:	1e03      	subs	r3, r0, #0
 8004606:	db15      	blt.n	8004634 <f_mount+0x40>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004608:	490c      	ldr	r1, [pc, #48]	; (800463c <f_mount+0x48>)
 800460a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]

	if (cfs) {
 800460e:	b10a      	cbz	r2, 8004614 <f_mount+0x20>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004610:	2000      	movs	r0, #0
 8004612:	7010      	strb	r0, [r2, #0]
	}

	if (fs) {
 8004614:	9801      	ldr	r0, [sp, #4]
 8004616:	b108      	cbz	r0, 800461c <f_mount+0x28>
		fs->fs_type = 0;				/* Clear new fs object */
 8004618:	2200      	movs	r2, #0
 800461a:	7002      	strb	r2, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800461c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004620:	b130      	cbz	r0, 8004630 <f_mount+0x3c>
 8004622:	2c01      	cmp	r4, #1
 8004624:	d108      	bne.n	8004638 <f_mount+0x44>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004626:	2200      	movs	r2, #0
 8004628:	a901      	add	r1, sp, #4
 800462a:	4668      	mov	r0, sp
 800462c:	f7ff fdce 	bl	80041cc <find_volume>
	LEAVE_FF(fs, res);
}
 8004630:	b004      	add	sp, #16
 8004632:	bd10      	pop	{r4, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8004634:	200b      	movs	r0, #11
 8004636:	e7fb      	b.n	8004630 <f_mount+0x3c>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004638:	2000      	movs	r0, #0
 800463a:	e7f9      	b.n	8004630 <f_mount+0x3c>
 800463c:	20000814 	.word	0x20000814

08004640 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8004640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004644:	b089      	sub	sp, #36	; 0x24
 8004646:	460d      	mov	r5, r1
 8004648:	9005      	str	r0, [sp, #20]
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800464a:	a805      	add	r0, sp, #20
{
 800464c:	4616      	mov	r6, r2
 800464e:	461c      	mov	r4, r3
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8004650:	f7ff fd44 	bl	80040dc <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004654:	1e07      	subs	r7, r0, #0
 8004656:	f2c0 823e 	blt.w	8004ad6 <f_mkfs+0x496>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear mounted volume */
 800465a:	4ba3      	ldr	r3, [pc, #652]	; (80048e8 <f_mkfs+0x2a8>)
 800465c:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 8004660:	b10b      	cbz	r3, 8004666 <f_mkfs+0x26>
 8004662:	2200      	movs	r2, #0
 8004664:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8004666:	b2ff      	uxtb	r7, r7
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8004668:	4638      	mov	r0, r7
 800466a:	f000 fab3 	bl	8004bd4 <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800466e:	07c2      	lsls	r2, r0, #31
 8004670:	f100 8233 	bmi.w	8004ada <f_mkfs+0x49a>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8004674:	0743      	lsls	r3, r0, #29
 8004676:	f100 8232 	bmi.w	8004ade <f_mkfs+0x49e>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800467a:	aa06      	add	r2, sp, #24
 800467c:	2103      	movs	r1, #3
 800467e:	4638      	mov	r0, r7
 8004680:	f000 facc 	bl	8004c1c <disk_ioctl>
 8004684:	b930      	cbnz	r0, 8004694 <f_mkfs+0x54>
 8004686:	9a06      	ldr	r2, [sp, #24]
 8004688:	1e53      	subs	r3, r2, #1
 800468a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800468e:	d201      	bcs.n	8004694 <f_mkfs+0x54>
 8004690:	421a      	tst	r2, r3
 8004692:	d001      	beq.n	8004698 <f_mkfs+0x58>
 8004694:	2301      	movs	r3, #1
 8004696:	9306      	str	r3, [sp, #24]
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8004698:	b15e      	cbz	r6, 80046b2 <f_mkfs+0x72>
 800469a:	4b94      	ldr	r3, [pc, #592]	; (80048ec <f_mkfs+0x2ac>)
 800469c:	f5a6 7200 	sub.w	r2, r6, #512	; 0x200
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d903      	bls.n	80046ac <f_mkfs+0x6c>
 80046a4:	2013      	movs	r0, #19
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;

	return FR_OK;
}
 80046a6:	b009      	add	sp, #36	; 0x24
 80046a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 80046ac:	1e73      	subs	r3, r6, #1
 80046ae:	4233      	tst	r3, r6
 80046b0:	d1f8      	bne.n	80046a4 <f_mkfs+0x64>
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 80046b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80046b4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80046b8:	f023 0301 	bic.w	r3, r3, #1
 80046bc:	9304      	str	r3, [sp, #16]
	if (!szb_buf) return FR_MKFS_ABORTED;
 80046be:	b90b      	cbnz	r3, 80046c4 <f_mkfs+0x84>
 80046c0:	200e      	movs	r0, #14
 80046c2:	e7f0      	b.n	80046a6 <f_mkfs+0x66>
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 80046c4:	aa07      	add	r2, sp, #28
 80046c6:	2101      	movs	r1, #1
 80046c8:	4638      	mov	r0, r7
 80046ca:	f000 faa7 	bl	8004c1c <disk_ioctl>
 80046ce:	2800      	cmp	r0, #0
 80046d0:	f040 80ea 	bne.w	80048a8 <f_mkfs+0x268>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80046d4:	f015 0308 	ands.w	r3, r5, #8
 80046d8:	9301      	str	r3, [sp, #4]
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 80046da:	9b07      	ldr	r3, [sp, #28]
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80046dc:	bf14      	ite	ne
 80046de:	f04f 0900 	movne.w	r9, #0
 80046e2:	f04f 093f 	moveq.w	r9, #63	; 0x3f
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 80046e6:	454b      	cmp	r3, r9
 80046e8:	d3ea      	bcc.n	80046c0 <f_mkfs+0x80>
		sz_vol -= b_vol;						/* Volume size */
 80046ea:	eba3 0309 	sub.w	r3, r3, r9
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 80046ee:	2b7f      	cmp	r3, #127	; 0x7f
		sz_vol -= b_vol;						/* Volume size */
 80046f0:	9307      	str	r3, [sp, #28]
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 80046f2:	d9e5      	bls.n	80046c0 <f_mkfs+0x80>
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 80046f4:	f5b6 3f81 	cmp.w	r6, #66048	; 0x10200
 80046f8:	d2d4      	bcs.n	80046a4 <f_mkfs+0x64>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 80046fa:	f015 0e02 	ands.w	lr, r5, #2
	au /= ss;	/* Cluster size in unit of sector */
 80046fe:	ea4f 2256 	mov.w	r2, r6, lsr #9
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8004702:	d02c      	beq.n	800475e <f_mkfs+0x11e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8004704:	f005 0107 	and.w	r1, r5, #7
 8004708:	2902      	cmp	r1, #2
 800470a:	f000 81ee 	beq.w	8004aea <f_mkfs+0x4aa>
 800470e:	07e8      	lsls	r0, r5, #31
 8004710:	f140 81eb 	bpl.w	8004aea <f_mkfs+0x4aa>
				if (!pau) {	/* au auto-selection */
 8004714:	bb62      	cbnz	r2, 8004770 <f_mkfs+0x130>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8004716:	4876      	ldr	r0, [pc, #472]	; (80048f0 <f_mkfs+0x2b0>)
 8004718:	0b1d      	lsrs	r5, r3, #12
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800471a:	2601      	movs	r6, #1
 800471c:	f830 1b02 	ldrh.w	r1, [r0], #2
 8004720:	b109      	cbz	r1, 8004726 <f_mkfs+0xe6>
 8004722:	42a9      	cmp	r1, r5
 8004724:	d922      	bls.n	800476c <f_mkfs+0x12c>
				if (n_clst > MAX_FAT12) {
 8004726:	f640 71f5 	movw	r1, #4085	; 0xff5
				n_clst = sz_vol / pau;
 800472a:	fbb3 f5f6 	udiv	r5, r3, r6
				if (n_clst > MAX_FAT12) {
 800472e:	428d      	cmp	r5, r1
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8004730:	bf9b      	ittet	ls
 8004732:	eb05 0545 	addls.w	r5, r5, r5, lsl #1
 8004736:	3501      	addls	r5, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8004738:	3502      	addhi	r5, #2
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800473a:	086d      	lsrls	r5, r5, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800473c:	bf8c      	ite	hi
 800473e:	006d      	lslhi	r5, r5, #1
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8004740:	3503      	addls	r5, #3
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8004742:	f205 15ff 	addw	r5, r5, #511	; 0x1ff
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8004746:	f04f 0120 	mov.w	r1, #32
 800474a:	bf8c      	ite	hi
 800474c:	f04f 0802 	movhi.w	r8, #2
					fmt = FS_FAT12;
 8004750:	f04f 0801 	movls.w	r8, #1
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8004754:	0a6d      	lsrs	r5, r5, #9
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8004756:	9103      	str	r1, [sp, #12]
				sz_rsv = 1;						/* Number of reserved sectors */
 8004758:	f04f 0b01 	mov.w	fp, #1
 800475c:	e1e8      	b.n	8004b30 <f_mkfs+0x4f0>
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800475e:	07e9      	lsls	r1, r5, #31
 8004760:	d4d8      	bmi.n	8004714 <f_mkfs+0xd4>
 8004762:	e79f      	b.n	80046a4 <f_mkfs+0x64>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8004764:	0052      	lsls	r2, r2, #1
 8004766:	e1c6      	b.n	8004af6 <f_mkfs+0x4b6>
 8004768:	4611      	mov	r1, r2
 800476a:	e1cb      	b.n	8004b04 <f_mkfs+0x4c4>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800476c:	0076      	lsls	r6, r6, #1
 800476e:	e7d5      	b.n	800471c <f_mkfs+0xdc>
 8004770:	4616      	mov	r6, r2
 8004772:	e7d8      	b.n	8004726 <f_mkfs+0xe6>
			if (fmt == FS_FAT16) {
 8004774:	f1b8 0f02 	cmp.w	r8, #2
 8004778:	d118      	bne.n	80047ac <f_mkfs+0x16c>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800477a:	9802      	ldr	r0, [sp, #8]
 800477c:	f64f 71f5 	movw	r1, #65525	; 0xfff5
 8004780:	4288      	cmp	r0, r1
 8004782:	d908      	bls.n	8004796 <f_mkfs+0x156>
					if (!au && (pau * 2) <= 64) {
 8004784:	2a00      	cmp	r2, #0
 8004786:	f040 81ac 	bne.w	8004ae2 <f_mkfs+0x4a2>
 800478a:	0076      	lsls	r6, r6, #1
 800478c:	2e40      	cmp	r6, #64	; 0x40
 800478e:	f200 8206 	bhi.w	8004b9e <f_mkfs+0x55e>
 8004792:	4632      	mov	r2, r6
 8004794:	e7be      	b.n	8004714 <f_mkfs+0xd4>
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8004796:	9802      	ldr	r0, [sp, #8]
 8004798:	f640 71f5 	movw	r1, #4085	; 0xff5
 800479c:	4288      	cmp	r0, r1
 800479e:	d80c      	bhi.n	80047ba <f_mkfs+0x17a>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80047a0:	2a00      	cmp	r2, #0
 80047a2:	d18d      	bne.n	80046c0 <f_mkfs+0x80>
 80047a4:	0072      	lsls	r2, r6, #1
 80047a6:	2a80      	cmp	r2, #128	; 0x80
 80047a8:	d9b4      	bls.n	8004714 <f_mkfs+0xd4>
 80047aa:	e789      	b.n	80046c0 <f_mkfs+0x80>
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 80047ac:	9a02      	ldr	r2, [sp, #8]
 80047ae:	f640 73f5 	movw	r3, #4085	; 0xff5
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d884      	bhi.n	80046c0 <f_mkfs+0x80>
 80047b6:	f04f 0801 	mov.w	r8, #1
		mem_set(buf, 0, ss);
 80047ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047be:	2100      	movs	r1, #0
 80047c0:	4620      	mov	r0, r4
 80047c2:	f002 fe7f 	bl	80074c4 <mem_set>
	if (cnt) {
 80047c6:	494b      	ldr	r1, [pc, #300]	; (80048f4 <f_mkfs+0x2b4>)
 80047c8:	220b      	movs	r2, #11
 80047ca:	4620      	mov	r0, r4
 80047cc:	f002 fea5 	bl	800751a <mem_cpy.part.0>
		if (sz_vol < 0x10000) {
 80047d0:	9907      	ldr	r1, [sp, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 80047d2:	f884 b00e 	strb.w	fp, [r4, #14]
 80047d6:	2300      	movs	r3, #0
	*ptr++ = (BYTE)val;
 80047d8:	2202      	movs	r2, #2
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 80047da:	f1b8 0f03 	cmp.w	r8, #3
	*ptr++ = (BYTE)val; val >>= 8;
 80047de:	72e3      	strb	r3, [r4, #11]
	*ptr++ = (BYTE)val;
 80047e0:	7322      	strb	r2, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 80047e2:	f3cb 2b07 	ubfx	fp, fp, #8, #8
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 80047e6:	f04f 0201 	mov.w	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80047ea:	7463      	strb	r3, [r4, #17]
 80047ec:	bf18      	it	ne
 80047ee:	2302      	movne	r3, #2
		if (sz_vol < 0x10000) {
 80047f0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 80047f4:	7366      	strb	r6, [r4, #13]
	*ptr++ = (BYTE)val;
 80047f6:	f884 b00f 	strb.w	fp, [r4, #15]
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 80047fa:	7422      	strb	r2, [r4, #16]
	*ptr++ = (BYTE)val;
 80047fc:	74a3      	strb	r3, [r4, #18]
		if (sz_vol < 0x10000) {
 80047fe:	d255      	bcs.n	80048ac <f_mkfs+0x26c>
	*ptr++ = (BYTE)val; val >>= 8;
 8004800:	74e1      	strb	r1, [r4, #19]
 8004802:	f3c1 2107 	ubfx	r1, r1, #8, #8
	*ptr++ = (BYTE)val;
 8004806:	7521      	strb	r1, [r4, #20]
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8004808:	23f8      	movs	r3, #248	; 0xf8
 800480a:	7563      	strb	r3, [r4, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 800480c:	233f      	movs	r3, #63	; 0x3f
	*ptr++ = (BYTE)val;
 800480e:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 8004810:	7623      	strb	r3, [r4, #24]
 8004812:	23ff      	movs	r3, #255	; 0xff
 8004814:	76a3      	strb	r3, [r4, #26]
	*ptr++ = (BYTE)val;
 8004816:	7662      	strb	r2, [r4, #25]
 8004818:	76e2      	strb	r2, [r4, #27]
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800481a:	4649      	mov	r1, r9
 800481c:	f104 001c 	add.w	r0, r4, #28
 8004820:	f002 fe48 	bl	80074b4 <st_dword>
		if (fmt == FS_FAT32) {
 8004824:	f1b8 0f03 	cmp.w	r8, #3
 8004828:	f04f 0321 	mov.w	r3, #33	; 0x21
 800482c:	d143      	bne.n	80048b6 <f_mkfs+0x276>
	*ptr++ = (BYTE)val; val >>= 8;
 800482e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	*ptr++ = (BYTE)val;
 8004832:	2348      	movs	r3, #72	; 0x48
	*ptr++ = (BYTE)val; val >>= 8;
 8004834:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
	*ptr++ = (BYTE)val; val >>= 8;
 8004838:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
	*ptr++ = (BYTE)val;
 800483c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8004840:	4629      	mov	r1, r5
 8004842:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004846:	f002 fe35 	bl	80074b4 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 800484a:	2302      	movs	r3, #2
 800484c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 8004850:	2301      	movs	r3, #1
 8004852:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8004856:	2306      	movs	r3, #6
 8004858:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800485c:	2380      	movs	r3, #128	; 0x80
 800485e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004862:	4925      	ldr	r1, [pc, #148]	; (80048f8 <f_mkfs+0x2b8>)
	*ptr++ = (BYTE)val; val >>= 8;
 8004864:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8004868:	2329      	movs	r3, #41	; 0x29
	*ptr++ = (BYTE)val; val >>= 8;
 800486a:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
	*ptr++ = (BYTE)val;
 800486e:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
	*ptr++ = (BYTE)val;
 8004872:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
 8004876:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800487a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
	if (cnt) {
 800487e:	2213      	movs	r2, #19
 8004880:	f104 0047 	add.w	r0, r4, #71	; 0x47
 8004884:	f002 fe49 	bl	800751a <mem_cpy.part.0>
	*ptr++ = (BYTE)val; val >>= 8;
 8004888:	f04f 0355 	mov.w	r3, #85	; 0x55
 800488c:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
 8004890:	f06f 0355 	mvn.w	r3, #85	; 0x55
 8004894:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8004898:	464a      	mov	r2, r9
 800489a:	2301      	movs	r3, #1
 800489c:	4621      	mov	r1, r4
 800489e:	4638      	mov	r0, r7
 80048a0:	f000 f9b0 	bl	8004c04 <disk_write>
 80048a4:	4683      	mov	fp, r0
 80048a6:	b358      	cbz	r0, 8004900 <f_mkfs+0x2c0>
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 80048a8:	2001      	movs	r0, #1
 80048aa:	e6fc      	b.n	80046a6 <f_mkfs+0x66>
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 80048ac:	f104 0020 	add.w	r0, r4, #32
 80048b0:	f002 fe00 	bl	80074b4 <st_dword>
 80048b4:	e7a8      	b.n	8004808 <f_mkfs+0x1c8>
	*ptr++ = (BYTE)val; val >>= 8;
 80048b6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	*ptr++ = (BYTE)val;
 80048ba:	2348      	movs	r3, #72	; 0x48
 80048bc:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	*ptr++ = (BYTE)val; val >>= 8;
 80048c0:	f3c5 2307 	ubfx	r3, r5, #8, #8
	*ptr++ = (BYTE)val;
 80048c4:	75e3      	strb	r3, [r4, #23]
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80048c6:	2380      	movs	r3, #128	; 0x80
 80048c8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 80048cc:	2329      	movs	r3, #41	; 0x29
	*ptr++ = (BYTE)val; val >>= 8;
 80048ce:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
	*ptr++ = (BYTE)val; val >>= 8;
 80048d2:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	*ptr++ = (BYTE)val; val >>= 8;
 80048d6:	4909      	ldr	r1, [pc, #36]	; (80048fc <f_mkfs+0x2bc>)
 80048d8:	75a5      	strb	r5, [r4, #22]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 80048da:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	if (cnt) {
 80048de:	2213      	movs	r2, #19
 80048e0:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 80048e4:	e7ce      	b.n	8004884 <f_mkfs+0x244>
 80048e6:	bf00      	nop
 80048e8:	20000814 	.word	0x20000814
 80048ec:	00fffe00 	.word	0x00fffe00
 80048f0:	0800919a 	.word	0x0800919a
 80048f4:	08009ead 	.word	0x08009ead
 80048f8:	08009eb9 	.word	0x08009eb9
 80048fc:	08009ecd 	.word	0x08009ecd
		if (fmt == FS_FAT32) {
 8004900:	f1b8 0f03 	cmp.w	r8, #3
 8004904:	d141      	bne.n	800498a <f_mkfs+0x34a>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8004906:	2301      	movs	r3, #1
 8004908:	f109 0206 	add.w	r2, r9, #6
 800490c:	4621      	mov	r1, r4
 800490e:	4638      	mov	r0, r7
 8004910:	f000 f978 	bl	8004c04 <disk_write>
			mem_set(buf, 0, ss);
 8004914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004918:	4659      	mov	r1, fp
 800491a:	4620      	mov	r0, r4
 800491c:	f002 fdd2 	bl	80074c4 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8004920:	2352      	movs	r3, #82	; 0x52
 8004922:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004924:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8004926:	2361      	movs	r3, #97	; 0x61
 8004928:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
 800492a:	f884 31e7 	strb.w	r3, [r4, #487]	; 0x1e7
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800492e:	9b02      	ldr	r3, [sp, #8]
	*ptr++ = (BYTE)val;
 8004930:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8004932:	2172      	movs	r1, #114	; 0x72
	*ptr++ = (BYTE)val;
 8004934:	70e2      	strb	r2, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 8004936:	f884 11e4 	strb.w	r1, [r4, #484]	; 0x1e4
	*ptr++ = (BYTE)val; val >>= 8;
 800493a:	f884 11e5 	strb.w	r1, [r4, #485]	; 0x1e5
	*ptr++ = (BYTE)val; val >>= 8;
 800493e:	f884 21e6 	strb.w	r2, [r4, #486]	; 0x1e6
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8004942:	1e59      	subs	r1, r3, #1
 8004944:	f504 70f4 	add.w	r0, r4, #488	; 0x1e8
 8004948:	f002 fdb4 	bl	80074b4 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 800494c:	2302      	movs	r3, #2
 800494e:	f884 31ec 	strb.w	r3, [r4, #492]	; 0x1ec
	*ptr++ = (BYTE)val; val >>= 8;
 8004952:	f04f 0355 	mov.w	r3, #85	; 0x55
 8004956:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
 800495a:	f06f 0355 	mvn.w	r3, #85	; 0x55
 800495e:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8004962:	f109 0207 	add.w	r2, r9, #7
 8004966:	2301      	movs	r3, #1
 8004968:	4621      	mov	r1, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800496a:	f884 b1ed 	strb.w	fp, [r4, #493]	; 0x1ed
	*ptr++ = (BYTE)val; val >>= 8;
 800496e:	f884 b1ee 	strb.w	fp, [r4, #494]	; 0x1ee
	*ptr++ = (BYTE)val;
 8004972:	f884 b1ef 	strb.w	fp, [r4, #495]	; 0x1ef
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8004976:	4638      	mov	r0, r7
 8004978:	f000 f944 	bl	8004c04 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800497c:	2301      	movs	r3, #1
 800497e:	eb09 0203 	add.w	r2, r9, r3
 8004982:	4621      	mov	r1, r4
 8004984:	4638      	mov	r0, r7
 8004986:	f000 f93d 	bl	8004c04 <disk_write>
		mem_set(buf, 0, (UINT)szb_buf);
 800498a:	9a04      	ldr	r2, [sp, #16]
 800498c:	2100      	movs	r1, #0
 800498e:	4620      	mov	r0, r4
 8004990:	f002 fd98 	bl	80074c4 <mem_set>
			if (fmt == FS_FAT32) {
 8004994:	f1b8 0f03 	cmp.w	r8, #3
 8004998:	d154      	bne.n	8004a44 <f_mkfs+0x404>
	*ptr++ = (BYTE)val; val >>= 8;
 800499a:	23f8      	movs	r3, #248	; 0xf8
 800499c:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800499e:	23ff      	movs	r3, #255	; 0xff
 80049a0:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 80049a2:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
 80049a4:	70e3      	strb	r3, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 80049a6:	7123      	strb	r3, [r4, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 80049a8:	7163      	strb	r3, [r4, #5]
	*ptr++ = (BYTE)val; val >>= 8;
 80049aa:	71a3      	strb	r3, [r4, #6]
	*ptr++ = (BYTE)val;
 80049ac:	71e3      	strb	r3, [r4, #7]
	*ptr++ = (BYTE)val; val >>= 8;
 80049ae:	7223      	strb	r3, [r4, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 80049b0:	7263      	strb	r3, [r4, #9]
	*ptr++ = (BYTE)val; val >>= 8;
 80049b2:	72a3      	strb	r3, [r4, #10]
	*ptr++ = (BYTE)val;
 80049b4:	230f      	movs	r3, #15
 80049b6:	72e3      	strb	r3, [r4, #11]
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 80049b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80049ba:	0a5b      	lsrs	r3, r3, #9
 80049bc:	9302      	str	r3, [sp, #8]
				n = (nsect > sz_buf) ? sz_buf : nsect;
 80049be:	9b02      	ldr	r3, [sp, #8]
 80049c0:	42ab      	cmp	r3, r5
 80049c2:	bf28      	it	cs
 80049c4:	462b      	movcs	r3, r5
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80049c6:	4621      	mov	r1, r4
 80049c8:	4652      	mov	r2, sl
 80049ca:	4638      	mov	r0, r7
				n = (nsect > sz_buf) ? sz_buf : nsect;
 80049cc:	469b      	mov	fp, r3
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80049ce:	f000 f919 	bl	8004c04 <disk_write>
 80049d2:	4601      	mov	r1, r0
 80049d4:	2800      	cmp	r0, #0
 80049d6:	f47f af67 	bne.w	80048a8 <f_mkfs+0x268>
				mem_set(buf, 0, ss);
 80049da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049de:	4620      	mov	r0, r4
 80049e0:	f002 fd70 	bl	80074c4 <mem_set>
			} while (nsect);
 80049e4:	ebb5 050b 	subs.w	r5, r5, fp
				sect += n; nsect -= n;
 80049e8:	44da      	add	sl, fp
			} while (nsect);
 80049ea:	d1e8      	bne.n	80049be <f_mkfs+0x37e>
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 80049ec:	9b03      	ldr	r3, [sp, #12]
 80049ee:	f1b8 0f03 	cmp.w	r8, #3
 80049f2:	bf18      	it	ne
 80049f4:	461e      	movne	r6, r3
			n = (nsect > sz_buf) ? sz_buf : nsect;
 80049f6:	9b02      	ldr	r3, [sp, #8]
 80049f8:	42b3      	cmp	r3, r6
 80049fa:	bf28      	it	cs
 80049fc:	4633      	movcs	r3, r6
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80049fe:	4652      	mov	r2, sl
 8004a00:	4621      	mov	r1, r4
 8004a02:	4638      	mov	r0, r7
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8004a04:	461d      	mov	r5, r3
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8004a06:	f000 f8fd 	bl	8004c04 <disk_write>
 8004a0a:	2800      	cmp	r0, #0
 8004a0c:	f47f af4c 	bne.w	80048a8 <f_mkfs+0x268>
		} while (nsect);
 8004a10:	1b76      	subs	r6, r6, r5
			sect += n; nsect -= n;
 8004a12:	44aa      	add	sl, r5
		} while (nsect);
 8004a14:	d1ef      	bne.n	80049f6 <f_mkfs+0x3b6>
		if (fmt == FS_FAT32) {
 8004a16:	f1b8 0f03 	cmp.w	r8, #3
 8004a1a:	d01d      	beq.n	8004a58 <f_mkfs+0x418>
			if (sz_vol >= 0x10000) {
 8004a1c:	9b07      	ldr	r3, [sp, #28]
 8004a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a22:	d21b      	bcs.n	8004a5c <f_mkfs+0x41c>
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8004a24:	f1b8 0f02 	cmp.w	r8, #2
 8004a28:	bf0c      	ite	eq
 8004a2a:	2304      	moveq	r3, #4
 8004a2c:	2301      	movne	r3, #1
		if (!(opt & FM_SFD)) {
 8004a2e:	9a01      	ldr	r2, [sp, #4]
 8004a30:	b1b2      	cbz	r2, 8004a60 <f_mkfs+0x420>
	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8004a32:	2200      	movs	r2, #0
 8004a34:	4611      	mov	r1, r2
 8004a36:	4638      	mov	r0, r7
 8004a38:	f000 f8f0 	bl	8004c1c <disk_ioctl>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004a3c:	3800      	subs	r0, #0
 8004a3e:	bf18      	it	ne
 8004a40:	2001      	movne	r0, #1
 8004a42:	e630      	b.n	80046a6 <f_mkfs+0x66>
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8004a44:	f1b8 0f01 	cmp.w	r8, #1
 8004a48:	4959      	ldr	r1, [pc, #356]	; (8004bb0 <f_mkfs+0x570>)
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	bf18      	it	ne
 8004a4e:	f06f 0107 	mvnne.w	r1, #7
 8004a52:	f002 fd2f 	bl	80074b4 <st_dword>
 8004a56:	e7af      	b.n	80049b8 <f_mkfs+0x378>
			sys = 0x0C;		/* FAT32X */
 8004a58:	230c      	movs	r3, #12
 8004a5a:	e7e8      	b.n	8004a2e <f_mkfs+0x3ee>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8004a5c:	2306      	movs	r3, #6
 8004a5e:	e7e6      	b.n	8004a2e <f_mkfs+0x3ee>
			mem_set(buf, 0, ss);
 8004a60:	9901      	ldr	r1, [sp, #4]
 8004a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a66:	4620      	mov	r0, r4
 8004a68:	f002 fd2c 	bl	80074c4 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8004a6c:	2255      	movs	r2, #85	; 0x55
 8004a6e:	f884 21fe 	strb.w	r2, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
 8004a72:	22aa      	movs	r2, #170	; 0xaa
 8004a74:	f884 21ff 	strb.w	r2, [r4, #511]	; 0x1ff
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8004a78:	9a01      	ldr	r2, [sp, #4]
 8004a7a:	f884 21be 	strb.w	r2, [r4, #446]	; 0x1be
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8004a7e:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS is incorrect) */
 8004a82:	9a07      	ldr	r2, [sp, #28]
			pte[PTE_System] = sys;				/* System type */
 8004a84:	f884 31c2 	strb.w	r3, [r4, #450]	; 0x1c2
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS is incorrect) */
 8004a88:	444a      	add	r2, r9
 8004a8a:	f643 63c1 	movw	r3, #16065	; 0x3ec1
 8004a8e:	fbb2 f2f3 	udiv	r2, r2, r3
			pte[PTE_EdHead] = 254;				/* End head */
 8004a92:	23fe      	movs	r3, #254	; 0xfe
 8004a94:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8004a98:	0893      	lsrs	r3, r2, #2
 8004a9a:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
			pte[PTE_StHead] = 1;				/* Start head */
 8004a9e:	2501      	movs	r5, #1
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8004aa0:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8004aa4:	f884 21c5 	strb.w	r2, [r4, #453]	; 0x1c5
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8004aa8:	4649      	mov	r1, r9
 8004aaa:	f504 70e3 	add.w	r0, r4, #454	; 0x1c6
			pte[PTE_StHead] = 1;				/* Start head */
 8004aae:	f884 51bf 	strb.w	r5, [r4, #447]	; 0x1bf
			pte[PTE_StSec] = 1;					/* Start sector */
 8004ab2:	f884 51c0 	strb.w	r5, [r4, #448]	; 0x1c0
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8004ab6:	f002 fcfd 	bl	80074b4 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8004aba:	9907      	ldr	r1, [sp, #28]
 8004abc:	f504 70e5 	add.w	r0, r4, #458	; 0x1ca
 8004ac0:	f002 fcf8 	bl	80074b4 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8004ac4:	9a01      	ldr	r2, [sp, #4]
 8004ac6:	462b      	mov	r3, r5
 8004ac8:	4621      	mov	r1, r4
 8004aca:	4638      	mov	r0, r7
 8004acc:	f000 f89a 	bl	8004c04 <disk_write>
 8004ad0:	2800      	cmp	r0, #0
 8004ad2:	d0ae      	beq.n	8004a32 <f_mkfs+0x3f2>
 8004ad4:	e6e8      	b.n	80048a8 <f_mkfs+0x268>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004ad6:	200b      	movs	r0, #11
 8004ad8:	e5e5      	b.n	80046a6 <f_mkfs+0x66>
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8004ada:	2003      	movs	r0, #3
 8004adc:	e5e3      	b.n	80046a6 <f_mkfs+0x66>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8004ade:	200a      	movs	r0, #10
 8004ae0:	e5e1      	b.n	80046a6 <f_mkfs+0x66>
					if ((opt & FM_FAT32)) {
 8004ae2:	f1be 0f00 	cmp.w	lr, #0
 8004ae6:	f43f adeb 	beq.w	80046c0 <f_mkfs+0x80>
				if (!pau) {	/* au auto-selection */
 8004aea:	2a00      	cmp	r2, #0
 8004aec:	f47f ae3c 	bne.w	8004768 <f_mkfs+0x128>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8004af0:	4830      	ldr	r0, [pc, #192]	; (8004bb4 <f_mkfs+0x574>)
 8004af2:	0c5d      	lsrs	r5, r3, #17
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8004af4:	2201      	movs	r2, #1
 8004af6:	f830 1b02 	ldrh.w	r1, [r0], #2
 8004afa:	b119      	cbz	r1, 8004b04 <f_mkfs+0x4c4>
 8004afc:	42a9      	cmp	r1, r5
 8004afe:	f67f ae31 	bls.w	8004764 <f_mkfs+0x124>
 8004b02:	2100      	movs	r1, #0
				n_clst = sz_vol / pau;	/* Number of clusters */
 8004b04:	fbb3 f0f2 	udiv	r0, r3, r2
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8004b08:	4e2b      	ldr	r6, [pc, #172]	; (8004bb8 <f_mkfs+0x578>)
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8004b0a:	0085      	lsls	r5, r0, #2
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8004b0c:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
 8004b10:	38f6      	subs	r0, #246	; 0xf6
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8004b12:	f205 2507 	addw	r5, r5, #519	; 0x207
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8004b16:	42b0      	cmp	r0, r6
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8004b18:	ea4f 2555 	mov.w	r5, r5, lsr #9
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8004b1c:	f63f add0 	bhi.w	80046c0 <f_mkfs+0x80>
 8004b20:	4616      	mov	r6, r2
 8004b22:	460a      	mov	r2, r1
				sz_dir = 0;		/* No static directory */
 8004b24:	2100      	movs	r1, #0
 8004b26:	9103      	str	r1, [sp, #12]
				sz_rsv = 32;	/* Number of reserved sectors */
 8004b28:	f04f 0b20 	mov.w	fp, #32
 8004b2c:	f04f 0803 	mov.w	r8, #3
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8004b30:	9903      	ldr	r1, [sp, #12]
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8004b32:	f8dd c018 	ldr.w	ip, [sp, #24]
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8004b36:	eb0b 0a09 	add.w	sl, fp, r9
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8004b3a:	1948      	adds	r0, r1, r5
 8004b3c:	4450      	add	r0, sl
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8004b3e:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8004b42:	4401      	add	r1, r0
 8004b44:	f1cc 0c00 	rsb	ip, ip, #0
 8004b48:	ea01 0c0c 	and.w	ip, r1, ip
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8004b4c:	ebc9 1106 	rsb	r1, r9, r6, lsl #4
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8004b50:	ebac 0c00 	sub.w	ip, ip, r0
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8004b54:	f1b8 0f03 	cmp.w	r8, #3
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8004b58:	4408      	add	r0, r1
				sz_rsv += n; b_fat += n;
 8004b5a:	bf06      	itte	eq
 8004b5c:	44e3      	addeq	fp, ip
 8004b5e:	44e2      	addeq	sl, ip
				sz_fat += n / n_fats;
 8004b60:	4465      	addne	r5, ip
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8004b62:	4283      	cmp	r3, r0
 8004b64:	f4ff adac 	bcc.w	80046c0 <f_mkfs+0x80>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8004b68:	9903      	ldr	r1, [sp, #12]
 8004b6a:	1a59      	subs	r1, r3, r1
 8004b6c:	eba1 010b 	sub.w	r1, r1, fp
			if (fmt == FS_FAT32) {
 8004b70:	f1b8 0f03 	cmp.w	r8, #3
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8004b74:	eba1 0105 	sub.w	r1, r1, r5
 8004b78:	fbb1 f1f6 	udiv	r1, r1, r6
 8004b7c:	9102      	str	r1, [sp, #8]
			if (fmt == FS_FAT32) {
 8004b7e:	f47f adf9 	bne.w	8004774 <f_mkfs+0x134>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8004b82:	9802      	ldr	r0, [sp, #8]
 8004b84:	f64f 71f5 	movw	r1, #65525	; 0xfff5
 8004b88:	4288      	cmp	r0, r1
 8004b8a:	f63f ae16 	bhi.w	80047ba <f_mkfs+0x17a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8004b8e:	2a00      	cmp	r2, #0
 8004b90:	f47f ad96 	bne.w	80046c0 <f_mkfs+0x80>
 8004b94:	2e01      	cmp	r6, #1
 8004b96:	f67f ad93 	bls.w	80046c0 <f_mkfs+0x80>
 8004b9a:	0872      	lsrs	r2, r6, #1
 8004b9c:	e7a5      	b.n	8004aea <f_mkfs+0x4aa>
					if ((opt & FM_FAT32)) {
 8004b9e:	f1be 0f00 	cmp.w	lr, #0
 8004ba2:	d1a5      	bne.n	8004af0 <f_mkfs+0x4b0>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8004ba4:	2e80      	cmp	r6, #128	; 0x80
 8004ba6:	f63f ad8b 	bhi.w	80046c0 <f_mkfs+0x80>
 8004baa:	4632      	mov	r2, r6
 8004bac:	e5bb      	b.n	8004726 <f_mkfs+0xe6>
 8004bae:	bf00      	nop
 8004bb0:	00fffff8 	.word	0x00fffff8
 8004bb4:	080091a8 	.word	0x080091a8
 8004bb8:	0ffeffff 	.word	0x0ffeffff

08004bbc <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Drive Status                                                      */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE pdrv)
{
 8004bbc:	b508      	push	{r3, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if (disk_access_status(pdrv_str[pdrv]) != 0) {
 8004bbe:	4b04      	ldr	r3, [pc, #16]	; (8004bd0 <disk_status+0x14>)
 8004bc0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004bc4:	f001 fda3 	bl	800670e <disk_access_status>
		return STA_NOINIT;
	} else {
		return RES_OK;
	}
}
 8004bc8:	3800      	subs	r0, #0
 8004bca:	bf18      	it	ne
 8004bcc:	2001      	movne	r0, #1
 8004bce:	bd08      	pop	{r3, pc}
 8004bd0:	08009148 	.word	0x08009148

08004bd4 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize a Drive                                                    */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE pdrv)
{
 8004bd4:	b508      	push	{r3, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if (disk_access_init(pdrv_str[pdrv]) != 0) {
 8004bd6:	4b04      	ldr	r3, [pc, #16]	; (8004be8 <disk_initialize+0x14>)
 8004bd8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004bdc:	f001 fd89 	bl	80066f2 <disk_access_init>
		return STA_NOINIT;
	} else {
		return RES_OK;
	}
}
 8004be0:	3800      	subs	r0, #0
 8004be2:	bf18      	it	ne
 8004be4:	2001      	movne	r0, #1
 8004be6:	bd08      	pop	{r3, pc}
 8004be8:	08009148 	.word	0x08009148

08004bec <disk_read>:
/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count)
{
 8004bec:	b510      	push	{r4, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if (disk_access_read(pdrv_str[pdrv], buff, sector, count) != 0) {
 8004bee:	4c04      	ldr	r4, [pc, #16]	; (8004c00 <disk_read+0x14>)
 8004bf0:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8004bf4:	f001 fd99 	bl	800672a <disk_access_read>
		return RES_ERROR;
	} else {
		return RES_OK;
	}

}
 8004bf8:	3800      	subs	r0, #0
 8004bfa:	bf18      	it	ne
 8004bfc:	2001      	movne	r0, #1
 8004bfe:	bd10      	pop	{r4, pc}
 8004c00:	08009148 	.word	0x08009148

08004c04 <disk_write>:

/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/
DRESULT disk_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count)
{
 8004c04:	b510      	push	{r4, lr}
	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	if(disk_access_write(pdrv_str[pdrv], buff, sector, count) != 0) {
 8004c06:	4c04      	ldr	r4, [pc, #16]	; (8004c18 <disk_write+0x14>)
 8004c08:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8004c0c:	f001 fda4 	bl	8006758 <disk_access_write>
		return RES_ERROR;
	} else {
		return RES_OK;
	}
}
 8004c10:	3800      	subs	r0, #0
 8004c12:	bf18      	it	ne
 8004c14:	2001      	movne	r0, #1
 8004c16:	bd10      	pop	{r4, pc}
 8004c18:	08009148 	.word	0x08009148

08004c1c <disk_ioctl>:
{
	int ret =  RES_OK;

	__ASSERT(pdrv < ARRAY_SIZE(pdrv_str), "pdrv out-of-range\n");

	switch (cmd) {
 8004c1c:	2901      	cmp	r1, #1
{
 8004c1e:	b508      	push	{r3, lr}
	switch (cmd) {
 8004c20:	d003      	beq.n	8004c2a <disk_ioctl+0xe>
 8004c22:	2903      	cmp	r1, #3
 8004c24:	d00a      	beq.n	8004c3c <disk_ioctl+0x20>
 8004c26:	b959      	cbnz	r1, 8004c40 <disk_ioctl+0x24>
	case CTRL_SYNC:
		if(disk_access_ioctl(pdrv_str[pdrv],
 8004c28:	2105      	movs	r1, #5
			ret = RES_ERROR;
                }
		break;

	case GET_BLOCK_SIZE:
		if (disk_access_ioctl(pdrv_str[pdrv],
 8004c2a:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <disk_ioctl+0x28>)
 8004c2c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004c30:	f001 fda9 	bl	8006786 <disk_access_ioctl>
 8004c34:	3800      	subs	r0, #0
 8004c36:	bf18      	it	ne
 8004c38:	2001      	movne	r0, #1
	default:
		ret = RES_PARERR;
		break;
	}
	return ret;
}
 8004c3a:	bd08      	pop	{r3, pc}
		if (disk_access_ioctl(pdrv_str[pdrv],
 8004c3c:	2104      	movs	r1, #4
 8004c3e:	e7f4      	b.n	8004c2a <disk_ioctl+0xe>
	switch (cmd) {
 8004c40:	2004      	movs	r0, #4
 8004c42:	e7fa      	b.n	8004c3a <disk_ioctl+0x1e>
 8004c44:	08009148 	.word	0x08009148

08004c48 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c48:	4a2f      	ldr	r2, [pc, #188]	; (8004d08 <LL_TIM_Init+0xc0>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004c4a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c4c:	4290      	cmp	r0, r2
 8004c4e:	d012      	beq.n	8004c76 <LL_TIM_Init+0x2e>
 8004c50:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004c54:	d00f      	beq.n	8004c76 <LL_TIM_Init+0x2e>
 8004c56:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004c5a:	4290      	cmp	r0, r2
 8004c5c:	d00b      	beq.n	8004c76 <LL_TIM_Init+0x2e>
 8004c5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c62:	4290      	cmp	r0, r2
 8004c64:	d007      	beq.n	8004c76 <LL_TIM_Init+0x2e>
 8004c66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c6a:	4290      	cmp	r0, r2
 8004c6c:	d003      	beq.n	8004c76 <LL_TIM_Init+0x2e>
 8004c6e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8004c72:	4290      	cmp	r0, r2
 8004c74:	d119      	bne.n	8004caa <LL_TIM_Init+0x62>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004c76:	684a      	ldr	r2, [r1, #4]
 8004c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c7c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c7e:	4a22      	ldr	r2, [pc, #136]	; (8004d08 <LL_TIM_Init+0xc0>)
 8004c80:	4290      	cmp	r0, r2
 8004c82:	d01d      	beq.n	8004cc0 <LL_TIM_Init+0x78>
 8004c84:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004c88:	d01a      	beq.n	8004cc0 <LL_TIM_Init+0x78>
 8004c8a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004c8e:	4290      	cmp	r0, r2
 8004c90:	d016      	beq.n	8004cc0 <LL_TIM_Init+0x78>
 8004c92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c96:	4290      	cmp	r0, r2
 8004c98:	d012      	beq.n	8004cc0 <LL_TIM_Init+0x78>
 8004c9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c9e:	4290      	cmp	r0, r2
 8004ca0:	d00e      	beq.n	8004cc0 <LL_TIM_Init+0x78>
 8004ca2:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8004ca6:	4290      	cmp	r0, r2
 8004ca8:	d00a      	beq.n	8004cc0 <LL_TIM_Init+0x78>
 8004caa:	4a18      	ldr	r2, [pc, #96]	; (8004d0c <LL_TIM_Init+0xc4>)
 8004cac:	4290      	cmp	r0, r2
 8004cae:	d007      	beq.n	8004cc0 <LL_TIM_Init+0x78>
 8004cb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cb4:	4290      	cmp	r0, r2
 8004cb6:	d003      	beq.n	8004cc0 <LL_TIM_Init+0x78>
 8004cb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cbc:	4290      	cmp	r0, r2
 8004cbe:	d103      	bne.n	8004cc8 <LL_TIM_Init+0x80>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004cc0:	68ca      	ldr	r2, [r1, #12]
 8004cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc6:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004cc8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004cca:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004ccc:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004cce:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004cd0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cd2:	4b0d      	ldr	r3, [pc, #52]	; (8004d08 <LL_TIM_Init+0xc0>)
 8004cd4:	4298      	cmp	r0, r3
 8004cd6:	d00f      	beq.n	8004cf8 <LL_TIM_Init+0xb0>
 8004cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cdc:	4298      	cmp	r0, r3
 8004cde:	d00b      	beq.n	8004cf8 <LL_TIM_Init+0xb0>
 8004ce0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8004ce4:	4298      	cmp	r0, r3
 8004ce6:	d007      	beq.n	8004cf8 <LL_TIM_Init+0xb0>
 8004ce8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cec:	4298      	cmp	r0, r3
 8004cee:	d003      	beq.n	8004cf8 <LL_TIM_Init+0xb0>
 8004cf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cf4:	4298      	cmp	r0, r3
 8004cf6:	d101      	bne.n	8004cfc <LL_TIM_Init+0xb4>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004cf8:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004cfa:	6303      	str	r3, [r0, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004cfc:	6943      	ldr	r3, [r0, #20]
 8004cfe:	f043 0301 	orr.w	r3, r3, #1
 8004d02:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8004d04:	2000      	movs	r0, #0
 8004d06:	4770      	bx	lr
 8004d08:	40012c00 	.word	0x40012c00
 8004d0c:	40014000 	.word	0x40014000

08004d10 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 8004d10:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
{
 8004d14:	b530      	push	{r4, r5, lr}
  switch (Channel)
 8004d16:	f000 8111 	beq.w	8004f3c <LL_TIM_OC_Init+0x22c>
 8004d1a:	d80a      	bhi.n	8004d32 <LL_TIM_OC_Init+0x22>
 8004d1c:	2910      	cmp	r1, #16
 8004d1e:	f000 8086 	beq.w	8004e2e <LL_TIM_OC_Init+0x11e>
 8004d22:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004d26:	f000 80c6 	beq.w	8004eb6 <LL_TIM_OC_Init+0x1a6>
 8004d2a:	2901      	cmp	r1, #1
 8004d2c:	d03d      	beq.n	8004daa <LL_TIM_OC_Init+0x9a>
 8004d2e:	2001      	movs	r0, #1
    default:
      break;
  }

  return result;
}
 8004d30:	bd30      	pop	{r4, r5, pc}
  switch (Channel)
 8004d32:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8004d36:	f000 8136 	beq.w	8004fa6 <LL_TIM_OC_Init+0x296>
 8004d3a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004d3e:	d1f6      	bne.n	8004d2e <LL_TIM_OC_Init+0x1e>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8004d40:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8004d42:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8004d44:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d48:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004d4a:	6a03      	ldr	r3, [r0, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8004d4c:	6d41      	ldr	r1, [r0, #84]	; 0x54
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8004d4e:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8004d52:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004d56:	ea41 2404 	orr.w	r4, r1, r4, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8004d5a:	6911      	ldr	r1, [r2, #16]
 8004d5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d60:	ea43 5301 	orr.w	r3, r3, r1, lsl #20

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8004d64:	6851      	ldr	r1, [r2, #4]
 8004d66:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d6a:	ea43 5301 	orr.w	r3, r3, r1, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d6e:	49a8      	ldr	r1, [pc, #672]	; (8005010 <LL_TIM_OC_Init+0x300>)
 8004d70:	4288      	cmp	r0, r1
 8004d72:	d00f      	beq.n	8004d94 <LL_TIM_OC_Init+0x84>
 8004d74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d78:	4288      	cmp	r0, r1
 8004d7a:	d00b      	beq.n	8004d94 <LL_TIM_OC_Init+0x84>
 8004d7c:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8004d80:	4288      	cmp	r0, r1
 8004d82:	d007      	beq.n	8004d94 <LL_TIM_OC_Init+0x84>
 8004d84:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d88:	4288      	cmp	r0, r1
 8004d8a:	d003      	beq.n	8004d94 <LL_TIM_OC_Init+0x84>
 8004d8c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d90:	4288      	cmp	r0, r1
 8004d92:	d106      	bne.n	8004da2 <LL_TIM_OC_Init+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8004d94:	6841      	ldr	r1, [r0, #4]
 8004d96:	6995      	ldr	r5, [r2, #24]
 8004d98:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8004d9c:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8004da0:	6041      	str	r1, [r0, #4]

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8004da2:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004da4:	6544      	str	r4, [r0, #84]	; 0x54
  WRITE_REG(TIMx->CCR6, CompareValue);
 8004da6:	65c2      	str	r2, [r0, #92]	; 0x5c
 8004da8:	e03e      	b.n	8004e28 <LL_TIM_OC_Init+0x118>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004daa:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004dac:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004dae:	f023 0301 	bic.w	r3, r3, #1
 8004db2:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004db4:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004db6:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004db8:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004dba:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8004dbe:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8004dc2:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004dc4:	6915      	ldr	r5, [r2, #16]
 8004dc6:	f023 0302 	bic.w	r3, r3, #2
 8004dca:	432b      	orrs	r3, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004dcc:	6855      	ldr	r5, [r2, #4]
 8004dce:	f023 0301 	bic.w	r3, r3, #1
 8004dd2:	432b      	orrs	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dd4:	4d8e      	ldr	r5, [pc, #568]	; (8005010 <LL_TIM_OC_Init+0x300>)
 8004dd6:	42a8      	cmp	r0, r5
 8004dd8:	d00f      	beq.n	8004dfa <LL_TIM_OC_Init+0xea>
 8004dda:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004dde:	42a8      	cmp	r0, r5
 8004de0:	d00b      	beq.n	8004dfa <LL_TIM_OC_Init+0xea>
 8004de2:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8004de6:	42a8      	cmp	r0, r5
 8004de8:	d007      	beq.n	8004dfa <LL_TIM_OC_Init+0xea>
 8004dea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004dee:	42a8      	cmp	r0, r5
 8004df0:	d003      	beq.n	8004dfa <LL_TIM_OC_Init+0xea>
 8004df2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004df6:	42a8      	cmp	r0, r5
 8004df8:	d112      	bne.n	8004e20 <LL_TIM_OC_Init+0x110>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004dfa:	6955      	ldr	r5, [r2, #20]
 8004dfc:	f023 0308 	bic.w	r3, r3, #8
 8004e00:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004e04:	6895      	ldr	r5, [r2, #8]
 8004e06:	f023 0304 	bic.w	r3, r3, #4
 8004e0a:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004e0e:	6995      	ldr	r5, [r2, #24]
 8004e10:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004e14:	4329      	orrs	r1, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004e16:	69d5      	ldr	r5, [r2, #28]
 8004e18:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8004e1c:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004e20:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004e22:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004e24:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004e26:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004e28:	6203      	str	r3, [r0, #32]
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8004e2a:	2000      	movs	r0, #0
      break;
 8004e2c:	e780      	b.n	8004d30 <LL_TIM_OC_Init+0x20>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004e2e:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004e30:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004e32:	f023 0310 	bic.w	r3, r3, #16
 8004e36:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004e38:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004e3a:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004e3c:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004e3e:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8004e42:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8004e46:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004e4a:	6915      	ldr	r5, [r2, #16]
 8004e4c:	f023 0320 	bic.w	r3, r3, #32
 8004e50:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004e54:	6855      	ldr	r5, [r2, #4]
 8004e56:	f023 0310 	bic.w	r3, r3, #16
 8004e5a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e5e:	4d6c      	ldr	r5, [pc, #432]	; (8005010 <LL_TIM_OC_Init+0x300>)
 8004e60:	42a8      	cmp	r0, r5
 8004e62:	d00f      	beq.n	8004e84 <LL_TIM_OC_Init+0x174>
 8004e64:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004e68:	42a8      	cmp	r0, r5
 8004e6a:	d00b      	beq.n	8004e84 <LL_TIM_OC_Init+0x174>
 8004e6c:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8004e70:	42a8      	cmp	r0, r5
 8004e72:	d007      	beq.n	8004e84 <LL_TIM_OC_Init+0x174>
 8004e74:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004e78:	42a8      	cmp	r0, r5
 8004e7a:	d003      	beq.n	8004e84 <LL_TIM_OC_Init+0x174>
 8004e7c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004e80:	42a8      	cmp	r0, r5
 8004e82:	d113      	bne.n	8004eac <LL_TIM_OC_Init+0x19c>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004e84:	6955      	ldr	r5, [r2, #20]
 8004e86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e8a:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004e8e:	6895      	ldr	r5, [r2, #8]
 8004e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e94:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004e98:	6995      	ldr	r5, [r2, #24]
 8004e9a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004e9e:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004ea2:	69d5      	ldr	r5, [r2, #28]
 8004ea4:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8004ea8:	ea41 01c5 	orr.w	r1, r1, r5, lsl #3
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004eac:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004eae:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004eb0:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004eb2:	6382      	str	r2, [r0, #56]	; 0x38
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004eb4:	e7b8      	b.n	8004e28 <LL_TIM_OC_Init+0x118>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004eb6:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004eb8:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004eba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ebe:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004ec0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004ec2:	6841      	ldr	r1, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004ec4:	69c4      	ldr	r4, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004ec6:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8004eca:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8004ece:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004ed0:	6915      	ldr	r5, [r2, #16]
 8004ed2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ed6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004eda:	6855      	ldr	r5, [r2, #4]
 8004edc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ee0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ee4:	4d4a      	ldr	r5, [pc, #296]	; (8005010 <LL_TIM_OC_Init+0x300>)
 8004ee6:	42a8      	cmp	r0, r5
 8004ee8:	d00f      	beq.n	8004f0a <LL_TIM_OC_Init+0x1fa>
 8004eea:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004eee:	42a8      	cmp	r0, r5
 8004ef0:	d00b      	beq.n	8004f0a <LL_TIM_OC_Init+0x1fa>
 8004ef2:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8004ef6:	42a8      	cmp	r0, r5
 8004ef8:	d007      	beq.n	8004f0a <LL_TIM_OC_Init+0x1fa>
 8004efa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004efe:	42a8      	cmp	r0, r5
 8004f00:	d003      	beq.n	8004f0a <LL_TIM_OC_Init+0x1fa>
 8004f02:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004f06:	42a8      	cmp	r0, r5
 8004f08:	d113      	bne.n	8004f32 <LL_TIM_OC_Init+0x222>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004f0a:	6955      	ldr	r5, [r2, #20]
 8004f0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f10:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004f14:	6895      	ldr	r5, [r2, #8]
 8004f16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f1a:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004f1e:	6995      	ldr	r5, [r2, #24]
 8004f20:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8004f24:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004f28:	69d5      	ldr	r5, [r2, #28]
 8004f2a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8004f2e:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004f32:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004f34:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004f36:	61c4      	str	r4, [r0, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004f38:	63c2      	str	r2, [r0, #60]	; 0x3c
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004f3a:	e775      	b.n	8004e28 <LL_TIM_OC_Init+0x118>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004f3c:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004f3e:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004f40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f44:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004f46:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004f48:	6844      	ldr	r4, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004f4a:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004f4c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8004f50:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8004f54:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004f58:	6915      	ldr	r5, [r2, #16]
 8004f5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f5e:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004f62:	6855      	ldr	r5, [r2, #4]
 8004f64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f68:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f6c:	4d28      	ldr	r5, [pc, #160]	; (8005010 <LL_TIM_OC_Init+0x300>)
 8004f6e:	42a8      	cmp	r0, r5
 8004f70:	d00f      	beq.n	8004f92 <LL_TIM_OC_Init+0x282>
 8004f72:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004f76:	42a8      	cmp	r0, r5
 8004f78:	d00b      	beq.n	8004f92 <LL_TIM_OC_Init+0x282>
 8004f7a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8004f7e:	42a8      	cmp	r0, r5
 8004f80:	d007      	beq.n	8004f92 <LL_TIM_OC_Init+0x282>
 8004f82:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004f86:	42a8      	cmp	r0, r5
 8004f88:	d003      	beq.n	8004f92 <LL_TIM_OC_Init+0x282>
 8004f8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004f8e:	42a8      	cmp	r0, r5
 8004f90:	d104      	bne.n	8004f9c <LL_TIM_OC_Init+0x28c>
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004f92:	6995      	ldr	r5, [r2, #24]
 8004f94:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 8004f98:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004f9c:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004f9e:	6044      	str	r4, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004fa0:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004fa2:	6402      	str	r2, [r0, #64]	; 0x40
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004fa4:	e740      	b.n	8004e28 <LL_TIM_OC_Init+0x118>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8004fa6:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8004fa8:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8004faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fae:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004fb0:	6a03      	ldr	r3, [r0, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8004fb2:	6d41      	ldr	r1, [r0, #84]	; 0x54
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8004fb4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004fb8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8004fbc:	430c      	orrs	r4, r1
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8004fbe:	6911      	ldr	r1, [r2, #16]
 8004fc0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004fc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8004fc8:	6851      	ldr	r1, [r2, #4]
 8004fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fd2:	490f      	ldr	r1, [pc, #60]	; (8005010 <LL_TIM_OC_Init+0x300>)
 8004fd4:	4288      	cmp	r0, r1
 8004fd6:	d00f      	beq.n	8004ff8 <LL_TIM_OC_Init+0x2e8>
 8004fd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fdc:	4288      	cmp	r0, r1
 8004fde:	d00b      	beq.n	8004ff8 <LL_TIM_OC_Init+0x2e8>
 8004fe0:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8004fe4:	4288      	cmp	r0, r1
 8004fe6:	d007      	beq.n	8004ff8 <LL_TIM_OC_Init+0x2e8>
 8004fe8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004fec:	4288      	cmp	r0, r1
 8004fee:	d003      	beq.n	8004ff8 <LL_TIM_OC_Init+0x2e8>
 8004ff0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ff4:	4288      	cmp	r0, r1
 8004ff6:	d106      	bne.n	8005006 <LL_TIM_OC_Init+0x2f6>
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8004ff8:	6841      	ldr	r1, [r0, #4]
 8004ffa:	6995      	ldr	r5, [r2, #24]
 8004ffc:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005000:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8005004:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8005006:	6544      	str	r4, [r0, #84]	; 0x54
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8005008:	68d2      	ldr	r2, [r2, #12]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800500a:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800500c:	6582      	str	r2, [r0, #88]	; 0x58
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800500e:	e70b      	b.n	8004e28 <LL_TIM_OC_Init+0x118>
 8005010:	40012c00 	.word	0x40012c00

08005014 <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8005014:	4b08      	ldr	r3, [pc, #32]	; (8005038 <UTILS_PLL_IsBusy+0x24>)
 8005016:	6819      	ldr	r1, [r3, #0]
  * @rmtoll CR           PLLSAI1RDY    LL_RCC_PLLSAI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI1_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 8005018:	681a      	ldr	r2, [r3, #0]
  * @rmtoll CR           PLLSAI2RDY    LL_RCC_PLLSAI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI2_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RCC_CR_PLLSAI2RDY) ? 1UL : 0UL);
 800501a:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800501c:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 8005020:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8005024:	430a      	orrs	r2, r1
 8005026:	bf14      	ite	ne
 8005028:	2001      	movne	r0, #1
 800502a:	2000      	moveq	r0, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RCC_CR_PLLSAI2RDY) ? 1UL : 0UL);
 800502c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
    status = ERROR;
  }
#endif /*RCC_PLLSAI2_SUPPORT*/

  return status;
}
 8005030:	bf18      	it	ne
 8005032:	2001      	movne	r0, #1
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	40021000 	.word	0x40021000

0800503c <LL_SetFlashLatency>:
  if ((HCLKFrequency == 0U) || (HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE1))
 800503c:	4b1e      	ldr	r3, [pc, #120]	; (80050b8 <LL_SetFlashLatency+0x7c>)
 800503e:	1e42      	subs	r2, r0, #1
 8005040:	429a      	cmp	r2, r3
 8005042:	d833      	bhi.n	80050ac <LL_SetFlashLatency+0x70>
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 8005044:	4b1d      	ldr	r3, [pc, #116]	; (80050bc <LL_SetFlashLatency+0x80>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 800504c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005050:	d10f      	bne.n	8005072 <LL_SetFlashLatency+0x36>
      if(HCLKFrequency > UTILS_SCALE1_LATENCY4_FREQ)
 8005052:	4b1b      	ldr	r3, [pc, #108]	; (80050c0 <LL_SetFlashLatency+0x84>)
 8005054:	4298      	cmp	r0, r3
 8005056:	d81a      	bhi.n	800508e <LL_SetFlashLatency+0x52>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY3_FREQ)
 8005058:	4b1a      	ldr	r3, [pc, #104]	; (80050c4 <LL_SetFlashLatency+0x88>)
 800505a:	4298      	cmp	r0, r3
 800505c:	d828      	bhi.n	80050b0 <LL_SetFlashLatency+0x74>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY2_FREQ)
 800505e:	4b1a      	ldr	r3, [pc, #104]	; (80050c8 <LL_SetFlashLatency+0x8c>)
 8005060:	4298      	cmp	r0, r3
 8005062:	d827      	bhi.n	80050b4 <LL_SetFlashLatency+0x78>
        if(HCLKFrequency > UTILS_SCALE1_LATENCY1_FREQ)
 8005064:	4b19      	ldr	r3, [pc, #100]	; (80050cc <LL_SetFlashLatency+0x90>)
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 8005066:	4298      	cmp	r0, r3
 8005068:	bf94      	ite	ls
 800506a:	2300      	movls	r3, #0
 800506c:	2301      	movhi	r3, #1
  ErrorStatus status = SUCCESS;
 800506e:	2000      	movs	r0, #0
 8005070:	e011      	b.n	8005096 <LL_SetFlashLatency+0x5a>
      if(HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE2)
 8005072:	4b17      	ldr	r3, [pc, #92]	; (80050d0 <LL_SetFlashLatency+0x94>)
 8005074:	4298      	cmp	r0, r3
 8005076:	d80c      	bhi.n	8005092 <LL_SetFlashLatency+0x56>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY3_FREQ)
 8005078:	f5a3 03f4 	sub.w	r3, r3, #7995392	; 0x7a0000
 800507c:	f5a3 5390 	sub.w	r3, r3, #4608	; 0x1200
 8005080:	4298      	cmp	r0, r3
 8005082:	d815      	bhi.n	80050b0 <LL_SetFlashLatency+0x74>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY2_FREQ)
 8005084:	4b13      	ldr	r3, [pc, #76]	; (80050d4 <LL_SetFlashLatency+0x98>)
 8005086:	4298      	cmp	r0, r3
 8005088:	d814      	bhi.n	80050b4 <LL_SetFlashLatency+0x78>
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 800508a:	4b13      	ldr	r3, [pc, #76]	; (80050d8 <LL_SetFlashLatency+0x9c>)
 800508c:	e7eb      	b.n	8005066 <LL_SetFlashLatency+0x2a>
        latency = LL_FLASH_LATENCY_4;
 800508e:	2304      	movs	r3, #4
 8005090:	e7ed      	b.n	800506e <LL_SetFlashLatency+0x32>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8005092:	2300      	movs	r3, #0
        status = ERROR;
 8005094:	2001      	movs	r0, #1
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8005096:	4911      	ldr	r1, [pc, #68]	; (80050dc <LL_SetFlashLatency+0xa0>)
 8005098:	680a      	ldr	r2, [r1, #0]
 800509a:	f022 0207 	bic.w	r2, r2, #7
 800509e:	431a      	orrs	r2, r3
 80050a0:	600a      	str	r2, [r1, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80050a2:	680a      	ldr	r2, [r1, #0]
 80050a4:	f002 0207 	and.w	r2, r2, #7
    if(LL_FLASH_GetLatency() != latency)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d000      	beq.n	80050ae <LL_SetFlashLatency+0x72>
      status = ERROR;
 80050ac:	2001      	movs	r0, #1
}
 80050ae:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_3;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e7dc      	b.n	800506e <LL_SetFlashLatency+0x32>
        latency = LL_FLASH_LATENCY_2;
 80050b4:	2302      	movs	r3, #2
 80050b6:	e7da      	b.n	800506e <LL_SetFlashLatency+0x32>
 80050b8:	04c4b3ff 	.word	0x04c4b3ff
 80050bc:	40007000 	.word	0x40007000
 80050c0:	03d09000 	.word	0x03d09000
 80050c4:	02dc6c00 	.word	0x02dc6c00
 80050c8:	01e84800 	.word	0x01e84800
 80050cc:	00f42400 	.word	0x00f42400
 80050d0:	018cba80 	.word	0x018cba80
 80050d4:	00b71b00 	.word	0x00b71b00
 80050d8:	005b8d80 	.word	0x005b8d80
 80050dc:	40022000 	.word	0x40022000

080050e0 <UTILS_EnablePLLAndSwitchSystem>:
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 80050e0:	680b      	ldr	r3, [r1, #0]
 80050e2:	4a21      	ldr	r2, [pc, #132]	; (8005168 <UTILS_EnablePLLAndSwitchSystem+0x88>)
 80050e4:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 80050e8:	b570      	push	{r4, r5, r6, lr}
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 80050ea:	5cd3      	ldrb	r3, [r2, r3]

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 80050ec:	4e1f      	ldr	r6, [pc, #124]	; (800516c <UTILS_EnablePLLAndSwitchSystem+0x8c>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 80050ee:	fa20 f403 	lsr.w	r4, r0, r3
  if(SystemCoreClock < hclk_frequency)
 80050f2:	6833      	ldr	r3, [r6, #0]
 80050f4:	42a3      	cmp	r3, r4
{
 80050f6:	460d      	mov	r5, r1
  if(SystemCoreClock < hclk_frequency)
 80050f8:	d328      	bcc.n	800514c <UTILS_EnablePLLAndSwitchSystem+0x6c>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80050fa:	4b1d      	ldr	r3, [pc, #116]	; (8005170 <UTILS_EnablePLLAndSwitchSystem+0x90>)
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005102:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8005104:	68da      	ldr	r2, [r3, #12]
 8005106:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800510a:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	0192      	lsls	r2, r2, #6
 8005110:	d5fc      	bpl.n	800510c <UTILS_EnablePLLAndSwitchSystem+0x2c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	6829      	ldr	r1, [r5, #0]
 8005116:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800511a:	430a      	orrs	r2, r1
 800511c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	f042 0203 	orr.w	r2, r2, #3
 8005124:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	f002 020c 	and.w	r2, r2, #12
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800512c:	2a0c      	cmp	r2, #12
 800512e:	d1fa      	bne.n	8005126 <UTILS_EnablePLLAndSwitchSystem+0x46>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005130:	689a      	ldr	r2, [r3, #8]
 8005132:	6869      	ldr	r1, [r5, #4]
 8005134:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005138:	430a      	orrs	r2, r1
 800513a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	68a9      	ldr	r1, [r5, #8]
 8005140:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 8005144:	430a      	orrs	r2, r1
 8005146:	609a      	str	r2, [r3, #8]
}
 8005148:	2000      	movs	r0, #0
 800514a:	e004      	b.n	8005156 <UTILS_EnablePLLAndSwitchSystem+0x76>
    status = LL_SetFlashLatency(hclk_frequency);
 800514c:	4620      	mov	r0, r4
 800514e:	f7ff ff75 	bl	800503c <LL_SetFlashLatency>
  if(status == SUCCESS)
 8005152:	2800      	cmp	r0, #0
 8005154:	d0d1      	beq.n	80050fa <UTILS_EnablePLLAndSwitchSystem+0x1a>
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 8005156:	6833      	ldr	r3, [r6, #0]
 8005158:	42a3      	cmp	r3, r4
 800515a:	d902      	bls.n	8005162 <UTILS_EnablePLLAndSwitchSystem+0x82>
  {
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(hclk_frequency);
 800515c:	4620      	mov	r0, r4
 800515e:	f7ff ff6d 	bl	800503c <LL_SetFlashLatency>
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 8005162:	b900      	cbnz	r0, 8005166 <UTILS_EnablePLLAndSwitchSystem+0x86>
  SystemCoreClock = HCLKFrequency;
 8005164:	6034      	str	r4, [r6, #0]
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 8005166:	bd70      	pop	{r4, r5, r6, pc}
 8005168:	08009eff 	.word	0x08009eff
 800516c:	20000168 	.word	0x20000168
 8005170:	40021000 	.word	0x40021000

08005174 <LL_PLL_ConfigSystemClock_HSI>:
{
 8005174:	b570      	push	{r4, r5, r6, lr}
 8005176:	4605      	mov	r5, r0
 8005178:	460c      	mov	r4, r1
  if(UTILS_PLL_IsBusy() == SUCCESS)
 800517a:	f7ff ff4b 	bl	8005014 <UTILS_PLL_IsBusy>
 800517e:	bb00      	cbnz	r0, 80051c2 <LL_PLL_ConfigSystemClock_HSI+0x4e>
    pllfreq = UTILS_GetPLLOutputFrequency(HSI_VALUE, UTILS_PLLInitStruct);
 8005180:	4629      	mov	r1, r5
 8005182:	4811      	ldr	r0, [pc, #68]	; (80051c8 <LL_PLL_ConfigSystemClock_HSI+0x54>)
 8005184:	f003 faae 	bl	80086e4 <UTILS_GetPLLOutputFrequency>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8005188:	4a10      	ldr	r2, [pc, #64]	; (80051cc <LL_PLL_ConfigSystemClock_HSI+0x58>)
 800518a:	6813      	ldr	r3, [r2, #0]
 800518c:	0559      	lsls	r1, r3, #21
 800518e:	d406      	bmi.n	800519e <LL_PLL_ConfigSystemClock_HSI+0x2a>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005190:	6813      	ldr	r3, [r2, #0]
 8005192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005196:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8005198:	6813      	ldr	r3, [r2, #0]
 800519a:	055b      	lsls	r3, r3, #21
 800519c:	d5fc      	bpl.n	8005198 <LL_PLL_ConfigSystemClock_HSI+0x24>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800519e:	68d6      	ldr	r6, [r2, #12]
 80051a0:	4b0b      	ldr	r3, [pc, #44]	; (80051d0 <LL_PLL_ConfigSystemClock_HSI+0x5c>)
 80051a2:	6869      	ldr	r1, [r5, #4]
 80051a4:	4033      	ands	r3, r6
 80051a6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80051aa:	6829      	ldr	r1, [r5, #0]
 80051ac:	430b      	orrs	r3, r1
 80051ae:	68a9      	ldr	r1, [r5, #8]
 80051b0:	430b      	orrs	r3, r1
 80051b2:	f043 0302 	orr.w	r3, r3, #2
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 80051b6:	4621      	mov	r1, r4
 80051b8:	60d3      	str	r3, [r2, #12]
}
 80051ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 80051be:	f7ff bf8f 	b.w	80050e0 <UTILS_EnablePLLAndSwitchSystem>
}
 80051c2:	2001      	movs	r0, #1
 80051c4:	bd70      	pop	{r4, r5, r6, pc}
 80051c6:	bf00      	nop
 80051c8:	00f42400 	.word	0x00f42400
 80051cc:	40021000 	.word	0x40021000
 80051d0:	f9ff808c 	.word	0xf9ff808c

080051d4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
 80051d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 80051d6:	4b10      	ldr	r3, [pc, #64]	; (8005218 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
 80051d8:	4f10      	ldr	r7, [pc, #64]	; (800521c <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 80051da:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80051de:	3001      	adds	r0, #1
 80051e0:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80051e4:	42ae      	cmp	r6, r5
 80051e6:	d800      	bhi.n	80051ea <z_sys_init_run_level+0x16>
		}
	}
}
 80051e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
 80051ea:	e9d5 3400 	ldrd	r3, r4, [r5]
 80051ee:	4620      	mov	r0, r4
 80051f0:	4798      	blx	r3
 80051f2:	b170      	cbz	r0, 8005212 <z_sys_init_run_level+0x3e>
 80051f4:	b16c      	cbz	r4, 8005212 <z_sys_init_run_level+0x3e>
				(dev - __device_start));
 80051f6:	1be4      	subs	r4, r4, r7
 80051f8:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
 80051fa:	0961      	lsrs	r1, r4, #5
 80051fc:	4a08      	ldr	r2, [pc, #32]	; (8005220 <z_sys_init_run_level+0x4c>)
 80051fe:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 8005202:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
 8005206:	2301      	movs	r3, #1
 8005208:	fa03 f404 	lsl.w	r4, r3, r4
 800520c:	4304      	orrs	r4, r0
 800520e:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8005212:	3508      	adds	r5, #8
 8005214:	e7e6      	b.n	80051e4 <z_sys_init_run_level+0x10>
 8005216:	bf00      	nop
 8005218:	08009168 	.word	0x08009168
 800521c:	20000178 	.word	0x20000178
 8005220:	200002a8 	.word	0x200002a8

08005224 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
 8005224:	4b08      	ldr	r3, [pc, #32]	; (8005248 <z_device_ready+0x24>)
 8005226:	1ac0      	subs	r0, r0, r3
 8005228:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
 800522a:	4b08      	ldr	r3, [pc, #32]	; (800524c <z_device_ready+0x28>)
 800522c:	0942      	lsrs	r2, r0, #5
 800522e:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 8005232:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
 8005236:	2301      	movs	r3, #1
 8005238:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
 800523c:	4210      	tst	r0, r2
}
 800523e:	bf0c      	ite	eq
 8005240:	4618      	moveq	r0, r3
 8005242:	2000      	movne	r0, #0
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	20000178 	.word	0x20000178
 800524c:	200002a8 	.word	0x200002a8

08005250 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
 8005250:	4911      	ldr	r1, [pc, #68]	; (8005298 <z_impl_device_get_binding+0x48>)
{
 8005252:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
 8005254:	4c11      	ldr	r4, [pc, #68]	; (800529c <z_impl_device_get_binding+0x4c>)
{
 8005256:	4605      	mov	r5, r0
 8005258:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
 800525a:	428c      	cmp	r4, r1
 800525c:	d104      	bne.n	8005268 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
 800525e:	4c0f      	ldr	r4, [pc, #60]	; (800529c <z_impl_device_get_binding+0x4c>)
 8005260:	42b4      	cmp	r4, r6
 8005262:	d10a      	bne.n	800527a <z_impl_device_get_binding+0x2a>
	return NULL;
 8005264:	2400      	movs	r4, #0
 8005266:	e014      	b.n	8005292 <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
 8005268:	4620      	mov	r0, r4
 800526a:	f7ff ffdb 	bl	8005224 <z_device_ready>
 800526e:	b110      	cbz	r0, 8005276 <z_impl_device_get_binding+0x26>
 8005270:	6823      	ldr	r3, [r4, #0]
 8005272:	42ab      	cmp	r3, r5
 8005274:	d00d      	beq.n	8005292 <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
 8005276:	3410      	adds	r4, #16
 8005278:	e7ef      	b.n	800525a <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 800527a:	4620      	mov	r0, r4
 800527c:	f7ff ffd2 	bl	8005224 <z_device_ready>
 8005280:	b908      	cbnz	r0, 8005286 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
 8005282:	3410      	adds	r4, #16
 8005284:	e7ec      	b.n	8005260 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 8005286:	6821      	ldr	r1, [r4, #0]
 8005288:	4628      	mov	r0, r5
 800528a:	f001 fce5 	bl	8006c58 <strcmp>
 800528e:	2800      	cmp	r0, #0
 8005290:	d1f7      	bne.n	8005282 <z_impl_device_get_binding+0x32>
}
 8005292:	4620      	mov	r0, r4
 8005294:	bd70      	pop	{r4, r5, r6, pc}
 8005296:	bf00      	nop
 8005298:	200002a8 	.word	0x200002a8
 800529c:	20000178 	.word	0x20000178

080052a0 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 80052a0:	b510      	push	{r4, lr}
 80052a2:	4604      	mov	r4, r0
		arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
 80052a4:	f7fb fe7a 	bl	8000f9c <z_impl_log_panic>
 80052a8:	4806      	ldr	r0, [pc, #24]	; (80052c4 <k_sys_fatal_error_handler+0x24>)
 80052aa:	4b07      	ldr	r3, [pc, #28]	; (80052c8 <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
 80052ac:	4907      	ldr	r1, [pc, #28]	; (80052cc <k_sys_fatal_error_handler+0x2c>)
 80052ae:	1a1b      	subs	r3, r3, r0
 80052b0:	08db      	lsrs	r3, r3, #3
 80052b2:	019b      	lsls	r3, r3, #6
 80052b4:	f043 0001 	orr.w	r0, r3, #1
 80052b8:	f001 f9e1 	bl	800667e <log_string_sync>
	arch_system_halt(reason);
 80052bc:	4620      	mov	r0, r4
 80052be:	f003 fa21 	bl	8008704 <arch_system_halt>
 80052c2:	bf00      	nop
 80052c4:	08008d1c 	.word	0x08008d1c
 80052c8:	08008d64 	.word	0x08008d64
 80052cc:	08009f0f 	.word	0x08009f0f

080052d0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 80052d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80052d4:	4606      	mov	r6, r0
 80052d6:	460f      	mov	r7, r1
 80052d8:	f04f 0310 	mov.w	r3, #16
 80052dc:	f3ef 8811 	mrs	r8, BASEPRI
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
 80052e8:	f000 fdd4 	bl	8005e94 <z_impl_k_current_get>
 80052ec:	4c1e      	ldr	r4, [pc, #120]	; (8005368 <z_fatal_error+0x98>)
 80052ee:	4b1f      	ldr	r3, [pc, #124]	; (800536c <z_fatal_error+0x9c>)
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 80052f0:	491f      	ldr	r1, [pc, #124]	; (8005370 <z_fatal_error+0xa0>)
 80052f2:	1ae4      	subs	r4, r4, r3
 80052f4:	2e04      	cmp	r6, #4
 80052f6:	bf96      	itet	ls
 80052f8:	4b1e      	ldrls	r3, [pc, #120]	; (8005374 <z_fatal_error+0xa4>)
 80052fa:	4b1f      	ldrhi	r3, [pc, #124]	; (8005378 <z_fatal_error+0xa8>)
 80052fc:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
 8005300:	08e4      	lsrs	r4, r4, #3
 8005302:	2200      	movs	r2, #0
 8005304:	01a4      	lsls	r4, r4, #6
 8005306:	4605      	mov	r5, r0
 8005308:	9200      	str	r2, [sp, #0]
 800530a:	f044 0001 	orr.w	r0, r4, #1
 800530e:	4632      	mov	r2, r6
 8005310:	f001 f9b5 	bl	800667e <log_string_sync>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 8005314:	b147      	cbz	r7, 8005328 <z_fatal_error+0x58>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800531c:	b123      	cbz	r3, 8005328 <z_fatal_error+0x58>
		LOG_ERR("Fault during interrupt handling\n");
 800531e:	4917      	ldr	r1, [pc, #92]	; (800537c <z_fatal_error+0xac>)
 8005320:	f044 0001 	orr.w	r0, r4, #1
 8005324:	f001 f9ab 	bl	800667e <log_string_sync>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 8005328:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
 800532c:	b12d      	cbz	r5, 800533a <z_fatal_error+0x6a>
 800532e:	4628      	mov	r0, r5
 8005330:	f003 fab0 	bl	8008894 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
 8005334:	b108      	cbz	r0, 800533a <z_fatal_error+0x6a>
 8005336:	7803      	ldrb	r3, [r0, #0]
 8005338:	b903      	cbnz	r3, 800533c <z_fatal_error+0x6c>
		thread_name = "unknown";
 800533a:	4811      	ldr	r0, [pc, #68]	; (8005380 <z_fatal_error+0xb0>)
	LOG_ERR("Current thread: %p (%s)", thread,
 800533c:	f001 f9b2 	bl	80066a4 <log_strdup>
 8005340:	462a      	mov	r2, r5
 8005342:	4603      	mov	r3, r0
 8005344:	490f      	ldr	r1, [pc, #60]	; (8005384 <z_fatal_error+0xb4>)
 8005346:	4620      	mov	r0, r4
 8005348:	f001 f999 	bl	800667e <log_string_sync>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 800534c:	4639      	mov	r1, r7
 800534e:	4630      	mov	r0, r6
 8005350:	f7ff ffa6 	bl	80052a0 <k_sys_fatal_error_handler>
	__asm__ volatile(
 8005354:	f388 8811 	msr	BASEPRI, r8
 8005358:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 800535c:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
 800535e:	b002      	add	sp, #8
 8005360:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005364:	f7fd bc16 	b.w	8002b94 <z_impl_k_thread_abort>
 8005368:	08008d64 	.word	0x08008d64
 800536c:	08008d1c 	.word	0x08008d1c
 8005370:	08009f34 	.word	0x08009f34
 8005374:	08009180 	.word	0x08009180
 8005378:	08009f1e 	.word	0x08009f1e
 800537c:	08009f5c 	.word	0x08009f5c
 8005380:	08009f2c 	.word	0x08009f2c
 8005384:	08009f7d 	.word	0x08009f7d

08005388 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 8005388:	4802      	ldr	r0, [pc, #8]	; (8005394 <z_bss_zero+0xc>)
 800538a:	4a03      	ldr	r2, [pc, #12]	; (8005398 <z_bss_zero+0x10>)
 800538c:	2100      	movs	r1, #0
 800538e:	1a12      	subs	r2, r2, r0
 8005390:	f001 bca8 	b.w	8006ce4 <memset>
 8005394:	200002f8 	.word	0x200002f8
 8005398:	2000087c 	.word	0x2000087c

0800539c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
 800539c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
 800539e:	4806      	ldr	r0, [pc, #24]	; (80053b8 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
 80053a0:	4a06      	ldr	r2, [pc, #24]	; (80053bc <z_data_copy+0x20>)
 80053a2:	4907      	ldr	r1, [pc, #28]	; (80053c0 <z_data_copy+0x24>)
 80053a4:	1a12      	subs	r2, r2, r0
 80053a6:	f001 fc72 	bl	8006c8e <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 80053aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
 80053ae:	4a05      	ldr	r2, [pc, #20]	; (80053c4 <z_data_copy+0x28>)
 80053b0:	4905      	ldr	r1, [pc, #20]	; (80053c8 <z_data_copy+0x2c>)
 80053b2:	4806      	ldr	r0, [pc, #24]	; (80053cc <z_data_copy+0x30>)
 80053b4:	f001 bc6b 	b.w	8006c8e <memcpy>
 80053b8:	20000000 	.word	0x20000000
 80053bc:	200002f4 	.word	0x200002f4
 80053c0:	0800a02c 	.word	0x0800a02c
 80053c4:	00000000 	.word	0x00000000
 80053c8:	0800a02c 	.word	0x0800a02c
 80053cc:	20000000 	.word	0x20000000

080053d0 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 80053d0:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
 80053d2:	4b0c      	ldr	r3, [pc, #48]	; (8005404 <bg_thread_main+0x34>)
 80053d4:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 80053d6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 80053d8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 80053da:	f7ff fefb 	bl	80051d4 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 80053de:	4a0a      	ldr	r2, [pc, #40]	; (8005408 <bg_thread_main+0x38>)
 80053e0:	490a      	ldr	r1, [pc, #40]	; (800540c <bg_thread_main+0x3c>)
 80053e2:	480b      	ldr	r0, [pc, #44]	; (8005410 <bg_thread_main+0x40>)
 80053e4:	f000 ffe6 	bl	80063b4 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 80053e8:	2003      	movs	r0, #3
 80053ea:	f7ff fef3 	bl	80051d4 <z_sys_init_run_level>

	z_init_static_threads();
 80053ee:	f000 fdeb 	bl	8005fc8 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
 80053f2:	f7fb f845 	bl	8000480 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 80053f6:	4a07      	ldr	r2, [pc, #28]	; (8005414 <bg_thread_main+0x44>)
 80053f8:	7b13      	ldrb	r3, [r2, #12]
 80053fa:	f023 0301 	bic.w	r3, r3, #1
 80053fe:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8005400:	bd08      	pop	{r3, pc}
 8005402:	bf00      	nop
 8005404:	2000087a 	.word	0x2000087a
 8005408:	080091e5 	.word	0x080091e5
 800540c:	08009fdf 	.word	0x08009fdf
 8005410:	0800a000 	.word	0x0800a000
 8005414:	20000378 	.word	0x20000378

08005418 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
 8005418:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800541c:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
 800541e:	f7fb fd5f 	bl	8000ee0 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8005422:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8005518 <z_cstart+0x100>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8005426:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 800542a:	4d33      	ldr	r5, [pc, #204]	; (80054f8 <z_cstart+0xe0>)
	_kernel.ready_q.cache = &z_main_thread;
 800542c:	4e33      	ldr	r6, [pc, #204]	; (80054fc <z_cstart+0xe4>)
 800542e:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8005430:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 800551c <z_cstart+0x104>
	z_setup_new_thread(thread, stack,
 8005434:	4f32      	ldr	r7, [pc, #200]	; (8005500 <z_cstart+0xe8>)
 8005436:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800543a:	2400      	movs	r4, #0
 800543c:	616b      	str	r3, [r5, #20]
 800543e:	23f0      	movs	r3, #240	; 0xf0
 8005440:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 8005444:	77ec      	strb	r4, [r5, #31]
 8005446:	762c      	strb	r4, [r5, #24]
 8005448:	766c      	strb	r4, [r5, #25]
 800544a:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 800544c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800544e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8005452:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8005454:	f7fd fb7c 	bl	8002b50 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8005458:	f7fd f8c0 	bl	80025dc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 800545c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005460:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8005462:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
 8005464:	4d27      	ldr	r5, [pc, #156]	; (8005504 <z_cstart+0xec>)
	dummy_thread->base.user_options = K_ESSENTIAL;
 8005466:	f240 1301 	movw	r3, #257	; 0x101
 800546a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 800546e:	ab06      	add	r3, sp, #24
 8005470:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8005472:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
 8005474:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
 8005478:	f7ff feac 	bl	80051d4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 800547c:	2001      	movs	r0, #1
 800547e:	f7ff fea9 	bl	80051d4 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8005482:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
 8005486:	f000 fc8b 	bl	8005da0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800548a:	4b1f      	ldr	r3, [pc, #124]	; (8005508 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
 800548c:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800548e:	491f      	ldr	r1, [pc, #124]	; (800550c <z_cstart+0xf4>)
 8005490:	9305      	str	r3, [sp, #20]
 8005492:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005496:	4653      	mov	r3, sl
 8005498:	e9cd 4b03 	strd	r4, fp, [sp, #12]
 800549c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80054a0:	9400      	str	r4, [sp, #0]
 80054a2:	4630      	mov	r0, r6
 80054a4:	f000 fd5e 	bl	8005f64 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80054a8:	7b73      	ldrb	r3, [r6, #13]
 80054aa:	4680      	mov	r8, r0
 80054ac:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
 80054b0:	4630      	mov	r0, r6
 80054b2:	7373      	strb	r3, [r6, #13]
 80054b4:	f003 f962 	bl	800877c <z_ready_thread>
	z_setup_new_thread(thread, stack,
 80054b8:	230f      	movs	r3, #15
 80054ba:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80054be:	4914      	ldr	r1, [pc, #80]	; (8005510 <z_cstart+0xf8>)
 80054c0:	4b14      	ldr	r3, [pc, #80]	; (8005514 <z_cstart+0xfc>)
 80054c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80054c6:	e9cd b404 	strd	fp, r4, [sp, #16]
 80054ca:	e9cd 5400 	strd	r5, r4, [sp]
 80054ce:	4638      	mov	r0, r7
 80054d0:	f000 fd48 	bl	8005f64 <z_setup_new_thread>
 80054d4:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 80054d6:	60ef      	str	r7, [r5, #12]
 80054d8:	f023 0304 	bic.w	r3, r3, #4
 80054dc:	737b      	strb	r3, [r7, #13]
	list->head = (sys_dnode_t *)list;
 80054de:	f105 031c 	add.w	r3, r5, #28
	list->tail = (sys_dnode_t *)list;
 80054e2:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].id = i;
 80054e6:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
 80054e8:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 80054ec:	4652      	mov	r2, sl
 80054ee:	4641      	mov	r1, r8
 80054f0:	4630      	mov	r0, r6
 80054f2:	f7fd f859 	bl	80025a8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 80054f6:	bf00      	nop
 80054f8:	e000ed00 	.word	0xe000ed00
 80054fc:	20000378 	.word	0x20000378
 8005500:	200002f8 	.word	0x200002f8
 8005504:	20000834 	.word	0x20000834
 8005508:	080091c6 	.word	0x080091c6
 800550c:	20000880 	.word	0x20000880
 8005510:	200010a0 	.word	0x200010a0
 8005514:	08008925 	.word	0x08008925
 8005518:	20001a20 	.word	0x20001a20
 800551c:	080053d1 	.word	0x080053d1

08005520 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
 8005520:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 8005522:	4b0e      	ldr	r3, [pc, #56]	; (800555c <init_mem_slab_module+0x3c>)
 8005524:	4c0e      	ldr	r4, [pc, #56]	; (8005560 <init_mem_slab_module+0x40>)
 8005526:	42a3      	cmp	r3, r4
 8005528:	d301      	bcc.n	800552e <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
 800552a:	2000      	movs	r0, #0
	return rc;
}
 800552c:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 800552e:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
 8005532:	ea41 0200 	orr.w	r2, r1, r0
 8005536:	f012 0203 	ands.w	r2, r2, #3
 800553a:	d10b      	bne.n	8005554 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
 800553c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
 800553e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
 8005540:	42aa      	cmp	r2, r5
 8005542:	d101      	bne.n	8005548 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 8005544:	331c      	adds	r3, #28
 8005546:	e7ee      	b.n	8005526 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
 8005548:	695e      	ldr	r6, [r3, #20]
 800554a:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
 800554c:	3201      	adds	r2, #1
		slab->free_list = p;
 800554e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
 8005550:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
 8005552:	e7f5      	b.n	8005540 <init_mem_slab_module+0x20>
		return -EINVAL;
 8005554:	f06f 0015 	mvn.w	r0, #21
	return rc;
 8005558:	e7e8      	b.n	800552c <init_mem_slab_module+0xc>
 800555a:	bf00      	nop
 800555c:	200002ac 	.word	0x200002ac
 8005560:	200002e4 	.word	0x200002e4

08005564 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
 8005564:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
 8005566:	460c      	mov	r4, r1
 8005568:	4616      	mov	r6, r2
 800556a:	461f      	mov	r7, r3
	__asm__ volatile(
 800556c:	f04f 0310 	mov.w	r3, #16
 8005570:	f3ef 8111 	mrs	r1, BASEPRI
 8005574:	f383 8811 	msr	BASEPRI, r3
 8005578:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
 800557c:	6943      	ldr	r3, [r0, #20]
 800557e:	b15b      	cbz	r3, 8005598 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
 8005580:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6143      	str	r3, [r0, #20]
		slab->num_used++;
 8005586:	6983      	ldr	r3, [r0, #24]
 8005588:	3301      	adds	r3, #1
 800558a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
 800558c:	2000      	movs	r0, #0
	__asm__ volatile(
 800558e:	f381 8811 	msr	BASEPRI, r1
 8005592:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
 8005596:	e011      	b.n	80055bc <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8005598:	ea56 0207 	orrs.w	r2, r6, r7
 800559c:	d103      	bne.n	80055a6 <k_mem_slab_alloc+0x42>
		*mem = NULL;
 800559e:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
 80055a0:	f06f 000b 	mvn.w	r0, #11
 80055a4:	e7f3      	b.n	800558e <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
 80055a6:	4602      	mov	r2, r0
 80055a8:	e9cd 6700 	strd	r6, r7, [sp]
 80055ac:	4804      	ldr	r0, [pc, #16]	; (80055c0 <k_mem_slab_alloc+0x5c>)
 80055ae:	f000 fb71 	bl	8005c94 <z_pend_curr>
		if (result == 0) {
 80055b2:	b918      	cbnz	r0, 80055bc <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
 80055b4:	4b03      	ldr	r3, [pc, #12]	; (80055c4 <k_mem_slab_alloc+0x60>)
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	6023      	str	r3, [r4, #0]
}
 80055bc:	b002      	add	sp, #8
 80055be:	bdd0      	pop	{r4, r6, r7, pc}
 80055c0:	2000087b 	.word	0x2000087b
 80055c4:	20000834 	.word	0x20000834

080055c8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
 80055c8:	b570      	push	{r4, r5, r6, lr}
 80055ca:	4604      	mov	r4, r0
 80055cc:	460d      	mov	r5, r1
	__asm__ volatile(
 80055ce:	f04f 0310 	mov.w	r3, #16
 80055d2:	f3ef 8611 	mrs	r6, BASEPRI
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
 80055de:	f003 f928 	bl	8008832 <z_unpend_first_thread>

	if (pending_thread != NULL) {
 80055e2:	b158      	cbz	r0, 80055fc <k_mem_slab_free+0x34>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
 80055e4:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 80055e6:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 80055e8:	2100      	movs	r1, #0
 80055ea:	67c1      	str	r1, [r0, #124]	; 0x7c
		z_ready_thread(pending_thread);
 80055ec:	f003 f8c6 	bl	800877c <z_ready_thread>
		z_reschedule(&lock, key);
 80055f0:	4631      	mov	r1, r6
 80055f2:	4809      	ldr	r0, [pc, #36]	; (8005618 <k_mem_slab_free+0x50>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
 80055f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
 80055f8:	f000 b904 	b.w	8005804 <z_reschedule>
		**(char ***)mem = slab->free_list;
 80055fc:	682b      	ldr	r3, [r5, #0]
 80055fe:	6962      	ldr	r2, [r4, #20]
 8005600:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
 8005602:	682b      	ldr	r3, [r5, #0]
 8005604:	6163      	str	r3, [r4, #20]
		slab->num_used--;
 8005606:	69a3      	ldr	r3, [r4, #24]
 8005608:	3b01      	subs	r3, #1
 800560a:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
 800560c:	f386 8811 	msr	BASEPRI, r6
 8005610:	f3bf 8f6f 	isb	sy
}
 8005614:	bd70      	pop	{r4, r5, r6, pc}
 8005616:	bf00      	nop
 8005618:	2000087b 	.word	0x2000087b

0800561c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 800561c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005620:	4604      	mov	r4, r0
 8005622:	4616      	mov	r6, r2
 8005624:	461f      	mov	r7, r3
	__asm__ volatile(
 8005626:	f04f 0310 	mov.w	r3, #16
 800562a:	f3ef 8811 	mrs	r8, BASEPRI
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 8005636:	68c3      	ldr	r3, [r0, #12]
 8005638:	4a32      	ldr	r2, [pc, #200]	; (8005704 <z_impl_k_mutex_lock+0xe8>)
 800563a:	b16b      	cbz	r3, 8005658 <z_impl_k_mutex_lock+0x3c>
 800563c:	6880      	ldr	r0, [r0, #8]
 800563e:	6891      	ldr	r1, [r2, #8]
 8005640:	4288      	cmp	r0, r1
 8005642:	d019      	beq.n	8005678 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 8005644:	ea56 0307 	orrs.w	r3, r6, r7
 8005648:	d118      	bne.n	800567c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
 800564a:	f388 8811 	msr	BASEPRI, r8
 800564e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
 8005652:	f06f 000f 	mvn.w	r0, #15
 8005656:	e00c      	b.n	8005672 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
 8005658:	6891      	ldr	r1, [r2, #8]
 800565a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 800565e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
 8005660:	3301      	adds	r3, #1
 8005662:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
 8005664:	6893      	ldr	r3, [r2, #8]
 8005666:	60a3      	str	r3, [r4, #8]
 8005668:	f388 8811 	msr	BASEPRI, r8
 800566c:	f3bf 8f6f 	isb	sy
		return 0;
 8005670:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
 8005672:	b002      	add	sp, #8
 8005674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
 8005678:	6921      	ldr	r1, [r4, #16]
 800567a:	e7f0      	b.n	800565e <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
 800567c:	f990 300e 	ldrsb.w	r3, [r0, #14]
 8005680:	f991 100e 	ldrsb.w	r1, [r1, #14]
 8005684:	4299      	cmp	r1, r3
 8005686:	bfa8      	it	ge
 8005688:	4619      	movge	r1, r3
 800568a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 800568e:	428b      	cmp	r3, r1
 8005690:	dd2c      	ble.n	80056ec <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
 8005692:	f000 fb41 	bl	8005d18 <z_set_prio>
 8005696:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 8005698:	e9cd 6700 	strd	r6, r7, [sp]
 800569c:	481a      	ldr	r0, [pc, #104]	; (8005708 <z_impl_k_mutex_lock+0xec>)
 800569e:	4622      	mov	r2, r4
 80056a0:	4641      	mov	r1, r8
 80056a2:	f000 faf7 	bl	8005c94 <z_pend_curr>
	if (got_mutex == 0) {
 80056a6:	2800      	cmp	r0, #0
 80056a8:	d0e3      	beq.n	8005672 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
 80056aa:	f04f 0310 	mov.w	r3, #16
 80056ae:	f3ef 8611 	mrs	r6, BASEPRI
 80056b2:	f383 8811 	msr	BASEPRI, r3
 80056b6:	f3bf 8f6f 	isb	sy
	return list->head == list;
 80056ba:	6823      	ldr	r3, [r4, #0]
 80056bc:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80056be:	42a3      	cmp	r3, r4
 80056c0:	d007      	beq.n	80056d2 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 80056c2:	b133      	cbz	r3, 80056d2 <z_impl_k_mutex_lock+0xb6>
 80056c4:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80056c8:	4299      	cmp	r1, r3
 80056ca:	bfa8      	it	ge
 80056cc:	4619      	movge	r1, r3
 80056ce:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 80056d2:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
 80056d4:	f990 300e 	ldrsb.w	r3, [r0, #14]
 80056d8:	4299      	cmp	r1, r3
 80056da:	d109      	bne.n	80056f0 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
 80056dc:	b16d      	cbz	r5, 80056fa <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
 80056de:	480a      	ldr	r0, [pc, #40]	; (8005708 <z_impl_k_mutex_lock+0xec>)
 80056e0:	4631      	mov	r1, r6
 80056e2:	f000 f88f 	bl	8005804 <z_reschedule>
	return -EAGAIN;
 80056e6:	f06f 000a 	mvn.w	r0, #10
 80056ea:	e7c2      	b.n	8005672 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
 80056ec:	2500      	movs	r5, #0
 80056ee:	e7d3      	b.n	8005698 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
 80056f0:	f000 fb12 	bl	8005d18 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 80056f4:	2800      	cmp	r0, #0
 80056f6:	d1f2      	bne.n	80056de <z_impl_k_mutex_lock+0xc2>
 80056f8:	e7f0      	b.n	80056dc <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
 80056fa:	f386 8811 	msr	BASEPRI, r6
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	e7f0      	b.n	80056e6 <z_impl_k_mutex_lock+0xca>
 8005704:	20000834 	.word	0x20000834
 8005708:	2000087b 	.word	0x2000087b

0800570c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
 800570c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
 800570e:	6883      	ldr	r3, [r0, #8]
{
 8005710:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
 8005712:	2b00      	cmp	r3, #0
 8005714:	d036      	beq.n	8005784 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 8005716:	4a1e      	ldr	r2, [pc, #120]	; (8005790 <z_impl_k_mutex_unlock+0x84>)
 8005718:	6892      	ldr	r2, [r2, #8]
 800571a:	4293      	cmp	r3, r2
 800571c:	d135      	bne.n	800578a <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
 800571e:	7bda      	ldrb	r2, [r3, #15]
 8005720:	3a01      	subs	r2, #1
 8005722:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
 8005724:	68c3      	ldr	r3, [r0, #12]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d005      	beq.n	8005736 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
 800572a:	3b01      	subs	r3, #1
 800572c:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
 800572e:	f000 f8cd 	bl	80058cc <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
 8005732:	2000      	movs	r0, #0
}
 8005734:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 8005736:	f04f 0310 	mov.w	r3, #16
 800573a:	f3ef 8511 	mrs	r5, BASEPRI
 800573e:	f383 8811 	msr	BASEPRI, r3
 8005742:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 8005746:	6901      	ldr	r1, [r0, #16]
 8005748:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
 800574a:	f990 300e 	ldrsb.w	r3, [r0, #14]
 800574e:	4299      	cmp	r1, r3
 8005750:	d001      	beq.n	8005756 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
 8005752:	f000 fae1 	bl	8005d18 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 8005756:	4620      	mov	r0, r4
 8005758:	f003 f86b 	bl	8008832 <z_unpend_first_thread>
	mutex->owner = new_owner;
 800575c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 800575e:	b158      	cbz	r0, 8005778 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
 8005760:	f990 200e 	ldrsb.w	r2, [r0, #14]
 8005764:	6122      	str	r2, [r4, #16]
 8005766:	2200      	movs	r2, #0
 8005768:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
 800576a:	f003 f807 	bl	800877c <z_ready_thread>
		z_reschedule(&lock, key);
 800576e:	4809      	ldr	r0, [pc, #36]	; (8005794 <z_impl_k_mutex_unlock+0x88>)
 8005770:	4629      	mov	r1, r5
 8005772:	f000 f847 	bl	8005804 <z_reschedule>
 8005776:	e7da      	b.n	800572e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
 8005778:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
 800577a:	f385 8811 	msr	BASEPRI, r5
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	e7d4      	b.n	800572e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
 8005784:	f06f 0015 	mvn.w	r0, #21
 8005788:	e7d4      	b.n	8005734 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
 800578a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800578e:	e7d1      	b.n	8005734 <z_impl_k_mutex_unlock+0x28>
 8005790:	20000834 	.word	0x20000834
 8005794:	2000087b 	.word	0x2000087b

08005798 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
 8005798:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
 800579a:	4c08      	ldr	r4, [pc, #32]	; (80057bc <z_reset_time_slice+0x24>)
 800579c:	6823      	ldr	r3, [r4, #0]
 800579e:	b15b      	cbz	r3, 80057b8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 80057a0:	f7fc fe1c 	bl	80023dc <z_clock_elapsed>
 80057a4:	4603      	mov	r3, r0
 80057a6:	6820      	ldr	r0, [r4, #0]
 80057a8:	4a05      	ldr	r2, [pc, #20]	; (80057c0 <z_reset_time_slice+0x28>)
 80057aa:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
 80057ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 80057b0:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
 80057b2:	2100      	movs	r1, #0
 80057b4:	f003 b896 	b.w	80088e4 <z_set_timeout_expiry>
}
 80057b8:	bd10      	pop	{r4, pc}
 80057ba:	bf00      	nop
 80057bc:	2000086c 	.word	0x2000086c
 80057c0:	20000834 	.word	0x20000834

080057c4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
 80057c4:	b510      	push	{r4, lr}
	__asm__ volatile(
 80057c6:	f04f 0310 	mov.w	r3, #16
 80057ca:	f3ef 8411 	mrs	r4, BASEPRI
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 80057d6:	4b08      	ldr	r3, [pc, #32]	; (80057f8 <k_sched_time_slice_set+0x34>)
 80057d8:	2200      	movs	r2, #0
 80057da:	615a      	str	r2, [r3, #20]
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
 80057dc:	230a      	movs	r3, #10
 80057de:	4358      	muls	r0, r3
		slice_time = k_ms_to_ticks_ceil32(slice);
 80057e0:	4b06      	ldr	r3, [pc, #24]	; (80057fc <k_sched_time_slice_set+0x38>)
 80057e2:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
 80057e4:	4b06      	ldr	r3, [pc, #24]	; (8005800 <k_sched_time_slice_set+0x3c>)
 80057e6:	6019      	str	r1, [r3, #0]
		z_reset_time_slice();
 80057e8:	f7ff ffd6 	bl	8005798 <z_reset_time_slice>
	__asm__ volatile(
 80057ec:	f384 8811 	msr	BASEPRI, r4
 80057f0:	f3bf 8f6f 	isb	sy
	}
}
 80057f4:	bd10      	pop	{r4, pc}
 80057f6:	bf00      	nop
 80057f8:	20000834 	.word	0x20000834
 80057fc:	2000086c 	.word	0x2000086c
 8005800:	20000868 	.word	0x20000868

08005804 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8005804:	b949      	cbnz	r1, 800581a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005806:	f3ef 8005 	mrs	r0, IPSR
 800580a:	b930      	cbnz	r0, 800581a <z_reschedule+0x16>
	return _kernel.ready_q.cache;
 800580c:	4b05      	ldr	r3, [pc, #20]	; (8005824 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
 800580e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	429a      	cmp	r2, r3
 8005814:	d001      	beq.n	800581a <z_reschedule+0x16>
	ret = arch_swap(key);
 8005816:	f7fc be15 	b.w	8002444 <arch_swap>
 800581a:	f381 8811 	msr	BASEPRI, r1
 800581e:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
 8005822:	4770      	bx	lr
 8005824:	20000834 	.word	0x20000834

08005828 <k_sched_lock>:
	__asm__ volatile(
 8005828:	f04f 0310 	mov.w	r3, #16
 800582c:	f3ef 8111 	mrs	r1, BASEPRI
 8005830:	f383 8811 	msr	BASEPRI, r3
 8005834:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
 8005838:	4b04      	ldr	r3, [pc, #16]	; (800584c <k_sched_lock+0x24>)
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	7bd3      	ldrb	r3, [r2, #15]
 800583e:	3b01      	subs	r3, #1
 8005840:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8005842:	f381 8811 	msr	BASEPRI, r1
 8005846:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
 800584a:	4770      	bx	lr
 800584c:	20000834 	.word	0x20000834

08005850 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
 8005850:	4b09      	ldr	r3, [pc, #36]	; (8005878 <z_priq_dumb_remove+0x28>)
 8005852:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8005856:	4282      	cmp	r2, r0
 8005858:	d105      	bne.n	8005866 <z_priq_dumb_remove+0x16>
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	428b      	cmp	r3, r1
 800585e:	d102      	bne.n	8005866 <z_priq_dumb_remove+0x16>
 8005860:	7b4b      	ldrb	r3, [r1, #13]
 8005862:	06db      	lsls	r3, r3, #27
 8005864:	d106      	bne.n	8005874 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
 8005866:	e9d1 3200 	ldrd	r3, r2, [r1]
 800586a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 800586c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800586e:	2300      	movs	r3, #0
	node->prev = NULL;
 8005870:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	20000834 	.word	0x20000834

0800587c <update_cache>:
{
 800587c:	b538      	push	{r3, r4, r5, lr}
 800587e:	4c12      	ldr	r4, [pc, #72]	; (80058c8 <update_cache+0x4c>)
	if (_current_cpu->pending_abort != NULL) {
 8005880:	6923      	ldr	r3, [r4, #16]
 8005882:	68a2      	ldr	r2, [r4, #8]
{
 8005884:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
 8005886:	b10b      	cbz	r3, 800588c <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
 8005888:	68e5      	ldr	r5, [r4, #12]
 800588a:	e00c      	b.n	80058a6 <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
 800588c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005890:	f002 ff6a 	bl	8008768 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
 8005894:	7b53      	ldrb	r3, [r2, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
 8005896:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
 8005898:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
 800589a:	bf44      	itt	mi
 800589c:	f043 0308 	orrmi.w	r3, r3, #8
 80058a0:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
 80058a2:	2d00      	cmp	r5, #0
 80058a4:	d0f0      	beq.n	8005888 <update_cache+0xc>
	if (preempt_ok != 0) {
 80058a6:	b949      	cbnz	r1, 80058bc <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
 80058a8:	7b53      	ldrb	r3, [r2, #13]
 80058aa:	06db      	lsls	r3, r3, #27
 80058ac:	d106      	bne.n	80058bc <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 80058ae:	69ab      	ldr	r3, [r5, #24]
 80058b0:	b923      	cbnz	r3, 80058bc <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
 80058b2:	89d3      	ldrh	r3, [r2, #14]
 80058b4:	2b7f      	cmp	r3, #127	; 0x7f
 80058b6:	d901      	bls.n	80058bc <update_cache+0x40>
		_kernel.ready_q.cache = _current;
 80058b8:	6262      	str	r2, [r4, #36]	; 0x24
}
 80058ba:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
 80058bc:	4295      	cmp	r5, r2
 80058be:	d001      	beq.n	80058c4 <update_cache+0x48>
			z_reset_time_slice();
 80058c0:	f7ff ff6a 	bl	8005798 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 80058c4:	6265      	str	r5, [r4, #36]	; 0x24
}
 80058c6:	e7f8      	b.n	80058ba <update_cache+0x3e>
 80058c8:	20000834 	.word	0x20000834

080058cc <k_sched_unlock>:
{
 80058cc:	b510      	push	{r4, lr}
	__asm__ volatile(
 80058ce:	f04f 0310 	mov.w	r3, #16
 80058d2:	f3ef 8411 	mrs	r4, BASEPRI
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 80058de:	4b08      	ldr	r3, [pc, #32]	; (8005900 <k_sched_unlock+0x34>)
 80058e0:	689a      	ldr	r2, [r3, #8]
 80058e2:	7bd3      	ldrb	r3, [r2, #15]
 80058e4:	3301      	adds	r3, #1
 80058e6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 80058e8:	2000      	movs	r0, #0
 80058ea:	f7ff ffc7 	bl	800587c <update_cache>
	__asm__ volatile(
 80058ee:	f384 8811 	msr	BASEPRI, r4
 80058f2:	f3bf 8f6f 	isb	sy
}
 80058f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 80058fa:	f002 bf1f 	b.w	800873c <z_reschedule_unlocked>
 80058fe:	bf00      	nop
 8005900:	20000834 	.word	0x20000834

08005904 <ready_thread>:
{
 8005904:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 8005906:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
 800590a:	7b43      	ldrb	r3, [r0, #13]
 800590c:	2a00      	cmp	r2, #0
 800590e:	db2c      	blt.n	800596a <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8005910:	06db      	lsls	r3, r3, #27
 8005912:	d12a      	bne.n	800596a <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
 8005914:	6983      	ldr	r3, [r0, #24]
 8005916:	bb43      	cbnz	r3, 800596a <ready_thread+0x66>
	return list->head == list;
 8005918:	4a15      	ldr	r2, [pc, #84]	; (8005970 <ready_thread+0x6c>)
 800591a:	4611      	mov	r1, r2
 800591c:	f851 4f28 	ldr.w	r4, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005920:	428c      	cmp	r4, r1
 8005922:	bf18      	it	ne
 8005924:	4623      	movne	r3, r4
 8005926:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8005928:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800592a:	bf38      	it	cc
 800592c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800592e:	b1b3      	cbz	r3, 800595e <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
 8005930:	f990 600e 	ldrsb.w	r6, [r0, #14]
 8005934:	f993 500e 	ldrsb.w	r5, [r3, #14]
 8005938:	42ae      	cmp	r6, r5
 800593a:	db03      	blt.n	8005944 <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
 800593c:	42a3      	cmp	r3, r4
 800593e:	d00e      	beq.n	800595e <ready_thread+0x5a>
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	e7f4      	b.n	800592e <ready_thread+0x2a>
	node->prev = successor->prev;
 8005944:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8005946:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
 800594a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 800594c:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
 800594e:	7b43      	ldrb	r3, [r0, #13]
 8005950:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005954:	7343      	strb	r3, [r0, #13]
}
 8005956:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 8005958:	2000      	movs	r0, #0
 800595a:	f7ff bf8f 	b.w	800587c <update_cache>
	node->prev = list->tail;
 800595e:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
 8005962:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005964:	6018      	str	r0, [r3, #0]
	list->tail = node;
 8005966:	62d0      	str	r0, [r2, #44]	; 0x2c
}
 8005968:	e7f1      	b.n	800594e <ready_thread+0x4a>
}
 800596a:	bc70      	pop	{r4, r5, r6}
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	20000834 	.word	0x20000834

08005974 <z_sched_start>:
{
 8005974:	b510      	push	{r4, lr}
	__asm__ volatile(
 8005976:	f04f 0210 	mov.w	r2, #16
 800597a:	f3ef 8411 	mrs	r4, BASEPRI
 800597e:	f382 8811 	msr	BASEPRI, r2
 8005982:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
 8005986:	7b42      	ldrb	r2, [r0, #13]
 8005988:	0751      	lsls	r1, r2, #29
 800598a:	d404      	bmi.n	8005996 <z_sched_start+0x22>
	__asm__ volatile(
 800598c:	f384 8811 	msr	BASEPRI, r4
 8005990:	f3bf 8f6f 	isb	sy
}
 8005994:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8005996:	f022 0204 	bic.w	r2, r2, #4
 800599a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 800599c:	f7ff ffb2 	bl	8005904 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 80059a0:	4621      	mov	r1, r4
 80059a2:	4802      	ldr	r0, [pc, #8]	; (80059ac <z_sched_start+0x38>)
}
 80059a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 80059a8:	f7ff bf2c 	b.w	8005804 <z_reschedule>
 80059ac:	2000087b 	.word	0x2000087b

080059b0 <move_thread_to_end_of_prio_q>:
{
 80059b0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 80059b2:	f990 300d 	ldrsb.w	r3, [r0, #13]
 80059b6:	2b00      	cmp	r3, #0
{
 80059b8:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 80059ba:	da02      	bge.n	80059c2 <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
 80059bc:	4817      	ldr	r0, [pc, #92]	; (8005a1c <move_thread_to_end_of_prio_q+0x6c>)
 80059be:	f7ff ff47 	bl	8005850 <z_priq_dumb_remove>
	return list->head == list;
 80059c2:	4a17      	ldr	r2, [pc, #92]	; (8005a20 <move_thread_to_end_of_prio_q+0x70>)
 80059c4:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80059c6:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
	return list->head == list;
 80059c8:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80059cc:	4283      	cmp	r3, r0
 80059ce:	bf08      	it	eq
 80059d0:	2300      	moveq	r3, #0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	bf38      	it	cc
 80059d6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80059d8:	b1d3      	cbz	r3, 8005a10 <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
 80059da:	f991 600e 	ldrsb.w	r6, [r1, #14]
 80059de:	f993 500e 	ldrsb.w	r5, [r3, #14]
 80059e2:	42ae      	cmp	r6, r5
 80059e4:	db03      	blt.n	80059ee <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
 80059e6:	42a3      	cmp	r3, r4
 80059e8:	d012      	beq.n	8005a10 <move_thread_to_end_of_prio_q+0x60>
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	e7f4      	b.n	80059d8 <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
 80059ee:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
 80059f0:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
 80059f4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 80059f6:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
 80059f8:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
 80059fa:	6890      	ldr	r0, [r2, #8]
 80059fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a00:	734b      	strb	r3, [r1, #13]
 8005a02:	1a43      	subs	r3, r0, r1
 8005a04:	4258      	negs	r0, r3
}
 8005a06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 8005a0a:	4158      	adcs	r0, r3
 8005a0c:	f7ff bf36 	b.w	800587c <update_cache>
	node->prev = list->tail;
 8005a10:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
 8005a14:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005a16:	6019      	str	r1, [r3, #0]
	list->tail = node;
 8005a18:	62d1      	str	r1, [r2, #44]	; 0x2c
}
 8005a1a:	e7ed      	b.n	80059f8 <move_thread_to_end_of_prio_q+0x48>
 8005a1c:	2000085c 	.word	0x2000085c
 8005a20:	20000834 	.word	0x20000834

08005a24 <z_time_slice>:
{
 8005a24:	b570      	push	{r4, r5, r6, lr}
 8005a26:	4601      	mov	r1, r0
	__asm__ volatile(
 8005a28:	f04f 0310 	mov.w	r3, #16
 8005a2c:	f3ef 8411 	mrs	r4, BASEPRI
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 8005a38:	4b16      	ldr	r3, [pc, #88]	; (8005a94 <z_time_slice+0x70>)
 8005a3a:	4a17      	ldr	r2, [pc, #92]	; (8005a98 <z_time_slice+0x74>)
 8005a3c:	6898      	ldr	r0, [r3, #8]
 8005a3e:	6815      	ldr	r5, [r2, #0]
 8005a40:	42a8      	cmp	r0, r5
 8005a42:	461d      	mov	r5, r3
 8005a44:	d106      	bne.n	8005a54 <z_time_slice+0x30>
			z_reset_time_slice();
 8005a46:	f7ff fea7 	bl	8005798 <z_reset_time_slice>
	__asm__ volatile(
 8005a4a:	f384 8811 	msr	BASEPRI, r4
 8005a4e:	f3bf 8f6f 	isb	sy
}
 8005a52:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
 8005a54:	2600      	movs	r6, #0
 8005a56:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
 8005a58:	4a10      	ldr	r2, [pc, #64]	; (8005a9c <z_time_slice+0x78>)
 8005a5a:	6812      	ldr	r2, [r2, #0]
 8005a5c:	b1ba      	cbz	r2, 8005a8e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 8005a5e:	89c2      	ldrh	r2, [r0, #14]
 8005a60:	2a7f      	cmp	r2, #127	; 0x7f
 8005a62:	d814      	bhi.n	8005a8e <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
 8005a64:	7b42      	ldrb	r2, [r0, #13]
 8005a66:	06d2      	lsls	r2, r2, #27
 8005a68:	d111      	bne.n	8005a8e <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8005a6a:	4a0d      	ldr	r2, [pc, #52]	; (8005aa0 <z_time_slice+0x7c>)
 8005a6c:	f990 600e 	ldrsb.w	r6, [r0, #14]
 8005a70:	6812      	ldr	r2, [r2, #0]
 8005a72:	4296      	cmp	r6, r2
 8005a74:	db0b      	blt.n	8005a8e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 8005a76:	4a0b      	ldr	r2, [pc, #44]	; (8005aa4 <z_time_slice+0x80>)
 8005a78:	4290      	cmp	r0, r2
 8005a7a:	d008      	beq.n	8005a8e <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
 8005a7c:	695a      	ldr	r2, [r3, #20]
 8005a7e:	428a      	cmp	r2, r1
 8005a80:	dc02      	bgt.n	8005a88 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
 8005a82:	f7ff ff95 	bl	80059b0 <move_thread_to_end_of_prio_q>
 8005a86:	e7de      	b.n	8005a46 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
 8005a88:	1a52      	subs	r2, r2, r1
 8005a8a:	615a      	str	r2, [r3, #20]
 8005a8c:	e7dd      	b.n	8005a4a <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	616b      	str	r3, [r5, #20]
 8005a92:	e7da      	b.n	8005a4a <z_time_slice+0x26>
 8005a94:	20000834 	.word	0x20000834
 8005a98:	20000864 	.word	0x20000864
 8005a9c:	2000086c 	.word	0x2000086c
 8005aa0:	20000868 	.word	0x20000868
 8005aa4:	200002f8 	.word	0x200002f8

08005aa8 <z_impl_k_thread_suspend>:
{
 8005aa8:	b570      	push	{r4, r5, r6, lr}
 8005aaa:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8005aac:	3018      	adds	r0, #24
 8005aae:	f002 fef3 	bl	8008898 <z_abort_timeout>
	__asm__ volatile(
 8005ab2:	f04f 0310 	mov.w	r3, #16
 8005ab6:	f3ef 8611 	mrs	r6, BASEPRI
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 8005ac2:	f994 300d 	ldrsb.w	r3, [r4, #13]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	da07      	bge.n	8005ada <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
 8005aca:	480f      	ldr	r0, [pc, #60]	; (8005b08 <z_impl_k_thread_suspend+0x60>)
 8005acc:	4621      	mov	r1, r4
 8005ace:	f7ff febf 	bl	8005850 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 8005ad2:	7b63      	ldrb	r3, [r4, #13]
 8005ad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ad8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 8005ada:	4d0c      	ldr	r5, [pc, #48]	; (8005b0c <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8005adc:	7b63      	ldrb	r3, [r4, #13]
 8005ade:	68a8      	ldr	r0, [r5, #8]
 8005ae0:	f043 0310 	orr.w	r3, r3, #16
 8005ae4:	7363      	strb	r3, [r4, #13]
 8005ae6:	1b03      	subs	r3, r0, r4
 8005ae8:	4258      	negs	r0, r3
 8005aea:	4158      	adcs	r0, r3
 8005aec:	f7ff fec6 	bl	800587c <update_cache>
	__asm__ volatile(
 8005af0:	f386 8811 	msr	BASEPRI, r6
 8005af4:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 8005af8:	68ab      	ldr	r3, [r5, #8]
 8005afa:	42a3      	cmp	r3, r4
 8005afc:	d103      	bne.n	8005b06 <z_impl_k_thread_suspend+0x5e>
}
 8005afe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 8005b02:	f002 be1b 	b.w	800873c <z_reschedule_unlocked>
}
 8005b06:	bd70      	pop	{r4, r5, r6, pc}
 8005b08:	2000085c 	.word	0x2000085c
 8005b0c:	20000834 	.word	0x20000834

08005b10 <z_thread_single_abort>:
{
 8005b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b14:	4604      	mov	r4, r0
	__asm__ volatile(
 8005b16:	f04f 0310 	mov.w	r3, #16
 8005b1a:	f3ef 8211 	mrs	r2, BASEPRI
 8005b1e:	f383 8811 	msr	BASEPRI, r3
 8005b22:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
 8005b26:	7b43      	ldrb	r3, [r0, #13]
 8005b28:	f013 0f28 	tst.w	r3, #40	; 0x28
 8005b2c:	d005      	beq.n	8005b3a <z_thread_single_abort+0x2a>
	__asm__ volatile(
 8005b2e:	f382 8811 	msr	BASEPRI, r2
 8005b32:	f3bf 8f6f 	isb	sy
}
 8005b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
 8005b3a:	f043 0320 	orr.w	r3, r3, #32
 8005b3e:	7343      	strb	r3, [r0, #13]
 8005b40:	f382 8811 	msr	BASEPRI, r2
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	3018      	adds	r0, #24
 8005b4a:	f002 fea5 	bl	8008898 <z_abort_timeout>
	__asm__ volatile(
 8005b4e:	f04f 0310 	mov.w	r3, #16
 8005b52:	f3ef 8611 	mrs	r6, BASEPRI
 8005b56:	f383 8811 	msr	BASEPRI, r3
 8005b5a:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8005b5e:	7b63      	ldrb	r3, [r4, #13]
 8005b60:	06d8      	lsls	r0, r3, #27
 8005b62:	d116      	bne.n	8005b92 <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
 8005b64:	69a2      	ldr	r2, [r4, #24]
 8005b66:	b9a2      	cbnz	r2, 8005b92 <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
 8005b68:	0619      	lsls	r1, r3, #24
 8005b6a:	d507      	bpl.n	8005b7c <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
 8005b6c:	4826      	ldr	r0, [pc, #152]	; (8005c08 <z_thread_single_abort+0xf8>)
 8005b6e:	4621      	mov	r1, r4
 8005b70:	f7ff fe6e 	bl	8005850 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 8005b74:	7b63      	ldrb	r3, [r4, #13]
 8005b76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b7a:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
 8005b7c:	4b23      	ldr	r3, [pc, #140]	; (8005c0c <z_thread_single_abort+0xfc>)
 8005b7e:	6898      	ldr	r0, [r3, #8]
 8005b80:	1b02      	subs	r2, r0, r4
 8005b82:	4250      	negs	r0, r2
 8005b84:	4150      	adcs	r0, r2
 8005b86:	f7ff fe79 	bl	800587c <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8005b8a:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
 8005b8e:	2700      	movs	r7, #0
 8005b90:	e01d      	b.n	8005bce <z_thread_single_abort+0xbe>
			if (z_is_thread_pending(thread)) {
 8005b92:	079b      	lsls	r3, r3, #30
 8005b94:	d5f9      	bpl.n	8005b8a <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
 8005b96:	68a0      	ldr	r0, [r4, #8]
 8005b98:	4621      	mov	r1, r4
 8005b9a:	f7ff fe59 	bl	8005850 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8005b9e:	7b63      	ldrb	r3, [r4, #13]
 8005ba0:	f023 0302 	bic.w	r3, r3, #2
 8005ba4:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60a3      	str	r3, [r4, #8]
 8005baa:	e7ee      	b.n	8005b8a <z_thread_single_abort+0x7a>
 8005bac:	f105 0018 	add.w	r0, r5, #24
 8005bb0:	f002 fe72 	bl	8008898 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
 8005bb4:	68a8      	ldr	r0, [r5, #8]
 8005bb6:	4629      	mov	r1, r5
 8005bb8:	f7ff fe4a 	bl	8005850 <z_priq_dumb_remove>
 8005bbc:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
 8005bbe:	60af      	str	r7, [r5, #8]
 8005bc0:	f023 0302 	bic.w	r3, r3, #2
 8005bc4:	736b      	strb	r3, [r5, #13]
 8005bc6:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
 8005bc8:	4628      	mov	r0, r5
 8005bca:	f7ff fe9b 	bl	8005904 <ready_thread>
	return list->head == list;
 8005bce:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005bd0:	4545      	cmp	r5, r8
 8005bd2:	d001      	beq.n	8005bd8 <z_thread_single_abort+0xc8>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
 8005bd4:	2d00      	cmp	r5, #0
 8005bd6:	d1e9      	bne.n	8005bac <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
 8005bd8:	4b0c      	ldr	r3, [pc, #48]	; (8005c0c <z_thread_single_abort+0xfc>)
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	4b0c      	ldr	r3, [pc, #48]	; (8005c10 <z_thread_single_abort+0x100>)
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d102      	bne.n	8005be8 <z_thread_single_abort+0xd8>
			update_cache(1);
 8005be2:	2001      	movs	r0, #1
 8005be4:	f7ff fe4a 	bl	800587c <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
 8005be8:	7b63      	ldrb	r3, [r4, #13]
 8005bea:	f043 0308 	orr.w	r3, r3, #8
 8005bee:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
 8005bf0:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
 8005bf2:	f386 8811 	msr	BASEPRI, r6
 8005bf6:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d09b      	beq.n	8005b36 <z_thread_single_abort+0x26>
		fn_abort(thread);
 8005bfe:	4620      	mov	r0, r4
}
 8005c00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
 8005c04:	4718      	bx	r3
 8005c06:	bf00      	nop
 8005c08:	2000085c 	.word	0x2000085c
 8005c0c:	20000834 	.word	0x20000834
 8005c10:	200002f8 	.word	0x200002f8

08005c14 <unready_thread>:
{
 8005c14:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 8005c16:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8005c1a:	2b00      	cmp	r3, #0
{
 8005c1c:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8005c1e:	da06      	bge.n	8005c2e <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
 8005c20:	4807      	ldr	r0, [pc, #28]	; (8005c40 <unready_thread+0x2c>)
 8005c22:	f7ff fe15 	bl	8005850 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 8005c26:	7b4b      	ldrb	r3, [r1, #13]
 8005c28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c2c:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
 8005c2e:	4b05      	ldr	r3, [pc, #20]	; (8005c44 <unready_thread+0x30>)
 8005c30:	6898      	ldr	r0, [r3, #8]
 8005c32:	1a43      	subs	r3, r0, r1
 8005c34:	4258      	negs	r0, r3
 8005c36:	4158      	adcs	r0, r3
}
 8005c38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 8005c3c:	f7ff be1e 	b.w	800587c <update_cache>
 8005c40:	2000085c 	.word	0x2000085c
 8005c44:	20000834 	.word	0x20000834

08005c48 <pend>:
{
 8005c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c4c:	4606      	mov	r6, r0
 8005c4e:	4614      	mov	r4, r2
 8005c50:	461d      	mov	r5, r3
	__asm__ volatile(
 8005c52:	f04f 0310 	mov.w	r3, #16
 8005c56:	f3ef 8711 	mrs	r7, BASEPRI
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
 8005c62:	f002 fdbb 	bl	80087dc <add_to_waitq_locked>
	__asm__ volatile(
 8005c66:	f387 8811 	msr	BASEPRI, r7
 8005c6a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8005c6e:	1c6b      	adds	r3, r5, #1
 8005c70:	bf08      	it	eq
 8005c72:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
 8005c76:	d008      	beq.n	8005c8a <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
 8005c78:	4622      	mov	r2, r4
 8005c7a:	462b      	mov	r3, r5
 8005c7c:	f106 0018 	add.w	r0, r6, #24
 8005c80:	4903      	ldr	r1, [pc, #12]	; (8005c90 <pend+0x48>)
}
 8005c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c86:	f000 ba4f 	b.w	8006128 <z_add_timeout>
 8005c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c8e:	bf00      	nop
 8005c90:	0800879d 	.word	0x0800879d

08005c94 <z_pend_curr>:
{
 8005c94:	b510      	push	{r4, lr}
	pending_current = _current;
 8005c96:	4b07      	ldr	r3, [pc, #28]	; (8005cb4 <z_pend_curr+0x20>)
 8005c98:	6898      	ldr	r0, [r3, #8]
 8005c9a:	4b07      	ldr	r3, [pc, #28]	; (8005cb8 <z_pend_curr+0x24>)
{
 8005c9c:	460c      	mov	r4, r1
	pending_current = _current;
 8005c9e:	6018      	str	r0, [r3, #0]
{
 8005ca0:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
 8005ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ca6:	f7ff ffcf 	bl	8005c48 <pend>
 8005caa:	4620      	mov	r0, r4
}
 8005cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cb0:	f7fc bbc8 	b.w	8002444 <arch_swap>
 8005cb4:	20000834 	.word	0x20000834
 8005cb8:	20000864 	.word	0x20000864

08005cbc <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
 8005cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cbe:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
 8005cc0:	f002 fe2a 	bl	8008918 <z_tick_get_32>
 8005cc4:	182c      	adds	r4, r5, r0
	__asm__ volatile(
 8005cc6:	f04f 0310 	mov.w	r3, #16
 8005cca:	f3ef 8711 	mrs	r7, BASEPRI
 8005cce:	f383 8811 	msr	BASEPRI, r3
 8005cd2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 8005cd6:	4e0d      	ldr	r6, [pc, #52]	; (8005d0c <z_tick_sleep.part.0+0x50>)
 8005cd8:	4b0d      	ldr	r3, [pc, #52]	; (8005d10 <z_tick_sleep.part.0+0x54>)
 8005cda:	68b0      	ldr	r0, [r6, #8]
 8005cdc:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
 8005cde:	f7ff ff99 	bl	8005c14 <unready_thread>
	z_add_thread_timeout(_current, timeout);
 8005ce2:	68b0      	ldr	r0, [r6, #8]
 8005ce4:	490b      	ldr	r1, [pc, #44]	; (8005d14 <z_tick_sleep.part.0+0x58>)
 8005ce6:	462a      	mov	r2, r5
 8005ce8:	17eb      	asrs	r3, r5, #31
 8005cea:	3018      	adds	r0, #24
 8005cec:	f000 fa1c 	bl	8006128 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 8005cf0:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8005cf2:	7b53      	ldrb	r3, [r2, #13]
 8005cf4:	f043 0310 	orr.w	r3, r3, #16
 8005cf8:	7353      	strb	r3, [r2, #13]
 8005cfa:	4638      	mov	r0, r7
 8005cfc:	f7fc fba2 	bl	8002444 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
 8005d00:	f002 fe0a 	bl	8008918 <z_tick_get_32>
 8005d04:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
 8005d06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8005d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d0c:	20000834 	.word	0x20000834
 8005d10:	20000864 	.word	0x20000864
 8005d14:	0800879d 	.word	0x0800879d

08005d18 <z_set_prio>:
{
 8005d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d1c:	4604      	mov	r4, r0
 8005d1e:	f04f 0310 	mov.w	r3, #16
 8005d22:	f3ef 8811 	mrs	r8, BASEPRI
 8005d26:	f383 8811 	msr	BASEPRI, r3
 8005d2a:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8005d2e:	7b43      	ldrb	r3, [r0, #13]
 8005d30:	06db      	lsls	r3, r3, #27
 8005d32:	b24e      	sxtb	r6, r1
 8005d34:	d12e      	bne.n	8005d94 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
 8005d36:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
 8005d38:	bb65      	cbnz	r5, 8005d94 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
 8005d3a:	4f18      	ldr	r7, [pc, #96]	; (8005d9c <z_set_prio+0x84>)
 8005d3c:	4621      	mov	r1, r4
 8005d3e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8005d42:	f7ff fd85 	bl	8005850 <z_priq_dumb_remove>
	return list->head == list;
 8005d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8005d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
				thread->base.prio = prio;
 8005d4a:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005d4c:	4283      	cmp	r3, r0
 8005d4e:	bf18      	it	ne
 8005d50:	461d      	movne	r5, r3
 8005d52:	2d00      	cmp	r5, #0
 8005d54:	bf38      	it	cc
 8005d56:	2500      	movcc	r5, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8005d58:	b1b5      	cbz	r5, 8005d88 <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
 8005d5a:	f995 100e 	ldrsb.w	r1, [r5, #14]
 8005d5e:	42b1      	cmp	r1, r6
 8005d60:	dc03      	bgt.n	8005d6a <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
 8005d62:	42aa      	cmp	r2, r5
 8005d64:	d010      	beq.n	8005d88 <z_set_prio+0x70>
 8005d66:	682d      	ldr	r5, [r5, #0]
 8005d68:	e7f6      	b.n	8005d58 <z_set_prio+0x40>
	node->prev = successor->prev;
 8005d6a:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
 8005d6c:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
 8005d70:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8005d72:	606c      	str	r4, [r5, #4]
			update_cache(1);
 8005d74:	2001      	movs	r0, #1
 8005d76:	f7ff fd81 	bl	800587c <update_cache>
 8005d7a:	2001      	movs	r0, #1
	__asm__ volatile(
 8005d7c:	f388 8811 	msr	BASEPRI, r8
 8005d80:	f3bf 8f6f 	isb	sy
}
 8005d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
 8005d88:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
 8005d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8e:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8005d90:	62fc      	str	r4, [r7, #44]	; 0x2c
}
 8005d92:	e7ef      	b.n	8005d74 <z_set_prio+0x5c>
			thread->base.prio = prio;
 8005d94:	73a6      	strb	r6, [r4, #14]
 8005d96:	2000      	movs	r0, #0
 8005d98:	e7f0      	b.n	8005d7c <z_set_prio+0x64>
 8005d9a:	bf00      	nop
 8005d9c:	20000834 	.word	0x20000834

08005da0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 8005da0:	4b04      	ldr	r3, [pc, #16]	; (8005db4 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 8005da2:	2100      	movs	r1, #0
 8005da4:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
 8005da8:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 8005dac:	4608      	mov	r0, r1
 8005dae:	f7ff bd09 	b.w	80057c4 <k_sched_time_slice_set>
 8005db2:	bf00      	nop
 8005db4:	20000834 	.word	0x20000834

08005db8 <z_impl_k_yield>:
{
 8005db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
 8005dba:	4c24      	ldr	r4, [pc, #144]	; (8005e4c <z_impl_k_yield+0x94>)
 8005dbc:	4b24      	ldr	r3, [pc, #144]	; (8005e50 <z_impl_k_yield+0x98>)
 8005dbe:	68a2      	ldr	r2, [r4, #8]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d030      	beq.n	8005e26 <z_impl_k_yield+0x6e>
	__asm__ volatile(
 8005dc4:	f04f 0310 	mov.w	r3, #16
 8005dc8:	f3ef 8511 	mrs	r5, BASEPRI
 8005dcc:	f383 8811 	msr	BASEPRI, r3
 8005dd0:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
 8005dd4:	68a1      	ldr	r1, [r4, #8]
 8005dd6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8005dda:	f7ff fd39 	bl	8005850 <z_priq_dumb_remove>
	return list->head == list;
 8005dde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
 8005de0:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8005de2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005de4:	4283      	cmp	r3, r0
 8005de6:	bf08      	it	eq
 8005de8:	2300      	moveq	r3, #0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	bf38      	it	cc
 8005dee:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8005df0:	b32b      	cbz	r3, 8005e3e <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
 8005df2:	f992 700e 	ldrsb.w	r7, [r2, #14]
 8005df6:	f993 600e 	ldrsb.w	r6, [r3, #14]
 8005dfa:	42b7      	cmp	r7, r6
 8005dfc:	db03      	blt.n	8005e06 <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
 8005dfe:	428b      	cmp	r3, r1
 8005e00:	d01d      	beq.n	8005e3e <z_impl_k_yield+0x86>
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	e7f4      	b.n	8005df0 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
 8005e06:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
 8005e08:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
 8005e0c:	600a      	str	r2, [r1, #0]
	successor->prev = node;
 8005e0e:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
 8005e10:	7b53      	ldrb	r3, [r2, #13]
 8005e12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e16:	7353      	strb	r3, [r2, #13]
			update_cache(1);
 8005e18:	2001      	movs	r0, #1
 8005e1a:	f7ff fd2f 	bl	800587c <update_cache>
	__asm__ volatile(
 8005e1e:	f385 8811 	msr	BASEPRI, r5
 8005e22:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 8005e26:	f04f 0310 	mov.w	r3, #16
 8005e2a:	f3ef 8011 	mrs	r0, BASEPRI
 8005e2e:	f383 8811 	msr	BASEPRI, r3
 8005e32:	f3bf 8f6f 	isb	sy
}
 8005e36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005e3a:	f7fc bb03 	b.w	8002444 <arch_swap>
	node->prev = list->tail;
 8005e3e:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
 8005e42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005e44:	601a      	str	r2, [r3, #0]
	list->tail = node;
 8005e46:	62e2      	str	r2, [r4, #44]	; 0x2c
}
 8005e48:	e7e2      	b.n	8005e10 <z_impl_k_yield+0x58>
 8005e4a:	bf00      	nop
 8005e4c:	20000834 	.word	0x20000834
 8005e50:	200002f8 	.word	0x200002f8

08005e54 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
 8005e54:	460b      	mov	r3, r1

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8005e56:	3301      	adds	r3, #1
 8005e58:	bf08      	it	eq
 8005e5a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 8005e5e:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8005e60:	d106      	bne.n	8005e70 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 8005e62:	4b0b      	ldr	r3, [pc, #44]	; (8005e90 <z_impl_k_sleep+0x3c>)
 8005e64:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 8005e66:	f7ff fe1f 	bl	8005aa8 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
 8005e6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
 8005e6e:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
 8005e70:	4604      	mov	r4, r0
	if (ticks == 0) {
 8005e72:	b940      	cbnz	r0, 8005e86 <z_impl_k_sleep+0x32>
	z_impl_k_yield();
 8005e74:	f7ff ffa0 	bl	8005db8 <z_impl_k_yield>
			return t / (from_hz / to_hz);
 8005e78:	220a      	movs	r2, #10
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	17e1      	asrs	r1, r4, #31
 8005e80:	f7fa f982 	bl	8000188 <__aeabi_uldivmod>
	return k_ticks_to_ms_floor64(ticks);
 8005e84:	e7f3      	b.n	8005e6e <z_impl_k_sleep+0x1a>
 8005e86:	f7ff ff19 	bl	8005cbc <z_tick_sleep.part.0>
 8005e8a:	4604      	mov	r4, r0
 8005e8c:	e7f4      	b.n	8005e78 <z_impl_k_sleep+0x24>
 8005e8e:	bf00      	nop
 8005e90:	20000834 	.word	0x20000834

08005e94 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 8005e94:	4b01      	ldr	r3, [pc, #4]	; (8005e9c <z_impl_k_current_get+0x8>)
 8005e96:	6898      	ldr	r0, [r3, #8]
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	20000834 	.word	0x20000834

08005ea0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 8005ea0:	b538      	push	{r3, r4, r5, lr}
 8005ea2:	4604      	mov	r4, r0
 8005ea4:	f04f 0310 	mov.w	r3, #16
 8005ea8:	f3ef 8511 	mrs	r5, BASEPRI
 8005eac:	f383 8811 	msr	BASEPRI, r3
 8005eb0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
 8005eb4:	f002 fcbd 	bl	8008832 <z_unpend_first_thread>

	if (thread != NULL) {
 8005eb8:	b148      	cbz	r0, 8005ece <z_impl_k_sem_give+0x2e>
 8005eba:	2200      	movs	r2, #0
 8005ebc:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 8005ebe:	f002 fc5d 	bl	800877c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 8005ec2:	4629      	mov	r1, r5
 8005ec4:	4805      	ldr	r0, [pc, #20]	; (8005edc <z_impl_k_sem_give+0x3c>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
 8005ec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
 8005eca:	f7ff bc9b 	b.w	8005804 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8005ece:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	bf18      	it	ne
 8005ed6:	3301      	addne	r3, #1
 8005ed8:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
 8005eda:	e7f2      	b.n	8005ec2 <z_impl_k_sem_give+0x22>
 8005edc:	2000087b 	.word	0x2000087b

08005ee0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 8005ee0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ee2:	4614      	mov	r4, r2
 8005ee4:	461d      	mov	r5, r3
 8005ee6:	f04f 0310 	mov.w	r3, #16
 8005eea:	f3ef 8111 	mrs	r1, BASEPRI
 8005eee:	f383 8811 	msr	BASEPRI, r3
 8005ef2:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
 8005ef6:	6883      	ldr	r3, [r0, #8]
 8005ef8:	b143      	cbz	r3, 8005f0c <z_impl_k_sem_take+0x2c>
		sem->count--;
 8005efa:	3b01      	subs	r3, #1
 8005efc:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
 8005efe:	f381 8811 	msr	BASEPRI, r1
 8005f02:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 8005f06:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
 8005f08:	b003      	add	sp, #12
 8005f0a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8005f0c:	ea54 0305 	orrs.w	r3, r4, r5
 8005f10:	d106      	bne.n	8005f20 <z_impl_k_sem_take+0x40>
 8005f12:	f381 8811 	msr	BASEPRI, r1
 8005f16:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 8005f1a:	f06f 000f 	mvn.w	r0, #15
 8005f1e:	e7f3      	b.n	8005f08 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8005f20:	4602      	mov	r2, r0
 8005f22:	e9cd 4500 	strd	r4, r5, [sp]
 8005f26:	4802      	ldr	r0, [pc, #8]	; (8005f30 <z_impl_k_sem_take+0x50>)
 8005f28:	f7ff feb4 	bl	8005c94 <z_pend_curr>
	return ret;
 8005f2c:	e7ec      	b.n	8005f08 <z_impl_k_sem_take+0x28>
 8005f2e:	bf00      	nop
 8005f30:	2000087b 	.word	0x2000087b

08005f34 <z_impl_k_busy_wait>:
	return (_current->base.user_options & K_ESSENTIAL) == K_ESSENTIAL;
}

#ifdef CONFIG_SYS_CLOCK_EXISTS
void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
 8005f34:	b538      	push	{r3, r4, r5, lr}
	if (usec_to_wait == 0) {
 8005f36:	4604      	mov	r4, r0
 8005f38:	b178      	cbz	r0, 8005f5a <z_impl_k_busy_wait+0x26>
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
 8005f3a:	f7fc fa6d 	bl	8002418 <z_timer_cycle_get_32>
 8005f3e:	4605      	mov	r5, r0
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 8005f40:	4806      	ldr	r0, [pc, #24]	; (8005f5c <z_impl_k_busy_wait+0x28>)
 8005f42:	4a07      	ldr	r2, [pc, #28]	; (8005f60 <z_impl_k_busy_wait+0x2c>)
 8005f44:	fba4 0100 	umull	r0, r1, r4, r0
 8005f48:	2300      	movs	r3, #0
 8005f4a:	f7fa f91d 	bl	8000188 <__aeabi_uldivmod>
 8005f4e:	4604      	mov	r4, r0
 8005f50:	f7fc fa62 	bl	8002418 <z_timer_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 8005f54:	1b43      	subs	r3, r0, r5
 8005f56:	42a3      	cmp	r3, r4
 8005f58:	d3fa      	bcc.n	8005f50 <z_impl_k_busy_wait+0x1c>
		}
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
}
 8005f5a:	bd38      	pop	{r3, r4, r5, pc}
 8005f5c:	04c4b400 	.word	0x04c4b400
 8005f60:	000f4240 	.word	0x000f4240

08005f64 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8005f64:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
 8005f68:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
 8005f6c:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
 8005f70:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005f72:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 8005f74:	2504      	movs	r5, #4
 8005f76:	7345      	strb	r5, [r0, #13]
{
 8005f78:	460f      	mov	r7, r1

	thread_base->prio = priority;
 8005f7a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005f7c:	7385      	strb	r5, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8005f7e:	1dd6      	adds	r6, r2, #7

	thread_base->sched_locked = 0U;
 8005f80:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8005f82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
 8005f84:	73c5      	strb	r5, [r0, #15]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8005f86:	f026 0607 	bic.w	r6, r6, #7

#define K_KERNEL_STACK_SIZEOF(sym) (sizeof(sym) - K_KERNEL_STACK_RESERVED)

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 8005f8a:	3720      	adds	r7, #32
	node->prev = NULL;
 8005f8c:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
 8005f90:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	new_thread->stack_info.delta = delta;
 8005f94:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8005f96:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8005f9a:	9202      	str	r2, [sp, #8]
 8005f9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f9e:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
 8005fa0:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8005fa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fa4:	9200      	str	r2, [sp, #0]
 8005fa6:	4642      	mov	r2, r8
{
 8005fa8:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8005faa:	f7fc fac7 	bl	800253c <arch_new_thread>
	if (!_current) {
 8005fae:	4b05      	ldr	r3, [pc, #20]	; (8005fc4 <z_setup_new_thread+0x60>)
 8005fb0:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
 8005fb2:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
 8005fb6:	b103      	cbz	r3, 8005fba <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
 8005fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
 8005fba:	6763      	str	r3, [r4, #116]	; 0x74
}
 8005fbc:	4640      	mov	r0, r8
 8005fbe:	b004      	add	sp, #16
 8005fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fc4:	20000834 	.word	0x20000834

08005fc8 <z_init_static_threads>:
{
 8005fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
 8005fca:	4f22      	ldr	r7, [pc, #136]	; (8006054 <z_init_static_threads+0x8c>)
 8005fcc:	4d22      	ldr	r5, [pc, #136]	; (8006058 <z_init_static_threads+0x90>)
{
 8005fce:	b087      	sub	sp, #28
 8005fd0:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
 8005fd2:	42bd      	cmp	r5, r7
 8005fd4:	f105 0430 	add.w	r4, r5, #48	; 0x30
 8005fd8:	d30b      	bcc.n	8005ff2 <z_init_static_threads+0x2a>
	k_sched_lock();
 8005fda:	f7ff fc25 	bl	8005828 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 8005fde:	4c1e      	ldr	r4, [pc, #120]	; (8006058 <z_init_static_threads+0x90>)
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
 8005fe0:	4f1e      	ldr	r7, [pc, #120]	; (800605c <z_init_static_threads+0x94>)
		} else {
			return t * (to_hz / from_hz);
 8005fe2:	250a      	movs	r5, #10
 8005fe4:	42b4      	cmp	r4, r6
 8005fe6:	d321      	bcc.n	800602c <z_init_static_threads+0x64>
}
 8005fe8:	b007      	add	sp, #28
 8005fea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 8005fee:	f7ff bc6d 	b.w	80058cc <k_sched_unlock>
		z_setup_new_thread(
 8005ff2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005ff6:	9305      	str	r3, [sp, #20]
 8005ff8:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8005ffc:	9304      	str	r3, [sp, #16]
 8005ffe:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8006002:	9303      	str	r3, [sp, #12]
 8006004:	f854 3c18 	ldr.w	r3, [r4, #-24]
 8006008:	9302      	str	r3, [sp, #8]
 800600a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 800600e:	9301      	str	r3, [sp, #4]
 8006010:	f854 3c20 	ldr.w	r3, [r4, #-32]
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 800601a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 800601e:	f7ff ffa1 	bl	8005f64 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 8006022:	f854 3c30 	ldr.w	r3, [r4, #-48]
 8006026:	65dd      	str	r5, [r3, #92]	; 0x5c
 8006028:	4625      	mov	r5, r4
 800602a:	e7d2      	b.n	8005fd2 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 800602c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800602e:	1c53      	adds	r3, r2, #1
 8006030:	d009      	beq.n	8006046 <z_init_static_threads+0x7e>
					    K_MSEC(thread_data->init_delay));
 8006032:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8006036:	fb82 2305 	smull	r2, r3, r2, r5
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800603a:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 800603e:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8006040:	d103      	bne.n	800604a <z_init_static_threads+0x82>
	z_sched_start(thread);
 8006042:	f7ff fc97 	bl	8005974 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 8006046:	3430      	adds	r4, #48	; 0x30
 8006048:	e7cc      	b.n	8005fe4 <z_init_static_threads+0x1c>
 800604a:	4639      	mov	r1, r7
 800604c:	3018      	adds	r0, #24
 800604e:	f000 f86b 	bl	8006128 <z_add_timeout>
 8006052:	e7f8      	b.n	8006046 <z_init_static_threads+0x7e>
 8006054:	200002ac 	.word	0x200002ac
 8006058:	200002ac 	.word	0x200002ac
 800605c:	0800879d 	.word	0x0800879d

08006060 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os);

FUNC_NORETURN void z_self_abort(void)
{
 8006060:	b508      	push	{r3, lr}
	__asm__ volatile(
 8006062:	f04f 0310 	mov.w	r3, #16
 8006066:	f3ef 8411 	mrs	r4, BASEPRI
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
 8006072:	4b04      	ldr	r3, [pc, #16]	; (8006084 <z_self_abort+0x24>)
 8006074:	6898      	ldr	r0, [r3, #8]
 8006076:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
 8006078:	f7ff fd16 	bl	8005aa8 <z_impl_k_thread_suspend>
 800607c:	4620      	mov	r0, r4
 800607e:	f7fc f9e1 	bl	8002444 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE;
 8006082:	bf00      	nop
 8006084:	20000834 	.word	0x20000834

08006088 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
 8006088:	4b03      	ldr	r3, [pc, #12]	; (8006098 <elapsed+0x10>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	b90b      	cbnz	r3, 8006092 <elapsed+0xa>
 800608e:	f7fc b9a5 	b.w	80023dc <z_clock_elapsed>
}
 8006092:	2000      	movs	r0, #0
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	20000870 	.word	0x20000870

0800609c <remove_timeout>:
{
 800609c:	b530      	push	{r4, r5, lr}
 800609e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80060a0:	b168      	cbz	r0, 80060be <remove_timeout+0x22>
 80060a2:	4a0a      	ldr	r2, [pc, #40]	; (80060cc <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
 80060a4:	6852      	ldr	r2, [r2, #4]
 80060a6:	4290      	cmp	r0, r2
 80060a8:	d009      	beq.n	80060be <remove_timeout+0x22>
	if (next(t) != NULL) {
 80060aa:	b143      	cbz	r3, 80060be <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 80060ac:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 80060b0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 80060b4:	1912      	adds	r2, r2, r4
 80060b6:	eb45 0101 	adc.w	r1, r5, r1
 80060ba:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
 80060be:	6842      	ldr	r2, [r0, #4]
 80060c0:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 80060c2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80060c4:	2300      	movs	r3, #0
	node->prev = NULL;
 80060c6:	e9c0 3300 	strd	r3, r3, [r0]
}
 80060ca:	bd30      	pop	{r4, r5, pc}
 80060cc:	2000016c 	.word	0x2000016c

080060d0 <next_timeout>:

static int32_t next_timeout(void)
{
 80060d0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
 80060d2:	4b13      	ldr	r3, [pc, #76]	; (8006120 <next_timeout+0x50>)
 80060d4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80060d6:	429c      	cmp	r4, r3
 80060d8:	bf08      	it	eq
 80060da:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 80060dc:	f7ff ffd4 	bl	8006088 <elapsed>
 80060e0:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
 80060e2:	b1bc      	cbz	r4, 8006114 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 80060e4:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 80060e8:	1b40      	subs	r0, r0, r5
 80060ea:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
 80060ee:	2801      	cmp	r0, #1
 80060f0:	f171 0300 	sbcs.w	r3, r1, #0
 80060f4:	db11      	blt.n	800611a <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 80060f6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80060fa:	2300      	movs	r3, #0
 80060fc:	4282      	cmp	r2, r0
 80060fe:	eb73 0401 	sbcs.w	r4, r3, r1
 8006102:	da00      	bge.n	8006106 <next_timeout+0x36>
 8006104:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8006106:	4b07      	ldr	r3, [pc, #28]	; (8006124 <next_timeout+0x54>)
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	b113      	cbz	r3, 8006112 <next_timeout+0x42>
 800610c:	4298      	cmp	r0, r3
 800610e:	bfa8      	it	ge
 8006110:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 8006112:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
 8006114:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8006118:	e7f5      	b.n	8006106 <next_timeout+0x36>
 800611a:	2000      	movs	r0, #0
 800611c:	e7f3      	b.n	8006106 <next_timeout+0x36>
 800611e:	bf00      	nop
 8006120:	2000016c 	.word	0x2000016c
 8006124:	20000834 	.word	0x20000834

08006128 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
 8006128:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800612c:	9101      	str	r1, [sp, #4]
 800612e:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8006130:	1c4b      	adds	r3, r1, #1
 8006132:	bf08      	it	eq
 8006134:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 8006138:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 800613a:	d06c      	beq.n	8006216 <z_add_timeout+0xee>
#endif

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
 800613c:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
 800613e:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
 8006142:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
 8006146:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800614a:	ebb3 0804 	subs.w	r8, r3, r4
 800614e:	eb6b 0905 	sbc.w	r9, fp, r5
 8006152:	f1b8 0f00 	cmp.w	r8, #0
 8006156:	f179 0300 	sbcs.w	r3, r9, #0
 800615a:	db0f      	blt.n	800617c <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
 800615c:	f7ff ff94 	bl	8006088 <elapsed>
 8006160:	4a33      	ldr	r2, [pc, #204]	; (8006230 <z_add_timeout+0x108>)
 8006162:	e9d2 1c00 	ldrd	r1, ip, [r2]
 8006166:	f06f 0301 	mvn.w	r3, #1
 800616a:	1a5b      	subs	r3, r3, r1
 800616c:	eb6b 020c 	sbc.w	r2, fp, ip
 8006170:	1b1e      	subs	r6, r3, r4
 8006172:	eb62 0705 	sbc.w	r7, r2, r5
 8006176:	1a34      	subs	r4, r6, r0
 8006178:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 800617c:	9b01      	ldr	r3, [sp, #4]
 800617e:	f8ca 3008 	str.w	r3, [sl, #8]
 8006182:	f04f 0310 	mov.w	r3, #16
 8006186:	f3ef 8611 	mrs	r6, BASEPRI
 800618a:	f383 8811 	msr	BASEPRI, r3
 800618e:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
 8006192:	f7ff ff79 	bl	8006088 <elapsed>
	ticks = MAX(1, ticks);
 8006196:	2c01      	cmp	r4, #1
 8006198:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
 800619c:	4b25      	ldr	r3, [pc, #148]	; (8006234 <z_add_timeout+0x10c>)
 800619e:	bfb8      	it	lt
 80061a0:	2401      	movlt	r4, #1
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	bfb8      	it	lt
 80061a6:	2500      	movlt	r5, #0
		to->dticks = ticks + elapsed();
 80061a8:	1824      	adds	r4, r4, r0
 80061aa:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80061ae:	429a      	cmp	r2, r3
 80061b0:	e9ca 4504 	strd	r4, r5, [sl, #16]
 80061b4:	d001      	beq.n	80061ba <z_add_timeout+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80061b6:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
 80061b8:	b952      	cbnz	r2, 80061d0 <z_add_timeout+0xa8>
	node->prev = list->tail;
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
 80061c0:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 80061c2:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
 80061c6:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
 80061ca:	f8c3 a004 	str.w	sl, [r3, #4]
}
 80061ce:	e014      	b.n	80061fa <z_add_timeout+0xd2>
			if (t->dticks > to->dticks) {
 80061d0:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
 80061d4:	e9da 4504 	ldrd	r4, r5, [sl, #16]
 80061d8:	4544      	cmp	r4, r8
 80061da:	eb75 0109 	sbcs.w	r1, r5, r9
 80061de:	da1d      	bge.n	800621c <z_add_timeout+0xf4>
				t->dticks -= to->dticks;
 80061e0:	ebb8 0004 	subs.w	r0, r8, r4
 80061e4:	eb69 0105 	sbc.w	r1, r9, r5
 80061e8:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
 80061ec:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 80061ee:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
 80061f2:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
 80061f6:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
 80061fa:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d006      	beq.n	800620e <z_add_timeout+0xe6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8006200:	4592      	cmp	sl, r2
 8006202:	d104      	bne.n	800620e <z_add_timeout+0xe6>
			z_clock_set_timeout(next_timeout(), false);
 8006204:	f7ff ff64 	bl	80060d0 <next_timeout>
 8006208:	2100      	movs	r1, #0
 800620a:	f7fc f885 	bl	8002318 <z_clock_set_timeout>
	__asm__ volatile(
 800620e:	f386 8811 	msr	BASEPRI, r6
 8006212:	f3bf 8f6f 	isb	sy
		}
	}
}
 8006216:	b003      	add	sp, #12
 8006218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
 800621c:	ebb4 0008 	subs.w	r0, r4, r8
 8006220:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
 8006224:	42ba      	cmp	r2, r7
 8006226:	e9ca 0104 	strd	r0, r1, [sl, #16]
 800622a:	d0c6      	beq.n	80061ba <z_add_timeout+0x92>
 800622c:	6812      	ldr	r2, [r2, #0]
 800622e:	e7c3      	b.n	80061b8 <z_add_timeout+0x90>
 8006230:	200003f8 	.word	0x200003f8
 8006234:	2000016c 	.word	0x2000016c

08006238 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
 8006238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800623c:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 800623e:	f7ff fbf1 	bl	8005a24 <z_time_slice>
	__asm__ volatile(
 8006242:	f04f 0310 	mov.w	r3, #16
 8006246:	f3ef 8411 	mrs	r4, BASEPRI
 800624a:	f383 8811 	msr	BASEPRI, r3
 800624e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 8006252:	4d2c      	ldr	r5, [pc, #176]	; (8006304 <z_clock_announce+0xcc>)
 8006254:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8006308 <z_clock_announce+0xd0>
	return list->head == list;
 8006258:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 800630c <z_clock_announce+0xd4>
 800625c:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
 800625e:	4651      	mov	r1, sl
 8006260:	f8d5 c000 	ldr.w	ip, [r5]
 8006264:	f8db 0000 	ldr.w	r0, [fp]
 8006268:	4662      	mov	r2, ip
 800626a:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800626c:	4558      	cmp	r0, fp
 800626e:	e9da 8900 	ldrd	r8, r9, [sl]
 8006272:	e9cd 2300 	strd	r2, r3, [sp]
 8006276:	d00d      	beq.n	8006294 <z_clock_announce+0x5c>
 8006278:	b160      	cbz	r0, 8006294 <z_clock_announce+0x5c>
 800627a:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
 800627e:	45b4      	cmp	ip, r6
 8006280:	41bb      	sbcs	r3, r7
 8006282:	da1e      	bge.n	80062c2 <z_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 8006284:	9b00      	ldr	r3, [sp, #0]
 8006286:	ebb6 0c03 	subs.w	ip, r6, r3
 800628a:	9b01      	ldr	r3, [sp, #4]
 800628c:	eb67 0603 	sbc.w	r6, r7, r3
 8006290:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
 8006294:	9b00      	ldr	r3, [sp, #0]
 8006296:	eb13 0208 	adds.w	r2, r3, r8
 800629a:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
 800629c:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
 80062a0:	eb43 0309 	adc.w	r3, r3, r9
 80062a4:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
 80062a8:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
 80062aa:	f7ff ff11 	bl	80060d0 <next_timeout>
 80062ae:	4631      	mov	r1, r6
 80062b0:	f7fc f832 	bl	8002318 <z_clock_set_timeout>
	__asm__ volatile(
 80062b4:	f384 8811 	msr	BASEPRI, r4
 80062b8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 80062bc:	b003      	add	sp, #12
 80062be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
 80062c2:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
 80062c6:	f04f 0200 	mov.w	r2, #0
 80062ca:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
 80062ce:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
 80062d2:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
 80062d6:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
 80062da:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
 80062de:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
 80062e0:	f7ff fedc 	bl	800609c <remove_timeout>
 80062e4:	f384 8811 	msr	BASEPRI, r4
 80062e8:	f3bf 8f6f 	isb	sy
		t->fn(t);
 80062ec:	6883      	ldr	r3, [r0, #8]
 80062ee:	4798      	blx	r3
	__asm__ volatile(
 80062f0:	f04f 0310 	mov.w	r3, #16
 80062f4:	f3ef 8411 	mrs	r4, BASEPRI
 80062f8:	f383 8811 	msr	BASEPRI, r3
 80062fc:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
 8006300:	4901      	ldr	r1, [pc, #4]	; (8006308 <z_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 8006302:	e7ad      	b.n	8006260 <z_clock_announce+0x28>
 8006304:	20000870 	.word	0x20000870
 8006308:	200003f8 	.word	0x200003f8
 800630c:	2000016c 	.word	0x2000016c

08006310 <z_tick_get>:

int64_t z_tick_get(void)
{
 8006310:	b510      	push	{r4, lr}
 8006312:	f04f 0310 	mov.w	r3, #16
 8006316:	f3ef 8411 	mrs	r4, BASEPRI
 800631a:	f383 8811 	msr	BASEPRI, r3
 800631e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
 8006322:	f7fc f85b 	bl	80023dc <z_clock_elapsed>
 8006326:	4b06      	ldr	r3, [pc, #24]	; (8006340 <z_tick_get+0x30>)
 8006328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632c:	1812      	adds	r2, r2, r0
 800632e:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
 8006332:	f384 8811 	msr	BASEPRI, r4
 8006336:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 800633a:	4610      	mov	r0, r2
 800633c:	4619      	mov	r1, r3
 800633e:	bd10      	pop	{r4, pc}
 8006340:	200003f8 	.word	0x200003f8

08006344 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
 8006344:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 8006346:	4c06      	ldr	r4, [pc, #24]	; (8006360 <statics_init+0x1c>)
 8006348:	4d06      	ldr	r5, [pc, #24]	; (8006364 <statics_init+0x20>)
 800634a:	42ac      	cmp	r4, r5
 800634c:	d301      	bcc.n	8006352 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
 800634e:	2000      	movs	r0, #0
 8006350:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 8006352:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8006356:	4620      	mov	r0, r4
 8006358:	f002 fb1a 	bl	8008990 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 800635c:	3414      	adds	r4, #20
 800635e:	e7f4      	b.n	800634a <statics_init+0x6>
 8006360:	200002e4 	.word	0x200002e4
 8006364:	200002e4 	.word	0x200002e4

08006368 <crc16_itu_t>:
	return seed;
}

uint16_t crc16_itu_t(uint16_t seed, const uint8_t *src, size_t len)
{
	for (; len > 0; len--) {
 8006368:	440a      	add	r2, r1
 800636a:	428a      	cmp	r2, r1
 800636c:	d100      	bne.n	8006370 <crc16_itu_t+0x8>
		seed ^= seed << 12U;
		seed ^= (seed & 0xffU) << 5U;
	}

	return seed;
}
 800636e:	4770      	bx	lr
		seed ^= *src++;
 8006370:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006374:	ba40      	rev16	r0, r0
 8006376:	b280      	uxth	r0, r0
 8006378:	4058      	eors	r0, r3
		seed ^= (seed & 0xffU) >> 4U;
 800637a:	f3c0 1303 	ubfx	r3, r0, #4, #4
 800637e:	4058      	eors	r0, r3
		seed ^= seed << 12U;
 8006380:	ea80 3000 	eor.w	r0, r0, r0, lsl #12
 8006384:	b283      	uxth	r3, r0
		seed ^= (seed & 0xffU) << 5U;
 8006386:	0158      	lsls	r0, r3, #5
 8006388:	f400 50ff 	and.w	r0, r0, #8160	; 0x1fe0
 800638c:	4058      	eors	r0, r3
	for (; len > 0; len--) {
 800638e:	e7ec      	b.n	800636a <crc16_itu_t+0x2>

08006390 <crc7_be>:

#include <sys/crc.h>

uint8_t crc7_be(uint8_t seed, const uint8_t *src, size_t len)
{
	while (len--) {
 8006390:	440a      	add	r2, r1
 8006392:	4291      	cmp	r1, r2
 8006394:	d100      	bne.n	8006398 <crc7_be+0x8>

		seed = (f << 1) ^ (f << 4);
	}

	return seed;
}
 8006396:	4770      	bx	lr
		uint8_t e = seed ^ *src++;
 8006398:	f811 3b01 	ldrb.w	r3, [r1], #1
 800639c:	4058      	eors	r0, r3
		uint8_t f = e ^ (e >> 4) ^ (e >> 7);
 800639e:	09c3      	lsrs	r3, r0, #7
 80063a0:	ea83 1310 	eor.w	r3, r3, r0, lsr #4
		seed = (f << 1) ^ (f << 4);
 80063a4:	4058      	eors	r0, r3
 80063a6:	0103      	lsls	r3, r0, #4
 80063a8:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
 80063ac:	b2c0      	uxtb	r0, r0
 80063ae:	e7f0      	b.n	8006392 <crc7_be+0x2>

080063b0 <arch_printk_char_out>:
}
 80063b0:	2000      	movs	r0, #0
 80063b2:	4770      	bx	lr

080063b4 <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
 80063b4:	b40f      	push	{r0, r1, r2, r3}
 80063b6:	b507      	push	{r0, r1, r2, lr}
 80063b8:	a904      	add	r1, sp, #16
 80063ba:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 80063be:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
 80063c0:	f000 f957 	bl	8006672 <log_printk>
	} else {
		vprintk(fmt, ap);
	}
	va_end(ap);
}
 80063c4:	b003      	add	sp, #12
 80063c6:	f85d eb04 	ldr.w	lr, [sp], #4
 80063ca:	b004      	add	sp, #16
 80063cc:	4770      	bx	lr

080063ce <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 80063ce:	4604      	mov	r4, r0
 80063d0:	b508      	push	{r3, lr}
 80063d2:	4608      	mov	r0, r1
 80063d4:	4611      	mov	r1, r2
	entry(p1, p2, p3);
 80063d6:	461a      	mov	r2, r3
 80063d8:	47a0      	blx	r4
	return z_impl_k_current_get();
 80063da:	f7ff fd5b 	bl	8005e94 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
 80063de:	f7fc fbd9 	bl	8002b94 <z_impl_k_thread_abort>

080063e2 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 80063e2:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
 80063e4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 80063e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
 80063ec:	bf2c      	ite	cs
 80063ee:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
 80063f2:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
 80063f6:	4770      	bx	lr

080063f8 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
 80063f8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
 80063fc:	6880      	ldr	r0, [r0, #8]
 80063fe:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
 8006402:	bf2c      	ite	cs
 8006404:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
 8006408:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
 800640c:	4770      	bx	lr

0800640e <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
 800640e:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 8006410:	2201      	movs	r2, #1
 8006412:	f7ff ffe6 	bl	80063e2 <chunk_field>
}
 8006416:	0840      	lsrs	r0, r0, #1
 8006418:	bd08      	pop	{r3, pc}

0800641a <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 800641a:	6883      	ldr	r3, [r0, #8]
 800641c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
 8006420:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 8006424:	d308      	bcc.n	8006438 <set_chunk_used+0x1e>
		if (used) {
 8006426:	684b      	ldr	r3, [r1, #4]
 8006428:	b11a      	cbz	r2, 8006432 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 800642a:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
 800642e:	604b      	str	r3, [r1, #4]
 8006430:	4770      	bx	lr
 8006432:	f023 0301 	bic.w	r3, r3, #1
 8006436:	e7fa      	b.n	800642e <set_chunk_used+0x14>
		}
	} else {
		if (used) {
 8006438:	884b      	ldrh	r3, [r1, #2]
 800643a:	b11a      	cbz	r2, 8006444 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 800643c:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 8006440:	804b      	strh	r3, [r1, #2]
		}
	}
}
 8006442:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 8006444:	f023 0301 	bic.w	r3, r3, #1
 8006448:	e7fa      	b.n	8006440 <set_chunk_used+0x26>

0800644a <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 800644a:	0053      	lsls	r3, r2, #1
 800644c:	2201      	movs	r2, #1
 800644e:	f7ff bfd3 	b.w	80063f8 <chunk_set>

08006452 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
 8006452:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
 8006454:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8006456:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800645a:	bf2c      	ite	cs
 800645c:	2002      	movcs	r0, #2
 800645e:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
 8006460:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
 8006462:	fab0 f080 	clz	r0, r0
}
 8006466:	f1c0 001f 	rsb	r0, r0, #31
 800646a:	4770      	bx	lr

0800646c <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
 800646c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006470:	4604      	mov	r4, r0
 8006472:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
 8006474:	f7ff ffcb 	bl	800640e <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
 8006478:	68a3      	ldr	r3, [r4, #8]
 800647a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800647e:	4601      	mov	r1, r0
 8006480:	d301      	bcc.n	8006486 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
 8006482:	2801      	cmp	r0, #1
 8006484:	d035      	beq.n	80064f2 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
 8006486:	4620      	mov	r0, r4
 8006488:	f7ff ffe3 	bl	8006452 <bucket_idx>
	if (b->next == 0U) {
 800648c:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 8006490:	6916      	ldr	r6, [r2, #16]
 8006492:	b99e      	cbnz	r6, 80064bc <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
 8006494:	2301      	movs	r3, #1
 8006496:	fa03 f000 	lsl.w	r0, r3, r0
 800649a:	68e3      	ldr	r3, [r4, #12]
 800649c:	4303      	orrs	r3, r0
 800649e:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
 80064a0:	4629      	mov	r1, r5
		b->next = c;
 80064a2:	6115      	str	r5, [r2, #16]
 80064a4:	462b      	mov	r3, r5
 80064a6:	2202      	movs	r2, #2
 80064a8:	4620      	mov	r0, r4
 80064aa:	f7ff ffa5 	bl	80063f8 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 80064ae:	2203      	movs	r2, #3
 80064b0:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
 80064b2:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
 80064b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064b8:	f7ff bf9e 	b.w	80063f8 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
 80064bc:	2202      	movs	r2, #2
 80064be:	4631      	mov	r1, r6
 80064c0:	4620      	mov	r0, r4
 80064c2:	f7ff ff8e 	bl	80063e2 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
 80064c6:	2202      	movs	r2, #2
 80064c8:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
 80064ca:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
 80064cc:	4629      	mov	r1, r5
 80064ce:	4620      	mov	r0, r4
 80064d0:	f7ff ff92 	bl	80063f8 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 80064d4:	4633      	mov	r3, r6
 80064d6:	2203      	movs	r2, #3
 80064d8:	4629      	mov	r1, r5
 80064da:	4620      	mov	r0, r4
 80064dc:	f7ff ff8c 	bl	80063f8 <chunk_set>
 80064e0:	2203      	movs	r2, #3
 80064e2:	4639      	mov	r1, r7
 80064e4:	462b      	mov	r3, r5
 80064e6:	4620      	mov	r0, r4
 80064e8:	f7ff ff86 	bl	80063f8 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
 80064ec:	2202      	movs	r2, #2
 80064ee:	4631      	mov	r1, r6
 80064f0:	e7df      	b.n	80064b2 <free_list_add+0x46>
 80064f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080064f6 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
 80064f6:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 80064fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064fc:	bf2c      	ite	cs
 80064fe:	2508      	movcs	r5, #8
 8006500:	2504      	movcc	r5, #4
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 8006502:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8006504:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8006506:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8006508:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 800650c:	f025 0507 	bic.w	r5, r5, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
 8006510:	2200      	movs	r2, #0
 8006512:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
 8006514:	1b2d      	subs	r5, r5, r4
	heap->heap = h;
 8006516:	6004      	str	r4, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
 8006518:	08ed      	lsrs	r5, r5, #3
	h->chunk0_hdr_area = 0;
 800651a:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
 800651e:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
 8006520:	4629      	mov	r1, r5
	h->len = buf_sz;
 8006522:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
 8006524:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
 8006526:	4620      	mov	r0, r4
 8006528:	f7ff ff93 	bl	8006452 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
 800652c:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 800652e:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
 8006530:	1c41      	adds	r1, r0, #1
 8006532:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 8006534:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
 8006538:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
 800653a:	428b      	cmp	r3, r1
 800653c:	db29      	blt.n	8006592 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
 800653e:	4632      	mov	r2, r6
 8006540:	4620      	mov	r0, r4
 8006542:	2100      	movs	r1, #0
 8006544:	f7ff ff81 	bl	800644a <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
 8006548:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
 800654a:	4620      	mov	r0, r4
 800654c:	2201      	movs	r2, #1
 800654e:	2100      	movs	r1, #0
 8006550:	f7ff ff63 	bl	800641a <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
 8006554:	463a      	mov	r2, r7
 8006556:	4631      	mov	r1, r6
 8006558:	f7ff ff77 	bl	800644a <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 800655c:	4633      	mov	r3, r6
 800655e:	4631      	mov	r1, r6
 8006560:	4620      	mov	r0, r4
 8006562:	2200      	movs	r2, #0
 8006564:	f7ff ff48 	bl	80063f8 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
 8006568:	4629      	mov	r1, r5
 800656a:	4620      	mov	r0, r4
 800656c:	2200      	movs	r2, #0
 800656e:	f7ff ff6c 	bl	800644a <set_chunk_size>
 8006572:	463b      	mov	r3, r7
 8006574:	4629      	mov	r1, r5
 8006576:	4620      	mov	r0, r4
 8006578:	2200      	movs	r2, #0
 800657a:	f7ff ff3d 	bl	80063f8 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
 800657e:	4629      	mov	r1, r5
 8006580:	4620      	mov	r0, r4
 8006582:	2201      	movs	r2, #1
 8006584:	f7ff ff49 	bl	800641a <set_chunk_used>

	free_list_add(h, chunk0_size);
 8006588:	4631      	mov	r1, r6
}
 800658a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
 800658e:	f7ff bf6d 	b.w	800646c <free_list_add>
		h->buckets[i].next = 0;
 8006592:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
 8006596:	3301      	adds	r3, #1
 8006598:	e7cf      	b.n	800653a <sys_heap_init+0x44>

0800659a <encode_uint>:
{
 800659a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800659e:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
 80065a0:	78d3      	ldrb	r3, [r2, #3]
{
 80065a2:	4614      	mov	r4, r2
	switch (specifier) {
 80065a4:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 80065a6:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
 80065aa:	4606      	mov	r6, r0
 80065ac:	460f      	mov	r7, r1
 80065ae:	9201      	str	r2, [sp, #4]
	switch (specifier) {
 80065b0:	d02d      	beq.n	800660e <encode_uint+0x74>
 80065b2:	d828      	bhi.n	8006606 <encode_uint+0x6c>
		return 16;
 80065b4:	2b58      	cmp	r3, #88	; 0x58
 80065b6:	bf14      	ite	ne
 80065b8:	250a      	movne	r5, #10
 80065ba:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
 80065bc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
 80065c0:	46aa      	mov	sl, r5
 80065c2:	f04f 0b00 	mov.w	fp, #0
 80065c6:	4652      	mov	r2, sl
 80065c8:	465b      	mov	r3, fp
 80065ca:	4630      	mov	r0, r6
 80065cc:	4639      	mov	r1, r7
 80065ce:	f7f9 fddb 	bl	8000188 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80065d2:	2a09      	cmp	r2, #9
 80065d4:	b2d3      	uxtb	r3, r2
 80065d6:	d81f      	bhi.n	8006618 <encode_uint+0x7e>
 80065d8:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 80065da:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80065dc:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
 80065de:	bf08      	it	eq
 80065e0:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80065e2:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
 80065e6:	d301      	bcc.n	80065ec <encode_uint+0x52>
 80065e8:	45c8      	cmp	r8, r9
 80065ea:	d812      	bhi.n	8006612 <encode_uint+0x78>
	if (conv->flag_hash) {
 80065ec:	7823      	ldrb	r3, [r4, #0]
 80065ee:	069b      	lsls	r3, r3, #26
 80065f0:	d505      	bpl.n	80065fe <encode_uint+0x64>
		if (radix == 8) {
 80065f2:	2d08      	cmp	r5, #8
 80065f4:	d116      	bne.n	8006624 <encode_uint+0x8a>
			conv->altform_0 = true;
 80065f6:	78a3      	ldrb	r3, [r4, #2]
 80065f8:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 80065fc:	70a3      	strb	r3, [r4, #2]
}
 80065fe:	4640      	mov	r0, r8
 8006600:	b003      	add	sp, #12
 8006602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 8006606:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
 800660a:	2b70      	cmp	r3, #112	; 0x70
 800660c:	e7d3      	b.n	80065b6 <encode_uint+0x1c>
	switch (specifier) {
 800660e:	2508      	movs	r5, #8
 8006610:	e7d4      	b.n	80065bc <encode_uint+0x22>
		value /= radix;
 8006612:	4606      	mov	r6, r0
 8006614:	460f      	mov	r7, r1
 8006616:	e7d6      	b.n	80065c6 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8006618:	9a01      	ldr	r2, [sp, #4]
 800661a:	2a19      	cmp	r2, #25
 800661c:	bf94      	ite	ls
 800661e:	3337      	addls	r3, #55	; 0x37
 8006620:	3357      	addhi	r3, #87	; 0x57
 8006622:	e7da      	b.n	80065da <encode_uint+0x40>
		} else if (radix == 16) {
 8006624:	2d10      	cmp	r5, #16
 8006626:	d1ea      	bne.n	80065fe <encode_uint+0x64>
			conv->altform_0c = true;
 8006628:	78a3      	ldrb	r3, [r4, #2]
 800662a:	f043 0310 	orr.w	r3, r3, #16
 800662e:	e7e5      	b.n	80065fc <encode_uint+0x62>

08006630 <outs>:
{
 8006630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006634:	4607      	mov	r7, r0
 8006636:	4688      	mov	r8, r1
 8006638:	4615      	mov	r5, r2
 800663a:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800663c:	4614      	mov	r4, r2
 800663e:	42b4      	cmp	r4, r6
 8006640:	eba4 0005 	sub.w	r0, r4, r5
 8006644:	d302      	bcc.n	800664c <outs+0x1c>
 8006646:	b93e      	cbnz	r6, 8006658 <outs+0x28>
 8006648:	7823      	ldrb	r3, [r4, #0]
 800664a:	b12b      	cbz	r3, 8006658 <outs+0x28>
		int rc = out((int)*sp++, ctx);
 800664c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006650:	4641      	mov	r1, r8
 8006652:	47b8      	blx	r7
		if (rc < 0) {
 8006654:	2800      	cmp	r0, #0
 8006656:	daf2      	bge.n	800663e <outs+0xe>
}
 8006658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800665c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 800665c:	4770      	bx	lr

0800665e <k_uptime_get_32>:
 *    @option{CONFIG_SYS_CLOCK_TICKS_PER_SEC} config option
 *
 * @return The low 32 bits of the current uptime, in milliseconds.
 */
static inline uint32_t k_uptime_get_32(void)
{
 800665e:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8006660:	f002 f95e 	bl	8008920 <z_impl_k_uptime_ticks>
			return t / (from_hz / to_hz);
 8006664:	220a      	movs	r2, #10
 8006666:	2300      	movs	r3, #0
 8006668:	f7f9 fd8e 	bl	8000188 <__aeabi_uldivmod>
	return (uint32_t)k_uptime_get();
}
 800666c:	bd08      	pop	{r3, pc}

0800666e <dummy_timestamp>:
 800666e:	2000      	movs	r0, #0
 8006670:	4770      	bx	lr

08006672 <log_printk>:
			log_generic(src_level_union.structure, fmt, ap,
 8006672:	2300      	movs	r3, #0
{
 8006674:	460a      	mov	r2, r1
			log_generic(src_level_union.structure, fmt, ap,
 8006676:	4601      	mov	r1, r0
 8006678:	4618      	mov	r0, r3
 800667a:	f7fa bc03 	b.w	8000e84 <log_generic>

0800667e <log_string_sync>:
{
 800667e:	b40e      	push	{r1, r2, r3}
 8006680:	b503      	push	{r0, r1, lr}
 8006682:	aa03      	add	r2, sp, #12
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
 8006684:	2300      	movs	r3, #0
{
 8006686:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
 800668a:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
 800668c:	f7fa fbfa 	bl	8000e84 <log_generic>
}
 8006690:	b002      	add	sp, #8
 8006692:	f85d eb04 	ldr.w	lr, [sp], #4
 8006696:	b003      	add	sp, #12
 8006698:	4770      	bx	lr

0800669a <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 800669a:	b508      	push	{r3, lr}
				K_KERNEL_STACK_SIZEOF(logging_stack),
				log_process_thread_func, NULL, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
 800669c:	f7fa fc54 	bl	8000f48 <log_init>
	}

	return 0;
}
 80066a0:	2000      	movs	r0, #0
 80066a2:	bd08      	pop	{r3, pc}

080066a4 <log_strdup>:
}
 80066a4:	4770      	bx	lr

080066a6 <out_func>:
{
 80066a6:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
 80066a8:	e9d1 3200 	ldrd	r3, r2, [r1]
{
 80066ac:	9001      	str	r0, [sp, #4]
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
 80066ae:	6852      	ldr	r2, [r2, #4]
 80066b0:	2101      	movs	r1, #1
 80066b2:	a801      	add	r0, sp, #4
 80066b4:	4798      	blx	r3
}
 80066b6:	2000      	movs	r0, #0
 80066b8:	b003      	add	sp, #12
 80066ba:	f85d fb04 	ldr.w	pc, [sp], #4

080066be <buffer_write>:
{
 80066be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c0:	4606      	mov	r6, r0
 80066c2:	460d      	mov	r5, r1
 80066c4:	4614      	mov	r4, r2
 80066c6:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
 80066c8:	4621      	mov	r1, r4
 80066ca:	4628      	mov	r0, r5
 80066cc:	463a      	mov	r2, r7
 80066ce:	47b0      	blx	r6
	} while (len != 0);
 80066d0:	1a24      	subs	r4, r4, r0
		buf += processed;
 80066d2:	4405      	add	r5, r0
	} while (len != 0);
 80066d4:	d1f8      	bne.n	80066c8 <buffer_write+0xa>
}
 80066d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080066d8 <log_output_flush>:
		     log_output->control_block->offset,
 80066d8:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
 80066da:	6881      	ldr	r1, [r0, #8]
{
 80066dc:	b510      	push	{r4, lr}
 80066de:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
 80066e0:	e9d2 2300 	ldrd	r2, r3, [r2]
 80066e4:	6800      	ldr	r0, [r0, #0]
 80066e6:	f7ff ffea 	bl	80066be <buffer_write>
	log_output->control_block->offset = 0;
 80066ea:	6863      	ldr	r3, [r4, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	601a      	str	r2, [r3, #0]
}
 80066f0:	bd10      	pop	{r4, pc}

080066f2 <disk_access_init>:
{
 80066f2:	b510      	push	{r4, lr}
	struct disk_info *disk = disk_access_get_di(pdrv);
 80066f4:	f7fa fe78 	bl	80013e8 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
 80066f8:	b130      	cbz	r0, 8006708 <disk_access_init+0x16>
 80066fa:	68c3      	ldr	r3, [r0, #12]
 80066fc:	b123      	cbz	r3, 8006708 <disk_access_init+0x16>
				(disk->ops->init != NULL)) {
 80066fe:	681b      	ldr	r3, [r3, #0]
	if ((disk != NULL) && (disk->ops != NULL) &&
 8006700:	b113      	cbz	r3, 8006708 <disk_access_init+0x16>
}
 8006702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rc = disk->ops->init(disk);
 8006706:	4718      	bx	r3
}
 8006708:	f06f 0015 	mvn.w	r0, #21
 800670c:	bd10      	pop	{r4, pc}

0800670e <disk_access_status>:
{
 800670e:	b510      	push	{r4, lr}
	struct disk_info *disk = disk_access_get_di(pdrv);
 8006710:	f7fa fe6a 	bl	80013e8 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
 8006714:	b130      	cbz	r0, 8006724 <disk_access_status+0x16>
 8006716:	68c3      	ldr	r3, [r0, #12]
 8006718:	b123      	cbz	r3, 8006724 <disk_access_status+0x16>
				(disk->ops->status != NULL)) {
 800671a:	685b      	ldr	r3, [r3, #4]
	if ((disk != NULL) && (disk->ops != NULL) &&
 800671c:	b113      	cbz	r3, 8006724 <disk_access_status+0x16>
}
 800671e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		rc = disk->ops->status(disk);
 8006722:	4718      	bx	r3
}
 8006724:	f06f 0015 	mvn.w	r0, #21
 8006728:	bd10      	pop	{r4, pc}

0800672a <disk_access_read>:
{
 800672a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800672e:	460d      	mov	r5, r1
 8006730:	4616      	mov	r6, r2
 8006732:	461f      	mov	r7, r3
	struct disk_info *disk = disk_access_get_di(pdrv);
 8006734:	f7fa fe58 	bl	80013e8 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
 8006738:	b150      	cbz	r0, 8006750 <disk_access_read+0x26>
 800673a:	68c3      	ldr	r3, [r0, #12]
 800673c:	b143      	cbz	r3, 8006750 <disk_access_read+0x26>
				(disk->ops->read != NULL)) {
 800673e:	689c      	ldr	r4, [r3, #8]
	if ((disk != NULL) && (disk->ops != NULL) &&
 8006740:	b134      	cbz	r4, 8006750 <disk_access_read+0x26>
		rc = disk->ops->read(disk, data_buf, start_sector, num_sector);
 8006742:	463b      	mov	r3, r7
 8006744:	4632      	mov	r2, r6
 8006746:	4629      	mov	r1, r5
 8006748:	46a4      	mov	ip, r4
}
 800674a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rc = disk->ops->read(disk, data_buf, start_sector, num_sector);
 800674e:	4760      	bx	ip
}
 8006750:	f06f 0015 	mvn.w	r0, #21
 8006754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006758 <disk_access_write>:
{
 8006758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800675c:	460d      	mov	r5, r1
 800675e:	4616      	mov	r6, r2
 8006760:	461f      	mov	r7, r3
	struct disk_info *disk = disk_access_get_di(pdrv);
 8006762:	f7fa fe41 	bl	80013e8 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
 8006766:	b150      	cbz	r0, 800677e <disk_access_write+0x26>
 8006768:	68c3      	ldr	r3, [r0, #12]
 800676a:	b143      	cbz	r3, 800677e <disk_access_write+0x26>
				(disk->ops->write != NULL)) {
 800676c:	68dc      	ldr	r4, [r3, #12]
	if ((disk != NULL) && (disk->ops != NULL) &&
 800676e:	b134      	cbz	r4, 800677e <disk_access_write+0x26>
		rc = disk->ops->write(disk, data_buf, start_sector, num_sector);
 8006770:	463b      	mov	r3, r7
 8006772:	4632      	mov	r2, r6
 8006774:	4629      	mov	r1, r5
 8006776:	46a4      	mov	ip, r4
}
 8006778:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rc = disk->ops->write(disk, data_buf, start_sector, num_sector);
 800677c:	4760      	bx	ip
}
 800677e:	f06f 0015 	mvn.w	r0, #21
 8006782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006786 <disk_access_ioctl>:
{
 8006786:	b570      	push	{r4, r5, r6, lr}
 8006788:	460c      	mov	r4, r1
 800678a:	4615      	mov	r5, r2
	struct disk_info *disk = disk_access_get_di(pdrv);
 800678c:	f7fa fe2c 	bl	80013e8 <disk_access_get_di>
	if ((disk != NULL) && (disk->ops != NULL) &&
 8006790:	b140      	cbz	r0, 80067a4 <disk_access_ioctl+0x1e>
 8006792:	68c3      	ldr	r3, [r0, #12]
 8006794:	b133      	cbz	r3, 80067a4 <disk_access_ioctl+0x1e>
				(disk->ops->ioctl != NULL)) {
 8006796:	691b      	ldr	r3, [r3, #16]
	if ((disk != NULL) && (disk->ops != NULL) &&
 8006798:	b123      	cbz	r3, 80067a4 <disk_access_ioctl+0x1e>
		rc = disk->ops->ioctl(disk, cmd, buf);
 800679a:	462a      	mov	r2, r5
 800679c:	4621      	mov	r1, r4
}
 800679e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		rc = disk->ops->ioctl(disk, cmd, buf);
 80067a2:	4718      	bx	r3
}
 80067a4:	f06f 0015 	mvn.w	r0, #21
 80067a8:	bd70      	pop	{r4, r5, r6, pc}

080067aa <sys_get_be32>:
 80067aa:	7803      	ldrb	r3, [r0, #0]
 80067ac:	7842      	ldrb	r2, [r0, #1]
 80067ae:	7881      	ldrb	r1, [r0, #2]
 *
 *  @return 32-bit integer in host endianness.
 */
static inline uint32_t sys_get_be32(const uint8_t src[4])
{
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
 80067b0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	return ((uint16_t)src[0] << 8) | src[1];
 80067b4:	78c3      	ldrb	r3, [r0, #3]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
 80067b6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
 80067ba:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
 80067be:	4770      	bx	lr

080067c0 <spi_release>:
				     const struct spi_config *config)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->release(dev, config);
 80067c0:	6883      	ldr	r3, [r0, #8]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	4718      	bx	r3

080067c6 <sdhc_is_retryable>:
	switch (err) {
 80067c6:	f110 0f3c 	cmn.w	r0, #60	; 0x3c
 80067ca:	d007      	beq.n	80067dc <sdhc_is_retryable+0x16>
 80067cc:	1d43      	adds	r3, r0, #5
 80067ce:	d005      	beq.n	80067dc <sdhc_is_retryable+0x16>
 80067d0:	f110 0f8a 	cmn.w	r0, #138	; 0x8a
 80067d4:	bf14      	ite	ne
 80067d6:	2000      	movne	r0, #0
 80067d8:	2001      	moveq	r0, #1
 80067da:	4770      	bx	lr
 80067dc:	2001      	movs	r0, #1
}
 80067de:	4770      	bx	lr

080067e0 <disk_spi_sdhc_access_status>:
	struct sdhc_spi_data *data = dev->data;
 80067e0:	6903      	ldr	r3, [r0, #16]
	return data->status;
 80067e2:	68db      	ldr	r3, [r3, #12]
}
 80067e4:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
 80067e8:	4770      	bx	lr

080067ea <k_uptime_get_32>:
{
 80067ea:	b508      	push	{r3, lr}
 80067ec:	f002 f898 	bl	8008920 <z_impl_k_uptime_ticks>
 80067f0:	220a      	movs	r2, #10
 80067f2:	2300      	movs	r3, #0
 80067f4:	f7f9 fcc8 	bl	8000188 <__aeabi_uldivmod>
}
 80067f8:	bd08      	pop	{r3, pc}

080067fa <k_msleep>:
			return t * (to_hz / from_hz);
 80067fa:	230a      	movs	r3, #10
 80067fc:	fb80 0103 	smull	r0, r1, r0, r3
	return z_impl_k_sleep(timeout);
 8006800:	f7ff bb28 	b.w	8005e54 <z_impl_k_sleep>

08006804 <sdhc_map_flags>:
{
 8006804:	4603      	mov	r3, r0
	if (flags < 0) {
 8006806:	1e08      	subs	r0, r1, #0
 8006808:	da01      	bge.n	800680e <sdhc_map_flags+0xa>
 800680a:	4770      	bx	lr
	for (; map->mask != 0U; map++) {
 800680c:	3302      	adds	r3, #2
 800680e:	781a      	ldrb	r2, [r3, #0]
 8006810:	b10a      	cbz	r2, 8006816 <sdhc_map_flags+0x12>
		if ((flags & map->mask) == map->mask) {
 8006812:	4382      	bics	r2, r0
 8006814:	d1fa      	bne.n	800680c <sdhc_map_flags+0x8>
	return -map->err;
 8006816:	7858      	ldrb	r0, [r3, #1]
 8006818:	4240      	negs	r0, r0
}
 800681a:	4770      	bx	lr

0800681c <sdhc_retry_ok>:

/* Called at the end of a retry loop.  Returns if the minimum try
 * count and timeout has passed.  Delays/yields on retry.
 */
static inline bool sdhc_retry_ok(struct sdhc_retry *retry)
{
 800681c:	b538      	push	{r3, r4, r5, lr}
 800681e:	4604      	mov	r4, r0
	int32_t remain = retry->end - k_uptime_get_32();
 8006820:	6805      	ldr	r5, [r0, #0]
 8006822:	f7ff ffe2 	bl	80067ea <k_uptime_get_32>

	if (retry->tries < SDHC_MIN_TRIES) {
 8006826:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800682a:	2b13      	cmp	r3, #19
 800682c:	dc07      	bgt.n	800683e <sdhc_retry_ok+0x22>
		retry->tries++;
		if (retry->sleep != 0U) {
 800682e:	88e0      	ldrh	r0, [r4, #6]
		retry->tries++;
 8006830:	3301      	adds	r3, #1
 8006832:	80a3      	strh	r3, [r4, #4]
		if (retry->sleep != 0U) {
 8006834:	b108      	cbz	r0, 800683a <sdhc_retry_ok+0x1e>
		return true;
	}

	if (remain >= 0) {
		if (retry->sleep > 0) {
			k_msleep(retry->sleep);
 8006836:	f7ff ffe0 	bl	80067fa <k_msleep>
		return true;
 800683a:	2001      	movs	r0, #1

		return true;
	}

	return false;
}
 800683c:	bd38      	pop	{r3, r4, r5, pc}
	int32_t remain = retry->end - k_uptime_get_32();
 800683e:	1a2d      	subs	r5, r5, r0
	if (remain >= 0) {
 8006840:	2d00      	cmp	r5, #0
 8006842:	db05      	blt.n	8006850 <sdhc_retry_ok+0x34>
		if (retry->sleep > 0) {
 8006844:	88e0      	ldrh	r0, [r4, #6]
 8006846:	2800      	cmp	r0, #0
 8006848:	d1f5      	bne.n	8006836 <sdhc_retry_ok+0x1a>
	z_impl_k_yield();
 800684a:	f7ff fab5 	bl	8005db8 <z_impl_k_yield>
 800684e:	e7f4      	b.n	800683a <sdhc_retry_ok+0x1e>
	return false;
 8006850:	2000      	movs	r0, #0
 8006852:	e7f3      	b.n	800683c <sdhc_retry_ok+0x20>

08006854 <sdhc_spi_rx_u8>:
{
 8006854:	b507      	push	{r0, r1, r2, lr}
	int err = sdhc_spi_rx_bytes(data, buf, sizeof(buf));
 8006856:	2201      	movs	r2, #1
 8006858:	a901      	add	r1, sp, #4
 800685a:	f7fa fe4d 	bl	80014f8 <sdhc_spi_rx_bytes>
	if (err != 0) {
 800685e:	b908      	cbnz	r0, 8006864 <sdhc_spi_rx_u8+0x10>
	return buf[0];
 8006860:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
 8006864:	b003      	add	sp, #12
 8006866:	f85d fb04 	ldr.w	pc, [sp], #4

0800686a <sdhc_spi_skip_until_start>:
{
 800686a:	b513      	push	{r0, r1, r4, lr}
 800686c:	4604      	mov	r4, r0
	retry->end = k_uptime_get_32() + timeout;
 800686e:	f7ff ffbc 	bl	80067ea <k_uptime_get_32>
	retry->tries = 0;
 8006872:	2300      	movs	r3, #0
	retry->end = k_uptime_get_32() + timeout;
 8006874:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 8006878:	9000      	str	r0, [sp, #0]
	retry->tries = 0;
 800687a:	9301      	str	r3, [sp, #4]
		status = sdhc_spi_rx_u8(data);
 800687c:	4620      	mov	r0, r4
 800687e:	f7ff ffe9 	bl	8006854 <sdhc_spi_rx_u8>
		if (status < 0) {
 8006882:	2800      	cmp	r0, #0
 8006884:	db08      	blt.n	8006898 <sdhc_spi_skip_until_start+0x2e>
		if ((status & SDHC_START) == 0) {
 8006886:	0603      	lsls	r3, r0, #24
 8006888:	d506      	bpl.n	8006898 <sdhc_spi_skip_until_start+0x2e>
	} while (sdhc_retry_ok(&retry));
 800688a:	4668      	mov	r0, sp
 800688c:	f7ff ffc6 	bl	800681c <sdhc_retry_ok>
 8006890:	2800      	cmp	r0, #0
 8006892:	d1f3      	bne.n	800687c <sdhc_spi_skip_until_start+0x12>
	return -ETIMEDOUT;
 8006894:	f06f 003b 	mvn.w	r0, #59	; 0x3b
}
 8006898:	b002      	add	sp, #8
 800689a:	bd10      	pop	{r4, pc}

0800689c <sdhc_spi_cmd_r37_raw.part.0>:
static int sdhc_spi_cmd_r37_raw(struct sdhc_spi_data *data,
 800689c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800689e:	4605      	mov	r5, r0
 80068a0:	460f      	mov	r7, r1
	status = sdhc_spi_skip_until_start(data);
 80068a2:	f7ff ffe2 	bl	800686a <sdhc_spi_skip_until_start>
	err = sdhc_spi_rx_bytes(data, buf, sizeof(buf));
 80068a6:	2204      	movs	r2, #4
 80068a8:	eb0d 0102 	add.w	r1, sp, r2
	status = sdhc_spi_skip_until_start(data);
 80068ac:	4606      	mov	r6, r0
	err = sdhc_spi_rx_bytes(data, buf, sizeof(buf));
 80068ae:	4628      	mov	r0, r5
 80068b0:	f7fa fe22 	bl	80014f8 <sdhc_spi_rx_bytes>
 80068b4:	4604      	mov	r4, r0
	*reply = sys_get_be32(buf);
 80068b6:	a801      	add	r0, sp, #4
 80068b8:	f7ff ff77 	bl	80067aa <sys_get_be32>
 80068bc:	6038      	str	r0, [r7, #0]
	sdhc_spi_rx_u8(data);
 80068be:	4628      	mov	r0, r5
 80068c0:	f7ff ffc8 	bl	8006854 <sdhc_spi_rx_u8>
}
 80068c4:	2c00      	cmp	r4, #0
 80068c6:	bf14      	ite	ne
 80068c8:	4620      	movne	r0, r4
 80068ca:	4630      	moveq	r0, r6
 80068cc:	b003      	add	sp, #12
 80068ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080068d0 <sdhc_spi_skip_until_ready>:
{
 80068d0:	b513      	push	{r0, r1, r4, lr}
 80068d2:	4604      	mov	r4, r0
	retry->end = k_uptime_get_32() + timeout;
 80068d4:	f7ff ff89 	bl	80067ea <k_uptime_get_32>
	retry->tries = 0;
 80068d8:	2300      	movs	r3, #0
	retry->end = k_uptime_get_32() + timeout;
 80068da:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 80068de:	9000      	str	r0, [sp, #0]
	retry->tries = 0;
 80068e0:	9301      	str	r3, [sp, #4]
		status = sdhc_spi_rx_u8(data);
 80068e2:	4620      	mov	r0, r4
 80068e4:	f7ff ffb6 	bl	8006854 <sdhc_spi_rx_u8>
		if (status < 0) {
 80068e8:	2800      	cmp	r0, #0
 80068ea:	db07      	blt.n	80068fc <sdhc_spi_skip_until_ready+0x2c>
		if (status == 0) {
 80068ec:	d108      	bne.n	8006900 <sdhc_spi_skip_until_ready+0x30>
	} while (sdhc_retry_ok(&retry));
 80068ee:	4668      	mov	r0, sp
 80068f0:	f7ff ff94 	bl	800681c <sdhc_retry_ok>
 80068f4:	2800      	cmp	r0, #0
 80068f6:	d1f4      	bne.n	80068e2 <sdhc_spi_skip_until_ready+0x12>
	return -ETIMEDOUT;
 80068f8:	f06f 003b 	mvn.w	r0, #59	; 0x3b
}
 80068fc:	b002      	add	sp, #8
 80068fe:	bd10      	pop	{r4, pc}
		if (status == 0xFF) {
 8006900:	28ff      	cmp	r0, #255	; 0xff
 8006902:	d101      	bne.n	8006908 <sdhc_spi_skip_until_ready+0x38>
			return 0;
 8006904:	2000      	movs	r0, #0
 8006906:	e7f9      	b.n	80068fc <sdhc_spi_skip_until_ready+0x2c>
		status = sdhc_spi_rx_u8(data);
 8006908:	4620      	mov	r0, r4
 800690a:	f7ff ffa3 	bl	8006854 <sdhc_spi_rx_u8>
		if (status < 0) {
 800690e:	2800      	cmp	r0, #0
 8006910:	dbf4      	blt.n	80068fc <sdhc_spi_skip_until_ready+0x2c>
		if (status == 0xFF) {
 8006912:	28ff      	cmp	r0, #255	; 0xff
 8006914:	d0f6      	beq.n	8006904 <sdhc_spi_skip_until_ready+0x34>
		return -EPROTO;
 8006916:	f06f 004b 	mvn.w	r0, #75	; 0x4b
 800691a:	e7ef      	b.n	80068fc <sdhc_spi_skip_until_ready+0x2c>

0800691c <sdhc_spi_tx>:
{
 800691c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct spi_buf spi_bufs[] = {
 800691e:	e9cd 1200 	strd	r1, r2, [sp]
	return sdhc_spi_trace(data, 1,
 8006922:	4601      	mov	r1, r0
	const struct spi_buf_set tx = {
 8006924:	2301      	movs	r3, #1
	return sdhc_spi_trace(data, 1,
 8006926:	f851 0b04 	ldr.w	r0, [r1], #4
	const struct spi_buf_set tx = {
 800692a:	f8cd d008 	str.w	sp, [sp, #8]
 800692e:	9303      	str	r3, [sp, #12]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
 8006930:	6883      	ldr	r3, [r0, #8]
 8006932:	aa02      	add	r2, sp, #8
 8006934:	681c      	ldr	r4, [r3, #0]
 8006936:	2300      	movs	r3, #0
 8006938:	47a0      	blx	r4
}
 800693a:	b004      	add	sp, #16
 800693c:	bd10      	pop	{r4, pc}

0800693e <sdhc_spi_tx_cmd>:
{
 800693e:	b513      	push	{r0, r1, r4, lr}
	buf[0] = SDHC_TX | (cmd & ~SDHC_START);
 8006940:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8006944:	f88d 1000 	strb.w	r1, [sp]
	sys_put_be16(val >> 16, dst);
 8006948:	0c13      	lsrs	r3, r2, #16
	dst[0] = val >> 8;
 800694a:	0e11      	lsrs	r1, r2, #24
{
 800694c:	4604      	mov	r4, r0
 800694e:	f88d 1001 	strb.w	r1, [sp, #1]
	dst[1] = val;
 8006952:	f88d 3002 	strb.w	r3, [sp, #2]
 8006956:	f88d 2004 	strb.w	r2, [sp, #4]
	dst[0] = val >> 8;
 800695a:	f3c2 2307 	ubfx	r3, r2, #8, #8
	buf[SDHC_CMD_BODY_SIZE] = crc7_be(0, buf, SDHC_CMD_BODY_SIZE);
 800695e:	4669      	mov	r1, sp
 8006960:	2205      	movs	r2, #5
 8006962:	2000      	movs	r0, #0
 8006964:	f88d 3003 	strb.w	r3, [sp, #3]
 8006968:	f7ff fd12 	bl	8006390 <crc7_be>
	return sdhc_spi_tx(data, buf, sizeof(buf));
 800696c:	2206      	movs	r2, #6
	buf[SDHC_CMD_BODY_SIZE] = crc7_be(0, buf, SDHC_CMD_BODY_SIZE);
 800696e:	f88d 0005 	strb.w	r0, [sp, #5]
	return sdhc_spi_tx(data, buf, sizeof(buf));
 8006972:	4669      	mov	r1, sp
 8006974:	4620      	mov	r0, r4
 8006976:	f7ff ffd1 	bl	800691c <sdhc_spi_tx>
}
 800697a:	b002      	add	sp, #8
 800697c:	bd10      	pop	{r4, pc}

0800697e <sdhc_spi_recover>:
	return sdhc_spi_cmd_r1(data, SDHC_SEND_STATUS, 0);
 800697e:	2200      	movs	r2, #0
 8006980:	210d      	movs	r1, #13
 8006982:	f7fa be89 	b.w	8001698 <sdhc_spi_cmd_r1>

08006986 <sdhc_spi_read.part.0>:
static int sdhc_spi_read(struct sdhc_spi_data *data,
 8006986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006988:	461e      	mov	r6, r3
	if (data->high_capacity) {
 800698a:	7f03      	ldrb	r3, [r0, #28]
static int sdhc_spi_read(struct sdhc_spi_data *data,
 800698c:	4605      	mov	r5, r0
 800698e:	460f      	mov	r7, r1
	if (data->high_capacity) {
 8006990:	b903      	cbnz	r3, 8006994 <sdhc_spi_read.part.0+0xe>
		addr = sector * SDMMC_DEFAULT_BLOCK_SIZE;
 8006992:	0252      	lsls	r2, r2, #9
	err = sdhc_spi_cmd_r1(data, SDHC_READ_MULTIPLE_BLOCK, addr);
 8006994:	2112      	movs	r1, #18
 8006996:	4628      	mov	r0, r5
 8006998:	f7fa fe7e 	bl	8001698 <sdhc_spi_cmd_r1>
	if (err != 0) {
 800699c:	4604      	mov	r4, r0
 800699e:	b188      	cbz	r0, 80069c4 <sdhc_spi_read.part.0+0x3e>
	spi_release(data->spi, &data->cfg);
 80069a0:	6828      	ldr	r0, [r5, #0]
 80069a2:	1d29      	adds	r1, r5, #4
 80069a4:	f7ff ff0c 	bl	80067c0 <spi_release>
}
 80069a8:	4620      	mov	r0, r4
 80069aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = sdhc_spi_rx_block(data, buf, SDMMC_DEFAULT_BLOCK_SIZE);
 80069ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069b0:	4639      	mov	r1, r7
 80069b2:	4628      	mov	r0, r5
 80069b4:	f7fa fde2 	bl	800157c <sdhc_spi_rx_block>
		if (err != 0) {
 80069b8:	4604      	mov	r4, r0
 80069ba:	2800      	cmp	r0, #0
 80069bc:	d1f0      	bne.n	80069a0 <sdhc_spi_read.part.0+0x1a>
		buf += SDMMC_DEFAULT_BLOCK_SIZE;
 80069be:	f507 7700 	add.w	r7, r7, #512	; 0x200
	for (; count != 0U; count--) {
 80069c2:	3e01      	subs	r6, #1
 80069c4:	2e00      	cmp	r6, #0
 80069c6:	d1f1      	bne.n	80069ac <sdhc_spi_read.part.0+0x26>
	sdhc_spi_cmd_r1(data, SDHC_STOP_TRANSMISSION, 0);
 80069c8:	4632      	mov	r2, r6
 80069ca:	210c      	movs	r1, #12
 80069cc:	4628      	mov	r0, r5
 80069ce:	f7fa fe63 	bl	8001698 <sdhc_spi_cmd_r1>
	err = sdhc_spi_skip_until_ready(data);
 80069d2:	4628      	mov	r0, r5
 80069d4:	f7ff ff7c 	bl	80068d0 <sdhc_spi_skip_until_ready>
 80069d8:	4604      	mov	r4, r0
 80069da:	e7e1      	b.n	80069a0 <sdhc_spi_read.part.0+0x1a>

080069dc <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, arg);
 80069dc:	68c2      	ldr	r2, [r0, #12]
 80069de:	2101      	movs	r1, #1
 80069e0:	2000      	movs	r0, #0
 80069e2:	f7fb b94d 	b.w	8001c80 <__stm32_exti_isr.isra.0>

080069e6 <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, arg);
 80069e6:	68c2      	ldr	r2, [r0, #12]
 80069e8:	2102      	movs	r1, #2
 80069ea:	2001      	movs	r0, #1
 80069ec:	f7fb b948 	b.w	8001c80 <__stm32_exti_isr.isra.0>

080069f0 <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, arg);
 80069f0:	68c2      	ldr	r2, [r0, #12]
 80069f2:	2103      	movs	r1, #3
 80069f4:	2002      	movs	r0, #2
 80069f6:	f7fb b943 	b.w	8001c80 <__stm32_exti_isr.isra.0>

080069fa <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, arg);
 80069fa:	68c2      	ldr	r2, [r0, #12]
 80069fc:	2104      	movs	r1, #4
 80069fe:	2003      	movs	r0, #3
 8006a00:	f7fb b93e 	b.w	8001c80 <__stm32_exti_isr.isra.0>

08006a04 <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, arg);
 8006a04:	68c2      	ldr	r2, [r0, #12]
 8006a06:	2105      	movs	r1, #5
 8006a08:	2004      	movs	r0, #4
 8006a0a:	f7fb b939 	b.w	8001c80 <__stm32_exti_isr.isra.0>

08006a0e <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, arg);
 8006a0e:	68c2      	ldr	r2, [r0, #12]
 8006a10:	210a      	movs	r1, #10
 8006a12:	2005      	movs	r0, #5
 8006a14:	f7fb b934 	b.w	8001c80 <__stm32_exti_isr.isra.0>

08006a18 <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, arg);
 8006a18:	68c2      	ldr	r2, [r0, #12]
 8006a1a:	2110      	movs	r1, #16
 8006a1c:	200a      	movs	r0, #10
 8006a1e:	f7fb b92f 	b.w	8001c80 <__stm32_exti_isr.isra.0>

08006a22 <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32L5X) || \
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	IRQ_CONNECT(EXTI0_IRQn,
 8006a22:	2200      	movs	r2, #0
{
 8006a24:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 8006a26:	4611      	mov	r1, r2
 8006a28:	2006      	movs	r0, #6
 8006a2a:	f7fb fd6f 	bl	800250c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 8006a2e:	2200      	movs	r2, #0
 8006a30:	4611      	mov	r1, r2
 8006a32:	2007      	movs	r0, #7
 8006a34:	f7fb fd6a 	bl	800250c <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 8006a38:	2200      	movs	r2, #0
 8006a3a:	4611      	mov	r1, r2
 8006a3c:	2008      	movs	r0, #8
 8006a3e:	f7fb fd65 	bl	800250c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 8006a42:	2200      	movs	r2, #0
 8006a44:	4611      	mov	r1, r2
 8006a46:	2009      	movs	r0, #9
 8006a48:	f7fb fd60 	bl	800250c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	4611      	mov	r1, r2
 8006a50:	200a      	movs	r0, #10
 8006a52:	f7fb fd5b 	bl	800250c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI4_IRQ_PRI,
		__stm32_exti_isr_4, DEVICE_GET(exti_stm32),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 8006a56:	2200      	movs	r2, #0
 8006a58:	4611      	mov	r1, r2
 8006a5a:	2017      	movs	r0, #23
 8006a5c:	f7fb fd56 	bl	800250c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 8006a60:	2200      	movs	r2, #0
 8006a62:	4611      	mov	r1, r2
 8006a64:	2028      	movs	r0, #40	; 0x28
 8006a66:	f7fb fd51 	bl	800250c <z_arm_irq_priority_set>
}
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	bd08      	pop	{r3, pc}

08006a6e <config_pll_init>:
 * @brief fill in pll configuration structure
 */
void config_pll_init(LL_UTILS_PLLInitTypeDef *pllinit)
{
	pllinit->PLLM = pllm(CONFIG_CLOCK_STM32_PLL_M_DIVISOR);
	pllinit->PLLN = CONFIG_CLOCK_STM32_PLL_N_MULTIPLIER;
 8006a6e:	2314      	movs	r3, #20
 8006a70:	2200      	movs	r2, #0
 8006a72:	e9c0 2300 	strd	r2, r3, [r0]
	pllinit->PLLR = pllr(CONFIG_CLOCK_STM32_PLL_R_DIVISOR);
 8006a76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a7a:	6083      	str	r3, [r0, #8]
	/* set power boost mode for sys clock greater than 80MHz */
	if (sys_clock_hw_cycles_per_sec() >= MHZ(80)) {
		LL_PWR_EnableRange1BoostMode();
	}
#endif /* PWR_CR5_R1MODE */
}
 8006a7c:	4770      	bx	lr

08006a7e <config_enable_default_clocks>:
	LL_PWR_DisableBkUpAccess();

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

#endif
}
 8006a7e:	4770      	bx	lr

08006a80 <_flash_stm32_sem_take.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
 8006a80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a88:	300c      	adds	r0, #12
 8006a8a:	f7ff ba29 	b.w	8005ee0 <z_impl_k_sem_take>

08006a8e <flash_stm32_valid_range>:
{
 8006a8e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006a90:	4606      	mov	r6, r0
 8006a92:	460d      	mov	r5, r1
 8006a94:	4614      	mov	r4, r2
	return (!write || (offset % 8 == 0 && len % 8 == 0U)) &&
 8006a96:	b11b      	cbz	r3, 8006aa0 <flash_stm32_valid_range+0x12>
 8006a98:	ea41 0302 	orr.w	r3, r1, r2
 8006a9c:	075b      	lsls	r3, r3, #29
 8006a9e:	d110      	bne.n	8006ac2 <flash_stm32_valid_range+0x34>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
 8006aa0:	aa01      	add	r2, sp, #4
 8006aa2:	4629      	mov	r1, r5
 8006aa4:	4630      	mov	r0, r6
 8006aa6:	f000 fc85 	bl	80073b4 <z_impl_flash_get_page_info_by_offs>
					    off_t offset,
					    uint32_t len)
{
	struct flash_pages_info info;

	return !(flash_get_page_info_by_offs(dev, offset, &info) ||
 8006aaa:	b950      	cbnz	r0, 8006ac2 <flash_stm32_valid_range+0x34>
		 flash_get_page_info_by_offs(dev, offset + len - 1, &info));
 8006aac:	3c01      	subs	r4, #1
 8006aae:	aa01      	add	r2, sp, #4
 8006ab0:	1961      	adds	r1, r4, r5
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	f000 fc7e 	bl	80073b4 <z_impl_flash_get_page_info_by_offs>
	return !(flash_get_page_info_by_offs(dev, offset, &info) ||
 8006ab8:	fab0 f080 	clz	r0, r0
 8006abc:	0940      	lsrs	r0, r0, #5
}
 8006abe:	b004      	add	sp, #16
 8006ac0:	bd70      	pop	{r4, r5, r6, pc}
	return (!write || (offset % 8 == 0 && len % 8 == 0U)) &&
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	e7fb      	b.n	8006abe <flash_stm32_valid_range+0x30>

08006ac6 <flash_stm32_block_erase_loop>:
{
 8006ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (; i <= get_page(offset + len - 1) ; ++i) {
 8006ac8:	1e55      	subs	r5, r2, #1
 8006aca:	440d      	add	r5, r1
{
 8006acc:	4607      	mov	r7, r0
	return offset >> STM32L4X_PAGE_SHIFT;
 8006ace:	12ce      	asrs	r6, r1, #11
 8006ad0:	12ed      	asrs	r5, r5, #11
	int i, rc = 0;
 8006ad2:	2000      	movs	r0, #0
	for (; i <= get_page(offset + len - 1) ; ++i) {
 8006ad4:	42ae      	cmp	r6, r5
 8006ad6:	d900      	bls.n	8006ada <flash_stm32_block_erase_loop+0x14>
}
 8006ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FLASH_TypeDef *regs = FLASH_STM32_REGS(dev);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681c      	ldr	r4, [r3, #0]
	if ((regs->OPTR & FLASH_OPTR_DUALBANK) ||
 8006ade:	6a23      	ldr	r3, [r4, #32]
	if (regs->CR & FLASH_CR_LOCK) {
 8006ae0:	6963      	ldr	r3, [r4, #20]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	db2c      	blt.n	8006b40 <flash_stm32_block_erase_loop+0x7a>
	rc = flash_stm32_wait_flash_idle(dev);
 8006ae6:	4638      	mov	r0, r7
 8006ae8:	f7fb fb0e 	bl	8002108 <flash_stm32_wait_flash_idle>
	if (rc < 0) {
 8006aec:	2800      	cmp	r0, #0
 8006aee:	dbf3      	blt.n	8006ad8 <flash_stm32_block_erase_loop+0x12>
	regs->CR |= FLASH_CR_PER;
 8006af0:	6963      	ldr	r3, [r4, #20]
 8006af2:	f043 0302 	orr.w	r3, r3, #2
 8006af6:	6163      	str	r3, [r4, #20]
	regs->CR &= ~FLASH_CR_BKER_Msk;
 8006af8:	6963      	ldr	r3, [r4, #20]
 8006afa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006afe:	6163      	str	r3, [r4, #20]
	if (page >= pages_per_bank)
 8006b00:	2eff      	cmp	r6, #255	; 0xff
		regs->CR |= FLASH_CR_BKER;
 8006b02:	bf82      	ittt	hi
 8006b04:	6963      	ldrhi	r3, [r4, #20]
 8006b06:	f443 6300 	orrhi.w	r3, r3, #2048	; 0x800
 8006b0a:	6163      	strhi	r3, [r4, #20]
	regs->CR &= ~FLASH_CR_PNB_Msk;
 8006b0c:	6963      	ldr	r3, [r4, #20]
 8006b0e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006b12:	6163      	str	r3, [r4, #20]
	regs->CR |= ((page % pages_per_bank) << 3);
 8006b14:	6962      	ldr	r2, [r4, #20]
 8006b16:	00f3      	lsls	r3, r6, #3
 8006b18:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	6163      	str	r3, [r4, #20]
	regs->CR |= FLASH_CR_STRT;
 8006b20:	6963      	ldr	r3, [r4, #20]
 8006b22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b26:	6163      	str	r3, [r4, #20]
	rc = flash_stm32_wait_flash_idle(dev);
 8006b28:	4638      	mov	r0, r7
	tmp = regs->CR;
 8006b2a:	6963      	ldr	r3, [r4, #20]
	rc = flash_stm32_wait_flash_idle(dev);
 8006b2c:	f7fb faec 	bl	8002108 <flash_stm32_wait_flash_idle>
	regs->CR &= ~FLASH_CR_PER;
 8006b30:	6963      	ldr	r3, [r4, #20]
		if (rc < 0) {
 8006b32:	2800      	cmp	r0, #0
	regs->CR &= ~FLASH_CR_PER;
 8006b34:	f023 0302 	bic.w	r3, r3, #2
 8006b38:	6163      	str	r3, [r4, #20]
		if (rc < 0) {
 8006b3a:	dbcd      	blt.n	8006ad8 <flash_stm32_block_erase_loop+0x12>
	for (; i <= get_page(offset + len - 1) ; ++i) {
 8006b3c:	3601      	adds	r6, #1
 8006b3e:	e7c9      	b.n	8006ad4 <flash_stm32_block_erase_loop+0xe>
		return -EIO;
 8006b40:	f06f 0004 	mvn.w	r0, #4
	return rc;
 8006b44:	e7c8      	b.n	8006ad8 <flash_stm32_block_erase_loop+0x12>

08006b46 <flash_stm32_write_range>:
{
 8006b46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b4a:	4606      	mov	r6, r0
	int i, rc = 0;
 8006b4c:	2000      	movs	r0, #0
{
 8006b4e:	4617      	mov	r7, r2
 8006b50:	4699      	mov	r9, r3
	for (i = 0; i < len; i += 8, offset += 8U) {
 8006b52:	4682      	mov	sl, r0
 8006b54:	f101 6800 	add.w	r8, r1, #134217728	; 0x8000000
 8006b58:	45d1      	cmp	r9, sl
 8006b5a:	d90c      	bls.n	8006b76 <flash_stm32_write_range+0x30>
				UNALIGNED_GET((const uint64_t *) data + (i >> 3)));
 8006b5c:	f02a 0307 	bic.w	r3, sl, #7
 8006b60:	18fa      	adds	r2, r7, r3
 8006b62:	58fb      	ldr	r3, [r7, r3]
 8006b64:	f8d2 b004 	ldr.w	fp, [r2, #4]
	FLASH_TypeDef *regs = FLASH_STM32_REGS(dev);
 8006b68:	68f2      	ldr	r2, [r6, #12]
 8006b6a:	6814      	ldr	r4, [r2, #0]
	if (regs->CR & FLASH_CR_LOCK) {
 8006b6c:	6962      	ldr	r2, [r4, #20]
 8006b6e:	2a00      	cmp	r2, #0
 8006b70:	da04      	bge.n	8006b7c <flash_stm32_write_range+0x36>
		return -EIO;
 8006b72:	f06f 0004 	mvn.w	r0, #4
}
 8006b76:	b003      	add	sp, #12
 8006b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rc = flash_stm32_wait_flash_idle(dev);
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	9301      	str	r3, [sp, #4]
 8006b80:	f7fb fac2 	bl	8002108 <flash_stm32_wait_flash_idle>
	if (rc < 0) {
 8006b84:	2800      	cmp	r0, #0
 8006b86:	dbf6      	blt.n	8006b76 <flash_stm32_write_range+0x30>
	if (flash[0] != 0xFFFFFFFFUL ||
 8006b88:	f858 100a 	ldr.w	r1, [r8, sl]
 8006b8c:	3101      	adds	r1, #1
 8006b8e:	eb08 020a 	add.w	r2, r8, sl
 8006b92:	d1ee      	bne.n	8006b72 <flash_stm32_write_range+0x2c>
	    flash[1] != 0xFFFFFFFFUL) {
 8006b94:	6851      	ldr	r1, [r2, #4]
	if (flash[0] != 0xFFFFFFFFUL ||
 8006b96:	3101      	adds	r1, #1
 8006b98:	d1eb      	bne.n	8006b72 <flash_stm32_write_range+0x2c>
	if (regs->ACR & FLASH_ACR_DCEN) {
 8006b9a:	6825      	ldr	r5, [r4, #0]
 8006b9c:	9b01      	ldr	r3, [sp, #4]
 8006b9e:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
		regs->ACR &= (~FLASH_ACR_DCEN);
 8006ba2:	bf1e      	ittt	ne
 8006ba4:	6821      	ldrne	r1, [r4, #0]
 8006ba6:	f421 6180 	bicne.w	r1, r1, #1024	; 0x400
 8006baa:	6021      	strne	r1, [r4, #0]
	regs->CR |= FLASH_CR_PG;
 8006bac:	6961      	ldr	r1, [r4, #20]
 8006bae:	f041 0101 	orr.w	r1, r1, #1
 8006bb2:	6161      	str	r1, [r4, #20]
	tmp = regs->CR;
 8006bb4:	6961      	ldr	r1, [r4, #20]
	flash[0] = (uint32_t)val;
 8006bb6:	6013      	str	r3, [r2, #0]
	rc = flash_stm32_wait_flash_idle(dev);
 8006bb8:	4630      	mov	r0, r6
	flash[1] = (uint32_t)(val >> 32);
 8006bba:	f8c2 b004 	str.w	fp, [r2, #4]
		dcache_enabled = true;
 8006bbe:	bf18      	it	ne
 8006bc0:	2501      	movne	r5, #1
	rc = flash_stm32_wait_flash_idle(dev);
 8006bc2:	f7fb faa1 	bl	8002108 <flash_stm32_wait_flash_idle>
	regs->CR &= (~FLASH_CR_PG);
 8006bc6:	6963      	ldr	r3, [r4, #20]
 8006bc8:	f023 0301 	bic.w	r3, r3, #1
 8006bcc:	6163      	str	r3, [r4, #20]
	if (dcache_enabled) {
 8006bce:	b15d      	cbz	r5, 8006be8 <flash_stm32_write_range+0xa2>
		regs->ACR |= FLASH_ACR_DCRST;
 8006bd0:	6823      	ldr	r3, [r4, #0]
 8006bd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006bd6:	6023      	str	r3, [r4, #0]
		regs->ACR &= (~FLASH_ACR_DCRST);
 8006bd8:	6823      	ldr	r3, [r4, #0]
 8006bda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bde:	6023      	str	r3, [r4, #0]
		regs->ACR |= FLASH_ACR_DCEN;
 8006be0:	6823      	ldr	r3, [r4, #0]
 8006be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006be6:	6023      	str	r3, [r4, #0]
		if (rc < 0) {
 8006be8:	2800      	cmp	r0, #0
 8006bea:	dbc4      	blt.n	8006b76 <flash_stm32_write_range+0x30>
	for (i = 0; i < len; i += 8, offset += 8U) {
 8006bec:	f10a 0a08 	add.w	sl, sl, #8
 8006bf0:	e7b2      	b.n	8006b58 <flash_stm32_write_range+0x12>

08006bf2 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	2001      	movs	r0, #1
 8006bf6:	f7fb bd05 	b.w	8002604 <z_arm_fatal_error>

08006bfa <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 8006bfa:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 8006bfc:	6800      	ldr	r0, [r0, #0]
 8006bfe:	f7fb bd01 	b.w	8002604 <z_arm_fatal_error>

08006c02 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 8006c02:	b508      	push	{r3, lr}
	handler();
 8006c04:	f7fb fd36 	bl	8002674 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 8006c08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8006c0c:	f7fb bfa8 	b.w	8002b60 <z_arm_exc_exit>

08006c10 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
 8006c10:	3901      	subs	r1, #1
 8006c12:	4603      	mov	r3, r0
 8006c14:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006c18:	b90a      	cbnz	r2, 8006c1e <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
 8006c1a:	701a      	strb	r2, [r3, #0]

	return dest;
}
 8006c1c:	4770      	bx	lr
		*d = *s;
 8006c1e:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
 8006c22:	e7f7      	b.n	8006c14 <strcpy+0x4>

08006c24 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
 8006c24:	b570      	push	{r4, r5, r6, lr}
 8006c26:	3901      	subs	r1, #1
 8006c28:	4605      	mov	r5, r0
 8006c2a:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
 8006c2c:	b142      	cbz	r2, 8006c40 <strncpy+0x1c>
 8006c2e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006c32:	1e56      	subs	r6, r2, #1
 8006c34:	b92b      	cbnz	r3, 8006c42 <strncpy+0x1e>
 8006c36:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
 8006c38:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
 8006c3c:	42a2      	cmp	r2, r4
 8006c3e:	d1fb      	bne.n	8006c38 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
 8006c40:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
 8006c42:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
 8006c46:	4632      	mov	r2, r6
 8006c48:	e7ef      	b.n	8006c2a <strncpy+0x6>

08006c4a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 8006c4a:	4603      	mov	r3, r0
	size_t n = 0;
 8006c4c:	2000      	movs	r0, #0

	while (*s != '\0') {
 8006c4e:	5c1a      	ldrb	r2, [r3, r0]
 8006c50:	b902      	cbnz	r2, 8006c54 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 8006c52:	4770      	bx	lr
		n++;
 8006c54:	3001      	adds	r0, #1
 8006c56:	e7fa      	b.n	8006c4e <strlen+0x4>

08006c58 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
 8006c58:	1e43      	subs	r3, r0, #1
 8006c5a:	3901      	subs	r1, #1
 8006c5c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8006c60:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006c64:	4282      	cmp	r2, r0
 8006c66:	d101      	bne.n	8006c6c <strcmp+0x14>
 8006c68:	2a00      	cmp	r2, #0
 8006c6a:	d1f7      	bne.n	8006c5c <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
 8006c6c:	1a10      	subs	r0, r2, r0
 8006c6e:	4770      	bx	lr

08006c70 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
 8006c70:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
 8006c72:	2400      	movs	r4, #0
 8006c74:	42a2      	cmp	r2, r4
 8006c76:	d008      	beq.n	8006c8a <strncmp+0x1a>
 8006c78:	5d03      	ldrb	r3, [r0, r4]
 8006c7a:	5d0d      	ldrb	r5, [r1, r4]
 8006c7c:	42ab      	cmp	r3, r5
 8006c7e:	d102      	bne.n	8006c86 <strncmp+0x16>
 8006c80:	3401      	adds	r4, #1
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1f6      	bne.n	8006c74 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
 8006c86:	1b58      	subs	r0, r3, r5
 8006c88:	e000      	b.n	8006c8c <strncmp+0x1c>
 8006c8a:	2000      	movs	r0, #0
}
 8006c8c:	bd30      	pop	{r4, r5, pc}

08006c8e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
 8006c8e:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
 8006c90:	ea81 0400 	eor.w	r4, r1, r0
 8006c94:	07a5      	lsls	r5, r4, #30
 8006c96:	4603      	mov	r3, r0
 8006c98:	d00b      	beq.n	8006cb2 <memcpy+0x24>
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
 8006c9e:	4291      	cmp	r1, r2
 8006ca0:	d11b      	bne.n	8006cda <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 8006ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
 8006ca4:	2a00      	cmp	r2, #0
 8006ca6:	d0fc      	beq.n	8006ca2 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
 8006ca8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cac:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
 8006cb0:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
 8006cb2:	079c      	lsls	r4, r3, #30
 8006cb4:	d1f6      	bne.n	8006ca4 <memcpy+0x16>
 8006cb6:	f022 0403 	bic.w	r4, r2, #3
 8006cba:	1f1d      	subs	r5, r3, #4
 8006cbc:	0896      	lsrs	r6, r2, #2
 8006cbe:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
 8006cc0:	42b9      	cmp	r1, r7
 8006cc2:	d105      	bne.n	8006cd0 <memcpy+0x42>
 8006cc4:	f06f 0503 	mvn.w	r5, #3
 8006cc8:	fb05 2206 	mla	r2, r5, r6, r2
 8006ccc:	4423      	add	r3, r4
 8006cce:	e7e4      	b.n	8006c9a <memcpy+0xc>
			*(d_word++) = *(s_word++);
 8006cd0:	f851 cb04 	ldr.w	ip, [r1], #4
 8006cd4:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
 8006cd8:	e7f2      	b.n	8006cc0 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
 8006cda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cde:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 8006ce2:	e7dc      	b.n	8006c9e <memcpy+0x10>

08006ce4 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
 8006ce4:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 8006ce6:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
 8006ce8:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
 8006cea:	079c      	lsls	r4, r3, #30
 8006cec:	d111      	bne.n	8006d12 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
 8006cee:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
 8006cf2:	f022 0603 	bic.w	r6, r2, #3
 8006cf6:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
 8006cfa:	441e      	add	r6, r3
 8006cfc:	0894      	lsrs	r4, r2, #2
 8006cfe:	42b3      	cmp	r3, r6
 8006d00:	d10d      	bne.n	8006d1e <memset+0x3a>
 8006d02:	f06f 0503 	mvn.w	r5, #3
 8006d06:	fb05 2204 	mla	r2, r5, r4, r2
 8006d0a:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d109      	bne.n	8006d24 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 8006d10:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
 8006d12:	2a00      	cmp	r2, #0
 8006d14:	d0fc      	beq.n	8006d10 <memset+0x2c>
		*(d_byte++) = c_byte;
 8006d16:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8006d1a:	3a01      	subs	r2, #1
 8006d1c:	e7e5      	b.n	8006cea <memset+0x6>
		*(d_word++) = c_word;
 8006d1e:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
 8006d22:	e7ec      	b.n	8006cfe <memset+0x1a>
		*(d_byte++) = c_byte;
 8006d24:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8006d28:	e7f0      	b.n	8006d0c <memset+0x28>

08006d2a <_stdout_hook_default>:
}
 8006d2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d2e:	4770      	bx	lr

08006d30 <fatfs_tell>:
	return f_tell((FIL *)zfp->filep);
 8006d30:	6803      	ldr	r3, [r0, #0]
}
 8006d32:	6958      	ldr	r0, [r3, #20]
 8006d34:	4770      	bx	lr

08006d36 <fatfs_statvfs>:
{
 8006d36:	b513      	push	{r0, r1, r4, lr}
	res = f_getfree(&mountp->mnt_point[1], &stat->f_bfree, &fs);
 8006d38:	68c0      	ldr	r0, [r0, #12]
{
 8006d3a:	4614      	mov	r4, r2
	res = f_getfree(&mountp->mnt_point[1], &stat->f_bfree, &fs);
 8006d3c:	f104 010c 	add.w	r1, r4, #12
 8006d40:	aa01      	add	r2, sp, #4
 8006d42:	3001      	adds	r0, #1
 8006d44:	f001 fa97 	bl	8008276 <f_getfree>
	if (res != FR_OK) {
 8006d48:	b958      	cbnz	r0, 8006d62 <fatfs_statvfs+0x2c>
	stat->f_frsize = fs->csize * stat->f_bsize;
 8006d4a:	9a01      	ldr	r2, [sp, #4]
	stat->f_bsize = _MIN_SS;
 8006d4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d50:	6023      	str	r3, [r4, #0]
	stat->f_frsize = fs->csize * stat->f_bsize;
 8006d52:	8953      	ldrh	r3, [r2, #10]
 8006d54:	025b      	lsls	r3, r3, #9
 8006d56:	6063      	str	r3, [r4, #4]
	stat->f_blocks = (fs->n_fatent - 2);
 8006d58:	6953      	ldr	r3, [r2, #20]
 8006d5a:	3b02      	subs	r3, #2
 8006d5c:	60a3      	str	r3, [r4, #8]
}
 8006d5e:	b002      	add	sp, #8
 8006d60:	bd10      	pop	{r4, pc}
		return -EIO;
 8006d62:	f06f 0004 	mvn.w	r0, #4
 8006d66:	e7fa      	b.n	8006d5e <fatfs_statvfs+0x28>

08006d68 <gpio_stm32_isr>:
{
 8006d68:	460b      	mov	r3, r1
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8006d6a:	6889      	ldr	r1, [r1, #8]
 8006d6c:	b570      	push	{r4, r5, r6, lr}
 8006d6e:	b1a9      	cbz	r1, 8006d9c <gpio_stm32_isr+0x34>
 8006d70:	680c      	ldr	r4, [r1, #0]
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8006d72:	685e      	ldr	r6, [r3, #4]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
 8006d74:	2c00      	cmp	r4, #0
 8006d76:	f04f 0501 	mov.w	r5, #1
 8006d7a:	bf38      	it	cc
 8006d7c:	2400      	movcc	r4, #0
 8006d7e:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 8006d80:	688a      	ldr	r2, [r1, #8]
 8006d82:	402a      	ands	r2, r5
 8006d84:	d002      	beq.n	8006d8c <gpio_stm32_isr+0x24>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8006d86:	684b      	ldr	r3, [r1, #4]
 8006d88:	4630      	mov	r0, r6
 8006d8a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8006d8c:	b134      	cbz	r4, 8006d9c <gpio_stm32_isr+0x34>
 8006d8e:	6823      	ldr	r3, [r4, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	bf38      	it	cc
 8006d94:	2300      	movcc	r3, #0
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8006d96:	4621      	mov	r1, r4
 8006d98:	461c      	mov	r4, r3
 8006d9a:	e7f1      	b.n	8006d80 <gpio_stm32_isr+0x18>
}
 8006d9c:	bd70      	pop	{r4, r5, r6, pc}

08006d9e <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8006d9e:	6843      	ldr	r3, [r0, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8006da2:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8006da4:	600b      	str	r3, [r1, #0]
}
 8006da6:	2000      	movs	r0, #0
 8006da8:	4770      	bx	lr

08006daa <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8006daa:	6843      	ldr	r3, [r0, #4]
 8006dac:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8006dae:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8006db0:	4042      	eors	r2, r0
 8006db2:	400a      	ands	r2, r1
 8006db4:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 8006db6:	615a      	str	r2, [r3, #20]
}
 8006db8:	2000      	movs	r0, #0
 8006dba:	4770      	bx	lr

08006dbc <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8006dbc:	6843      	ldr	r3, [r0, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
}
 8006dc0:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 8006dc2:	6199      	str	r1, [r3, #24]
}
 8006dc4:	4770      	bx	lr

08006dc6 <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8006dc6:	6843      	ldr	r3, [r0, #4]
 8006dc8:	685b      	ldr	r3, [r3, #4]
}
 8006dca:	2000      	movs	r0, #0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8006dcc:	6299      	str	r1, [r3, #40]	; 0x28
 8006dce:	4770      	bx	lr

08006dd0 <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8006dd0:	6843      	ldr	r3, [r0, #4]
 8006dd2:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8006dd4:	6953      	ldr	r3, [r2, #20]
 8006dd6:	404b      	eors	r3, r1
 8006dd8:	6153      	str	r3, [r2, #20]
}
 8006dda:	2000      	movs	r0, #0
 8006ddc:	4770      	bx	lr

08006dde <gpio_stm32_manage_callback>:
	struct gpio_stm32_data *data = dev->data;
 8006dde:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
 8006de0:	6898      	ldr	r0, [r3, #8]
{
 8006de2:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
 8006de4:	b158      	cbz	r0, 8006dfe <gpio_stm32_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8006de6:	2400      	movs	r4, #0
 8006de8:	4281      	cmp	r1, r0
 8006dea:	d113      	bne.n	8006e14 <gpio_stm32_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
 8006dec:	6808      	ldr	r0, [r1, #0]
 8006dee:	b95c      	cbnz	r4, 8006e08 <gpio_stm32_manage_callback+0x2a>
 8006df0:	68dc      	ldr	r4, [r3, #12]
	list->head = node;
 8006df2:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 8006df4:	42a1      	cmp	r1, r4
 8006df6:	d100      	bne.n	8006dfa <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 8006df8:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	6008      	str	r0, [r1, #0]
	if (set) {
 8006dfe:	b972      	cbnz	r2, 8006e1e <gpio_stm32_manage_callback+0x40>
	return 0;
 8006e00:	2000      	movs	r0, #0
}
 8006e02:	bd30      	pop	{r4, r5, pc}
 8006e04:	4628      	mov	r0, r5
 8006e06:	e7ef      	b.n	8006de8 <gpio_stm32_manage_callback+0xa>
 8006e08:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 8006e0a:	68d8      	ldr	r0, [r3, #12]
 8006e0c:	4281      	cmp	r1, r0
	list->tail = node;
 8006e0e:	bf08      	it	eq
 8006e10:	60dc      	streq	r4, [r3, #12]
}
 8006e12:	e7f2      	b.n	8006dfa <gpio_stm32_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8006e14:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8006e16:	4604      	mov	r4, r0
 8006e18:	2d00      	cmp	r5, #0
 8006e1a:	d1f3      	bne.n	8006e04 <gpio_stm32_manage_callback+0x26>
			if (!set) {
 8006e1c:	b13a      	cbz	r2, 8006e2e <gpio_stm32_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
 8006e1e:	689a      	ldr	r2, [r3, #8]
	parent->next = child;
 8006e20:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 8006e22:	68d8      	ldr	r0, [r3, #12]
	list->head = node;
 8006e24:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 8006e26:	2800      	cmp	r0, #0
 8006e28:	d1ea      	bne.n	8006e00 <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 8006e2a:	60d9      	str	r1, [r3, #12]
}
 8006e2c:	e7e9      	b.n	8006e02 <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 8006e2e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 8006e32:	e7e6      	b.n	8006e02 <gpio_stm32_manage_callback+0x24>

08006e34 <gpio_stm32_configure>:
{
 8006e34:	b5f0      	push	{r4, r5, r6, r7, lr}
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8006e36:	f002 0530 	and.w	r5, r2, #48	; 0x30
	if (mode == STM32_MODER_ANALOG_MODE) {
 8006e3a:	2d30      	cmp	r5, #48	; 0x30
  SET_BIT(GPIOx->ASCR, PinMask);
 8006e3c:	bf08      	it	eq
 8006e3e:	6ac6      	ldreq	r6, [r0, #44]	; 0x2c
	pinval = 1 << pin;
 8006e40:	f04f 0401 	mov.w	r4, #1
 8006e44:	fa04 f401 	lsl.w	r4, r4, r1
 8006e48:	bf04      	itt	eq
 8006e4a:	4326      	orreq	r6, r4
 8006e4c:	62c6      	streq	r6, [r0, #44]	; 0x2c
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006e4e:	6847      	ldr	r7, [r0, #4]
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8006e50:	f3c2 1680 	ubfx	r6, r2, #6, #1
 8006e54:	ea27 0704 	bic.w	r7, r7, r4
 8006e58:	408e      	lsls	r6, r1
 8006e5a:	433e      	orrs	r6, r7
 8006e5c:	6046      	str	r6, [r0, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e5e:	fa94 f7a4 	rbit	r7, r4
  return __builtin_clz(value);
 8006e62:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8006e66:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8006e6a:	f04f 0e03 	mov.w	lr, #3
 8006e6e:	007f      	lsls	r7, r7, #1
 8006e70:	fa0e f707 	lsl.w	r7, lr, r7
 8006e74:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e78:	fa94 f7a4 	rbit	r7, r4
  return __builtin_clz(value);
 8006e7c:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8006e80:	f3c2 16c1 	ubfx	r6, r2, #7, #2
 8006e84:	007f      	lsls	r7, r7, #1
 8006e86:	40be      	lsls	r6, r7
 8006e88:	ea46 060c 	orr.w	r6, r6, ip
 8006e8c:	6086      	str	r6, [r0, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e8e:	fa94 f6a4 	rbit	r6, r4
  return __builtin_clz(value);
 8006e92:	fab6 f686 	clz	r6, r6
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006e96:	68c7      	ldr	r7, [r0, #12]
 8006e98:	0076      	lsls	r6, r6, #1
 8006e9a:	fa0e f606 	lsl.w	r6, lr, r6
 8006e9e:	ea27 0706 	bic.w	r7, r7, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ea2:	fa94 f6a4 	rbit	r6, r4
  return __builtin_clz(value);
 8006ea6:	fab6 f686 	clz	r6, r6
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8006eaa:	f3c2 2241 	ubfx	r2, r2, #9, #2
 8006eae:	0076      	lsls	r6, r6, #1
 8006eb0:	40b2      	lsls	r2, r6
 8006eb2:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 8006eb4:	2d20      	cmp	r5, #32
 8006eb6:	60c2      	str	r2, [r0, #12]
 8006eb8:	d115      	bne.n	8006ee6 <gpio_stm32_configure+0xb2>
		if (pin < 8) {
 8006eba:	2907      	cmp	r1, #7
 8006ebc:	dc2c      	bgt.n	8006f18 <gpio_stm32_configure+0xe4>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ebe:	fa94 f2a4 	rbit	r2, r4
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006ec2:	6a01      	ldr	r1, [r0, #32]
  if (value == 0U)
 8006ec4:	b332      	cbz	r2, 8006f14 <gpio_stm32_configure+0xe0>
  return __builtin_clz(value);
 8006ec6:	fab2 f282 	clz	r2, r2
 8006eca:	0092      	lsls	r2, r2, #2
 8006ecc:	260f      	movs	r6, #15
 8006ece:	fa06 f202 	lsl.w	r2, r6, r2
 8006ed2:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ed6:	fa94 f2a4 	rbit	r2, r4
  return __builtin_clz(value);
 8006eda:	fab2 f282 	clz	r2, r2
 8006ede:	0092      	lsls	r2, r2, #2
 8006ee0:	4093      	lsls	r3, r2
 8006ee2:	430b      	orrs	r3, r1
 8006ee4:	6203      	str	r3, [r0, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ee6:	fa94 f3a4 	rbit	r3, r4
  return __builtin_clz(value);
 8006eea:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006eee:	6802      	ldr	r2, [r0, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ef0:	fa94 f4a4 	rbit	r4, r4
 8006ef4:	2103      	movs	r1, #3
 8006ef6:	005b      	lsls	r3, r3, #1
  return __builtin_clz(value);
 8006ef8:	fab4 f484 	clz	r4, r4
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8006efc:	092d      	lsrs	r5, r5, #4
 8006efe:	fa01 f303 	lsl.w	r3, r1, r3
 8006f02:	0064      	lsls	r4, r4, #1
 8006f04:	ea22 0303 	bic.w	r3, r2, r3
 8006f08:	fa05 f404 	lsl.w	r4, r5, r4
 8006f0c:	431c      	orrs	r4, r3
 8006f0e:	6004      	str	r4, [r0, #0]
}
 8006f10:	2000      	movs	r0, #0
 8006f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 8006f14:	462a      	mov	r2, r5
 8006f16:	e7d8      	b.n	8006eca <gpio_stm32_configure+0x96>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006f18:	0a22      	lsrs	r2, r4, #8
 8006f1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f1c:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 8006f20:	b181      	cbz	r1, 8006f44 <gpio_stm32_configure+0x110>
  return __builtin_clz(value);
 8006f22:	fab1 f181 	clz	r1, r1
 8006f26:	0089      	lsls	r1, r1, #2
 8006f28:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f2a:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8006f2e:	fab2 f282 	clz	r2, r2
 8006f32:	fa07 f101 	lsl.w	r1, r7, r1
 8006f36:	0092      	lsls	r2, r2, #2
 8006f38:	ea26 0101 	bic.w	r1, r6, r1
 8006f3c:	4093      	lsls	r3, r2
 8006f3e:	430b      	orrs	r3, r1
 8006f40:	6243      	str	r3, [r0, #36]	; 0x24
}
 8006f42:	e7d0      	b.n	8006ee6 <gpio_stm32_configure+0xb2>
    return 32U;
 8006f44:	4629      	mov	r1, r5
 8006f46:	e7ee      	b.n	8006f26 <gpio_stm32_configure+0xf2>

08006f48 <gpio_stm32_config>:
{
 8006f48:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 8006f4a:	059a      	lsls	r2, r3, #22
{
 8006f4c:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 8006f4e:	6840      	ldr	r0, [r0, #4]
	if ((flags & GPIO_OUTPUT) != 0) {
 8006f50:	d519      	bpl.n	8006f86 <gpio_stm32_config+0x3e>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8006f52:	079c      	lsls	r4, r3, #30
 8006f54:	d510      	bpl.n	8006f78 <gpio_stm32_config+0x30>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 8006f56:	075a      	lsls	r2, r3, #29
 8006f58:	d52d      	bpl.n	8006fb6 <gpio_stm32_config+0x6e>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 8006f5a:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 8006f5c:	06dc      	lsls	r4, r3, #27
 8006f5e:	d50d      	bpl.n	8006f7c <gpio_stm32_config+0x34>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8006f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8006f64:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006f68:	6844      	ldr	r4, [r0, #4]
 8006f6a:	d11b      	bne.n	8006fa4 <gpio_stm32_config+0x5c>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8006f6c:	055b      	lsls	r3, r3, #21
 8006f6e:	d513      	bpl.n	8006f98 <gpio_stm32_config+0x50>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8006f70:	2301      	movs	r3, #1
 8006f72:	408b      	lsls	r3, r1
  WRITE_REG(GPIOx->BRR, PinMask);
 8006f74:	62a3      	str	r3, [r4, #40]	; 0x28
	return 0;
 8006f76:	e00f      	b.n	8006f98 <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8006f78:	2210      	movs	r2, #16
 8006f7a:	e7ef      	b.n	8006f5c <gpio_stm32_config+0x14>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8006f7c:	069c      	lsls	r4, r3, #26
 8006f7e:	d5f1      	bpl.n	8006f64 <gpio_stm32_config+0x1c>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8006f80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 8006f84:	e7ee      	b.n	8006f64 <gpio_stm32_config+0x1c>
	} else if  ((flags & GPIO_INPUT) != 0) {
 8006f86:	05dc      	lsls	r4, r3, #23
 8006f88:	d510      	bpl.n	8006fac <gpio_stm32_config+0x64>
		if ((flags & GPIO_PULL_UP) != 0) {
 8006f8a:	06da      	lsls	r2, r3, #27
 8006f8c:	d410      	bmi.n	8006fb0 <gpio_stm32_config+0x68>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8006f8e:	f013 0220 	ands.w	r2, r3, #32
 8006f92:	bf18      	it	ne
 8006f94:	f44f 6280 	movne.w	r2, #1024	; 0x400
	gpio_stm32_configure(cfg->base, pin, pincfg, 0);
 8006f98:	6840      	ldr	r0, [r0, #4]
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	f7ff ff4a 	bl	8006e34 <gpio_stm32_configure>
 8006fa0:	2000      	movs	r0, #0
}
 8006fa2:	bd10      	pop	{r4, pc}
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	408b      	lsls	r3, r1
	WRITE_REG(gpio->BSRR, pins);
 8006fa8:	61a3      	str	r3, [r4, #24]
	return 0;
 8006faa:	e7f5      	b.n	8006f98 <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8006fac:	2230      	movs	r2, #48	; 0x30
 8006fae:	e7f3      	b.n	8006f98 <gpio_stm32_config+0x50>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8006fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fb4:	e7f0      	b.n	8006f98 <gpio_stm32_config+0x50>
				return -ENOTSUP;
 8006fb6:	f06f 0022 	mvn.w	r0, #34	; 0x22
	return err;
 8006fba:	e7f2      	b.n	8006fa2 <gpio_stm32_config+0x5a>

08006fbc <LL_TIM_OC_SetCompareCH1>:
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006fbc:	6341      	str	r1, [r0, #52]	; 0x34
}
 8006fbe:	4770      	bx	lr

08006fc0 <LL_TIM_OC_SetCompareCH2>:
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006fc0:	6381      	str	r1, [r0, #56]	; 0x38
}
 8006fc2:	4770      	bx	lr

08006fc4 <LL_TIM_OC_SetCompareCH3>:
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006fc4:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 8006fc6:	4770      	bx	lr

08006fc8 <LL_TIM_OC_SetCompareCH4>:
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006fc8:	6401      	str	r1, [r0, #64]	; 0x40
}
 8006fca:	4770      	bx	lr

08006fcc <LL_TIM_OC_SetCompareCH5>:
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8006fcc:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006fce:	6581      	str	r1, [r0, #88]	; 0x58
}
 8006fd0:	4770      	bx	lr

08006fd2 <LL_TIM_OC_SetCompareCH6>:
  WRITE_REG(TIMx->CCR6, CompareValue);
 8006fd2:	65c1      	str	r1, [r0, #92]	; 0x5c
}
 8006fd4:	4770      	bx	lr

08006fd6 <pwm_stm32_get_cycles_per_sec>:
{
 8006fd6:	b510      	push	{r4, lr}
	*cycles = (uint64_t)(data->tim_clk / (cfg->prescaler + 1));
 8006fd8:	6843      	ldr	r3, [r0, #4]
 8006fda:	68c4      	ldr	r4, [r0, #12]
 8006fdc:	6859      	ldr	r1, [r3, #4]
 8006fde:	6823      	ldr	r3, [r4, #0]
 8006fe0:	2000      	movs	r0, #0
 8006fe2:	3101      	adds	r1, #1
 8006fe4:	fbb3 f3f1 	udiv	r3, r3, r1
 8006fe8:	e9c2 3000 	strd	r3, r0, [r2]
}
 8006fec:	bd10      	pop	{r4, pc}

08006fee <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 8006fee:	2301      	movs	r3, #1
 8006ff0:	fa03 f101 	lsl.w	r1, r3, r1
 8006ff4:	68c3      	ldr	r3, [r0, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
 8006ffa:	bf18      	it	ne
 8006ffc:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
 8007000:	b112      	cbz	r2, 8007008 <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
 8007002:	6883      	ldr	r3, [r0, #8]
 8007004:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 8007006:	4718      	bx	r3
 8007008:	6883      	ldr	r3, [r0, #8]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	e7fb      	b.n	8007006 <gpio_pin_set+0x18>

0800700e <spi_stm32_irq_config_func_0>:
		    POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		\
		    &api_funcs);					\
									\
STM32_SPI_IRQ_HANDLER(id)

DT_INST_FOREACH_STATUS_OKAY(STM32_SPI_INIT)
 800700e:	b508      	push	{r3, lr}
 8007010:	2023      	movs	r0, #35	; 0x23
 8007012:	2200      	movs	r2, #0
 8007014:	2105      	movs	r1, #5
 8007016:	f7fb fa79 	bl	800250c <z_arm_irq_priority_set>
 800701a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800701e:	2023      	movs	r0, #35	; 0x23
 8007020:	f7fb ba64 	b.w	80024ec <arch_irq_enable>

08007024 <spi_stm32_irq_config_func_1>:
 8007024:	b508      	push	{r3, lr}
 8007026:	2024      	movs	r0, #36	; 0x24
 8007028:	2200      	movs	r2, #0
 800702a:	2105      	movs	r1, #5
 800702c:	f7fb fa6e 	bl	800250c <z_arm_irq_priority_set>
 8007030:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007034:	2024      	movs	r0, #36	; 0x24
 8007036:	f7fb ba59 	b.w	80024ec <arch_irq_enable>

0800703a <spi_stm32_irq_config_func_2>:
 800703a:	b508      	push	{r3, lr}
 800703c:	2033      	movs	r0, #51	; 0x33
 800703e:	2200      	movs	r2, #0
 8007040:	2105      	movs	r1, #5
 8007042:	f7fb fa63 	bl	800250c <z_arm_irq_priority_set>
 8007046:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800704a:	2033      	movs	r0, #51	; 0x33
 800704c:	f7fb ba4e 	b.w	80024ec <arch_irq_enable>

08007050 <_spi_context_cs_control.isra.0>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
 8007050:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 8007052:	6805      	ldr	r5, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
 8007054:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
 8007056:	b1fd      	cbz	r5, 8007098 <_spi_context_cs_control.isra.0+0x48>
 8007058:	68ab      	ldr	r3, [r5, #8]
 800705a:	b1eb      	cbz	r3, 8007098 <_spi_context_cs_control.isra.0+0x48>
 800705c:	6818      	ldr	r0, [r3, #0]
 800705e:	b1d8      	cbz	r0, 8007098 <_spi_context_cs_control.isra.0+0x48>
		if (on) {
 8007060:	b151      	cbz	r1, 8007078 <_spi_context_cs_control.isra.0+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 8007062:	7a19      	ldrb	r1, [r3, #8]
 8007064:	2201      	movs	r2, #1
 8007066:	f7ff ffc2 	bl	8006fee <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	6858      	ldr	r0, [r3, #4]
}
 8007070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
 8007074:	f7fe bf5e 	b.w	8005f34 <z_impl_k_busy_wait>
			if (!force_off &&
 8007078:	b912      	cbnz	r2, 8007080 <_spi_context_cs_control.isra.0+0x30>
 800707a:	88aa      	ldrh	r2, [r5, #4]
 800707c:	0492      	lsls	r2, r2, #18
 800707e:	d40b      	bmi.n	8007098 <_spi_context_cs_control.isra.0+0x48>
			k_busy_wait(ctx->config->cs->delay);
 8007080:	6858      	ldr	r0, [r3, #4]
 8007082:	f7fe ff57 	bl	8005f34 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
 8007086:	6823      	ldr	r3, [r4, #0]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	2200      	movs	r2, #0
 800708c:	7a19      	ldrb	r1, [r3, #8]
 800708e:	6818      	ldr	r0, [r3, #0]
}
 8007090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
 8007094:	f7ff bfab 	b.w	8006fee <gpio_pin_set>
}
 8007098:	bd38      	pop	{r3, r4, r5, pc}

0800709a <spi_context_unlock_unconditionally>:
{
 800709a:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
 800709c:	2201      	movs	r2, #1
 800709e:	2100      	movs	r1, #0
{
 80070a0:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
 80070a2:	f7ff ffd5 	bl	8007050 <_spi_context_cs_control.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
 80070a6:	6923      	ldr	r3, [r4, #16]
 80070a8:	b933      	cbnz	r3, 80070b8 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
 80070aa:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
 80070ac:	f104 0008 	add.w	r0, r4, #8
}
 80070b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070b4:	f7fe bef4 	b.w	8005ea0 <z_impl_k_sem_give>
 80070b8:	bd10      	pop	{r4, pc}

080070ba <spi_stm32_release>:
{
 80070ba:	b508      	push	{r3, lr}
	spi_context_unlock_unconditionally(&data->ctx);
 80070bc:	68c0      	ldr	r0, [r0, #12]
 80070be:	f7ff ffec 	bl	800709a <spi_context_unlock_unconditionally>
}
 80070c2:	2000      	movs	r0, #0
 80070c4:	bd08      	pop	{r3, pc}

080070c6 <spi_stm32_complete>:
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 80070c6:	684b      	ldr	r3, [r1, #4]
 80070c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
{
 80070cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070ce:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 80070d0:	684b      	ldr	r3, [r1, #4]
 80070d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070d6:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_ERRIE);
 80070d8:	684b      	ldr	r3, [r1, #4]
 80070da:	4616      	mov	r6, r2
 80070dc:	f023 0320 	bic.w	r3, r3, #32
	_spi_context_cs_control(ctx, on, false);
 80070e0:	2200      	movs	r2, #0
 80070e2:	460c      	mov	r4, r1
 80070e4:	604b      	str	r3, [r1, #4]
 80070e6:	4611      	mov	r1, r2
 80070e8:	4605      	mov	r5, r0
 80070ea:	f7ff ffb1 	bl	8007050 <_spi_context_cs_control.isra.0>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80070ee:	68a3      	ldr	r3, [r4, #8]
	while (ll_func_rx_is_not_empty(spi)) {
 80070f0:	07d9      	lsls	r1, r3, #31
 80070f2:	d41e      	bmi.n	8007132 <spi_stm32_complete+0x6c>
  return (uint32_t)(READ_BIT(SPIx->CR1, SPI_CR1_MSTR | SPI_CR1_SSI));
 80070f4:	6823      	ldr	r3, [r4, #0]
 80070f6:	f403 7382 	and.w	r3, r3, #260	; 0x104
	if (LL_SPI_GetMode(spi) == LL_SPI_MODE_MASTER) {
 80070fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070fe:	d102      	bne.n	8007106 <spi_stm32_complete+0x40>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8007100:	68a3      	ldr	r3, [r4, #8]
 8007102:	061a      	lsls	r2, r3, #24
 8007104:	d4fc      	bmi.n	8007100 <spi_stm32_complete+0x3a>
  return ((READ_BIT(SPIx->SR, SPI_SR_MODF) == (SPI_SR_MODF)) ? 1UL : 0UL);
 8007106:	68a3      	ldr	r3, [r4, #8]
 8007108:	069b      	lsls	r3, r3, #26
 800710a:	d506      	bpl.n	800711a <spi_stm32_complete+0x54>
  tmpreg_sr = SPIx->SR;
 800710c:	68a3      	ldr	r3, [r4, #8]
 800710e:	9301      	str	r3, [sp, #4]
  (void) tmpreg_sr;
 8007110:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8007112:	6823      	ldr	r3, [r4, #0]
 8007114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007118:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800711a:	6823      	ldr	r3, [r4, #0]
 800711c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007120:	6023      	str	r3, [r4, #0]
	ctx->sync_status = status;
 8007122:	62ae      	str	r6, [r5, #40]	; 0x28
 8007124:	f105 0018 	add.w	r0, r5, #24
}
 8007128:	b002      	add	sp, #8
 800712a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800712e:	f7fe beb7 	b.w	8005ea0 <z_impl_k_sem_give>
  return (uint8_t)(READ_REG(SPIx->DR));
 8007132:	68e3      	ldr	r3, [r4, #12]
 8007134:	e7db      	b.n	80070ee <spi_stm32_complete+0x28>

08007136 <spi_stm32_isr>:
{
 8007136:	b538      	push	{r3, r4, r5, lr}
	SPI_TypeDef *spi = cfg->spi;
 8007138:	6843      	ldr	r3, [r0, #4]
	struct spi_stm32_data *data = dev->data;
 800713a:	68c4      	ldr	r4, [r0, #12]
	SPI_TypeDef *spi = cfg->spi;
 800713c:	689d      	ldr	r5, [r3, #8]
	err = spi_stm32_get_err(spi);
 800713e:	4628      	mov	r0, r5
 8007140:	f7fc fcb6 	bl	8003ab0 <spi_stm32_get_err>
	if (err) {
 8007144:	4602      	mov	r2, r0
 8007146:	b128      	cbz	r0, 8007154 <spi_stm32_isr+0x1e>
		spi_stm32_complete(data, spi, err);
 8007148:	4629      	mov	r1, r5
 800714a:	4620      	mov	r0, r4
}
 800714c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		spi_stm32_complete(data, spi, err);
 8007150:	f7ff bfb9 	b.w	80070c6 <spi_stm32_complete>
}

static ALWAYS_INLINE
bool spi_context_tx_on(struct spi_context *ctx)
{
	return !!(ctx->tx_len);
 8007154:	6c23      	ldr	r3, [r4, #64]	; 0x40
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 8007156:	b913      	cbnz	r3, 800715e <spi_stm32_isr+0x28>
	if (spi_stm32_transfer_ongoing(data)) {
 8007158:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800715a:	2900      	cmp	r1, #0
 800715c:	d0f4      	beq.n	8007148 <spi_stm32_isr+0x12>
	uint16_t operation = data->ctx.config->operation;
 800715e:	6822      	ldr	r2, [r4, #0]
 8007160:	8892      	ldrh	r2, [r2, #4]
	if (SPI_OP_MODE_GET(operation) == SPI_OP_MODE_MASTER) {
 8007162:	f012 0001 	ands.w	r0, r2, #1
 8007166:	f040 808a 	bne.w	800727e <spi_stm32_isr+0x148>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800716a:	68a9      	ldr	r1, [r5, #8]
 800716c:	0789      	lsls	r1, r1, #30
 800716e:	d5fc      	bpl.n	800716a <spi_stm32_isr+0x34>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8007170:	f3c2 1245 	ubfx	r2, r2, #5, #6
 8007174:	2a08      	cmp	r2, #8
 8007176:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007178:	d14d      	bne.n	8007216 <spi_stm32_isr+0xe0>
}

static ALWAYS_INLINE
bool spi_context_tx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->tx_buf && ctx->tx_len);
 800717a:	b109      	cbz	r1, 8007180 <spi_stm32_isr+0x4a>
 800717c:	b103      	cbz	r3, 8007180 <spi_stm32_isr+0x4a>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 800717e:	7808      	ldrb	r0, [r1, #0]
		LL_SPI_TransmitData8(spi, tx_frame);
 8007180:	b2c0      	uxtb	r0, r0
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 8007182:	7328      	strb	r0, [r5, #12]
	if (!ctx->tx_len) {
 8007184:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007186:	b183      	cbz	r3, 80071aa <spi_stm32_isr+0x74>
	ctx->tx_len -= len;
 8007188:	3b01      	subs	r3, #1
 800718a:	6423      	str	r3, [r4, #64]	; 0x40
	if (!ctx->tx_len) {
 800718c:	2b00      	cmp	r3, #0
 800718e:	d13c      	bne.n	800720a <spi_stm32_isr+0xd4>
		ctx->tx_count--;
 8007190:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007192:	3b01      	subs	r3, #1
 8007194:	6323      	str	r3, [r4, #48]	; 0x30
		if (ctx->tx_count) {
 8007196:	2b00      	cmp	r3, #0
 8007198:	d03b      	beq.n	8007212 <spi_stm32_isr+0xdc>
			ctx->current_tx++;
 800719a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800719c:	f103 0208 	add.w	r2, r3, #8
 80071a0:	62e2      	str	r2, [r4, #44]	; 0x2c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 80071a2:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 80071a4:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 80071a6:	63e2      	str	r2, [r4, #60]	; 0x3c
			ctx->tx_len = ctx->current_tx->len / dfs;
 80071a8:	6423      	str	r3, [r4, #64]	; 0x40
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80071aa:	68ab      	ldr	r3, [r5, #8]
	while (!ll_func_rx_is_not_empty(spi)) {
 80071ac:	07d8      	lsls	r0, r3, #31
 80071ae:	d5fc      	bpl.n	80071aa <spi_stm32_isr+0x74>
	if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80071b0:	6822      	ldr	r2, [r4, #0]
 80071b2:	8892      	ldrh	r2, [r2, #4]
 80071b4:	f3c2 1245 	ubfx	r2, r2, #5, #6
 80071b8:	2a08      	cmp	r2, #8
 80071ba:	e9d4 3111 	ldrd	r3, r1, [r4, #68]	; 0x44
  return (uint8_t)(READ_REG(SPIx->DR));
 80071be:	68ea      	ldr	r2, [r5, #12]
 80071c0:	d145      	bne.n	800724e <spi_stm32_isr+0x118>
}

static ALWAYS_INLINE
bool spi_context_rx_buf_on(struct spi_context *ctx)
{
	return !!(ctx->rx_buf && ctx->rx_len);
 80071c2:	b10b      	cbz	r3, 80071c8 <spi_stm32_isr+0x92>
 80071c4:	b101      	cbz	r1, 80071c8 <spi_stm32_isr+0x92>
 80071c6:	701a      	strb	r2, [r3, #0]
	if (!ctx->rx_len) {
 80071c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80071ca:	b193      	cbz	r3, 80071f2 <spi_stm32_isr+0xbc>
	ctx->rx_len -= len;
 80071cc:	3b01      	subs	r3, #1
 80071ce:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->rx_len) {
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f040 80a2 	bne.w	800731a <spi_stm32_isr+0x1e4>
		ctx->rx_count--;
 80071d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80071d8:	3b01      	subs	r3, #1
 80071da:	63a3      	str	r3, [r4, #56]	; 0x38
		if (ctx->rx_count) {
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f000 80a1 	beq.w	8007324 <spi_stm32_isr+0x1ee>
			ctx->current_rx++;
 80071e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071e4:	f103 0208 	add.w	r2, r3, #8
 80071e8:	6362      	str	r2, [r4, #52]	; 0x34
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 80071ea:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
 80071ec:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 80071ee:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_len = ctx->current_rx->len / dfs;
 80071f0:	64a3      	str	r3, [r4, #72]	; 0x48
	return spi_stm32_get_err(spi);
 80071f2:	4628      	mov	r0, r5
 80071f4:	f7fc fc5c 	bl	8003ab0 <spi_stm32_get_err>
	if (err || !spi_stm32_transfer_ongoing(data)) {
 80071f8:	4602      	mov	r2, r0
 80071fa:	2800      	cmp	r0, #0
 80071fc:	d1a4      	bne.n	8007148 <spi_stm32_isr+0x12>
	return spi_context_tx_on(&data->ctx) || spi_context_rx_on(&data->ctx);
 80071fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007200:	b913      	cbnz	r3, 8007208 <spi_stm32_isr+0xd2>
	if (err || !spi_stm32_transfer_ongoing(data)) {
 8007202:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007204:	2b00      	cmp	r3, #0
 8007206:	d09f      	beq.n	8007148 <spi_stm32_isr+0x12>
}
 8007208:	bd38      	pop	{r3, r4, r5, pc}
	} else if (ctx->tx_buf) {
 800720a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800720c:	2b00      	cmp	r3, #0
 800720e:	d0cc      	beq.n	80071aa <spi_stm32_isr+0x74>
		ctx->tx_buf += dfs * len;
 8007210:	3301      	adds	r3, #1
			ctx->tx_buf = NULL;
 8007212:	63e3      	str	r3, [r4, #60]	; 0x3c
 8007214:	e7c9      	b.n	80071aa <spi_stm32_isr+0x74>
	return !!(ctx->tx_buf && ctx->tx_len);
 8007216:	b109      	cbz	r1, 800721c <spi_stm32_isr+0xe6>
		if (spi_context_tx_buf_on(&data->ctx)) {
 8007218:	b103      	cbz	r3, 800721c <spi_stm32_isr+0xe6>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 800721a:	8808      	ldrh	r0, [r1, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
#if defined (__GNUC__)
  __IO uint16_t *spidr = ((__IO uint16_t *)&SPIx->DR);
  *spidr = TxData;
 800721c:	81a8      	strh	r0, [r5, #12]
	if (!ctx->tx_len) {
 800721e:	2b00      	cmp	r3, #0
 8007220:	d0c3      	beq.n	80071aa <spi_stm32_isr+0x74>
	ctx->tx_len -= len;
 8007222:	3b01      	subs	r3, #1
 8007224:	6423      	str	r3, [r4, #64]	; 0x40
	if (!ctx->tx_len) {
 8007226:	b96b      	cbnz	r3, 8007244 <spi_stm32_isr+0x10e>
		ctx->tx_count--;
 8007228:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800722a:	3b01      	subs	r3, #1
 800722c:	6323      	str	r3, [r4, #48]	; 0x30
		if (ctx->tx_count) {
 800722e:	2b00      	cmp	r3, #0
 8007230:	d0ef      	beq.n	8007212 <spi_stm32_isr+0xdc>
			ctx->current_tx++;
 8007232:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007234:	f103 0208 	add.w	r2, r3, #8
 8007238:	62e2      	str	r2, [r4, #44]	; 0x2c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 800723a:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 800723c:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 800723e:	63e2      	str	r2, [r4, #60]	; 0x3c
			ctx->tx_len = ctx->current_tx->len / dfs;
 8007240:	085b      	lsrs	r3, r3, #1
 8007242:	e7b1      	b.n	80071a8 <spi_stm32_isr+0x72>
	} else if (ctx->tx_buf) {
 8007244:	2900      	cmp	r1, #0
 8007246:	d0b0      	beq.n	80071aa <spi_stm32_isr+0x74>
		ctx->tx_buf += dfs * len;
 8007248:	3102      	adds	r1, #2
 800724a:	63e1      	str	r1, [r4, #60]	; 0x3c
 800724c:	e7ad      	b.n	80071aa <spi_stm32_isr+0x74>
	return !!(ctx->rx_buf && ctx->rx_len);
 800724e:	b10b      	cbz	r3, 8007254 <spi_stm32_isr+0x11e>
 8007250:	b101      	cbz	r1, 8007254 <spi_stm32_isr+0x11e>
			UNALIGNED_PUT(rx_frame, (uint16_t *)data->ctx.rx_buf);
 8007252:	801a      	strh	r2, [r3, #0]
	if (!ctx->rx_len) {
 8007254:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007256:	2b00      	cmp	r3, #0
 8007258:	d0cb      	beq.n	80071f2 <spi_stm32_isr+0xbc>
	ctx->rx_len -= len;
 800725a:	3b01      	subs	r3, #1
 800725c:	64a3      	str	r3, [r4, #72]	; 0x48
	if (!ctx->rx_len) {
 800725e:	2b00      	cmp	r3, #0
 8007260:	d162      	bne.n	8007328 <spi_stm32_isr+0x1f2>
		ctx->rx_count--;
 8007262:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007264:	3b01      	subs	r3, #1
 8007266:	63a3      	str	r3, [r4, #56]	; 0x38
		if (ctx->rx_count) {
 8007268:	2b00      	cmp	r3, #0
 800726a:	d05b      	beq.n	8007324 <spi_stm32_isr+0x1ee>
			ctx->current_rx++;
 800726c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800726e:	f103 0208 	add.w	r2, r3, #8
 8007272:	6362      	str	r2, [r4, #52]	; 0x34
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8007274:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
 8007276:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
 8007278:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_len = ctx->current_rx->len / dfs;
 800727a:	085b      	lsrs	r3, r3, #1
 800727c:	e7b8      	b.n	80071f0 <spi_stm32_isr+0xba>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800727e:	68a9      	ldr	r1, [r5, #8]
 8007280:	0789      	lsls	r1, r1, #30
 8007282:	d545      	bpl.n	8007310 <spi_stm32_isr+0x1da>
	if (ll_func_tx_is_empty(spi) && spi_context_tx_on(&data->ctx)) {
 8007284:	2b00      	cmp	r3, #0
 8007286:	d043      	beq.n	8007310 <spi_stm32_isr+0x1da>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 8007288:	f3c2 1245 	ubfx	r2, r2, #5, #6
 800728c:	2a08      	cmp	r2, #8
 800728e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007290:	d128      	bne.n	80072e4 <spi_stm32_isr+0x1ae>
			tx_frame = UNALIGNED_GET((uint8_t *)(data->ctx.tx_buf));
 8007292:	780b      	ldrb	r3, [r1, #0]
  *spidr = TxData;
 8007294:	732b      	strb	r3, [r5, #12]
	if (!ctx->tx_len) {
 8007296:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007298:	b19b      	cbz	r3, 80072c2 <spi_stm32_isr+0x18c>
	ctx->tx_len -= len;
 800729a:	3b01      	subs	r3, #1
 800729c:	6423      	str	r3, [r4, #64]	; 0x40
	if (!ctx->tx_len) {
 800729e:	b963      	cbnz	r3, 80072ba <spi_stm32_isr+0x184>
		ctx->tx_count--;
 80072a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80072a2:	3b01      	subs	r3, #1
 80072a4:	6323      	str	r3, [r4, #48]	; 0x30
		if (ctx->tx_count) {
 80072a6:	b15b      	cbz	r3, 80072c0 <spi_stm32_isr+0x18a>
			ctx->current_tx++;
 80072a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80072aa:	f103 0208 	add.w	r2, r3, #8
 80072ae:	62e2      	str	r2, [r4, #44]	; 0x2c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 80072b0:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 80072b2:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 80072b4:	63e2      	str	r2, [r4, #60]	; 0x3c
			ctx->tx_len = ctx->current_tx->len / dfs;
 80072b6:	6423      	str	r3, [r4, #64]	; 0x40
 80072b8:	e003      	b.n	80072c2 <spi_stm32_isr+0x18c>
	} else if (ctx->tx_buf) {
 80072ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80072bc:	b10b      	cbz	r3, 80072c2 <spi_stm32_isr+0x18c>
		ctx->tx_buf += dfs * len;
 80072be:	3301      	adds	r3, #1
 80072c0:	63e3      	str	r3, [r4, #60]	; 0x3c
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80072c2:	68ab      	ldr	r3, [r5, #8]
	if (ll_func_rx_is_not_empty(spi) &&
 80072c4:	07db      	lsls	r3, r3, #31
 80072c6:	d594      	bpl.n	80071f2 <spi_stm32_isr+0xbc>
	return !!(ctx->rx_buf && ctx->rx_len);
 80072c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d091      	beq.n	80071f2 <spi_stm32_isr+0xbc>
 80072ce:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80072d0:	2a00      	cmp	r2, #0
 80072d2:	d08e      	beq.n	80071f2 <spi_stm32_isr+0xbc>
		if (SPI_WORD_SIZE_GET(data->ctx.config->operation) == 8) {
 80072d4:	6822      	ldr	r2, [r4, #0]
 80072d6:	8892      	ldrh	r2, [r2, #4]
 80072d8:	f3c2 1245 	ubfx	r2, r2, #5, #6
 80072dc:	2a08      	cmp	r2, #8
  return (uint8_t)(READ_REG(SPIx->DR));
 80072de:	68ea      	ldr	r2, [r5, #12]
 80072e0:	d1b7      	bne.n	8007252 <spi_stm32_isr+0x11c>
 80072e2:	e770      	b.n	80071c6 <spi_stm32_isr+0x90>
			tx_frame = UNALIGNED_GET((uint16_t *)(data->ctx.tx_buf));
 80072e4:	880a      	ldrh	r2, [r1, #0]
  *spidr = TxData;
 80072e6:	81aa      	strh	r2, [r5, #12]
	ctx->tx_len -= len;
 80072e8:	3b01      	subs	r3, #1
 80072ea:	6423      	str	r3, [r4, #64]	; 0x40
	if (!ctx->tx_len) {
 80072ec:	b96b      	cbnz	r3, 800730a <spi_stm32_isr+0x1d4>
		ctx->tx_count--;
 80072ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80072f0:	3b01      	subs	r3, #1
 80072f2:	6323      	str	r3, [r4, #48]	; 0x30
		if (ctx->tx_count) {
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d0e3      	beq.n	80072c0 <spi_stm32_isr+0x18a>
			ctx->current_tx++;
 80072f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80072fa:	f103 0208 	add.w	r2, r3, #8
 80072fe:	62e2      	str	r2, [r4, #44]	; 0x2c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8007300:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
 8007302:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
 8007304:	63e2      	str	r2, [r4, #60]	; 0x3c
			ctx->tx_len = ctx->current_tx->len / dfs;
 8007306:	085b      	lsrs	r3, r3, #1
 8007308:	e7d5      	b.n	80072b6 <spi_stm32_isr+0x180>
		ctx->tx_buf += dfs * len;
 800730a:	3102      	adds	r1, #2
 800730c:	63e1      	str	r1, [r4, #60]	; 0x3c
 800730e:	e7d8      	b.n	80072c2 <spi_stm32_isr+0x18c>
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8007310:	686b      	ldr	r3, [r5, #4]
 8007312:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007316:	606b      	str	r3, [r5, #4]
    defined(CONFIG_SOC_SERIES_STM32H7X)
	LL_SPI_DisableIT_TXP(spi);
#else
	LL_SPI_DisableIT_TXE(spi);
#endif
}
 8007318:	e7d3      	b.n	80072c2 <spi_stm32_isr+0x18c>
	} else if (ctx->rx_buf) {
 800731a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800731c:	2b00      	cmp	r3, #0
 800731e:	f43f af68 	beq.w	80071f2 <spi_stm32_isr+0xbc>
		ctx->rx_buf += dfs * len;
 8007322:	3301      	adds	r3, #1
 8007324:	6463      	str	r3, [r4, #68]	; 0x44
 8007326:	e764      	b.n	80071f2 <spi_stm32_isr+0xbc>
	} else if (ctx->rx_buf) {
 8007328:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800732a:	2b00      	cmp	r3, #0
 800732c:	f43f af61 	beq.w	80071f2 <spi_stm32_isr+0xbc>
		ctx->rx_buf += dfs * len;
 8007330:	3302      	adds	r3, #2
 8007332:	e7f7      	b.n	8007324 <spi_stm32_isr+0x1ee>

08007334 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
 8007334:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007338:	461e      	mov	r6, r3
	off_t group_offs = 0;
	uint32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
 800733a:	6883      	ldr	r3, [r0, #8]
{
 800733c:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	4669      	mov	r1, sp
{
 8007342:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
 8007344:	aa01      	add	r2, sp, #4
 8007346:	4798      	blx	r3

	while (layout_size--) {
 8007348:	e9dd 1000 	ldrd	r1, r0, [sp]
 800734c:	2300      	movs	r3, #0
 800734e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	off_t end = 0;
 8007352:	461d      	mov	r5, r3
	off_t group_offs = 0;
 8007354:	469e      	mov	lr, r3
	size_t page_count = 0;
 8007356:	469c      	mov	ip, r3
	while (layout_size--) {
 8007358:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800735c:	d102      	bne.n	8007364 <flash_get_page_info+0x30>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
 800735e:	f06f 0015 	mvn.w	r0, #21
 8007362:	e018      	b.n	8007396 <flash_get_page_info+0x62>
		if (use_addr) {
 8007364:	680a      	ldr	r2, [r1, #0]
 8007366:	b1cf      	cbz	r7, 800739c <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
 8007368:	6848      	ldr	r0, [r1, #4]
 800736a:	fb00 5502 	mla	r5, r0, r2, r5
		if (offs < end) {
 800736e:	42a5      	cmp	r5, r4
 8007370:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007374:	dd17      	ble.n	80073a6 <flash_get_page_info+0x72>
 8007376:	b103      	cbz	r3, 800737a <flash_get_page_info+0x46>
 8007378:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
 800737a:	9b00      	ldr	r3, [sp, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	6073      	str	r3, [r6, #4]
			if (use_addr) {
 8007380:	b177      	cbz	r7, 80073a0 <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
 8007382:	eba4 040e 	sub.w	r4, r4, lr
 8007386:	fbb4 f4f3 	udiv	r4, r4, r3
			info->start_offset = group_offs +
 800738a:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
 800738e:	4464      	add	r4, ip
			info->start_offset = group_offs +
 8007390:	6033      	str	r3, [r6, #0]
			info->index = page_count + num_in_group;
 8007392:	60b4      	str	r4, [r6, #8]
			return 0;
 8007394:	2000      	movs	r0, #0
}
 8007396:	b002      	add	sp, #8
 8007398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
 800739c:	4415      	add	r5, r2
 800739e:	e7e6      	b.n	800736e <flash_get_page_info+0x3a>
				num_in_group = offs - page_count;
 80073a0:	eba4 040c 	sub.w	r4, r4, ip
 80073a4:	e7f1      	b.n	800738a <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
 80073a6:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
 80073a8:	4494      	add	ip, r2
		group_offs += layout->pages_count * layout->pages_size;
 80073aa:	fb03 ee02 	mla	lr, r3, r2, lr
		layout++;
 80073ae:	3108      	adds	r1, #8
 80073b0:	2301      	movs	r3, #1
 80073b2:	e7d1      	b.n	8007358 <flash_get_page_info+0x24>

080073b4 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
 80073b4:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
 80073b6:	2201      	movs	r2, #1
 80073b8:	f7ff bfbc 	b.w	8007334 <flash_get_page_info>

080073bc <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 80073bc:	68c3      	ldr	r3, [r0, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80073c2:	6843      	ldr	r3, [r0, #4]
 80073c4:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80073c6:	6813      	ldr	r3, [r2, #0]
 80073c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 80073cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073d0:	d028      	beq.n	8007424 <uart_stm32_config_get+0x68>
		return UART_CFG_PARITY_NONE;
 80073d2:	f5a3 60c0 	sub.w	r0, r3, #1536	; 0x600
 80073d6:	4243      	negs	r3, r0
 80073d8:	4143      	adcs	r3, r0
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 80073da:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 80073dc:	6853      	ldr	r3, [r2, #4]
 80073de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 80073e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073e6:	d01f      	beq.n	8007428 <uart_stm32_config_get+0x6c>
 80073e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073ec:	d01e      	beq.n	800742c <uart_stm32_config_get+0x70>
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	bf14      	ite	ne
 80073f2:	2303      	movne	r3, #3
 80073f4:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 80073f6:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80073f8:	6813      	ldr	r3, [r2, #0]
 80073fa:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
	switch (db) {
 80073fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007402:	d015      	beq.n	8007430 <uart_stm32_config_get+0x74>
 8007404:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
		return UART_CFG_DATA_BITS_7;
 8007408:	bf14      	ite	ne
 800740a:	2303      	movne	r3, #3
 800740c:	2302      	moveq	r3, #2
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 800740e:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8007410:	6893      	ldr	r3, [r2, #8]
 8007412:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8007416:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 800741a:	4253      	negs	r3, r2
 800741c:	4153      	adcs	r3, r2
 800741e:	71cb      	strb	r3, [r1, #7]
}
 8007420:	2000      	movs	r0, #0
 8007422:	4770      	bx	lr
	switch (parity) {
 8007424:	2302      	movs	r3, #2
 8007426:	e7d8      	b.n	80073da <uart_stm32_config_get+0x1e>
		return UART_CFG_STOP_BITS_0_5;
 8007428:	2300      	movs	r3, #0
 800742a:	e7e4      	b.n	80073f6 <uart_stm32_config_get+0x3a>
		return UART_CFG_STOP_BITS_1_5;
 800742c:	2302      	movs	r3, #2
 800742e:	e7e2      	b.n	80073f6 <uart_stm32_config_get+0x3a>
	switch (db) {
 8007430:	2304      	movs	r3, #4
 8007432:	e7ec      	b.n	800740e <uart_stm32_config_get+0x52>

08007434 <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007434:	6843      	ldr	r3, [r0, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8007438:	69da      	ldr	r2, [r3, #28]
 800743a:	0612      	lsls	r2, r2, #24
 800743c:	d5fc      	bpl.n	8007438 <uart_stm32_poll_out+0x4>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800743e:	2240      	movs	r2, #64	; 0x40
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8007440:	b289      	uxth	r1, r1
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8007442:	621a      	str	r2, [r3, #32]
  USARTx->TDR = Value;
 8007444:	8519      	strh	r1, [r3, #40]	; 0x28
}
 8007446:	4770      	bx	lr

08007448 <uart_stm32_err_check>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007448:	6843      	ldr	r3, [r0, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800744c:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 800744e:	69da      	ldr	r2, [r3, #28]
	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 8007450:	07d2      	lsls	r2, r2, #31
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8007452:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8007454:	f3c0 00c0 	ubfx	r0, r0, #3, #1
		err |= UART_ERROR_PARITY;
 8007458:	bf48      	it	mi
 800745a:	f040 0002 	orrmi.w	r0, r0, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800745e:	0791      	lsls	r1, r2, #30
		err |= UART_ERROR_FRAMING;
 8007460:	bf48      	it	mi
 8007462:	f040 0004 	orrmi.w	r0, r0, #4
	if (err & UART_ERROR_OVERRUN) {
 8007466:	07c2      	lsls	r2, r0, #31
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8007468:	bf44      	itt	mi
 800746a:	2208      	movmi	r2, #8
 800746c:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 800746e:	0781      	lsls	r1, r0, #30
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8007470:	bf44      	itt	mi
 8007472:	2201      	movmi	r2, #1
 8007474:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 8007476:	0742      	lsls	r2, r0, #29
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8007478:	bf44      	itt	mi
 800747a:	2202      	movmi	r2, #2
 800747c:	621a      	strmi	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 800747e:	2204      	movs	r2, #4
 8007480:	621a      	str	r2, [r3, #32]
}
 8007482:	4770      	bx	lr

08007484 <uart_stm32_poll_in>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007484:	6843      	ldr	r3, [r0, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8007488:	69da      	ldr	r2, [r3, #28]
 800748a:	0710      	lsls	r0, r2, #28
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800748c:	bf44      	itt	mi
 800748e:	2208      	movmi	r2, #8
 8007490:	621a      	strmi	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8007492:	69da      	ldr	r2, [r3, #28]
 8007494:	0692      	lsls	r2, r2, #26
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8007496:	bf43      	ittte	mi
 8007498:	8c9b      	ldrhmi	r3, [r3, #36]	; 0x24
 800749a:	700b      	strbmi	r3, [r1, #0]
	return 0;
 800749c:	2000      	movmi	r0, #0
		return -1;
 800749e:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 80074a2:	4770      	bx	lr

080074a4 <ld_dword>:
	rv = rv << 8 | ptr[2];
 80074a4:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 80074a6:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 80074a8:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 80074aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
}
 80074ae:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80074b2:	4770      	bx	lr

080074b4 <st_dword>:
	*ptr++ = (BYTE)val; val >>= 8;
 80074b4:	0a0b      	lsrs	r3, r1, #8
 80074b6:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80074b8:	7043      	strb	r3, [r0, #1]
 80074ba:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80074bc:	0e09      	lsrs	r1, r1, #24
 80074be:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 80074c0:	70c1      	strb	r1, [r0, #3]
}
 80074c2:	4770      	bx	lr

080074c4 <mem_set>:
	BYTE *d = (BYTE*)dst;
 80074c4:	4402      	add	r2, r0
	do *d++ = (BYTE)val; while (--cnt);
 80074c6:	f800 1b01 	strb.w	r1, [r0], #1
 80074ca:	4290      	cmp	r0, r2
 80074cc:	d1fb      	bne.n	80074c6 <mem_set+0x2>
}
 80074ce:	4770      	bx	lr

080074d0 <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80074d0:	6943      	ldr	r3, [r0, #20]
	clst -= 2;
 80074d2:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80074d4:	3b02      	subs	r3, #2
 80074d6:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 80074d8:	bf83      	ittte	hi
 80074da:	8943      	ldrhhi	r3, [r0, #10]
 80074dc:	6a80      	ldrhi	r0, [r0, #40]	; 0x28
 80074de:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80074e2:	2000      	movls	r0, #0
}
 80074e4:	4770      	bx	lr

080074e6 <validate>:
{
 80074e6:	b538      	push	{r3, r4, r5, lr}
 80074e8:	460d      	mov	r5, r1
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 80074ea:	4604      	mov	r4, r0
 80074ec:	b918      	cbnz	r0, 80074f6 <validate+0x10>
		*fs = 0;				/* The object is invalid */
 80074ee:	2300      	movs	r3, #0
		res = FR_INVALID_OBJECT;
 80074f0:	2009      	movs	r0, #9
 80074f2:	602b      	str	r3, [r5, #0]
}
 80074f4:	bd38      	pop	{r3, r4, r5, pc}
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 80074f6:	6803      	ldr	r3, [r0, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d0f8      	beq.n	80074ee <validate+0x8>
 80074fc:	781a      	ldrb	r2, [r3, #0]
 80074fe:	2a00      	cmp	r2, #0
 8007500:	d0f5      	beq.n	80074ee <validate+0x8>
 8007502:	88d9      	ldrh	r1, [r3, #6]
 8007504:	8882      	ldrh	r2, [r0, #4]
 8007506:	4291      	cmp	r1, r2
 8007508:	d1f1      	bne.n	80074ee <validate+0x8>
 800750a:	7858      	ldrb	r0, [r3, #1]
 800750c:	f7fd fb56 	bl	8004bbc <disk_status>
 8007510:	f010 0001 	ands.w	r0, r0, #1
 8007514:	d1eb      	bne.n	80074ee <validate+0x8>
		*fs = obj->fs;			/* Owner file sytem object */
 8007516:	6823      	ldr	r3, [r4, #0]
		res = FR_OK;
 8007518:	e7eb      	b.n	80074f2 <validate+0xc>

0800751a <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800751a:	3801      	subs	r0, #1
 800751c:	440a      	add	r2, r1
		do *d++ = *s++; while (--cnt);
 800751e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007522:	f800 3f01 	strb.w	r3, [r0, #1]!
 8007526:	4291      	cmp	r1, r2
 8007528:	d1f9      	bne.n	800751e <mem_cpy.part.0+0x4>
}
 800752a:	4770      	bx	lr

0800752c <ld_clust.isra.0>:
	rv = rv << 8 | ptr[0];
 800752c:	7eca      	ldrb	r2, [r1, #27]
 800752e:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8007530:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8007532:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8007536:	bf01      	itttt	eq
 8007538:	7d48      	ldrbeq	r0, [r1, #21]
 800753a:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800753c:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8007540:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8007544:	4618      	mov	r0, r3
 8007546:	4770      	bx	lr

08007548 <st_clust.isra.0>:
	*ptr++ = (BYTE)val; val >>= 8;
 8007548:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800754c:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 800754e:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8007550:	7803      	ldrb	r3, [r0, #0]
 8007552:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007554:	bf01      	itttt	eq
 8007556:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8007558:	750a      	strbeq	r2, [r1, #20]
 800755a:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 800755c:	754a      	strbeq	r2, [r1, #21]
}
 800755e:	4770      	bx	lr

08007560 <get_fileinfo.part.0>:
void get_fileinfo (		/* No return code */
 8007560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		c = (TCHAR)dp->dir[i++];
 8007562:	69c4      	ldr	r4, [r0, #28]
	i = j = 0;
 8007564:	2300      	movs	r3, #0
 8007566:	1e65      	subs	r5, r4, #1
 8007568:	4618      	mov	r0, r3
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800756a:	262e      	movs	r6, #46	; 0x2e
		c = (TCHAR)dp->dir[i++];
 800756c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
		if (c == ' ') continue;				/* Skip padding spaces */
 8007570:	2a20      	cmp	r2, #32
		c = (TCHAR)dp->dir[i++];
 8007572:	f100 0001 	add.w	r0, r0, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 8007576:	d00a      	beq.n	800758e <get_fileinfo.part.0+0x2e>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007578:	2a05      	cmp	r2, #5
 800757a:	bf08      	it	eq
 800757c:	22e5      	moveq	r2, #229	; 0xe5
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800757e:	2809      	cmp	r0, #9
 8007580:	bf02      	ittt	eq
 8007582:	18cf      	addeq	r7, r1, r3
 8007584:	3301      	addeq	r3, #1
 8007586:	727e      	strbeq	r6, [r7, #9]
		fno->fname[j++] = c;
 8007588:	18cf      	adds	r7, r1, r3
 800758a:	3301      	adds	r3, #1
 800758c:	727a      	strb	r2, [r7, #9]
	while (i < 11) {		/* Copy name body and extension */
 800758e:	280b      	cmp	r0, #11
 8007590:	d1ec      	bne.n	800756c <get_fileinfo.part.0+0xc>
	fno->fname[j] = 0;
 8007592:	440b      	add	r3, r1
 8007594:	2200      	movs	r2, #0
 8007596:	725a      	strb	r2, [r3, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8007598:	7ae3      	ldrb	r3, [r4, #11]
 800759a:	720b      	strb	r3, [r1, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800759c:	f104 001c 	add.w	r0, r4, #28
 80075a0:	f7ff ff80 	bl	80074a4 <ld_dword>
 80075a4:	6008      	str	r0, [r1, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80075a6:	f104 0016 	add.w	r0, r4, #22
 80075aa:	f7ff ff7b 	bl	80074a4 <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80075ae:	80c8      	strh	r0, [r1, #6]
 80075b0:	0c00      	lsrs	r0, r0, #16
 80075b2:	8088      	strh	r0, [r1, #4]
}
 80075b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080075b6 <sync_window.part.0>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 80075b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		wsect = fs->winsect;	/* Current sector number */
 80075ba:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80075bc:	f100 0830 	add.w	r8, r0, #48	; 0x30
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 80075c0:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80075c2:	2301      	movs	r3, #1
 80075c4:	7840      	ldrb	r0, [r0, #1]
 80075c6:	4632      	mov	r2, r6
 80075c8:	4641      	mov	r1, r8
 80075ca:	f7fd fb1b 	bl	8004c04 <disk_write>
 80075ce:	4605      	mov	r5, r0
 80075d0:	b9a8      	cbnz	r0, 80075fe <sync_window.part.0+0x48>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80075d2:	6a23      	ldr	r3, [r4, #32]
 80075d4:	69a2      	ldr	r2, [r4, #24]
			fs->wflag = 0;
 80075d6:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80075d8:	1af3      	subs	r3, r6, r3
 80075da:	4293      	cmp	r3, r2
 80075dc:	d202      	bcs.n	80075e4 <sync_window.part.0+0x2e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80075de:	78a7      	ldrb	r7, [r4, #2]
 80075e0:	2f01      	cmp	r7, #1
 80075e2:	d802      	bhi.n	80075ea <sync_window.part.0+0x34>
}
 80075e4:	4628      	mov	r0, r5
 80075e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					wsect += fs->fsize;
 80075ea:	69a3      	ldr	r3, [r4, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 80075ec:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 80075ee:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80075f0:	4632      	mov	r2, r6
 80075f2:	2301      	movs	r3, #1
 80075f4:	4641      	mov	r1, r8
 80075f6:	f7fd fb05 	bl	8004c04 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80075fa:	3f01      	subs	r7, #1
 80075fc:	e7f0      	b.n	80075e0 <sync_window.part.0+0x2a>
			res = FR_DISK_ERR;
 80075fe:	2501      	movs	r5, #1
 8007600:	e7f0      	b.n	80075e4 <sync_window.part.0+0x2e>

08007602 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007602:	78c3      	ldrb	r3, [r0, #3]
 8007604:	b10b      	cbz	r3, 800760a <sync_window+0x8>
 8007606:	f7ff bfd6 	b.w	80075b6 <sync_window.part.0>
}
 800760a:	4618      	mov	r0, r3
 800760c:	4770      	bx	lr

0800760e <move_window>:
{
 800760e:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007610:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007612:	428b      	cmp	r3, r1
{
 8007614:	4605      	mov	r5, r0
 8007616:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007618:	d010      	beq.n	800763c <move_window+0x2e>
		res = sync_window(fs);		/* Write-back changes */
 800761a:	f7ff fff2 	bl	8007602 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800761e:	b960      	cbnz	r0, 800763a <move_window+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007620:	4622      	mov	r2, r4
 8007622:	7868      	ldrb	r0, [r5, #1]
 8007624:	2301      	movs	r3, #1
 8007626:	f105 0130 	add.w	r1, r5, #48	; 0x30
 800762a:	f7fd fadf 	bl	8004bec <disk_read>
				res = FR_DISK_ERR;
 800762e:	2800      	cmp	r0, #0
 8007630:	bf1c      	itt	ne
 8007632:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
 8007636:	2001      	movne	r0, #1
			fs->winsect = sector;
 8007638:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 800763a:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 800763c:	2000      	movs	r0, #0
 800763e:	e7fc      	b.n	800763a <move_window+0x2c>

08007640 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007640:	2901      	cmp	r1, #1
{
 8007642:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007646:	4606      	mov	r6, r0
 8007648:	460c      	mov	r4, r1
 800764a:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800764c:	d972      	bls.n	8007734 <put_fat+0xf4>
 800764e:	6943      	ldr	r3, [r0, #20]
 8007650:	428b      	cmp	r3, r1
 8007652:	d96f      	bls.n	8007734 <put_fat+0xf4>
		switch (fs->fs_type) {
 8007654:	7803      	ldrb	r3, [r0, #0]
 8007656:	2b02      	cmp	r3, #2
 8007658:	d03f      	beq.n	80076da <put_fat+0x9a>
 800765a:	2b03      	cmp	r3, #3
 800765c:	d050      	beq.n	8007700 <put_fat+0xc0>
 800765e:	2b01      	cmp	r3, #1
 8007660:	d168      	bne.n	8007734 <put_fat+0xf4>
			bc = (UINT)clst; bc += bc / 2;
 8007662:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007666:	6a01      	ldr	r1, [r0, #32]
 8007668:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800766c:	f7ff ffcf 	bl	800760e <move_window>
 8007670:	4605      	mov	r5, r0
			if (res != FR_OK) break;
 8007672:	bb38      	cbnz	r0, 80076c4 <put_fat+0x84>
			p = fs->win + bc++ % SS(fs);
 8007674:	f106 0930 	add.w	r9, r6, #48	; 0x30
 8007678:	f108 0a01 	add.w	sl, r8, #1
 800767c:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007680:	f014 0401 	ands.w	r4, r4, #1
 8007684:	bf1f      	itttt	ne
 8007686:	f819 3008 	ldrbne.w	r3, [r9, r8]
 800768a:	f003 020f 	andne.w	r2, r3, #15
 800768e:	013b      	lslne	r3, r7, #4
 8007690:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8007694:	bf14      	ite	ne
 8007696:	4313      	orrne	r3, r2
 8007698:	b2fb      	uxtbeq	r3, r7
 800769a:	f809 3008 	strb.w	r3, [r9, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800769e:	6a31      	ldr	r1, [r6, #32]
			fs->wflag = 1;
 80076a0:	2301      	movs	r3, #1
 80076a2:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80076a4:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 80076a8:	4630      	mov	r0, r6
 80076aa:	f7ff ffb0 	bl	800760e <move_window>
			if (res != FR_OK) break;
 80076ae:	4605      	mov	r5, r0
 80076b0:	b940      	cbnz	r0, 80076c4 <put_fat+0x84>
			p = fs->win + bc % SS(fs);
 80076b2:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80076b6:	b144      	cbz	r4, 80076ca <put_fat+0x8a>
 80076b8:	f3c7 1707 	ubfx	r7, r7, #4, #8
 80076bc:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 80076c0:	2301      	movs	r3, #1
 80076c2:	70f3      	strb	r3, [r6, #3]
}
 80076c4:	4628      	mov	r0, r5
 80076c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80076ca:	f819 300a 	ldrb.w	r3, [r9, sl]
 80076ce:	f3c7 2703 	ubfx	r7, r7, #8, #4
 80076d2:	f023 030f 	bic.w	r3, r3, #15
 80076d6:	431f      	orrs	r7, r3
 80076d8:	e7f0      	b.n	80076bc <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80076da:	6a01      	ldr	r1, [r0, #32]
 80076dc:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80076e0:	f7ff ff95 	bl	800760e <move_window>
			if (res != FR_OK) break;
 80076e4:	4605      	mov	r5, r0
 80076e6:	2800      	cmp	r0, #0
 80076e8:	d1ec      	bne.n	80076c4 <put_fat+0x84>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80076ea:	0064      	lsls	r4, r4, #1
 80076ec:	f106 0330 	add.w	r3, r6, #48	; 0x30
 80076f0:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 80076f4:	1918      	adds	r0, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 80076f6:	551f      	strb	r7, [r3, r4]
 80076f8:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 80076fc:	7047      	strb	r7, [r0, #1]
			fs->wflag = 1;
 80076fe:	e7df      	b.n	80076c0 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007700:	6a01      	ldr	r1, [r0, #32]
 8007702:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8007706:	f7ff ff82 	bl	800760e <move_window>
			if (res != FR_OK) break;
 800770a:	4605      	mov	r5, r0
 800770c:	2800      	cmp	r0, #0
 800770e:	d1d9      	bne.n	80076c4 <put_fat+0x84>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007710:	00a4      	lsls	r4, r4, #2
 8007712:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8007716:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800771a:	441c      	add	r4, r3
 800771c:	4620      	mov	r0, r4
 800771e:	f7ff fec1 	bl	80074a4 <ld_dword>
 8007722:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8007726:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800772a:	4339      	orrs	r1, r7
 800772c:	4620      	mov	r0, r4
 800772e:	f7ff fec1 	bl	80074b4 <st_dword>
 8007732:	e7c5      	b.n	80076c0 <put_fat+0x80>
		switch (fs->fs_type) {
 8007734:	2502      	movs	r5, #2
 8007736:	e7c5      	b.n	80076c4 <put_fat+0x84>

08007738 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007738:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800773a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773c:	4605      	mov	r5, r0
 800773e:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007740:	d952      	bls.n	80077e8 <get_fat.isra.0+0xb0>
 8007742:	6943      	ldr	r3, [r0, #20]
 8007744:	4299      	cmp	r1, r3
 8007746:	d24f      	bcs.n	80077e8 <get_fat.isra.0+0xb0>
		switch (fs->fs_type) {
 8007748:	7803      	ldrb	r3, [r0, #0]
 800774a:	2b02      	cmp	r3, #2
 800774c:	d029      	beq.n	80077a2 <get_fat.isra.0+0x6a>
 800774e:	2b03      	cmp	r3, #3
 8007750:	d038      	beq.n	80077c4 <get_fat.isra.0+0x8c>
 8007752:	2b01      	cmp	r3, #1
 8007754:	d148      	bne.n	80077e8 <get_fat.isra.0+0xb0>
			bc = (UINT)clst; bc += bc / 2;
 8007756:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800775a:	6a01      	ldr	r1, [r0, #32]
 800775c:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 8007760:	f7ff ff55 	bl	800760e <move_window>
 8007764:	b110      	cbz	r0, 800776c <get_fat.isra.0+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007766:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800776a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 800776c:	1c77      	adds	r7, r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800776e:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
 8007770:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8007774:	442e      	add	r6, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007776:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800777a:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800777c:	f896 6030 	ldrb.w	r6, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007780:	f7ff ff45 	bl	800760e <move_window>
 8007784:	2800      	cmp	r0, #0
 8007786:	d1ee      	bne.n	8007766 <get_fat.isra.0+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007788:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800778c:	443d      	add	r5, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800778e:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8007790:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 8007794:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007798:	bf4c      	ite	mi
 800779a:	0900      	lsrmi	r0, r0, #4
 800779c:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 80077a0:	e7e3      	b.n	800776a <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80077a2:	6a01      	ldr	r1, [r0, #32]
 80077a4:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80077a8:	f7ff ff31 	bl	800760e <move_window>
 80077ac:	2800      	cmp	r0, #0
 80077ae:	d1da      	bne.n	8007766 <get_fat.isra.0+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80077b0:	0064      	lsls	r4, r4, #1
 80077b2:	3530      	adds	r5, #48	; 0x30
 80077b4:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 80077b8:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 80077ba:	5d28      	ldrb	r0, [r5, r4]
 80077bc:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80077be:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			break;
 80077c2:	e7d2      	b.n	800776a <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80077c4:	6a01      	ldr	r1, [r0, #32]
 80077c6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80077ca:	f7ff ff20 	bl	800760e <move_window>
 80077ce:	2800      	cmp	r0, #0
 80077d0:	d1c9      	bne.n	8007766 <get_fat.isra.0+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80077d2:	00a4      	lsls	r4, r4, #2
 80077d4:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80077d8:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 80077dc:	4420      	add	r0, r4
 80077de:	f7ff fe61 	bl	80074a4 <ld_dword>
 80077e2:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 80077e6:	e7c0      	b.n	800776a <get_fat.isra.0+0x32>
		switch (fs->fs_type) {
 80077e8:	2001      	movs	r0, #1
	return val;
 80077ea:	e7be      	b.n	800776a <get_fat.isra.0+0x32>

080077ec <create_chain>:
{
 80077ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = obj->fs;
 80077f0:	6805      	ldr	r5, [r0, #0]
{
 80077f2:	4680      	mov	r8, r0
	if (clst == 0) {	/* Create a new chain */
 80077f4:	460f      	mov	r7, r1
 80077f6:	b971      	cbnz	r1, 8007816 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80077f8:	68ee      	ldr	r6, [r5, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80077fa:	b1ee      	cbz	r6, 8007838 <create_chain+0x4c>
 80077fc:	696b      	ldr	r3, [r5, #20]
 80077fe:	42b3      	cmp	r3, r6
 8007800:	bf98      	it	ls
 8007802:	2601      	movls	r6, #1
		ncl = scl;	/* Start cluster */
 8007804:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007806:	696b      	ldr	r3, [r5, #20]
			ncl++;							/* Next cluster */
 8007808:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800780a:	42a3      	cmp	r3, r4
 800780c:	d817      	bhi.n	800783e <create_chain+0x52>
				if (ncl > scl) return 0;	/* No free cluster */
 800780e:	2e01      	cmp	r6, #1
 8007810:	d814      	bhi.n	800783c <create_chain+0x50>
 8007812:	2400      	movs	r4, #0
 8007814:	e006      	b.n	8007824 <create_chain+0x38>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007816:	4628      	mov	r0, r5
 8007818:	f7ff ff8e 	bl	8007738 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid value */
 800781c:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800781e:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid value */
 8007820:	d803      	bhi.n	800782a <create_chain+0x3e>
 8007822:	2401      	movs	r4, #1
}
 8007824:	4620      	mov	r0, r4
 8007826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800782a:	1c43      	adds	r3, r0, #1
 800782c:	d030      	beq.n	8007890 <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800782e:	696b      	ldr	r3, [r5, #20]
 8007830:	4283      	cmp	r3, r0
 8007832:	d8f7      	bhi.n	8007824 <create_chain+0x38>
 8007834:	463e      	mov	r6, r7
 8007836:	e7e5      	b.n	8007804 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007838:	2601      	movs	r6, #1
 800783a:	e7e3      	b.n	8007804 <create_chain+0x18>
				ncl = 2;
 800783c:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800783e:	f8d8 0000 	ldr.w	r0, [r8]
 8007842:	4621      	mov	r1, r4
 8007844:	f7ff ff78 	bl	8007738 <get_fat.isra.0>
			if (cs == 0) break;				/* Found a free cluster */
 8007848:	b130      	cbz	r0, 8007858 <create_chain+0x6c>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800784a:	2801      	cmp	r0, #1
 800784c:	d0e9      	beq.n	8007822 <create_chain+0x36>
 800784e:	3001      	adds	r0, #1
 8007850:	d01e      	beq.n	8007890 <create_chain+0xa4>
			if (ncl == scl) return 0;		/* No free cluster */
 8007852:	42b4      	cmp	r4, r6
 8007854:	d1d7      	bne.n	8007806 <create_chain+0x1a>
 8007856:	e7dc      	b.n	8007812 <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800785c:	4621      	mov	r1, r4
 800785e:	4628      	mov	r0, r5
 8007860:	f7ff feee 	bl	8007640 <put_fat>
		if (res == FR_OK && clst) {
 8007864:	b990      	cbnz	r0, 800788c <create_chain+0xa0>
 8007866:	b957      	cbnz	r7, 800787e <create_chain+0x92>
		if (fs->free_clst < fs->n_fatent - 2) fs->free_clst--;
 8007868:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
 800786c:	3a02      	subs	r2, #2
 800786e:	4293      	cmp	r3, r2
		fs->last_clst = ncl;
 8007870:	60ec      	str	r4, [r5, #12]
		if (fs->free_clst < fs->n_fatent - 2) fs->free_clst--;
 8007872:	d310      	bcc.n	8007896 <create_chain+0xaa>
		fs->fsi_flag |= 1;
 8007874:	792b      	ldrb	r3, [r5, #4]
 8007876:	f043 0301 	orr.w	r3, r3, #1
 800787a:	712b      	strb	r3, [r5, #4]
 800787c:	e7d2      	b.n	8007824 <create_chain+0x38>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800787e:	4622      	mov	r2, r4
 8007880:	4639      	mov	r1, r7
 8007882:	4628      	mov	r0, r5
 8007884:	f7ff fedc 	bl	8007640 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007888:	2800      	cmp	r0, #0
 800788a:	d0ed      	beq.n	8007868 <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Create error status */
 800788c:	2801      	cmp	r0, #1
 800788e:	d1c8      	bne.n	8007822 <create_chain+0x36>
 8007890:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007894:	e7c6      	b.n	8007824 <create_chain+0x38>
		if (fs->free_clst < fs->n_fatent - 2) fs->free_clst--;
 8007896:	3b01      	subs	r3, #1
 8007898:	612b      	str	r3, [r5, #16]
 800789a:	e7eb      	b.n	8007874 <create_chain+0x88>

0800789c <remove_chain>:
{
 800789c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800789e:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80078a0:	2c01      	cmp	r4, #1
	FATFS *fs = obj->fs;
 80078a2:	6805      	ldr	r5, [r0, #0]
{
 80078a4:	4606      	mov	r6, r0
 80078a6:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80078a8:	d92b      	bls.n	8007902 <remove_chain+0x66>
 80078aa:	696b      	ldr	r3, [r5, #20]
 80078ac:	42a3      	cmp	r3, r4
 80078ae:	d928      	bls.n	8007902 <remove_chain+0x66>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80078b0:	b12a      	cbz	r2, 80078be <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80078b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078b6:	4628      	mov	r0, r5
 80078b8:	f7ff fec2 	bl	8007640 <put_fat>
		if (res != FR_OK) return res;
 80078bc:	b938      	cbnz	r0, 80078ce <remove_chain+0x32>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80078be:	4621      	mov	r1, r4
 80078c0:	6830      	ldr	r0, [r6, #0]
 80078c2:	f7ff ff39 	bl	8007738 <get_fat.isra.0>
		if (nxt == 0) break;				/* Empty cluster? */
 80078c6:	4627      	mov	r7, r4
 80078c8:	4604      	mov	r4, r0
 80078ca:	b908      	cbnz	r0, 80078d0 <remove_chain+0x34>
	return FR_OK;
 80078cc:	2000      	movs	r0, #0
}
 80078ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80078d0:	2801      	cmp	r0, #1
 80078d2:	d016      	beq.n	8007902 <remove_chain+0x66>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80078d4:	1c43      	adds	r3, r0, #1
 80078d6:	d016      	beq.n	8007906 <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80078d8:	2200      	movs	r2, #0
 80078da:	4639      	mov	r1, r7
 80078dc:	4628      	mov	r0, r5
 80078de:	f7ff feaf 	bl	8007640 <put_fat>
			if (res != FR_OK) return res;
 80078e2:	2800      	cmp	r0, #0
 80078e4:	d1f3      	bne.n	80078ce <remove_chain+0x32>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80078e6:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
 80078ea:	1e91      	subs	r1, r2, #2
 80078ec:	428b      	cmp	r3, r1
 80078ee:	d205      	bcs.n	80078fc <remove_chain+0x60>
			fs->free_clst++;
 80078f0:	3301      	adds	r3, #1
 80078f2:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 80078f4:	792b      	ldrb	r3, [r5, #4]
 80078f6:	f043 0301 	orr.w	r3, r3, #1
 80078fa:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80078fc:	42a2      	cmp	r2, r4
 80078fe:	d8de      	bhi.n	80078be <remove_chain+0x22>
 8007900:	e7e4      	b.n	80078cc <remove_chain+0x30>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007902:	2002      	movs	r0, #2
 8007904:	e7e3      	b.n	80078ce <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007906:	2001      	movs	r0, #1
 8007908:	e7e1      	b.n	80078ce <remove_chain+0x32>

0800790a <sync_fs>:
{
 800790a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800790c:	4604      	mov	r4, r0
	res = sync_window(fs);
 800790e:	f7ff fe78 	bl	8007602 <sync_window>
 8007912:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8007914:	2800      	cmp	r0, #0
 8007916:	d142      	bne.n	800799e <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007918:	7823      	ldrb	r3, [r4, #0]
 800791a:	2b03      	cmp	r3, #3
 800791c:	d137      	bne.n	800798e <sync_fs+0x84>
 800791e:	7927      	ldrb	r7, [r4, #4]
 8007920:	2f01      	cmp	r7, #1
 8007922:	d134      	bne.n	800798e <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 8007924:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007928:	4601      	mov	r1, r0
 800792a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800792e:	4630      	mov	r0, r6
 8007930:	f7ff fdc8 	bl	80074c4 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8007934:	2355      	movs	r3, #85	; 0x55
 8007936:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
	*ptr++ = (BYTE)val;
 800793a:	23aa      	movs	r3, #170	; 0xaa
 800793c:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
	*ptr++ = (BYTE)val; val >>= 8;
 8007940:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 8007942:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8007944:	2172      	movs	r1, #114	; 0x72
 8007946:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800794a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	*ptr++ = (BYTE)val; val >>= 8;
 800794e:	2361      	movs	r3, #97	; 0x61
 8007950:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	*ptr++ = (BYTE)val;
 8007954:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	*ptr++ = (BYTE)val; val >>= 8;
 8007958:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
	*ptr++ = (BYTE)val;
 800795c:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
	*ptr++ = (BYTE)val; val >>= 8;
 8007960:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
	*ptr++ = (BYTE)val; val >>= 8;
 8007964:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007968:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800796c:	6921      	ldr	r1, [r4, #16]
 800796e:	f7ff fda1 	bl	80074b4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007972:	68e1      	ldr	r1, [r4, #12]
 8007974:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8007978:	f7ff fd9c 	bl	80074b4 <st_dword>
			fs->winsect = fs->volbase + 1;
 800797c:	69e2      	ldr	r2, [r4, #28]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800797e:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8007980:	3201      	adds	r2, #1
 8007982:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007984:	463b      	mov	r3, r7
 8007986:	4631      	mov	r1, r6
 8007988:	f7fd f93c 	bl	8004c04 <disk_write>
			fs->fsi_flag = 0;
 800798c:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800798e:	2200      	movs	r2, #0
 8007990:	7860      	ldrb	r0, [r4, #1]
 8007992:	4611      	mov	r1, r2
 8007994:	f7fd f942 	bl	8004c1c <disk_ioctl>
	res = sync_window(fs);
 8007998:	3800      	subs	r0, #0
 800799a:	bf18      	it	ne
 800799c:	2001      	movne	r0, #1
}
 800799e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080079a0 <dir_sdi.constprop.0>:
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80079a0:	6882      	ldr	r2, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80079a2:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 80079a4:	2300      	movs	r3, #0
	FATFS *fs = dp->obj.fs;
 80079a6:	6805      	ldr	r5, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 80079a8:	6103      	str	r3, [r0, #16]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 80079aa:	4604      	mov	r4, r0
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80079ac:	b99a      	cbnz	r2, 80079d6 <dir_sdi.constprop.0+0x36>
 80079ae:	782b      	ldrb	r3, [r5, #0]
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d901      	bls.n	80079b8 <dir_sdi.constprop.0+0x18>
		clst = fs->dirbase;
 80079b4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80079b6:	b96b      	cbnz	r3, 80079d4 <dir_sdi.constprop.0+0x34>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80079b8:	892b      	ldrh	r3, [r5, #8]
 80079ba:	b90b      	cbnz	r3, 80079c0 <dir_sdi.constprop.0+0x20>
 80079bc:	2002      	movs	r0, #2
}
 80079be:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 80079c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80079c2:	61a3      	str	r3, [r4, #24]
	if (!dp->sect) return FR_INT_ERR;
 80079c4:	69a3      	ldr	r3, [r4, #24]
	dp->clust = clst;					/* Current cluster# */
 80079c6:	6162      	str	r2, [r4, #20]
	if (!dp->sect) return FR_INT_ERR;
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d0f7      	beq.n	80079bc <dir_sdi.constprop.0+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80079cc:	3530      	adds	r5, #48	; 0x30
 80079ce:	61e5      	str	r5, [r4, #28]
	return FR_OK;
 80079d0:	2000      	movs	r0, #0
 80079d2:	e7f4      	b.n	80079be <dir_sdi.constprop.0+0x1e>
 80079d4:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80079d6:	896b      	ldrh	r3, [r5, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 80079d8:	b963      	cbnz	r3, 80079f4 <dir_sdi.constprop.0+0x54>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80079da:	4611      	mov	r1, r2
 80079dc:	6820      	ldr	r0, [r4, #0]
 80079de:	f7ff feab 	bl	8007738 <get_fat.isra.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80079e2:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80079e4:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80079e6:	d00b      	beq.n	8007a00 <dir_sdi.constprop.0+0x60>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80079e8:	2801      	cmp	r0, #1
 80079ea:	d9e7      	bls.n	80079bc <dir_sdi.constprop.0+0x1c>
 80079ec:	696b      	ldr	r3, [r5, #20]
 80079ee:	4298      	cmp	r0, r3
 80079f0:	d3f3      	bcc.n	80079da <dir_sdi.constprop.0+0x3a>
 80079f2:	e7e3      	b.n	80079bc <dir_sdi.constprop.0+0x1c>
		dp->sect = clust2sect(fs, clst);
 80079f4:	4611      	mov	r1, r2
 80079f6:	4628      	mov	r0, r5
 80079f8:	f7ff fd6a 	bl	80074d0 <clust2sect>
 80079fc:	61a0      	str	r0, [r4, #24]
 80079fe:	e7e1      	b.n	80079c4 <dir_sdi.constprop.0+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007a00:	2001      	movs	r0, #1
 8007a02:	e7dc      	b.n	80079be <dir_sdi.constprop.0+0x1e>

08007a04 <dir_next>:
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007a04:	6903      	ldr	r3, [r0, #16]
{
 8007a06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007a0a:	f103 0820 	add.w	r8, r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007a0e:	6983      	ldr	r3, [r0, #24]
{
 8007a10:	4605      	mov	r5, r0
 8007a12:	468a      	mov	sl, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007a14:	b193      	cbz	r3, 8007a3c <dir_next+0x38>
 8007a16:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
 8007a1a:	d20f      	bcs.n	8007a3c <dir_next+0x38>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007a1c:	f3c8 0908 	ubfx	r9, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 8007a20:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007a22:	f1b9 0f00 	cmp.w	r9, #0
 8007a26:	d14d      	bne.n	8007ac4 <dir_next+0xc0>
		if (!dp->clust) {		/* Static table */
 8007a28:	6941      	ldr	r1, [r0, #20]
		dp->sect++;				/* Next sector */
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	6183      	str	r3, [r0, #24]
		if (!dp->clust) {		/* Static table */
 8007a2e:	b939      	cbnz	r1, 8007a40 <dir_next+0x3c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007a30:	8923      	ldrh	r3, [r4, #8]
 8007a32:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 8007a36:	d845      	bhi.n	8007ac4 <dir_next+0xc0>
				dp->sect = 0; return FR_NO_FILE;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	61ab      	str	r3, [r5, #24]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007a3c:	2004      	movs	r0, #4
 8007a3e:	e00b      	b.n	8007a58 <dir_next+0x54>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007a40:	8967      	ldrh	r7, [r4, #10]
 8007a42:	3f01      	subs	r7, #1
 8007a44:	ea17 2758 	ands.w	r7, r7, r8, lsr #9
 8007a48:	d13c      	bne.n	8007ac4 <dir_next+0xc0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	f7ff fe74 	bl	8007738 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007a50:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007a52:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007a54:	d802      	bhi.n	8007a5c <dir_next+0x58>
 8007a56:	2002      	movs	r0, #2
}
 8007a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007a5c:	1c42      	adds	r2, r0, #1
 8007a5e:	d101      	bne.n	8007a64 <dir_next+0x60>
 8007a60:	2001      	movs	r0, #1
 8007a62:	e7f9      	b.n	8007a58 <dir_next+0x54>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007a64:	6963      	ldr	r3, [r4, #20]
 8007a66:	4283      	cmp	r3, r0
 8007a68:	d826      	bhi.n	8007ab8 <dir_next+0xb4>
					if (!stretch) {								/* If no stretch, report EOT */
 8007a6a:	f1ba 0f00 	cmp.w	sl, #0
 8007a6e:	d0e3      	beq.n	8007a38 <dir_next+0x34>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007a70:	6969      	ldr	r1, [r5, #20]
 8007a72:	4628      	mov	r0, r5
 8007a74:	f7ff feba 	bl	80077ec <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007a78:	4606      	mov	r6, r0
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	d035      	beq.n	8007aea <dir_next+0xe6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007a7e:	2801      	cmp	r0, #1
 8007a80:	d0e9      	beq.n	8007a56 <dir_next+0x52>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007a82:	1c43      	adds	r3, r0, #1
 8007a84:	d0ec      	beq.n	8007a60 <dir_next+0x5c>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007a86:	4620      	mov	r0, r4
 8007a88:	f7ff fdbb 	bl	8007602 <sync_window>
 8007a8c:	4601      	mov	r1, r0
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	d1e6      	bne.n	8007a60 <dir_next+0x5c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007a92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a96:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007a9a:	f7ff fd13 	bl	80074c4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007a9e:	4631      	mov	r1, r6
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	f7ff fd15 	bl	80074d0 <clust2sect>
						fs->wflag = 1;
 8007aa6:	f04f 0a01 	mov.w	sl, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007aaa:	62e0      	str	r0, [r4, #44]	; 0x2c
 8007aac:	8963      	ldrh	r3, [r4, #10]
 8007aae:	429f      	cmp	r7, r3
 8007ab0:	d30f      	bcc.n	8007ad2 <dir_next+0xce>
					fs->winsect -= n;							/* Restore window offset */
 8007ab2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007ab4:	1bdf      	subs	r7, r3, r7
 8007ab6:	62e7      	str	r7, [r4, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 8007ab8:	616e      	str	r6, [r5, #20]
				dp->sect = clust2sect(fs, clst);
 8007aba:	4631      	mov	r1, r6
 8007abc:	4620      	mov	r0, r4
 8007abe:	f7ff fd07 	bl	80074d0 <clust2sect>
 8007ac2:	61a8      	str	r0, [r5, #24]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007ac4:	3430      	adds	r4, #48	; 0x30
 8007ac6:	444c      	add	r4, r9
	dp->dptr = ofs;						/* Current entry */
 8007ac8:	f8c5 8010 	str.w	r8, [r5, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007acc:	61ec      	str	r4, [r5, #28]
	return FR_OK;
 8007ace:	2000      	movs	r0, #0
 8007ad0:	e7c2      	b.n	8007a58 <dir_next+0x54>
						fs->wflag = 1;
 8007ad2:	f884 a003 	strb.w	sl, [r4, #3]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f7ff fd6d 	bl	80075b6 <sync_window.part.0>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007adc:	2800      	cmp	r0, #0
 8007ade:	d1bf      	bne.n	8007a60 <dir_next+0x5c>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007ae0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	3701      	adds	r7, #1
 8007ae6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ae8:	e7e0      	b.n	8007aac <dir_next+0xa8>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007aea:	2007      	movs	r0, #7
 8007aec:	e7b4      	b.n	8007a58 <dir_next+0x54>

08007aee <dir_read.constprop.0>:
FRESULT dir_read (
 8007aee:	b538      	push	{r3, r4, r5, lr}
	FATFS *fs = dp->obj.fs;
 8007af0:	6805      	ldr	r5, [r0, #0]
FRESULT dir_read (
 8007af2:	4604      	mov	r4, r0
	FRESULT res = FR_NO_FILE;
 8007af4:	2004      	movs	r0, #4
	while (dp->sect) {
 8007af6:	69a1      	ldr	r1, [r4, #24]
 8007af8:	b909      	cbnz	r1, 8007afe <dir_read.constprop.0+0x10>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8007afa:	b1a8      	cbz	r0, 8007b28 <dir_read.constprop.0+0x3a>
 8007afc:	e01c      	b.n	8007b38 <dir_read.constprop.0+0x4a>
		res = move_window(fs, dp->sect);
 8007afe:	4628      	mov	r0, r5
 8007b00:	f7ff fd85 	bl	800760e <move_window>
		if (res != FR_OK) break;
 8007b04:	b9c0      	cbnz	r0, 8007b38 <dir_read.constprop.0+0x4a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8007b06:	69e3      	ldr	r3, [r4, #28]
 8007b08:	781a      	ldrb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of the directory */
 8007b0a:	b1c2      	cbz	r2, 8007b3e <dir_read.constprop.0+0x50>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8007b0c:	7adb      	ldrb	r3, [r3, #11]
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8007b0e:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8007b10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b14:	71a3      	strb	r3, [r4, #6]
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8007b16:	d009      	beq.n	8007b2c <dir_read.constprop.0+0x3e>
 8007b18:	2a2e      	cmp	r2, #46	; 0x2e
 8007b1a:	d007      	beq.n	8007b2c <dir_read.constprop.0+0x3e>
 8007b1c:	2b0f      	cmp	r3, #15
 8007b1e:	d005      	beq.n	8007b2c <dir_read.constprop.0+0x3e>
 8007b20:	f023 0320 	bic.w	r3, r3, #32
 8007b24:	2b08      	cmp	r3, #8
 8007b26:	d001      	beq.n	8007b2c <dir_read.constprop.0+0x3e>
		res = move_window(fs, dp->sect);
 8007b28:	2000      	movs	r0, #0
}
 8007b2a:	bd38      	pop	{r3, r4, r5, pc}
		res = dir_next(dp, 0);		/* Next entry */
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	4620      	mov	r0, r4
 8007b30:	f7ff ff68 	bl	8007a04 <dir_next>
		if (res != FR_OK) break;
 8007b34:	2800      	cmp	r0, #0
 8007b36:	d0de      	beq.n	8007af6 <dir_read.constprop.0+0x8>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8007b38:	2300      	movs	r3, #0
 8007b3a:	61a3      	str	r3, [r4, #24]
 8007b3c:	e7f5      	b.n	8007b2a <dir_read.constprop.0+0x3c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of the directory */
 8007b3e:	2004      	movs	r0, #4
 8007b40:	e7fa      	b.n	8007b38 <dir_read.constprop.0+0x4a>

08007b42 <dir_register>:
{
 8007b42:	b570      	push	{r4, r5, r6, lr}
	FATFS *fs = dp->obj.fs;
 8007b44:	6806      	ldr	r6, [r0, #0]
{
 8007b46:	4605      	mov	r5, r0
	res = dir_sdi(dp, 0);
 8007b48:	f7ff ff2a 	bl	80079a0 <dir_sdi.constprop.0>
	if (res == FR_OK) {
 8007b4c:	4604      	mov	r4, r0
 8007b4e:	bb28      	cbnz	r0, 8007b9c <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 8007b50:	69a9      	ldr	r1, [r5, #24]
 8007b52:	4630      	mov	r0, r6
 8007b54:	f7ff fd5b 	bl	800760e <move_window>
			if (res != FR_OK) break;
 8007b58:	4604      	mov	r4, r0
 8007b5a:	b9f8      	cbnz	r0, 8007b9c <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007b5c:	69eb      	ldr	r3, [r5, #28]
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	2be5      	cmp	r3, #229	; 0xe5
 8007b62:	d114      	bne.n	8007b8e <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 8007b64:	69a9      	ldr	r1, [r5, #24]
 8007b66:	4630      	mov	r0, r6
 8007b68:	f7ff fd51 	bl	800760e <move_window>
		if (res == FR_OK) {
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	b960      	cbnz	r0, 8007b8a <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007b70:	4601      	mov	r1, r0
 8007b72:	2220      	movs	r2, #32
 8007b74:	69e8      	ldr	r0, [r5, #28]
 8007b76:	f7ff fca5 	bl	80074c4 <mem_set>
	if (cnt) {
 8007b7a:	69e8      	ldr	r0, [r5, #28]
 8007b7c:	220b      	movs	r2, #11
 8007b7e:	f105 0120 	add.w	r1, r5, #32
 8007b82:	f7ff fcca 	bl	800751a <mem_cpy.part.0>
			fs->wflag = 1;
 8007b86:	2301      	movs	r3, #1
 8007b88:	70f3      	strb	r3, [r6, #3]
}
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d0e8      	beq.n	8007b64 <dir_register+0x22>
			res = dir_next(dp, 1);
 8007b92:	2101      	movs	r1, #1
 8007b94:	4628      	mov	r0, r5
 8007b96:	f7ff ff35 	bl	8007a04 <dir_next>
 8007b9a:	e7d7      	b.n	8007b4c <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007b9c:	2c04      	cmp	r4, #4
 8007b9e:	bf08      	it	eq
 8007ba0:	2407      	moveq	r4, #7
 8007ba2:	e7f2      	b.n	8007b8a <dir_register+0x48>

08007ba4 <f_open>:
{
 8007ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba8:	b08e      	sub	sp, #56	; 0x38
 8007baa:	4616      	mov	r6, r2
 8007bac:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 8007bae:	4605      	mov	r5, r0
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	f000 80c7 	beq.w	8007d44 <f_open+0x1a0>
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007bb6:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8007bba:	463a      	mov	r2, r7
 8007bbc:	a902      	add	r1, sp, #8
 8007bbe:	a801      	add	r0, sp, #4
 8007bc0:	f7fc fb04 	bl	80041cc <find_volume>
	if (res == FR_OK) {
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	f040 80b5 	bne.w	8007d34 <f_open+0x190>
		dj.obj.fs = fs;
 8007bca:	9b02      	ldr	r3, [sp, #8]
		res = follow_path(&dj, path);	/* Follow the file path */
 8007bcc:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 8007bce:	9303      	str	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8007bd0:	a803      	add	r0, sp, #12
 8007bd2:	f7fc fc53 	bl	800447c <follow_path>
		if (res == FR_OK) {
 8007bd6:	4604      	mov	r4, r0
 8007bd8:	b920      	cbnz	r0, 8007be4 <f_open+0x40>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007bda:	f99d 3037 	ldrsb.w	r3, [sp, #55]	; 0x37
				res = FR_INVALID_NAME;
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	bfb8      	it	lt
 8007be2:	2406      	movlt	r4, #6
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007be4:	f016 0f1c 	tst.w	r6, #28
 8007be8:	d073      	beq.n	8007cd2 <f_open+0x12e>
			if (res != FR_OK) {					/* No file, create new */
 8007bea:	2c00      	cmp	r4, #0
 8007bec:	d043      	beq.n	8007c76 <f_open+0xd2>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8007bee:	2c04      	cmp	r4, #4
 8007bf0:	d13e      	bne.n	8007c70 <f_open+0xcc>
					res = dir_register(&dj);
 8007bf2:	a803      	add	r0, sp, #12
 8007bf4:	f7ff ffa5 	bl	8007b42 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	d138      	bne.n	8007c70 <f_open+0xcc>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007bfe:	f047 0708 	orr.w	r7, r7, #8
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007c02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007c04:	f8dd 8008 	ldr.w	r8, [sp, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c08:	2400      	movs	r4, #0
	*ptr++ = (BYTE)val; val >>= 8;
 8007c0a:	2121      	movs	r1, #33	; 0x21
	*ptr++ = (BYTE)val;
 8007c0c:	2248      	movs	r2, #72	; 0x48
 8007c0e:	745a      	strb	r2, [r3, #17]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c10:	739c      	strb	r4, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c12:	73dc      	strb	r4, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c14:	7419      	strb	r1, [r3, #16]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	*ptr++ = (BYTE)val;
 8007c18:	765a      	strb	r2, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c1a:	759c      	strb	r4, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c1c:	75dc      	strb	r4, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c1e:	7619      	strb	r1, [r3, #24]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c22:	2220      	movs	r2, #32
 8007c24:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007c26:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007c28:	f898 0000 	ldrb.w	r0, [r8]
 8007c2c:	f7ff fc7e 	bl	800752c <ld_clust.isra.0>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007c30:	4622      	mov	r2, r4
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007c32:	4606      	mov	r6, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007c34:	4640      	mov	r0, r8
 8007c36:	f7ff fc87 	bl	8007548 <st_clust.isra.0>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007c3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	*ptr++ = (BYTE)val; val >>= 8;
 8007c3c:	771c      	strb	r4, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c3e:	775c      	strb	r4, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c40:	779c      	strb	r4, [r3, #30]
	*ptr++ = (BYTE)val;
 8007c42:	77dc      	strb	r4, [r3, #31]
					fs->wflag = 1;
 8007c44:	9b02      	ldr	r3, [sp, #8]
 8007c46:	2201      	movs	r2, #1
 8007c48:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8007c4a:	b1ee      	cbz	r6, 8007c88 <f_open+0xe4>
						res = remove_chain(&dj.obj, cl, 0);
 8007c4c:	4622      	mov	r2, r4
 8007c4e:	4631      	mov	r1, r6
 8007c50:	a803      	add	r0, sp, #12
						dw = fs->winsect;
 8007c52:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 8007c56:	f7ff fe21 	bl	800789c <remove_chain>
						if (res == FR_OK) {
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	b940      	cbnz	r0, 8007c70 <f_open+0xcc>
							res = move_window(fs, dw);
 8007c5e:	9802      	ldr	r0, [sp, #8]
 8007c60:	4641      	mov	r1, r8
 8007c62:	f7ff fcd4 	bl	800760e <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007c66:	9b02      	ldr	r3, [sp, #8]
 8007c68:	3e01      	subs	r6, #1
 8007c6a:	60de      	str	r6, [r3, #12]
		if (res == FR_OK) {
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	b158      	cbz	r0, 8007c88 <f_open+0xe4>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007c70:	2300      	movs	r3, #0
 8007c72:	602b      	str	r3, [r5, #0]
 8007c74:	e029      	b.n	8007cca <f_open+0x126>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007c76:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8007c7a:	f013 0f11 	tst.w	r3, #17
 8007c7e:	d132      	bne.n	8007ce6 <f_open+0x142>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007c80:	0770      	lsls	r0, r6, #29
 8007c82:	d459      	bmi.n	8007d38 <f_open+0x194>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007c84:	0731      	lsls	r1, r6, #28
 8007c86:	d4bc      	bmi.n	8007c02 <f_open+0x5e>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007c88:	9c02      	ldr	r4, [sp, #8]
			fp->dir_ptr = dj.dir;
 8007c8a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007c8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007c8e:	622b      	str	r3, [r5, #32]
			fp->dir_ptr = dj.dir;
 8007c90:	626e      	str	r6, [r5, #36]	; 0x24
				fp->obj.sclust = ld_clust(fs, dj.dir);				/* Get allocation info */
 8007c92:	7820      	ldrb	r0, [r4, #0]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007c94:	0739      	lsls	r1, r7, #28
				fp->obj.sclust = ld_clust(fs, dj.dir);				/* Get allocation info */
 8007c96:	4631      	mov	r1, r6
				mode |= FA_MODIFIED;
 8007c98:	bf48      	it	mi
 8007c9a:	f047 0740 	orrmi.w	r7, r7, #64	; 0x40
				fp->obj.sclust = ld_clust(fs, dj.dir);				/* Get allocation info */
 8007c9e:	f7ff fc45 	bl	800752c <ld_clust.isra.0>
 8007ca2:	4601      	mov	r1, r0
 8007ca4:	60a8      	str	r0, [r5, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007ca6:	f106 001c 	add.w	r0, r6, #28
 8007caa:	f7ff fbfb 	bl	80074a4 <ld_dword>
			fp->obj.id = fs->id;
 8007cae:	88e3      	ldrh	r3, [r4, #6]
 8007cb0:	80ab      	strh	r3, [r5, #4]
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007cb2:	06ba      	lsls	r2, r7, #26
			fp->err = 0;			/* Clear error flag */
 8007cb4:	f04f 0300 	mov.w	r3, #0
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007cb8:	4606      	mov	r6, r0
 8007cba:	60e8      	str	r0, [r5, #12]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007cbc:	602c      	str	r4, [r5, #0]
			fp->flag = mode;		/* Set file access mode */
 8007cbe:	742f      	strb	r7, [r5, #16]
			fp->err = 0;			/* Clear error flag */
 8007cc0:	746b      	strb	r3, [r5, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 8007cc2:	61eb      	str	r3, [r5, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007cc4:	616b      	str	r3, [r5, #20]
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007cc6:	d410      	bmi.n	8007cea <f_open+0x146>
						res = FR_INT_ERR;
 8007cc8:	2400      	movs	r4, #0
}
 8007cca:	4620      	mov	r0, r4
 8007ccc:	b00e      	add	sp, #56	; 0x38
 8007cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (res == FR_OK) {					/* Following succeeded */
 8007cd2:	2c00      	cmp	r4, #0
 8007cd4:	d1cc      	bne.n	8007c70 <f_open+0xcc>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007cd6:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8007cda:	06da      	lsls	r2, r3, #27
 8007cdc:	d42e      	bmi.n	8007d3c <f_open+0x198>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007cde:	07b4      	lsls	r4, r6, #30
 8007ce0:	d5d2      	bpl.n	8007c88 <f_open+0xe4>
 8007ce2:	07d8      	lsls	r0, r3, #31
 8007ce4:	d5d0      	bpl.n	8007c88 <f_open+0xe4>
					res = FR_DENIED;
 8007ce6:	2407      	movs	r4, #7
 8007ce8:	e7c2      	b.n	8007c70 <f_open+0xcc>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d0ec      	beq.n	8007cc8 <f_open+0x124>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007cee:	8964      	ldrh	r4, [r4, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007cf0:	6168      	str	r0, [r5, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007cf2:	0264      	lsls	r4, r4, #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007cf4:	42b4      	cmp	r4, r6
 8007cf6:	d30f      	bcc.n	8007d18 <f_open+0x174>
 8007cf8:	2400      	movs	r4, #0
				fp->clust = clst;
 8007cfa:	61a9      	str	r1, [r5, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007cfc:	2c00      	cmp	r4, #0
 8007cfe:	d1b7      	bne.n	8007c70 <f_open+0xcc>
 8007d00:	f3c6 0308 	ubfx	r3, r6, #0, #9
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d0df      	beq.n	8007cc8 <f_open+0x124>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007d08:	9802      	ldr	r0, [sp, #8]
 8007d0a:	f7ff fbe1 	bl	80074d0 <clust2sect>
 8007d0e:	b1b8      	cbz	r0, 8007d40 <f_open+0x19c>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007d10:	eb00 2056 	add.w	r0, r0, r6, lsr #9
 8007d14:	61e8      	str	r0, [r5, #28]
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007d16:	e7d8      	b.n	8007cca <f_open+0x126>
					clst = get_fat(&fp->obj, clst);
 8007d18:	6828      	ldr	r0, [r5, #0]
 8007d1a:	f7ff fd0d 	bl	8007738 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 8007d1e:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8007d20:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8007d22:	eba6 0604 	sub.w	r6, r6, r4
 8007d26:	d903      	bls.n	8007d30 <f_open+0x18c>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007d28:	1c43      	adds	r3, r0, #1
 8007d2a:	d1e3      	bne.n	8007cf4 <f_open+0x150>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007d2c:	2401      	movs	r4, #1
 8007d2e:	e7e4      	b.n	8007cfa <f_open+0x156>
					if (clst <= 1) res = FR_INT_ERR;
 8007d30:	2402      	movs	r4, #2
 8007d32:	e7e2      	b.n	8007cfa <f_open+0x156>
 8007d34:	4604      	mov	r4, r0
 8007d36:	e79b      	b.n	8007c70 <f_open+0xcc>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007d38:	2408      	movs	r4, #8
 8007d3a:	e799      	b.n	8007c70 <f_open+0xcc>
					res = FR_NO_FILE;
 8007d3c:	2404      	movs	r4, #4
 8007d3e:	e797      	b.n	8007c70 <f_open+0xcc>
						res = FR_INT_ERR;
 8007d40:	2402      	movs	r4, #2
 8007d42:	e795      	b.n	8007c70 <f_open+0xcc>
	if (!fp) return FR_INVALID_OBJECT;
 8007d44:	2409      	movs	r4, #9
 8007d46:	e7c0      	b.n	8007cca <f_open+0x126>

08007d48 <f_read>:
{
 8007d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d4c:	4699      	mov	r9, r3
 8007d4e:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 8007d50:	2300      	movs	r3, #0
{
 8007d52:	4688      	mov	r8, r1
	*br = 0;	/* Clear read byte counter */
 8007d54:	f8c9 3000 	str.w	r3, [r9]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007d58:	a903      	add	r1, sp, #12
{
 8007d5a:	4604      	mov	r4, r0
 8007d5c:	4615      	mov	r5, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007d5e:	f7ff fbc2 	bl	80074e6 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007d62:	4606      	mov	r6, r0
 8007d64:	b9f8      	cbnz	r0, 8007da6 <f_read+0x5e>
 8007d66:	7c66      	ldrb	r6, [r4, #17]
 8007d68:	b9ee      	cbnz	r6, 8007da6 <f_read+0x5e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007d6a:	f894 a010 	ldrb.w	sl, [r4, #16]
 8007d6e:	f01a 0301 	ands.w	r3, sl, #1
 8007d72:	9300      	str	r3, [sp, #0]
 8007d74:	d07c      	beq.n	8007e70 <f_read+0x128>
	remain = fp->obj.objsize - fp->fptr;
 8007d76:	68e7      	ldr	r7, [r4, #12]
 8007d78:	6962      	ldr	r2, [r4, #20]
 8007d7a:	1abf      	subs	r7, r7, r2
 8007d7c:	42af      	cmp	r7, r5
 8007d7e:	bf28      	it	cs
 8007d80:	462f      	movcs	r7, r5
	for ( ;  btr;								/* Repeat until all data read */
 8007d82:	b187      	cbz	r7, 8007da6 <f_read+0x5e>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007d84:	6962      	ldr	r2, [r4, #20]
 8007d86:	f3c2 0308 	ubfx	r3, r2, #0, #9
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d157      	bne.n	8007e3e <f_read+0xf6>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007d8e:	9b03      	ldr	r3, [sp, #12]
 8007d90:	895b      	ldrh	r3, [r3, #10]
 8007d92:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8007d94:	ea13 2a52 	ands.w	sl, r3, r2, lsr #9
 8007d98:	d115      	bne.n	8007dc6 <f_read+0x7e>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007d9a:	b942      	cbnz	r2, 8007dae <f_read+0x66>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007d9c:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007d9e:	2801      	cmp	r0, #1
 8007da0:	d80a      	bhi.n	8007db8 <f_read+0x70>
 8007da2:	2602      	movs	r6, #2
 8007da4:	7466      	strb	r6, [r4, #17]
}
 8007da6:	4630      	mov	r0, r6
 8007da8:	b005      	add	sp, #20
 8007daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007dae:	69a1      	ldr	r1, [r4, #24]
 8007db0:	6820      	ldr	r0, [r4, #0]
 8007db2:	f7ff fcc1 	bl	8007738 <get_fat.isra.0>
 8007db6:	e7f2      	b.n	8007d9e <f_read+0x56>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007db8:	1c43      	adds	r3, r0, #1
 8007dba:	d103      	bne.n	8007dc4 <f_read+0x7c>
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	9e00      	ldr	r6, [sp, #0]
 8007dc0:	7463      	strb	r3, [r4, #17]
 8007dc2:	e7f0      	b.n	8007da6 <f_read+0x5e>
				fp->clust = clst;				/* Update current cluster */
 8007dc4:	61a0      	str	r0, [r4, #24]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007dc6:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007dca:	69a1      	ldr	r1, [r4, #24]
 8007dcc:	4658      	mov	r0, fp
 8007dce:	f7ff fb7f 	bl	80074d0 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007dd2:	2800      	cmp	r0, #0
 8007dd4:	d0e5      	beq.n	8007da2 <f_read+0x5a>
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007dd6:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
 8007dda:	eb0a 0200 	add.w	r2, sl, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007dde:	d32d      	bcc.n	8007e3c <f_read+0xf4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007de0:	f8bb 100a 	ldrh.w	r1, [fp, #10]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007de4:	9201      	str	r2, [sp, #4]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007de6:	eb0a 2057 	add.w	r0, sl, r7, lsr #9
 8007dea:	4288      	cmp	r0, r1
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007dec:	ea4f 2557 	mov.w	r5, r7, lsr #9
					cc = fs->csize - csect;
 8007df0:	bf88      	it	hi
 8007df2:	eba1 050a 	subhi.w	r5, r1, sl
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007df6:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8007dfa:	462b      	mov	r3, r5
 8007dfc:	4641      	mov	r1, r8
 8007dfe:	f7fc fef5 	bl	8004bec <disk_read>
 8007e02:	2800      	cmp	r0, #0
 8007e04:	d1da      	bne.n	8007dbc <f_read+0x74>
				if (fs->wflag && fs->winsect - sect < cc) {
 8007e06:	9903      	ldr	r1, [sp, #12]
 8007e08:	78cb      	ldrb	r3, [r1, #3]
 8007e0a:	b15b      	cbz	r3, 8007e24 <f_read+0xdc>
 8007e0c:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8007e0e:	9a01      	ldr	r2, [sp, #4]
 8007e10:	1a80      	subs	r0, r0, r2
 8007e12:	42a8      	cmp	r0, r5
 8007e14:	d206      	bcs.n	8007e24 <f_read+0xdc>
	if (cnt) {
 8007e16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e1a:	3130      	adds	r1, #48	; 0x30
 8007e1c:	eb08 2040 	add.w	r0, r8, r0, lsl #9
 8007e20:	f7ff fb7b 	bl	800751a <mem_cpy.part.0>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007e24:	026d      	lsls	r5, r5, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007e26:	6963      	ldr	r3, [r4, #20]
 8007e28:	442b      	add	r3, r5
 8007e2a:	6163      	str	r3, [r4, #20]
 8007e2c:	f8d9 3000 	ldr.w	r3, [r9]
 8007e30:	442b      	add	r3, r5
 8007e32:	44a8      	add	r8, r5
 8007e34:	f8c9 3000 	str.w	r3, [r9]
 8007e38:	1b7f      	subs	r7, r7, r5
 8007e3a:	e7a2      	b.n	8007d82 <f_read+0x3a>
			fp->sect = sect;
 8007e3c:	61e2      	str	r2, [r4, #28]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007e3e:	6965      	ldr	r5, [r4, #20]
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 8007e40:	69e1      	ldr	r1, [r4, #28]
 8007e42:	9803      	ldr	r0, [sp, #12]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007e44:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8007e48:	f5c5 7500 	rsb	r5, r5, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007e4c:	42bd      	cmp	r5, r7
 8007e4e:	bf28      	it	cs
 8007e50:	463d      	movcs	r5, r7
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 8007e52:	f7ff fbdc 	bl	800760e <move_window>
 8007e56:	2800      	cmp	r0, #0
 8007e58:	d1b0      	bne.n	8007dbc <f_read+0x74>
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007e5a:	9903      	ldr	r1, [sp, #12]
 8007e5c:	6963      	ldr	r3, [r4, #20]
 8007e5e:	3130      	adds	r1, #48	; 0x30
 8007e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e64:	462a      	mov	r2, r5
 8007e66:	4419      	add	r1, r3
 8007e68:	4640      	mov	r0, r8
 8007e6a:	f7ff fb56 	bl	800751a <mem_cpy.part.0>
}
 8007e6e:	e7da      	b.n	8007e26 <f_read+0xde>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007e70:	2607      	movs	r6, #7
 8007e72:	e798      	b.n	8007da6 <f_read+0x5e>

08007e74 <f_write>:
{
 8007e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e78:	4699      	mov	r9, r3
 8007e7a:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
 8007e7c:	2300      	movs	r3, #0
{
 8007e7e:	4688      	mov	r8, r1
	*bw = 0;	/* Clear write byte counter */
 8007e80:	f8c9 3000 	str.w	r3, [r9]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007e84:	a903      	add	r1, sp, #12
{
 8007e86:	4604      	mov	r4, r0
 8007e88:	4616      	mov	r6, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007e8a:	f7ff fb2c 	bl	80074e6 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007e8e:	4605      	mov	r5, r0
 8007e90:	bb08      	cbnz	r0, 8007ed6 <f_write+0x62>
 8007e92:	7c65      	ldrb	r5, [r4, #17]
 8007e94:	b9fd      	cbnz	r5, 8007ed6 <f_write+0x62>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007e96:	7c23      	ldrb	r3, [r4, #16]
 8007e98:	079a      	lsls	r2, r3, #30
 8007e9a:	f140 80a5 	bpl.w	8007fe8 <f_write+0x174>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007e9e:	6963      	ldr	r3, [r4, #20]
 8007ea0:	42f3      	cmn	r3, r6
 8007ea2:	d300      	bcc.n	8007ea6 <f_write+0x32>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007ea4:	43de      	mvns	r6, r3
	for ( ;  btw;							/* Repeat until all data written */
 8007ea6:	b196      	cbz	r6, 8007ece <f_write+0x5a>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007ea8:	6963      	ldr	r3, [r4, #20]
 8007eaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007eae:	2a00      	cmp	r2, #0
 8007eb0:	d17d      	bne.n	8007fae <f_write+0x13a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007eb2:	9a03      	ldr	r2, [sp, #12]
 8007eb4:	8957      	ldrh	r7, [r2, #10]
 8007eb6:	3f01      	subs	r7, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8007eb8:	ea17 2753 	ands.w	r7, r7, r3, lsr #9
 8007ebc:	d11e      	bne.n	8007efc <f_write+0x88>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007ebe:	b973      	cbnz	r3, 8007ede <f_write+0x6a>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007ec0:	68a1      	ldr	r1, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8007ec2:	b971      	cbnz	r1, 8007ee2 <f_write+0x6e>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	f7ff fc91 	bl	80077ec <create_chain>
 8007eca:	4601      	mov	r1, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007ecc:	b948      	cbnz	r0, 8007ee2 <f_write+0x6e>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007ece:	7c23      	ldrb	r3, [r4, #16]
 8007ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ed4:	7423      	strb	r3, [r4, #16]
}
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	b005      	add	sp, #20
 8007eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007ede:	69a1      	ldr	r1, [r4, #24]
 8007ee0:	e7f0      	b.n	8007ec4 <f_write+0x50>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007ee2:	2901      	cmp	r1, #1
 8007ee4:	d102      	bne.n	8007eec <f_write+0x78>
 8007ee6:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007ee8:	7465      	strb	r5, [r4, #17]
 8007eea:	e7f4      	b.n	8007ed6 <f_write+0x62>
 8007eec:	1c4b      	adds	r3, r1, #1
 8007eee:	d101      	bne.n	8007ef4 <f_write+0x80>
 8007ef0:	2501      	movs	r5, #1
 8007ef2:	e7f9      	b.n	8007ee8 <f_write+0x74>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007ef4:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8007ef6:	61a1      	str	r1, [r4, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007ef8:	b903      	cbnz	r3, 8007efc <f_write+0x88>
 8007efa:	60a1      	str	r1, [r4, #8]
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
 8007efc:	9803      	ldr	r0, [sp, #12]
 8007efe:	69e3      	ldr	r3, [r4, #28]
 8007f00:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d103      	bne.n	8007f0e <f_write+0x9a>
 8007f06:	f7ff fb7c 	bl	8007602 <sync_window>
 8007f0a:	2800      	cmp	r0, #0
 8007f0c:	d1f0      	bne.n	8007ef0 <f_write+0x7c>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007f0e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007f12:	69a1      	ldr	r1, [r4, #24]
 8007f14:	4658      	mov	r0, fp
 8007f16:	f7ff fadb 	bl	80074d0 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	d0e3      	beq.n	8007ee6 <f_write+0x72>
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007f1e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 8007f22:	eb07 0a00 	add.w	sl, r7, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007f26:	d334      	bcc.n	8007f92 <f_write+0x11e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007f28:	f8bb 100a 	ldrh.w	r1, [fp, #10]
 8007f2c:	eb07 2056 	add.w	r0, r7, r6, lsr #9
 8007f30:	4288      	cmp	r0, r1
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007f32:	ea4f 2356 	mov.w	r3, r6, lsr #9
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007f36:	f89b 0001 	ldrb.w	r0, [fp, #1]
					cc = fs->csize - csect;
 8007f3a:	bf88      	it	hi
 8007f3c:	1bcb      	subhi	r3, r1, r7
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007f3e:	4652      	mov	r2, sl
 8007f40:	4641      	mov	r1, r8
 8007f42:	9301      	str	r3, [sp, #4]
 8007f44:	f7fc fe5e 	bl	8004c04 <disk_write>
 8007f48:	4607      	mov	r7, r0
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	d1d0      	bne.n	8007ef0 <f_write+0x7c>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 8007f4e:	9803      	ldr	r0, [sp, #12]
 8007f50:	9b01      	ldr	r3, [sp, #4]
 8007f52:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007f54:	eba1 010a 	sub.w	r1, r1, sl
 8007f58:	4299      	cmp	r1, r3
 8007f5a:	d209      	bcs.n	8007f70 <f_write+0xfc>
	if (cnt) {
 8007f5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f60:	eb08 2141 	add.w	r1, r8, r1, lsl #9
 8007f64:	3030      	adds	r0, #48	; 0x30
 8007f66:	f7ff fad8 	bl	800751a <mem_cpy.part.0>
					fs->wflag = 0;
 8007f6a:	9a03      	ldr	r2, [sp, #12]
 8007f6c:	9b01      	ldr	r3, [sp, #4]
 8007f6e:	70d7      	strb	r7, [r2, #3]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007f70:	025f      	lsls	r7, r3, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007f72:	6963      	ldr	r3, [r4, #20]
 8007f74:	68e2      	ldr	r2, [r4, #12]
 8007f76:	443b      	add	r3, r7
 8007f78:	6163      	str	r3, [r4, #20]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	bf2c      	ite	cs
 8007f7e:	60e2      	strcs	r2, [r4, #12]
 8007f80:	60e3      	strcc	r3, [r4, #12]
 8007f82:	f8d9 3000 	ldr.w	r3, [r9]
 8007f86:	443b      	add	r3, r7
 8007f88:	44b8      	add	r8, r7
 8007f8a:	f8c9 3000 	str.w	r3, [r9]
 8007f8e:	1bf6      	subs	r6, r6, r7
 8007f90:	e789      	b.n	8007ea6 <f_write+0x32>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
 8007f92:	6961      	ldr	r1, [r4, #20]
 8007f94:	68e3      	ldr	r3, [r4, #12]
 8007f96:	4299      	cmp	r1, r3
 8007f98:	d307      	bcc.n	8007faa <f_write+0x136>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
 8007f9a:	4658      	mov	r0, fp
 8007f9c:	f7ff fb31 	bl	8007602 <sync_window>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	d1a5      	bne.n	8007ef0 <f_write+0x7c>
				fs->winsect = sect;
 8007fa4:	9b03      	ldr	r3, [sp, #12]
 8007fa6:	f8c3 a02c 	str.w	sl, [r3, #44]	; 0x2c
			fp->sect = sect;
 8007faa:	f8c4 a01c 	str.w	sl, [r4, #28]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007fae:	6967      	ldr	r7, [r4, #20]
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 8007fb0:	69e1      	ldr	r1, [r4, #28]
 8007fb2:	9803      	ldr	r0, [sp, #12]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007fb4:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8007fb8:	f5c7 7700 	rsb	r7, r7, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007fbc:	42b7      	cmp	r7, r6
 8007fbe:	bf28      	it	cs
 8007fc0:	4637      	movcs	r7, r6
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 8007fc2:	f7ff fb24 	bl	800760e <move_window>
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	d192      	bne.n	8007ef0 <f_write+0x7c>
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007fca:	9803      	ldr	r0, [sp, #12]
 8007fcc:	6963      	ldr	r3, [r4, #20]
 8007fce:	3030      	adds	r0, #48	; 0x30
 8007fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fd4:	463a      	mov	r2, r7
 8007fd6:	4418      	add	r0, r3
 8007fd8:	4641      	mov	r1, r8
 8007fda:	f7ff fa9e 	bl	800751a <mem_cpy.part.0>
		fs->wflag = 1;
 8007fde:	9b03      	ldr	r3, [sp, #12]
 8007fe0:	f04f 0201 	mov.w	r2, #1
 8007fe4:	70da      	strb	r2, [r3, #3]
 8007fe6:	e7c4      	b.n	8007f72 <f_write+0xfe>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007fe8:	2507      	movs	r5, #7
 8007fea:	e774      	b.n	8007ed6 <f_write+0x62>

08007fec <f_sync>:
{
 8007fec:	b573      	push	{r0, r1, r4, r5, r6, lr}
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007fee:	a901      	add	r1, sp, #4
{
 8007ff0:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007ff2:	f7ff fa78 	bl	80074e6 <validate>
	if (res == FR_OK) {
 8007ff6:	4604      	mov	r4, r0
 8007ff8:	bb50      	cbnz	r0, 8008050 <f_sync+0x64>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007ffa:	7c2c      	ldrb	r4, [r5, #16]
 8007ffc:	f014 0440 	ands.w	r4, r4, #64	; 0x40
 8008000:	d026      	beq.n	8008050 <f_sync+0x64>
				res = move_window(fs, fp->dir_sect);
 8008002:	6a29      	ldr	r1, [r5, #32]
 8008004:	9801      	ldr	r0, [sp, #4]
 8008006:	f7ff fb02 	bl	800760e <move_window>
				if (res == FR_OK) {
 800800a:	4604      	mov	r4, r0
 800800c:	bb00      	cbnz	r0, 8008050 <f_sync+0x64>
					dir = fp->dir_ptr;
 800800e:	6a6e      	ldr	r6, [r5, #36]	; 0x24
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008010:	7af3      	ldrb	r3, [r6, #11]
 8008012:	f043 0320 	orr.w	r3, r3, #32
 8008016:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008018:	68aa      	ldr	r2, [r5, #8]
 800801a:	6828      	ldr	r0, [r5, #0]
 800801c:	4631      	mov	r1, r6
 800801e:	f7ff fa93 	bl	8007548 <st_clust.isra.0>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008022:	68e9      	ldr	r1, [r5, #12]
 8008024:	f106 001c 	add.w	r0, r6, #28
 8008028:	f7ff fa44 	bl	80074b4 <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 800802c:	2321      	movs	r3, #33	; 0x21
 800802e:	7633      	strb	r3, [r6, #24]
					fs->wflag = 1;
 8008030:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8008032:	75b4      	strb	r4, [r6, #22]
	*ptr++ = (BYTE)val;
 8008034:	2348      	movs	r3, #72	; 0x48
 8008036:	7673      	strb	r3, [r6, #25]
					fs->wflag = 1;
 8008038:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800803a:	75f4      	strb	r4, [r6, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 800803c:	74b4      	strb	r4, [r6, #18]
	*ptr++ = (BYTE)val;
 800803e:	74f4      	strb	r4, [r6, #19]
					fs->wflag = 1;
 8008040:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008042:	f7ff fc62 	bl	800790a <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008046:	7c2b      	ldrb	r3, [r5, #16]
 8008048:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 800804c:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 800804e:	742b      	strb	r3, [r5, #16]
}
 8008050:	4620      	mov	r0, r4
 8008052:	b002      	add	sp, #8
 8008054:	bd70      	pop	{r4, r5, r6, pc}

08008056 <f_close>:
{
 8008056:	b513      	push	{r0, r1, r4, lr}
 8008058:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 800805a:	f7ff ffc7 	bl	8007fec <f_sync>
	if (res == FR_OK)
 800805e:	b928      	cbnz	r0, 800806c <f_close+0x16>
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008060:	a901      	add	r1, sp, #4
 8008062:	4620      	mov	r0, r4
 8008064:	f7ff fa3f 	bl	80074e6 <validate>
		if (res == FR_OK) {
 8008068:	b900      	cbnz	r0, 800806c <f_close+0x16>
				fp->obj.fs = 0;			/* Invalidate file object */
 800806a:	6020      	str	r0, [r4, #0]
}
 800806c:	b002      	add	sp, #8
 800806e:	bd10      	pop	{r4, pc}

08008070 <f_lseek>:
{
 8008070:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008074:	460d      	mov	r5, r1
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8008076:	a901      	add	r1, sp, #4
{
 8008078:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800807a:	f7ff fa34 	bl	80074e6 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800807e:	4606      	mov	r6, r0
 8008080:	2800      	cmp	r0, #0
 8008082:	d150      	bne.n	8008126 <f_lseek+0xb6>
 8008084:	7c66      	ldrb	r6, [r4, #17]
 8008086:	2e00      	cmp	r6, #0
 8008088:	d14d      	bne.n	8008126 <f_lseek+0xb6>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800808a:	68e3      	ldr	r3, [r4, #12]
 800808c:	42ab      	cmp	r3, r5
 800808e:	d204      	bcs.n	800809a <f_lseek+0x2a>
 8008090:	7c22      	ldrb	r2, [r4, #16]
 8008092:	f012 0f02 	tst.w	r2, #2
 8008096:	bf08      	it	eq
 8008098:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 800809a:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 800809c:	6963      	ldr	r3, [r4, #20]
		fp->fptr = nsect = 0;
 800809e:	6162      	str	r2, [r4, #20]
		if (ofs) {
 80080a0:	b99d      	cbnz	r5, 80080ca <f_lseek+0x5a>
		fp->fptr = nsect = 0;
 80080a2:	2000      	movs	r0, #0
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80080a4:	68e2      	ldr	r2, [r4, #12]
 80080a6:	6963      	ldr	r3, [r4, #20]
 80080a8:	4293      	cmp	r3, r2
			fp->flag |= FA_MODIFIED;
 80080aa:	bf82      	ittt	hi
 80080ac:	7c22      	ldrbhi	r2, [r4, #16]
			fp->obj.objsize = fp->fptr;
 80080ae:	60e3      	strhi	r3, [r4, #12]
			fp->flag |= FA_MODIFIED;
 80080b0:	f042 0240 	orrhi.w	r2, r2, #64	; 0x40
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80080b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
			fp->flag |= FA_MODIFIED;
 80080b8:	bf88      	it	hi
 80080ba:	7422      	strbhi	r2, [r4, #16]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d032      	beq.n	8008126 <f_lseek+0xb6>
 80080c0:	69e3      	ldr	r3, [r4, #28]
 80080c2:	4283      	cmp	r3, r0
			fp->sect = nsect;
 80080c4:	bf18      	it	ne
 80080c6:	61e0      	strne	r0, [r4, #28]
 80080c8:	e02d      	b.n	8008126 <f_lseek+0xb6>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80080ca:	9a01      	ldr	r2, [sp, #4]
 80080cc:	8957      	ldrh	r7, [r2, #10]
 80080ce:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 80080d0:	b1fb      	cbz	r3, 8008112 <f_lseek+0xa2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80080d2:	3b01      	subs	r3, #1
 80080d4:	1e6a      	subs	r2, r5, #1
 80080d6:	fbb3 f1f7 	udiv	r1, r3, r7
 80080da:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 80080de:	428a      	cmp	r2, r1
 80080e0:	d317      	bcc.n	8008112 <f_lseek+0xa2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80080e2:	427a      	negs	r2, r7
 80080e4:	4013      	ands	r3, r2
				clst = fp->clust;
 80080e6:	69a1      	ldr	r1, [r4, #24]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80080e8:	6163      	str	r3, [r4, #20]
				ofs -= fp->fptr;
 80080ea:	1aed      	subs	r5, r5, r3
			if (clst != 0) {
 80080ec:	2900      	cmp	r1, #0
 80080ee:	d0d8      	beq.n	80080a2 <f_lseek+0x32>
				while (ofs > bcs) {						/* Cluster following loop */
 80080f0:	42bd      	cmp	r5, r7
 80080f2:	6963      	ldr	r3, [r4, #20]
 80080f4:	d822      	bhi.n	800813c <f_lseek+0xcc>
				fp->fptr += ofs;
 80080f6:	6963      	ldr	r3, [r4, #20]
 80080f8:	442b      	add	r3, r5
 80080fa:	6163      	str	r3, [r4, #20]
				if (ofs % SS(fs)) {
 80080fc:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8008100:	2b00      	cmp	r3, #0
 8008102:	d0ce      	beq.n	80080a2 <f_lseek+0x32>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8008104:	9801      	ldr	r0, [sp, #4]
 8008106:	f7ff f9e3 	bl	80074d0 <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800810a:	b150      	cbz	r0, 8008122 <f_lseek+0xb2>
					nsect += (DWORD)(ofs / SS(fs));
 800810c:	eb00 2055 	add.w	r0, r0, r5, lsr #9
 8008110:	e7c8      	b.n	80080a4 <f_lseek+0x34>
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008112:	68a1      	ldr	r1, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008114:	b981      	cbnz	r1, 8008138 <f_lseek+0xc8>
					clst = create_chain(&fp->obj, 0);
 8008116:	4620      	mov	r0, r4
 8008118:	f7ff fb68 	bl	80077ec <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800811c:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 800811e:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008120:	d105      	bne.n	800812e <f_lseek+0xbe>
 8008122:	2602      	movs	r6, #2
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008124:	7466      	strb	r6, [r4, #17]
}
 8008126:	4630      	mov	r0, r6
 8008128:	b002      	add	sp, #8
 800812a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800812e:	1c48      	adds	r0, r1, #1
 8008130:	d101      	bne.n	8008136 <f_lseek+0xc6>
 8008132:	2601      	movs	r6, #1
 8008134:	e7f6      	b.n	8008124 <f_lseek+0xb4>
					fp->obj.sclust = clst;
 8008136:	60a1      	str	r1, [r4, #8]
				fp->clust = clst;
 8008138:	61a1      	str	r1, [r4, #24]
 800813a:	e7d7      	b.n	80080ec <f_lseek+0x7c>
					ofs -= bcs; fp->fptr += bcs;
 800813c:	443b      	add	r3, r7
 800813e:	6163      	str	r3, [r4, #20]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008140:	7c23      	ldrb	r3, [r4, #16]
 8008142:	079a      	lsls	r2, r3, #30
					ofs -= bcs; fp->fptr += bcs;
 8008144:	eba5 0807 	sub.w	r8, r5, r7
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008148:	d506      	bpl.n	8008158 <f_lseek+0xe8>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800814a:	4620      	mov	r0, r4
 800814c:	f7ff fb4e 	bl	80077ec <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 8008150:	4605      	mov	r5, r0
 8008152:	b928      	cbnz	r0, 8008160 <f_lseek+0xf0>
 8008154:	4601      	mov	r1, r0
 8008156:	e7ce      	b.n	80080f6 <f_lseek+0x86>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8008158:	6820      	ldr	r0, [r4, #0]
 800815a:	f7ff faed 	bl	8007738 <get_fat.isra.0>
 800815e:	4605      	mov	r5, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008160:	1c6b      	adds	r3, r5, #1
 8008162:	d0e6      	beq.n	8008132 <f_lseek+0xc2>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8008164:	2d01      	cmp	r5, #1
 8008166:	d9dc      	bls.n	8008122 <f_lseek+0xb2>
 8008168:	9b01      	ldr	r3, [sp, #4]
 800816a:	695b      	ldr	r3, [r3, #20]
 800816c:	42ab      	cmp	r3, r5
 800816e:	d9d8      	bls.n	8008122 <f_lseek+0xb2>
					fp->clust = clst;
 8008170:	61a5      	str	r5, [r4, #24]
 8008172:	4629      	mov	r1, r5
					ofs -= bcs; fp->fptr += bcs;
 8008174:	4645      	mov	r5, r8
 8008176:	e7bb      	b.n	80080f0 <f_lseek+0x80>

08008178 <f_opendir>:
{
 8008178:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (!dp) return FR_INVALID_OBJECT;
 800817a:	4604      	mov	r4, r0
{
 800817c:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 800817e:	b348      	cbz	r0, 80081d4 <f_opendir+0x5c>
	res = find_volume(&path, &fs, 0);
 8008180:	2200      	movs	r2, #0
 8008182:	a903      	add	r1, sp, #12
 8008184:	a801      	add	r0, sp, #4
 8008186:	f7fc f821 	bl	80041cc <find_volume>
	if (res == FR_OK) {
 800818a:	b970      	cbnz	r0, 80081aa <f_opendir+0x32>
		obj->fs = fs;
 800818c:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800818e:	9901      	ldr	r1, [sp, #4]
		obj->fs = fs;
 8008190:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8008192:	4620      	mov	r0, r4
 8008194:	f7fc f972 	bl	800447c <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8008198:	b9f0      	cbnz	r0, 80081d8 <f_opendir+0x60>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800819a:	f994 302b 	ldrsb.w	r3, [r4, #43]	; 0x2b
 800819e:	2b00      	cmp	r3, #0
 80081a0:	db0c      	blt.n	80081bc <f_opendir+0x44>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80081a2:	79a3      	ldrb	r3, [r4, #6]
 80081a4:	06db      	lsls	r3, r3, #27
 80081a6:	d403      	bmi.n	80081b0 <f_opendir+0x38>
					res = FR_NO_PATH;
 80081a8:	2005      	movs	r0, #5
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80081aa:	2300      	movs	r3, #0
 80081ac:	6023      	str	r3, [r4, #0]
 80081ae:	e00f      	b.n	80081d0 <f_opendir+0x58>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object location */
 80081b0:	9b03      	ldr	r3, [sp, #12]
 80081b2:	69e1      	ldr	r1, [r4, #28]
 80081b4:	7818      	ldrb	r0, [r3, #0]
 80081b6:	f7ff f9b9 	bl	800752c <ld_clust.isra.0>
 80081ba:	60a0      	str	r0, [r4, #8]
				obj->id = fs->id;
 80081bc:	9b03      	ldr	r3, [sp, #12]
 80081be:	88db      	ldrh	r3, [r3, #6]
 80081c0:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80081c2:	4620      	mov	r0, r4
 80081c4:	f7ff fbec 	bl	80079a0 <dir_sdi.constprop.0>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80081c8:	2804      	cmp	r0, #4
 80081ca:	d0ed      	beq.n	80081a8 <f_opendir+0x30>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80081cc:	2800      	cmp	r0, #0
 80081ce:	d1ec      	bne.n	80081aa <f_opendir+0x32>
}
 80081d0:	b004      	add	sp, #16
 80081d2:	bd10      	pop	{r4, pc}
	if (!dp) return FR_INVALID_OBJECT;
 80081d4:	2009      	movs	r0, #9
 80081d6:	e7fb      	b.n	80081d0 <f_opendir+0x58>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80081d8:	2804      	cmp	r0, #4
 80081da:	d0e5      	beq.n	80081a8 <f_opendir+0x30>
 80081dc:	e7e5      	b.n	80081aa <f_opendir+0x32>

080081de <f_closedir>:
{
 80081de:	b513      	push	{r0, r1, r4, lr}
	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80081e0:	a901      	add	r1, sp, #4
{
 80081e2:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80081e4:	f7ff f97f 	bl	80074e6 <validate>
	if (res == FR_OK) {
 80081e8:	b900      	cbnz	r0, 80081ec <f_closedir+0xe>
			dp->obj.fs = 0;			/* Invalidate directory object */
 80081ea:	6020      	str	r0, [r4, #0]
}
 80081ec:	b002      	add	sp, #8
 80081ee:	bd10      	pop	{r4, pc}

080081f0 <f_readdir>:
{
 80081f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081f2:	460d      	mov	r5, r1
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80081f4:	a901      	add	r1, sp, #4
{
 80081f6:	4604      	mov	r4, r0
	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80081f8:	f7ff f975 	bl	80074e6 <validate>
	if (res == FR_OK) {
 80081fc:	b918      	cbnz	r0, 8008206 <f_readdir+0x16>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80081fe:	4620      	mov	r0, r4
		if (!fno) {
 8008200:	b91d      	cbnz	r5, 800820a <f_readdir+0x1a>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8008202:	f7ff fbcd 	bl	80079a0 <dir_sdi.constprop.0>
}
 8008206:	b003      	add	sp, #12
 8008208:	bd30      	pop	{r4, r5, pc}
			res = dir_read(dp, 0);			/* Read an item */
 800820a:	f7ff fc70 	bl	8007aee <dir_read.constprop.0>
			if (res == FR_OK) {				/* A valid entry is found */
 800820e:	f010 03fb 	ands.w	r3, r0, #251	; 0xfb
 8008212:	d1f8      	bne.n	8008206 <f_readdir+0x16>
	fno->fname[0] = 0;		/* Invaidate file info */
 8008214:	726b      	strb	r3, [r5, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008216:	69a3      	ldr	r3, [r4, #24]
 8008218:	b11b      	cbz	r3, 8008222 <f_readdir+0x32>
 800821a:	4629      	mov	r1, r5
 800821c:	4620      	mov	r0, r4
 800821e:	f7ff f99f 	bl	8007560 <get_fileinfo.part.0>
				res = dir_next(dp, 0);		/* Increment index for next */
 8008222:	2100      	movs	r1, #0
 8008224:	4620      	mov	r0, r4
 8008226:	f7ff fbed 	bl	8007a04 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800822a:	2804      	cmp	r0, #4
 800822c:	bf08      	it	eq
 800822e:	2000      	moveq	r0, #0
 8008230:	e7e9      	b.n	8008206 <f_readdir+0x16>

08008232 <f_stat>:
{
 8008232:	b530      	push	{r4, r5, lr}
 8008234:	b08f      	sub	sp, #60	; 0x3c
 8008236:	460d      	mov	r5, r1
 8008238:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &dj.obj.fs, 0);
 800823a:	2200      	movs	r2, #0
 800823c:	a903      	add	r1, sp, #12
 800823e:	a801      	add	r0, sp, #4
 8008240:	f7fb ffc4 	bl	80041cc <find_volume>
	if (res == FR_OK) {
 8008244:	4604      	mov	r4, r0
 8008246:	b988      	cbnz	r0, 800826c <f_stat+0x3a>
		res = follow_path(&dj, path);	/* Follow the file path */
 8008248:	9901      	ldr	r1, [sp, #4]
 800824a:	a803      	add	r0, sp, #12
 800824c:	f7fc f916 	bl	800447c <follow_path>
		if (res == FR_OK) {				/* Follow completed */
 8008250:	4604      	mov	r4, r0
 8008252:	b958      	cbnz	r0, 800826c <f_stat+0x3a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8008254:	f99d 3037 	ldrsb.w	r3, [sp, #55]	; 0x37
 8008258:	2b00      	cmp	r3, #0
 800825a:	db0a      	blt.n	8008272 <f_stat+0x40>
				if (fno) get_fileinfo(&dj, fno);
 800825c:	b135      	cbz	r5, 800826c <f_stat+0x3a>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800825e:	9b09      	ldr	r3, [sp, #36]	; 0x24
	fno->fname[0] = 0;		/* Invaidate file info */
 8008260:	7268      	strb	r0, [r5, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008262:	b11b      	cbz	r3, 800826c <f_stat+0x3a>
 8008264:	4629      	mov	r1, r5
 8008266:	a803      	add	r0, sp, #12
 8008268:	f7ff f97a 	bl	8007560 <get_fileinfo.part.0>
}
 800826c:	4620      	mov	r0, r4
 800826e:	b00f      	add	sp, #60	; 0x3c
 8008270:	bd30      	pop	{r4, r5, pc}
				res = FR_INVALID_NAME;
 8008272:	2406      	movs	r4, #6
 8008274:	e7fa      	b.n	800826c <f_stat+0x3a>

08008276 <f_getfree>:
{
 8008276:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800827a:	b085      	sub	sp, #20
 800827c:	4688      	mov	r8, r1
 800827e:	9001      	str	r0, [sp, #4]
 8008280:	4616      	mov	r6, r2
	res = find_volume(&path, &fs, 0);
 8008282:	a903      	add	r1, sp, #12
 8008284:	2200      	movs	r2, #0
 8008286:	a801      	add	r0, sp, #4
 8008288:	f7fb ffa0 	bl	80041cc <find_volume>
	if (res == FR_OK) {
 800828c:	4604      	mov	r4, r0
 800828e:	b948      	cbnz	r0, 80082a4 <f_getfree+0x2e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008290:	9d03      	ldr	r5, [sp, #12]
 8008292:	6035      	str	r5, [r6, #0]
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008294:	e9d5 3904 	ldrd	r3, r9, [r5, #16]
 8008298:	f1a9 0202 	sub.w	r2, r9, #2
 800829c:	4293      	cmp	r3, r2
 800829e:	d805      	bhi.n	80082ac <f_getfree+0x36>
			*nclst = fs->free_clst;
 80082a0:	f8c8 3000 	str.w	r3, [r8]
}
 80082a4:	4620      	mov	r0, r4
 80082a6:	b005      	add	sp, #20
 80082a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80082ac:	782b      	ldrb	r3, [r5, #0]
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d119      	bne.n	80082e6 <f_getfree+0x70>
				clst = 2; obj.fs = fs;
 80082b2:	2702      	movs	r7, #2
			nfree = 0;
 80082b4:	4606      	mov	r6, r0
					stat = get_fat(&obj, clst);
 80082b6:	4639      	mov	r1, r7
 80082b8:	4628      	mov	r0, r5
 80082ba:	f7ff fa3d 	bl	8007738 <get_fat.isra.0>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80082be:	1c43      	adds	r3, r0, #1
 80082c0:	d03a      	beq.n	8008338 <f_getfree+0xc2>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80082c2:	2801      	cmp	r0, #1
 80082c4:	d03a      	beq.n	800833c <f_getfree+0xc6>
					if (stat == 0) nfree++;
 80082c6:	b900      	cbnz	r0, 80082ca <f_getfree+0x54>
 80082c8:	3601      	adds	r6, #1
				} while (++clst < fs->n_fatent);
 80082ca:	9b03      	ldr	r3, [sp, #12]
 80082cc:	695b      	ldr	r3, [r3, #20]
 80082ce:	3701      	adds	r7, #1
 80082d0:	42bb      	cmp	r3, r7
 80082d2:	d8f0      	bhi.n	80082b6 <f_getfree+0x40>
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80082d4:	9b03      	ldr	r3, [sp, #12]
			*nclst = nfree;			/* Return the free clusters */
 80082d6:	f8c8 6000 	str.w	r6, [r8]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80082da:	791a      	ldrb	r2, [r3, #4]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80082dc:	611e      	str	r6, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80082de:	f042 0201 	orr.w	r2, r2, #1
 80082e2:	711a      	strb	r2, [r3, #4]
 80082e4:	e7de      	b.n	80082a4 <f_getfree+0x2e>
					clst = fs->n_fatent; sect = fs->fatbase;
 80082e6:	6a29      	ldr	r1, [r5, #32]
					i = 0; p = 0;
 80082e8:	4607      	mov	r7, r0
 80082ea:	4605      	mov	r5, r0
			nfree = 0;
 80082ec:	4606      	mov	r6, r0
						if (i == 0) {
 80082ee:	b94f      	cbnz	r7, 8008304 <f_getfree+0x8e>
							res = move_window(fs, sect++);
 80082f0:	9803      	ldr	r0, [sp, #12]
 80082f2:	1c4f      	adds	r7, r1, #1
 80082f4:	f7ff f98b 	bl	800760e <move_window>
							if (res != FR_OK) break;
 80082f8:	bb10      	cbnz	r0, 8008340 <f_getfree+0xca>
							p = fs->win;
 80082fa:	9d03      	ldr	r5, [sp, #12]
							res = move_window(fs, sect++);
 80082fc:	4639      	mov	r1, r7
							p = fs->win;
 80082fe:	3530      	adds	r5, #48	; 0x30
							i = SS(fs);
 8008300:	f44f 7700 	mov.w	r7, #512	; 0x200
						if (fs->fs_type == FS_FAT16) {
 8008304:	9b03      	ldr	r3, [sp, #12]
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	2b02      	cmp	r3, #2
 800830a:	d10b      	bne.n	8008324 <f_getfree+0xae>
	rv = rv << 8 | ptr[0];
 800830c:	786a      	ldrb	r2, [r5, #1]
 800830e:	782b      	ldrb	r3, [r5, #0]
							if (ld_word(p) == 0) nfree++;
 8008310:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8008314:	bf08      	it	eq
 8008316:	3601      	addeq	r6, #1
							p += 2; i -= 2;
 8008318:	3502      	adds	r5, #2
 800831a:	3f02      	subs	r7, #2
					} while (--clst);
 800831c:	f1b9 0901 	subs.w	r9, r9, #1
 8008320:	d1e5      	bne.n	80082ee <f_getfree+0x78>
 8008322:	e7d7      	b.n	80082d4 <f_getfree+0x5e>
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008324:	4628      	mov	r0, r5
 8008326:	f7ff f8bd 	bl	80074a4 <ld_dword>
 800832a:	f030 4370 	bics.w	r3, r0, #4026531840	; 0xf0000000
 800832e:	bf08      	it	eq
 8008330:	3601      	addeq	r6, #1
							p += 4; i -= 4;
 8008332:	3504      	adds	r5, #4
 8008334:	3f04      	subs	r7, #4
 8008336:	e7f1      	b.n	800831c <f_getfree+0xa6>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008338:	2401      	movs	r4, #1
 800833a:	e7cb      	b.n	80082d4 <f_getfree+0x5e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800833c:	2402      	movs	r4, #2
 800833e:	e7c9      	b.n	80082d4 <f_getfree+0x5e>
							res = move_window(fs, sect++);
 8008340:	4604      	mov	r4, r0
 8008342:	e7c7      	b.n	80082d4 <f_getfree+0x5e>

08008344 <f_truncate>:
{
 8008344:	b573      	push	{r0, r1, r4, r5, r6, lr}
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008346:	a901      	add	r1, sp, #4
{
 8008348:	4606      	mov	r6, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800834a:	f7ff f8cc 	bl	80074e6 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
 800834e:	4604      	mov	r4, r0
 8008350:	b9c0      	cbnz	r0, 8008384 <f_truncate+0x40>
 8008352:	7c74      	ldrb	r4, [r6, #17]
 8008354:	b9b4      	cbnz	r4, 8008384 <f_truncate+0x40>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008356:	7c33      	ldrb	r3, [r6, #16]
 8008358:	079a      	lsls	r2, r3, #30
 800835a:	d52d      	bpl.n	80083b8 <f_truncate+0x74>
	if (fp->obj.objsize > fp->fptr) {
 800835c:	6975      	ldr	r5, [r6, #20]
 800835e:	68f3      	ldr	r3, [r6, #12]
 8008360:	42ab      	cmp	r3, r5
 8008362:	d90f      	bls.n	8008384 <f_truncate+0x40>
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 8008364:	b98d      	cbnz	r5, 800838a <f_truncate+0x46>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8008366:	4622      	mov	r2, r4
 8008368:	68b1      	ldr	r1, [r6, #8]
 800836a:	4630      	mov	r0, r6
 800836c:	f7ff fa96 	bl	800789c <remove_chain>
			fp->obj.sclust = 0;
 8008370:	60b5      	str	r5, [r6, #8]
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8008372:	4604      	mov	r4, r0
		fp->obj.objsize = fp->fptr;	/* Set file size to current R/W point */
 8008374:	6973      	ldr	r3, [r6, #20]
 8008376:	60f3      	str	r3, [r6, #12]
		fp->flag |= FA_MODIFIED;
 8008378:	7c33      	ldrb	r3, [r6, #16]
 800837a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800837e:	7433      	strb	r3, [r6, #16]
		if (res != FR_OK) ABORT(fs, res);
 8008380:	b104      	cbz	r4, 8008384 <f_truncate+0x40>
 8008382:	7474      	strb	r4, [r6, #17]
}
 8008384:	4620      	mov	r0, r4
 8008386:	b002      	add	sp, #8
 8008388:	bd70      	pop	{r4, r5, r6, pc}
			ncl = get_fat(&fp->obj, fp->clust);
 800838a:	69b1      	ldr	r1, [r6, #24]
 800838c:	6830      	ldr	r0, [r6, #0]
 800838e:	f7ff f9d3 	bl	8007738 <get_fat.isra.0>
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008392:	1c43      	adds	r3, r0, #1
			ncl = get_fat(&fp->obj, fp->clust);
 8008394:	4601      	mov	r1, r0
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008396:	d00b      	beq.n	80083b0 <f_truncate+0x6c>
			if (ncl == 1) res = FR_INT_ERR;
 8008398:	2801      	cmp	r0, #1
 800839a:	d00b      	beq.n	80083b4 <f_truncate+0x70>
			if (res == FR_OK && ncl < fs->n_fatent) {
 800839c:	9b01      	ldr	r3, [sp, #4]
 800839e:	695b      	ldr	r3, [r3, #20]
 80083a0:	4283      	cmp	r3, r0
 80083a2:	d9e7      	bls.n	8008374 <f_truncate+0x30>
				res = remove_chain(&fp->obj, ncl, fp->clust);
 80083a4:	69b2      	ldr	r2, [r6, #24]
 80083a6:	4630      	mov	r0, r6
 80083a8:	f7ff fa78 	bl	800789c <remove_chain>
 80083ac:	4604      	mov	r4, r0
 80083ae:	e7e1      	b.n	8008374 <f_truncate+0x30>
 80083b0:	2401      	movs	r4, #1
 80083b2:	e7df      	b.n	8008374 <f_truncate+0x30>
			if (ncl == 1) res = FR_INT_ERR;
 80083b4:	2402      	movs	r4, #2
 80083b6:	e7dd      	b.n	8008374 <f_truncate+0x30>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80083b8:	2407      	movs	r4, #7
 80083ba:	e7e3      	b.n	8008384 <f_truncate+0x40>

080083bc <f_unlink>:
{
 80083bc:	b570      	push	{r4, r5, r6, lr}
 80083be:	b09a      	sub	sp, #104	; 0x68
	res = find_volume(&path, &fs, FA_WRITE);
 80083c0:	2202      	movs	r2, #2
{
 80083c2:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &fs, FA_WRITE);
 80083c4:	a903      	add	r1, sp, #12
 80083c6:	a801      	add	r0, sp, #4
 80083c8:	f7fb ff00 	bl	80041cc <find_volume>
	dj.obj.fs = fs;
 80083cc:	9b03      	ldr	r3, [sp, #12]
 80083ce:	9304      	str	r3, [sp, #16]
	if (res == FR_OK) {
 80083d0:	b968      	cbnz	r0, 80083ee <f_unlink+0x32>
		res = follow_path(&dj, path);		/* Follow the file path */
 80083d2:	9901      	ldr	r1, [sp, #4]
 80083d4:	a804      	add	r0, sp, #16
 80083d6:	f7fc f851 	bl	800447c <follow_path>
		if (res == FR_OK) {					/* The object is accessible */
 80083da:	b940      	cbnz	r0, 80083ee <f_unlink+0x32>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80083dc:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	db36      	blt.n	8008452 <f_unlink+0x96>
				if (dj.obj.attr & AM_RDO) {
 80083e4:	f89d 6016 	ldrb.w	r6, [sp, #22]
 80083e8:	07f2      	lsls	r2, r6, #31
 80083ea:	d502      	bpl.n	80083f2 <f_unlink+0x36>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80083ec:	2007      	movs	r0, #7
}
 80083ee:	b01a      	add	sp, #104	; 0x68
 80083f0:	bd70      	pop	{r4, r5, r6, pc}
					dclst = ld_clust(fs, dj.dir);
 80083f2:	9d03      	ldr	r5, [sp, #12]
 80083f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80083f6:	7828      	ldrb	r0, [r5, #0]
 80083f8:	f7ff f898 	bl	800752c <ld_clust.isra.0>
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory ? */
 80083fc:	06f3      	lsls	r3, r6, #27
					dclst = ld_clust(fs, dj.dir);
 80083fe:	4604      	mov	r4, r0
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory ? */
 8008400:	d410      	bmi.n	8008424 <f_unlink+0x68>
	FATFS *fs = dp->obj.fs;
 8008402:	9d04      	ldr	r5, [sp, #16]
	res = move_window(fs, dp->sect);
 8008404:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008406:	4628      	mov	r0, r5
 8008408:	f7ff f901 	bl	800760e <move_window>
	if (res == FR_OK) {
 800840c:	2800      	cmp	r0, #0
 800840e:	d1ee      	bne.n	80083ee <f_unlink+0x32>
		dp->dir[DIR_Name] = DDEM;
 8008410:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008412:	22e5      	movs	r2, #229	; 0xe5
 8008414:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8008416:	2301      	movs	r3, #1
 8008418:	70eb      	strb	r3, [r5, #3]
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800841a:	b994      	cbnz	r4, 8008442 <f_unlink+0x86>
				if (res == FR_OK) res = sync_fs(fs);
 800841c:	9803      	ldr	r0, [sp, #12]
 800841e:	f7ff fa74 	bl	800790a <sync_fs>
 8008422:	e7e4      	b.n	80083ee <f_unlink+0x32>
						sdj.obj.sclust = dclst;
 8008424:	9011      	str	r0, [sp, #68]	; 0x44
						res = dir_sdi(&sdj, 0);
 8008426:	a80f      	add	r0, sp, #60	; 0x3c
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8008428:	950f      	str	r5, [sp, #60]	; 0x3c
						res = dir_sdi(&sdj, 0);
 800842a:	f7ff fab9 	bl	80079a0 <dir_sdi.constprop.0>
						if (res == FR_OK) {
 800842e:	2800      	cmp	r0, #0
 8008430:	d1dd      	bne.n	80083ee <f_unlink+0x32>
							res = dir_read(&sdj, 0);			/* Read an item */
 8008432:	a80f      	add	r0, sp, #60	; 0x3c
 8008434:	f7ff fb5b 	bl	8007aee <dir_read.constprop.0>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8008438:	2800      	cmp	r0, #0
 800843a:	d0d7      	beq.n	80083ec <f_unlink+0x30>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800843c:	2804      	cmp	r0, #4
 800843e:	d1d6      	bne.n	80083ee <f_unlink+0x32>
 8008440:	e7df      	b.n	8008402 <f_unlink+0x46>
					res = remove_chain(&dj.obj, dclst, 0);
 8008442:	4602      	mov	r2, r0
 8008444:	4621      	mov	r1, r4
 8008446:	a804      	add	r0, sp, #16
 8008448:	f7ff fa28 	bl	800789c <remove_chain>
				if (res == FR_OK) res = sync_fs(fs);
 800844c:	2800      	cmp	r0, #0
 800844e:	d1ce      	bne.n	80083ee <f_unlink+0x32>
 8008450:	e7e4      	b.n	800841c <f_unlink+0x60>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8008452:	2006      	movs	r0, #6
 8008454:	e7cb      	b.n	80083ee <f_unlink+0x32>

08008456 <f_mkdir>:
{
 8008456:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800845a:	b08e      	sub	sp, #56	; 0x38
	res = find_volume(&path, &fs, FA_WRITE);
 800845c:	2202      	movs	r2, #2
{
 800845e:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &fs, FA_WRITE);
 8008460:	a902      	add	r1, sp, #8
 8008462:	a801      	add	r0, sp, #4
 8008464:	f7fb feb2 	bl	80041cc <find_volume>
	dj.obj.fs = fs;
 8008468:	9b02      	ldr	r3, [sp, #8]
 800846a:	9303      	str	r3, [sp, #12]
	res = find_volume(&path, &fs, FA_WRITE);
 800846c:	4604      	mov	r4, r0
 800846e:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8008470:	2800      	cmp	r0, #0
 8008472:	d17f      	bne.n	8008574 <f_mkdir+0x11e>
		res = follow_path(&dj, path);			/* Follow the file path */
 8008474:	9901      	ldr	r1, [sp, #4]
 8008476:	a803      	add	r0, sp, #12
 8008478:	f7fc f800 	bl	800447c <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800847c:	4604      	mov	r4, r0
 800847e:	2800      	cmp	r0, #0
 8008480:	f000 809a 	beq.w	80085b8 <f_mkdir+0x162>
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8008484:	2804      	cmp	r0, #4
 8008486:	d175      	bne.n	8008574 <f_mkdir+0x11e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8008488:	4629      	mov	r1, r5
 800848a:	a803      	add	r0, sp, #12
 800848c:	f7ff f9ae 	bl	80077ec <create_chain>
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8008490:	9a02      	ldr	r2, [sp, #8]
 8008492:	8953      	ldrh	r3, [r2, #10]
 8008494:	025b      	lsls	r3, r3, #9
 8008496:	9306      	str	r3, [sp, #24]
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8008498:	4605      	mov	r5, r0
 800849a:	2800      	cmp	r0, #0
 800849c:	f000 8081 	beq.w	80085a2 <f_mkdir+0x14c>
			if (dcl == 1) res = FR_INT_ERR;
 80084a0:	2801      	cmp	r0, #1
 80084a2:	f000 8085 	beq.w	80085b0 <f_mkdir+0x15a>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80084a6:	1c43      	adds	r3, r0, #1
 80084a8:	f000 8084 	beq.w	80085b4 <f_mkdir+0x15e>
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80084ac:	4610      	mov	r0, r2
 80084ae:	f7ff f8a8 	bl	8007602 <sync_window>
 80084b2:	4606      	mov	r6, r0
 80084b4:	4604      	mov	r4, r0
			if (res == FR_OK) {					/* Initialize the new directory table */
 80084b6:	2800      	cmp	r0, #0
 80084b8:	d174      	bne.n	80085a4 <f_mkdir+0x14e>
				dsc = clust2sect(fs, dcl);
 80084ba:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80084be:	4629      	mov	r1, r5
 80084c0:	4648      	mov	r0, r9
 80084c2:	f7ff f805 	bl	80074d0 <clust2sect>
				dir = fs->win;
 80084c6:	f109 0730 	add.w	r7, r9, #48	; 0x30
				mem_set(dir, 0, SS(fs));
 80084ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084ce:	4631      	mov	r1, r6
				dsc = clust2sect(fs, dcl);
 80084d0:	4680      	mov	r8, r0
				mem_set(dir, 0, SS(fs));
 80084d2:	4638      	mov	r0, r7
 80084d4:	f7fe fff6 	bl	80074c4 <mem_set>
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80084d8:	220b      	movs	r2, #11
 80084da:	2120      	movs	r1, #32
 80084dc:	4638      	mov	r0, r7
 80084de:	f7fe fff1 	bl	80074c4 <mem_set>
					dir[DIR_Attr] = AM_DIR;
 80084e2:	2310      	movs	r3, #16
 80084e4:	f889 303b 	strb.w	r3, [r9, #59]	; 0x3b
	*ptr++ = (BYTE)val; val >>= 8;
 80084e8:	2321      	movs	r3, #33	; 0x21
					dir[DIR_Name] = '.';
 80084ea:	f04f 0a2e 	mov.w	sl, #46	; 0x2e
	*ptr++ = (BYTE)val; val >>= 8;
 80084ee:	f889 3048 	strb.w	r3, [r9, #72]	; 0x48
	*ptr++ = (BYTE)val;
 80084f2:	2348      	movs	r3, #72	; 0x48
 80084f4:	f889 3049 	strb.w	r3, [r9, #73]	; 0x49
					st_clust(fs, dir, dcl);
 80084f8:	9802      	ldr	r0, [sp, #8]
					dir[DIR_Name] = '.';
 80084fa:	f889 a030 	strb.w	sl, [r9, #48]	; 0x30
					st_clust(fs, dir, dcl);
 80084fe:	462a      	mov	r2, r5
 8008500:	4639      	mov	r1, r7
	*ptr++ = (BYTE)val; val >>= 8;
 8008502:	f889 6046 	strb.w	r6, [r9, #70]	; 0x46
	*ptr++ = (BYTE)val; val >>= 8;
 8008506:	f889 6047 	strb.w	r6, [r9, #71]	; 0x47
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800850a:	f109 0450 	add.w	r4, r9, #80	; 0x50
					st_clust(fs, dir, dcl);
 800850e:	f7ff f81b 	bl	8007548 <st_clust.isra.0>
	if (cnt) {
 8008512:	2220      	movs	r2, #32
 8008514:	4620      	mov	r0, r4
 8008516:	f7ff f800 	bl	800751a <mem_cpy.part.0>
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800851a:	9802      	ldr	r0, [sp, #8]
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800851c:	f889 a051 	strb.w	sl, [r9, #81]	; 0x51
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8008520:	7803      	ldrb	r3, [r0, #0]
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8008522:	9a05      	ldr	r2, [sp, #20]
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8008524:	2b03      	cmp	r3, #3
 8008526:	d103      	bne.n	8008530 <f_mkdir+0xda>
 8008528:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800852a:	4293      	cmp	r3, r2
 800852c:	bf08      	it	eq
 800852e:	2200      	moveq	r2, #0
					st_clust(fs, dir + SZDIRE, pcl);
 8008530:	4621      	mov	r1, r4
 8008532:	f7ff f809 	bl	8007548 <st_clust.isra.0>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8008536:	9b02      	ldr	r3, [sp, #8]
 8008538:	895e      	ldrh	r6, [r3, #10]
					fs->wflag = 1;
 800853a:	f04f 0901 	mov.w	r9, #1
 800853e:	4446      	add	r6, r8
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8008540:	45b0      	cmp	r8, r6
 8008542:	d11b      	bne.n	800857c <f_mkdir+0x126>
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
 8008544:	a803      	add	r0, sp, #12
 8008546:	f7ff fafc 	bl	8007b42 <dir_register>
			if (res == FR_OK) {
 800854a:	4604      	mov	r4, r0
 800854c:	bb50      	cbnz	r0, 80085a4 <f_mkdir+0x14e>
					dir = dj.dir;
 800854e:	990a      	ldr	r1, [sp, #40]	; 0x28
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8008550:	9802      	ldr	r0, [sp, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8008552:	758c      	strb	r4, [r1, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8008554:	2321      	movs	r3, #33	; 0x21
 8008556:	760b      	strb	r3, [r1, #24]
	*ptr++ = (BYTE)val;
 8008558:	2348      	movs	r3, #72	; 0x48
	*ptr++ = (BYTE)val; val >>= 8;
 800855a:	75cc      	strb	r4, [r1, #23]
	*ptr++ = (BYTE)val;
 800855c:	764b      	strb	r3, [r1, #25]
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800855e:	462a      	mov	r2, r5
 8008560:	f7fe fff2 	bl	8007548 <st_clust.isra.0>
					fs->wflag = 1;
 8008564:	9802      	ldr	r0, [sp, #8]
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8008566:	2310      	movs	r3, #16
 8008568:	72cb      	strb	r3, [r1, #11]
					fs->wflag = 1;
 800856a:	2301      	movs	r3, #1
 800856c:	70c3      	strb	r3, [r0, #3]
				if (res == FR_OK) res = sync_fs(fs);
 800856e:	f7ff f9cc 	bl	800790a <sync_fs>
 8008572:	4604      	mov	r4, r0
}
 8008574:	4620      	mov	r0, r4
 8008576:	b00e      	add	sp, #56	; 0x38
 8008578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					fs->winsect = dsc++;
 800857c:	9802      	ldr	r0, [sp, #8]
 800857e:	f8c0 802c 	str.w	r8, [r0, #44]	; 0x2c
					fs->wflag = 1;
 8008582:	f880 9003 	strb.w	r9, [r0, #3]
 8008586:	f7ff f816 	bl	80075b6 <sync_window.part.0>
					fs->winsect = dsc++;
 800858a:	f108 0a01 	add.w	sl, r8, #1
					if (res != FR_OK) break;
 800858e:	4604      	mov	r4, r0
 8008590:	b940      	cbnz	r0, 80085a4 <f_mkdir+0x14e>
					mem_set(dir, 0, SS(fs));
 8008592:	4601      	mov	r1, r0
 8008594:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008598:	4638      	mov	r0, r7
 800859a:	f7fe ff93 	bl	80074c4 <mem_set>
					fs->winsect = dsc++;
 800859e:	46d0      	mov	r8, sl
 80085a0:	e7ce      	b.n	8008540 <f_mkdir+0xea>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80085a2:	2407      	movs	r4, #7
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80085a4:	2200      	movs	r2, #0
 80085a6:	4629      	mov	r1, r5
 80085a8:	a803      	add	r0, sp, #12
 80085aa:	f7ff f977 	bl	800789c <remove_chain>
 80085ae:	e7e1      	b.n	8008574 <f_mkdir+0x11e>
			if (dcl == 1) res = FR_INT_ERR;
 80085b0:	2402      	movs	r4, #2
 80085b2:	e7f7      	b.n	80085a4 <f_mkdir+0x14e>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80085b4:	2401      	movs	r4, #1
 80085b6:	e7f5      	b.n	80085a4 <f_mkdir+0x14e>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80085b8:	2408      	movs	r4, #8
	LEAVE_FF(fs, res);
 80085ba:	e7db      	b.n	8008574 <f_mkdir+0x11e>

080085bc <f_rename>:
{
 80085bc:	b570      	push	{r4, r5, r6, lr}
 80085be:	b0a0      	sub	sp, #128	; 0x80
 80085c0:	e9cd 1000 	strd	r1, r0, [sp]
	get_ldnumber(&path_new);						/* Ignore drive number of new name */
 80085c4:	4668      	mov	r0, sp
 80085c6:	f7fb fd89 	bl	80040dc <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 80085ca:	2202      	movs	r2, #2
 80085cc:	a903      	add	r1, sp, #12
 80085ce:	a801      	add	r0, sp, #4
 80085d0:	f7fb fdfc 	bl	80041cc <find_volume>
	if (res == FR_OK) {
 80085d4:	2800      	cmp	r0, #0
 80085d6:	d16c      	bne.n	80086b2 <f_rename+0xf6>
		djo.obj.fs = fs;
 80085d8:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&djo, path_old);		/* Check old object */
 80085da:	9901      	ldr	r1, [sp, #4]
		djo.obj.fs = fs;
 80085dc:	930a      	str	r3, [sp, #40]	; 0x28
		res = follow_path(&djo, path_old);		/* Check old object */
 80085de:	a80a      	add	r0, sp, #40	; 0x28
 80085e0:	f7fb ff4c 	bl	800447c <follow_path>
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 80085e4:	2800      	cmp	r0, #0
 80085e6:	d164      	bne.n	80086b2 <f_rename+0xf6>
 80085e8:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 80085ec:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 80085f0:	d161      	bne.n	80086b6 <f_rename+0xfa>
	if (cnt) {
 80085f2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80085f4:	2215      	movs	r2, #21
 80085f6:	310b      	adds	r1, #11
 80085f8:	a804      	add	r0, sp, #16
 80085fa:	f7fe ff8e 	bl	800751a <mem_cpy.part.0>
 80085fe:	a90a      	add	r1, sp, #40	; 0x28
 8008600:	a815      	add	r0, sp, #84	; 0x54
 8008602:	222c      	movs	r2, #44	; 0x2c
 8008604:	f7fe ff89 	bl	800751a <mem_cpy.part.0>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 8008608:	9900      	ldr	r1, [sp, #0]
 800860a:	a815      	add	r0, sp, #84	; 0x54
 800860c:	f7fb ff36 	bl	800447c <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 8008610:	b948      	cbnz	r0, 8008626 <f_rename+0x6a>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 8008612:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008614:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008616:	429a      	cmp	r2, r3
 8008618:	d103      	bne.n	8008622 <f_rename+0x66>
 800861a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800861c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800861e:	429a      	cmp	r2, r3
 8008620:	d003      	beq.n	800862a <f_rename+0x6e>
 8008622:	2008      	movs	r0, #8
 8008624:	e045      	b.n	80086b2 <f_rename+0xf6>
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 8008626:	2804      	cmp	r0, #4
 8008628:	d143      	bne.n	80086b2 <f_rename+0xf6>
					res = dir_register(&djn);			/* Register the new entry */
 800862a:	a815      	add	r0, sp, #84	; 0x54
 800862c:	f7ff fa89 	bl	8007b42 <dir_register>
					if (res == FR_OK) {
 8008630:	2800      	cmp	r0, #0
 8008632:	d13e      	bne.n	80086b2 <f_rename+0xf6>
						dir = djn.dir;					/* Copy information about object except name */
 8008634:	9d1c      	ldr	r5, [sp, #112]	; 0x70
	if (cnt) {
 8008636:	2213      	movs	r2, #19
 8008638:	f10d 0112 	add.w	r1, sp, #18
 800863c:	f105 000d 	add.w	r0, r5, #13
 8008640:	f7fe ff6b 	bl	800751a <mem_cpy.part.0>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 8008644:	f89d 3010 	ldrb.w	r3, [sp, #16]
						fs->wflag = 1;
 8008648:	9c03      	ldr	r4, [sp, #12]
						dir[DIR_Attr] = buf[0] | AM_ARC;
 800864a:	f043 0320 	orr.w	r3, r3, #32
						fs->wflag = 1;
 800864e:	2601      	movs	r6, #1
						dir[DIR_Attr] = buf[0] | AM_ARC;
 8008650:	72eb      	strb	r3, [r5, #11]
						fs->wflag = 1;
 8008652:	70e6      	strb	r6, [r4, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 8008654:	7aeb      	ldrb	r3, [r5, #11]
 8008656:	06db      	lsls	r3, r3, #27
 8008658:	d51d      	bpl.n	8008696 <f_rename+0xda>
 800865a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800865c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800865e:	429a      	cmp	r2, r3
 8008660:	d019      	beq.n	8008696 <f_rename+0xda>
							dw = clust2sect(fs, ld_clust(fs, dir));
 8008662:	4629      	mov	r1, r5
 8008664:	7820      	ldrb	r0, [r4, #0]
 8008666:	f7fe ff61 	bl	800752c <ld_clust.isra.0>
 800866a:	4601      	mov	r1, r0
 800866c:	4620      	mov	r0, r4
 800866e:	f7fe ff2f 	bl	80074d0 <clust2sect>
							if (!dw) {
 8008672:	4601      	mov	r1, r0
 8008674:	b308      	cbz	r0, 80086ba <f_rename+0xfe>
								res = move_window(fs, dw);
 8008676:	4620      	mov	r0, r4
 8008678:	f7fe ffc9 	bl	800760e <move_window>
								if (res == FR_OK && dir[1] == '.') {
 800867c:	b9c8      	cbnz	r0, 80086b2 <f_rename+0xf6>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 800867e:	9803      	ldr	r0, [sp, #12]
								if (res == FR_OK && dir[1] == '.') {
 8008680:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8008684:	2b2e      	cmp	r3, #46	; 0x2e
 8008686:	d106      	bne.n	8008696 <f_rename+0xda>
									st_clust(fs, dir, djn.obj.sclust);
 8008688:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800868a:	f100 0150 	add.w	r1, r0, #80	; 0x50
 800868e:	f7fe ff5b 	bl	8007548 <st_clust.isra.0>
									fs->wflag = 1;
 8008692:	9b03      	ldr	r3, [sp, #12]
 8008694:	70de      	strb	r6, [r3, #3]
	FATFS *fs = dp->obj.fs;
 8008696:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	res = move_window(fs, dp->sect);
 8008698:	9910      	ldr	r1, [sp, #64]	; 0x40
 800869a:	4620      	mov	r0, r4
 800869c:	f7fe ffb7 	bl	800760e <move_window>
	if (res == FR_OK) {
 80086a0:	b938      	cbnz	r0, 80086b2 <f_rename+0xf6>
		dp->dir[DIR_Name] = DDEM;
 80086a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086a4:	22e5      	movs	r2, #229	; 0xe5
 80086a6:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80086a8:	2301      	movs	r3, #1
 80086aa:	70e3      	strb	r3, [r4, #3]
					res = sync_fs(fs);
 80086ac:	9803      	ldr	r0, [sp, #12]
 80086ae:	f7ff f92c 	bl	800790a <sync_fs>
}
 80086b2:	b020      	add	sp, #128	; 0x80
 80086b4:	bd70      	pop	{r4, r5, r6, pc}
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 80086b6:	2006      	movs	r0, #6
 80086b8:	e7fb      	b.n	80086b2 <f_rename+0xf6>
								res = FR_INT_ERR;
 80086ba:	2002      	movs	r0, #2
 80086bc:	e7f9      	b.n	80086b2 <f_rename+0xf6>

080086be <LL_TIM_StructInit>:
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 80086be:	2300      	movs	r3, #0
  TIM_InitStruct->Autoreload        = 0xFFFFFFFFU;
 80086c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  TIM_InitStruct->ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1;
 80086c4:	e9c0 2302 	strd	r2, r3, [r0, #8]
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 80086c8:	8003      	strh	r3, [r0, #0]
  TIM_InitStruct->CounterMode       = LL_TIM_COUNTERMODE_UP;
 80086ca:	6043      	str	r3, [r0, #4]
  TIM_InitStruct->RepetitionCounter = 0x00000000U;
 80086cc:	6103      	str	r3, [r0, #16]
}
 80086ce:	4770      	bx	lr

080086d0 <LL_TIM_OC_StructInit>:
  TIM_OC_InitStruct->OCMode       = LL_TIM_OCMODE_FROZEN;
 80086d0:	2300      	movs	r3, #0
  TIM_OC_InitStruct->OCState      = LL_TIM_OCSTATE_DISABLE;
 80086d2:	e9c0 3300 	strd	r3, r3, [r0]
  TIM_OC_InitStruct->CompareValue = 0x00000000U;
 80086d6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  TIM_OC_InitStruct->OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
 80086da:	e9c0 3304 	strd	r3, r3, [r0, #16]
  TIM_OC_InitStruct->OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 80086de:	e9c0 3306 	strd	r3, r3, [r0, #24]
}
 80086e2:	4770      	bx	lr

080086e4 <UTILS_GetPLLOutputFrequency>:
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80086e4:	680b      	ldr	r3, [r1, #0]
 80086e6:	091b      	lsrs	r3, r3, #4
 80086e8:	3301      	adds	r3, #1
 80086ea:	fbb0 f0f3 	udiv	r0, r0, r3
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 80086ee:	684b      	ldr	r3, [r1, #4]
 80086f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086f4:	4358      	muls	r0, r3
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U);
 80086f6:	688b      	ldr	r3, [r1, #8]
 80086f8:	0e5b      	lsrs	r3, r3, #25
 80086fa:	3301      	adds	r3, #1
 80086fc:	005b      	lsls	r3, r3, #1
}
 80086fe:	fbb0 f0f3 	udiv	r0, r0, r3
 8008702:	4770      	bx	lr

08008704 <arch_system_halt>:
	__asm__ volatile(
 8008704:	f04f 0210 	mov.w	r2, #16
 8008708:	f3ef 8311 	mrs	r3, BASEPRI
 800870c:	f382 8811 	msr	BASEPRI, r2
 8008710:	f3bf 8f6f 	isb	sy
	for (;;) {
 8008714:	e7fe      	b.n	8008714 <arch_system_halt+0x10>

08008716 <z_impl_k_mutex_init>:
{
 8008716:	4603      	mov	r3, r0
	mutex->owner = NULL;
 8008718:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
 800871a:	e9c3 0002 	strd	r0, r0, [r3, #8]
	list->tail = (sys_dnode_t *)list;
 800871e:	e9c3 3300 	strd	r3, r3, [r3]
}
 8008722:	4770      	bx	lr

08008724 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8008724:	4603      	mov	r3, r0
 8008726:	b920      	cbnz	r0, 8008732 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008728:	f3ef 8205 	mrs	r2, IPSR
 800872c:	b90a      	cbnz	r2, 8008732 <z_reschedule_irqlock+0xe>
 800872e:	f7f9 be89 	b.w	8002444 <arch_swap>
	__asm__ volatile(
 8008732:	f383 8811 	msr	BASEPRI, r3
 8008736:	f3bf 8f6f 	isb	sy
}
 800873a:	4770      	bx	lr

0800873c <z_reschedule_unlocked>:
	__asm__ volatile(
 800873c:	f04f 0310 	mov.w	r3, #16
 8008740:	f3ef 8011 	mrs	r0, BASEPRI
 8008744:	f383 8811 	msr	BASEPRI, r3
 8008748:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800874c:	f7ff bfea 	b.w	8008724 <z_reschedule_irqlock>

08008750 <unpend_thread_no_timeout>:
{
 8008750:	4601      	mov	r1, r0
 8008752:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
 8008754:	6880      	ldr	r0, [r0, #8]
 8008756:	f7fd f87b 	bl	8005850 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800875a:	7b4b      	ldrb	r3, [r1, #13]
 800875c:	f023 0302 	bic.w	r3, r3, #2
 8008760:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
 8008762:	2300      	movs	r3, #0
 8008764:	608b      	str	r3, [r1, #8]
}
 8008766:	bd08      	pop	{r3, pc}

08008768 <z_priq_dumb_best>:
{
 8008768:	4603      	mov	r3, r0
	return list->head == list;
 800876a:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800876c:	4283      	cmp	r3, r0
 800876e:	d003      	beq.n	8008778 <z_priq_dumb_best+0x10>
	if (n != NULL) {
 8008770:	2800      	cmp	r0, #0
 8008772:	bf38      	it	cc
 8008774:	2000      	movcc	r0, #0
 8008776:	4770      	bx	lr
	struct k_thread *thread = NULL;
 8008778:	2000      	movs	r0, #0
}
 800877a:	4770      	bx	lr

0800877c <z_ready_thread>:
{
 800877c:	b510      	push	{r4, lr}
 800877e:	f04f 0310 	mov.w	r3, #16
 8008782:	f3ef 8411 	mrs	r4, BASEPRI
 8008786:	f383 8811 	msr	BASEPRI, r3
 800878a:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
 800878e:	f7fd f8b9 	bl	8005904 <ready_thread>
	__asm__ volatile(
 8008792:	f384 8811 	msr	BASEPRI, r4
 8008796:	f3bf 8f6f 	isb	sy
}
 800879a:	bd10      	pop	{r4, pc}

0800879c <z_thread_timeout>:
{
 800879c:	b570      	push	{r4, r5, r6, lr}
 800879e:	4604      	mov	r4, r0
	__asm__ volatile(
 80087a0:	f04f 0310 	mov.w	r3, #16
 80087a4:	f3ef 8611 	mrs	r6, BASEPRI
 80087a8:	f383 8811 	msr	BASEPRI, r3
 80087ac:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
 80087b0:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
 80087b4:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
 80087b8:	b113      	cbz	r3, 80087c0 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
 80087ba:	4628      	mov	r0, r5
 80087bc:	f7ff ffc8 	bl	8008750 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 80087c0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 80087c4:	f023 0314 	bic.w	r3, r3, #20
 80087c8:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
 80087cc:	4628      	mov	r0, r5
 80087ce:	f7fd f899 	bl	8005904 <ready_thread>
	__asm__ volatile(
 80087d2:	f386 8811 	msr	BASEPRI, r6
 80087d6:	f3bf 8f6f 	isb	sy
}
 80087da:	bd70      	pop	{r4, r5, r6, pc}

080087dc <add_to_waitq_locked>:
{
 80087dc:	b538      	push	{r3, r4, r5, lr}
 80087de:	4604      	mov	r4, r0
 80087e0:	460d      	mov	r5, r1
	unready_thread(thread);
 80087e2:	f7fd fa17 	bl	8005c14 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 80087e6:	7b63      	ldrb	r3, [r4, #13]
 80087e8:	f043 0302 	orr.w	r3, r3, #2
 80087ec:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 80087ee:	b1c5      	cbz	r5, 8008822 <add_to_waitq_locked+0x46>
	return list->head == list;
 80087f0:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
 80087f2:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80087f4:	429d      	cmp	r5, r3
 80087f6:	bf08      	it	eq
 80087f8:	2300      	moveq	r3, #0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	bf38      	it	cc
 80087fe:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8008800:	b183      	cbz	r3, 8008824 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
 8008802:	f994 100e 	ldrsb.w	r1, [r4, #14]
 8008806:	f993 200e 	ldrsb.w	r2, [r3, #14]
 800880a:	4291      	cmp	r1, r2
 800880c:	db04      	blt.n	8008818 <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
 800880e:	686a      	ldr	r2, [r5, #4]
 8008810:	429a      	cmp	r2, r3
 8008812:	d007      	beq.n	8008824 <add_to_waitq_locked+0x48>
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	e7f3      	b.n	8008800 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
 8008818:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 800881a:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
 800881e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8008820:	605c      	str	r4, [r3, #4]
}
 8008822:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
 8008824:	686b      	ldr	r3, [r5, #4]
 8008826:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
 8008828:	686b      	ldr	r3, [r5, #4]
	node->next = list;
 800882a:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
 800882c:	601c      	str	r4, [r3, #0]
	list->tail = node;
 800882e:	606c      	str	r4, [r5, #4]
 8008830:	e7f7      	b.n	8008822 <add_to_waitq_locked+0x46>

08008832 <z_unpend_first_thread>:
{
 8008832:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 8008834:	f04f 0310 	mov.w	r3, #16
 8008838:	f3ef 8211 	mrs	r2, BASEPRI
 800883c:	f383 8811 	msr	BASEPRI, r3
 8008840:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
 8008844:	f7ff ff90 	bl	8008768 <z_priq_dumb_best>
 8008848:	4604      	mov	r4, r0
	__asm__ volatile(
 800884a:	f382 8811 	msr	BASEPRI, r2
 800884e:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
 8008852:	b188      	cbz	r0, 8008878 <z_unpend_first_thread+0x46>
	__asm__ volatile(
 8008854:	f04f 0310 	mov.w	r3, #16
 8008858:	f3ef 8511 	mrs	r5, BASEPRI
 800885c:	f383 8811 	msr	BASEPRI, r3
 8008860:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
 8008864:	f7ff ff74 	bl	8008750 <unpend_thread_no_timeout>
	__asm__ volatile(
 8008868:	f385 8811 	msr	BASEPRI, r5
 800886c:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
 8008870:	f104 0018 	add.w	r0, r4, #24
 8008874:	f000 f810 	bl	8008898 <z_abort_timeout>
}
 8008878:	4620      	mov	r0, r4
 800887a:	bd38      	pop	{r3, r4, r5, pc}

0800887c <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
 800887c:	b13a      	cbz	r2, 800888e <z_impl_k_sem_init+0x12>
 800887e:	428a      	cmp	r2, r1
 8008880:	d305      	bcc.n	800888e <z_impl_k_sem_init+0x12>
	sem->limit = limit;
 8008882:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
 8008886:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
 800888a:	2000      	movs	r0, #0
 800888c:	4770      	bx	lr
		return -EINVAL;
 800888e:	f06f 0015 	mvn.w	r0, #21
}
 8008892:	4770      	bx	lr

08008894 <k_thread_name_get>:
}
 8008894:	2000      	movs	r0, #0
 8008896:	4770      	bx	lr

08008898 <z_abort_timeout>:
{
 8008898:	b510      	push	{r4, lr}
	__asm__ volatile(
 800889a:	f04f 0210 	mov.w	r2, #16
 800889e:	f3ef 8411 	mrs	r4, BASEPRI
 80088a2:	f382 8811 	msr	BASEPRI, r2
 80088a6:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 80088aa:	6803      	ldr	r3, [r0, #0]
 80088ac:	b13b      	cbz	r3, 80088be <z_abort_timeout+0x26>
			remove_timeout(to);
 80088ae:	f7fd fbf5 	bl	800609c <remove_timeout>
			ret = 0;
 80088b2:	2000      	movs	r0, #0
	__asm__ volatile(
 80088b4:	f384 8811 	msr	BASEPRI, r4
 80088b8:	f3bf 8f6f 	isb	sy
}
 80088bc:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 80088be:	f06f 0015 	mvn.w	r0, #21
 80088c2:	e7f7      	b.n	80088b4 <z_abort_timeout+0x1c>

080088c4 <z_get_next_timeout_expiry>:
{
 80088c4:	b510      	push	{r4, lr}
	__asm__ volatile(
 80088c6:	f04f 0310 	mov.w	r3, #16
 80088ca:	f3ef 8411 	mrs	r4, BASEPRI
 80088ce:	f383 8811 	msr	BASEPRI, r3
 80088d2:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
 80088d6:	f7fd fbfb 	bl	80060d0 <next_timeout>
	__asm__ volatile(
 80088da:	f384 8811 	msr	BASEPRI, r4
 80088de:	f3bf 8f6f 	isb	sy
}
 80088e2:	bd10      	pop	{r4, pc}

080088e4 <z_set_timeout_expiry>:
{
 80088e4:	b570      	push	{r4, r5, r6, lr}
 80088e6:	4604      	mov	r4, r0
 80088e8:	460d      	mov	r5, r1
	__asm__ volatile(
 80088ea:	f04f 0310 	mov.w	r3, #16
 80088ee:	f3ef 8611 	mrs	r6, BASEPRI
 80088f2:	f383 8811 	msr	BASEPRI, r3
 80088f6:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 80088fa:	f7fd fbe9 	bl	80060d0 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 80088fe:	2801      	cmp	r0, #1
 8008900:	dd05      	ble.n	800890e <z_set_timeout_expiry+0x2a>
 8008902:	42a0      	cmp	r0, r4
 8008904:	dd03      	ble.n	800890e <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
 8008906:	4629      	mov	r1, r5
 8008908:	4620      	mov	r0, r4
 800890a:	f7f9 fd05 	bl	8002318 <z_clock_set_timeout>
	__asm__ volatile(
 800890e:	f386 8811 	msr	BASEPRI, r6
 8008912:	f3bf 8f6f 	isb	sy
}
 8008916:	bd70      	pop	{r4, r5, r6, pc}

08008918 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
 8008918:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
 800891a:	f7fd fcf9 	bl	8006310 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
 800891e:	bd08      	pop	{r3, pc}

08008920 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
 8008920:	f7fd bcf6 	b.w	8006310 <z_tick_get>

08008924 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
 8008924:	b538      	push	{r3, r4, r5, lr}
 8008926:	4604      	mov	r4, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
 8008928:	2500      	movs	r5, #0
	__asm__ volatile(
 800892a:	f04f 0210 	mov.w	r2, #16
 800892e:	f3ef 8311 	mrs	r3, BASEPRI
 8008932:	f382 8811 	msr	BASEPRI, r2
 8008936:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
 800893a:	6920      	ldr	r0, [r4, #16]
		if (to_abort) {
 800893c:	b188      	cbz	r0, 8008962 <idle+0x3e>
			cpu->pending_abort = NULL;
 800893e:	6125      	str	r5, [r4, #16]
	__asm__ volatile(
 8008940:	f383 8811 	msr	BASEPRI, r3
 8008944:	f3bf 8f6f 	isb	sy
			 * is continued below.
			 */
			LOG_DBG("idle %p aborting thread %p",
				_current, to_abort);

			z_thread_single_abort(to_abort);
 8008948:	f7fd f8e2 	bl	8005b10 <z_thread_single_abort>
	__asm__ volatile(
 800894c:	f04f 0310 	mov.w	r3, #16
 8008950:	f3ef 8011 	mrs	r0, BASEPRI
 8008954:	f383 8811 	msr	BASEPRI, r3
 8008958:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800895c:	f7ff fee2 	bl	8008724 <z_reschedule_irqlock>
			 * in order to abort the thread, and we now need to
			 * figure out what to do next, it's not necessarily
			 * the case that there are no other runnable threads.
			 */
			z_reschedule_unlocked();
			continue;
 8008960:	e7e3      	b.n	800892a <idle+0x6>
	__asm__ volatile(
 8008962:	f383 8811 	msr	BASEPRI, r3
 8008966:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 800896a:	f04f 0210 	mov.w	r2, #16
 800896e:	f3ef 8311 	mrs	r3, BASEPRI
 8008972:	f382 8811 	msr	BASEPRI, r2
 8008976:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
 800897a:	f7ff ffa3 	bl	80088c4 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
 800897e:	2101      	movs	r1, #1
 8008980:	2802      	cmp	r0, #2
 8008982:	bfd8      	it	le
 8008984:	4608      	movle	r0, r1
 8008986:	f7ff ffad 	bl	80088e4 <z_set_timeout_expiry>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 800898a:	f7f9 fe2d 	bl	80025e8 <arch_cpu_idle>
}
 800898e:	e7cc      	b.n	800892a <idle+0x6>

08008990 <k_heap_init>:
{
 8008990:	b410      	push	{r4}
 8008992:	f100 040c 	add.w	r4, r0, #12
 8008996:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
 800899a:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
 800899c:	f7fd bdab 	b.w	80064f6 <sys_heap_init>

080089a0 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
 80089a0:	4770      	bx	lr
