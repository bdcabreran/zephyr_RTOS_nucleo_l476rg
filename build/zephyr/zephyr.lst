
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_start>:
 8000000:	200007a0 	.word	0x200007a0
 8000004:	08001565 	.word	0x08001565
 8000008:	08003477 	.word	0x08003477
 800000c:	08001591 	.word	0x08001591
 8000010:	08001591 	.word	0x08001591
 8000014:	08001591 	.word	0x08001591
 8000018:	08001591 	.word	0x08001591
	...
 800002c:	080013b9 	.word	0x080013b9
 8000030:	08001591 	.word	0x08001591
 8000034:	00000000 	.word	0x00000000
 8000038:	08001365 	.word	0x08001365
 800003c:	080011b5 	.word	0x080011b5

08000040 <_irq_vector_table>:
 8000040:	0800153d 0800153d 0800153d 0800153d     =...=...=...=...
 8000050:	0800153d 0800153d 0800153d 0800153d     =...=...=...=...
 8000060:	0800153d 0800153d 0800153d 0800153d     =...=...=...=...
 8000070:	0800153d 0800153d 0800153d 0800153d     =...=...=...=...
 8000080:	0800153d 0800153d 0800153d 0800153d     =...=...=...=...
 8000090:	0800153d 0800153d 0800153d 0800153d     =...=...=...=...
 80000a0:	0800153d 0800153d 0800153d 0800153d     =...=...=...=...
 80000b0:	0800153d 0800153d 0800153d 0800153d     =...=...=...=...
 80000c0:	0800153d 0800153d 0800153d 0800153d     =...=...=...=...
 80000d0:	0800153d 0800153d 0800153d 0800153d     =...=...=...=...
 80000e0:	0800153d 0800153d 0800153d 0800153d     =...=...=...=...
 80000f0:	0800153d 0800153d 0800153d 0800153d     =...=...=...=...
 8000100:	0800153d 0800153d 0800153d 0800153d     =...=...=...=...
 8000110:	0800153d 0800153d 0800153d 0800153d     =...=...=...=...
 8000120:	0800153d 0800153d 0800153d 0800153d     =...=...=...=...
 8000130:	0800153d 0800153d 0800153d 0800153d     =...=...=...=...
 8000140:	0800153d 0800153d 0800153d 0800153d     =...=...=...=...
 8000150:	0800153d 0800153d 0800153d 0800153d     =...=...=...=...
 8000160:	0800153d 0800153d 0800153d 0800153d     =...=...=...=...
 8000170:	0800153d 0800153d 0800153d 0800153d     =...=...=...=...
 8000180:	0800153d 0800153d                       =...=...

Disassembly of section text:

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000198:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800019c:	f000 b96e 	b.w	800047c <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9d08      	ldr	r5, [sp, #32]
 80001be:	460e      	mov	r6, r1
 80001c0:	4604      	mov	r4, r0
 80001c2:	468c      	mov	ip, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	f040 8081 	bne.w	80002cc <__udivmoddi4+0x114>
 80001ca:	428a      	cmp	r2, r1
 80001cc:	4617      	mov	r7, r2
 80001ce:	d945      	bls.n	800025c <__udivmoddi4+0xa4>
 80001d0:	fab2 f282 	clz	r2, r2
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x32>
 80001d6:	f1c2 0120 	rsb	r1, r2, #32
 80001da:	fa06 f302 	lsl.w	r3, r6, r2
 80001de:	fa20 f101 	lsr.w	r1, r0, r1
 80001e2:	4097      	lsls	r7, r2
 80001e4:	ea41 0c03 	orr.w	ip, r1, r3
 80001e8:	4094      	lsls	r4, r2
 80001ea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001ee:	0c23      	lsrs	r3, r4, #16
 80001f0:	fbbc f6fe 	udiv	r6, ip, lr
 80001f4:	b2b9      	uxth	r1, r7
 80001f6:	fb0e cc16 	mls	ip, lr, r6, ip
 80001fa:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80001fe:	fb06 f001 	mul.w	r0, r6, r1
 8000202:	4298      	cmp	r0, r3
 8000204:	d909      	bls.n	800021a <__udivmoddi4+0x62>
 8000206:	18fb      	adds	r3, r7, r3
 8000208:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800020c:	f080 8115 	bcs.w	800043a <__udivmoddi4+0x282>
 8000210:	4298      	cmp	r0, r3
 8000212:	f240 8112 	bls.w	800043a <__udivmoddi4+0x282>
 8000216:	3e02      	subs	r6, #2
 8000218:	443b      	add	r3, r7
 800021a:	1a1b      	subs	r3, r3, r0
 800021c:	b2a4      	uxth	r4, r4
 800021e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000222:	fb0e 3310 	mls	r3, lr, r0, r3
 8000226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800022a:	fb00 f101 	mul.w	r1, r0, r1
 800022e:	42a1      	cmp	r1, r4
 8000230:	d909      	bls.n	8000246 <__udivmoddi4+0x8e>
 8000232:	193c      	adds	r4, r7, r4
 8000234:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000238:	f080 8101 	bcs.w	800043e <__udivmoddi4+0x286>
 800023c:	42a1      	cmp	r1, r4
 800023e:	f240 80fe 	bls.w	800043e <__udivmoddi4+0x286>
 8000242:	3802      	subs	r0, #2
 8000244:	443c      	add	r4, r7
 8000246:	1a64      	subs	r4, r4, r1
 8000248:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800024c:	2100      	movs	r1, #0
 800024e:	b11d      	cbz	r5, 8000258 <__udivmoddi4+0xa0>
 8000250:	40d4      	lsrs	r4, r2
 8000252:	2300      	movs	r3, #0
 8000254:	e9c5 4300 	strd	r4, r3, [r5]
 8000258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025c:	b902      	cbnz	r2, 8000260 <__udivmoddi4+0xa8>
 800025e:	deff      	udf	#255	; 0xff
 8000260:	fab2 f282 	clz	r2, r2
 8000264:	2a00      	cmp	r2, #0
 8000266:	d14f      	bne.n	8000308 <__udivmoddi4+0x150>
 8000268:	1bcb      	subs	r3, r1, r7
 800026a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800026e:	fa1f f887 	uxth.w	r8, r7
 8000272:	2101      	movs	r1, #1
 8000274:	fbb3 fcfe 	udiv	ip, r3, lr
 8000278:	0c26      	lsrs	r6, r4, #16
 800027a:	fb0e 331c 	mls	r3, lr, ip, r3
 800027e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8000282:	fb08 f30c 	mul.w	r3, r8, ip
 8000286:	42b3      	cmp	r3, r6
 8000288:	d907      	bls.n	800029a <__udivmoddi4+0xe2>
 800028a:	19be      	adds	r6, r7, r6
 800028c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000290:	d202      	bcs.n	8000298 <__udivmoddi4+0xe0>
 8000292:	42b3      	cmp	r3, r6
 8000294:	f200 80eb 	bhi.w	800046e <__udivmoddi4+0x2b6>
 8000298:	4684      	mov	ip, r0
 800029a:	1af6      	subs	r6, r6, r3
 800029c:	b2a3      	uxth	r3, r4
 800029e:	fbb6 f0fe 	udiv	r0, r6, lr
 80002a2:	fb0e 6610 	mls	r6, lr, r0, r6
 80002a6:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 80002aa:	fb08 f800 	mul.w	r8, r8, r0
 80002ae:	45a0      	cmp	r8, r4
 80002b0:	d907      	bls.n	80002c2 <__udivmoddi4+0x10a>
 80002b2:	193c      	adds	r4, r7, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x108>
 80002ba:	45a0      	cmp	r8, r4
 80002bc:	f200 80d2 	bhi.w	8000464 <__udivmoddi4+0x2ac>
 80002c0:	4618      	mov	r0, r3
 80002c2:	eba4 0408 	sub.w	r4, r4, r8
 80002c6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002ca:	e7c0      	b.n	800024e <__udivmoddi4+0x96>
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d908      	bls.n	80002e2 <__udivmoddi4+0x12a>
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	f000 80af 	beq.w	8000434 <__udivmoddi4+0x27c>
 80002d6:	2100      	movs	r1, #0
 80002d8:	e9c5 0600 	strd	r0, r6, [r5]
 80002dc:	4608      	mov	r0, r1
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d149      	bne.n	800037e <__udivmoddi4+0x1c6>
 80002ea:	42b3      	cmp	r3, r6
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0x13c>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80bb 	bhi.w	800046a <__udivmoddi4+0x2b2>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb66 0303 	sbc.w	r3, r6, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469c      	mov	ip, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0aa      	beq.n	8000258 <__udivmoddi4+0xa0>
 8000302:	e9c5 4c00 	strd	r4, ip, [r5]
 8000306:	e7a7      	b.n	8000258 <__udivmoddi4+0xa0>
 8000308:	f1c2 0320 	rsb	r3, r2, #32
 800030c:	4097      	lsls	r7, r2
 800030e:	40d8      	lsrs	r0, r3
 8000310:	4091      	lsls	r1, r2
 8000312:	40de      	lsrs	r6, r3
 8000314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000318:	4308      	orrs	r0, r1
 800031a:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 800031e:	fbb6 f1fe 	udiv	r1, r6, lr
 8000322:	fa1f f887 	uxth.w	r8, r7
 8000326:	fb0e 6611 	mls	r6, lr, r1, r6
 800032a:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
 800032e:	fb01 f308 	mul.w	r3, r1, r8
 8000332:	42b3      	cmp	r3, r6
 8000334:	fa04 f402 	lsl.w	r4, r4, r2
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x196>
 800033a:	19be      	adds	r6, r7, r6
 800033c:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 8000340:	f080 808e 	bcs.w	8000460 <__udivmoddi4+0x2a8>
 8000344:	42b3      	cmp	r3, r6
 8000346:	f240 808b 	bls.w	8000460 <__udivmoddi4+0x2a8>
 800034a:	3902      	subs	r1, #2
 800034c:	443e      	add	r6, r7
 800034e:	1af3      	subs	r3, r6, r3
 8000350:	b286      	uxth	r6, r0
 8000352:	fbb3 f0fe 	udiv	r0, r3, lr
 8000356:	fb0e 3310 	mls	r3, lr, r0, r3
 800035a:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800035e:	fb00 f308 	mul.w	r3, r0, r8
 8000362:	42b3      	cmp	r3, r6
 8000364:	d907      	bls.n	8000376 <__udivmoddi4+0x1be>
 8000366:	19be      	adds	r6, r7, r6
 8000368:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800036c:	d274      	bcs.n	8000458 <__udivmoddi4+0x2a0>
 800036e:	42b3      	cmp	r3, r6
 8000370:	d972      	bls.n	8000458 <__udivmoddi4+0x2a0>
 8000372:	3802      	subs	r0, #2
 8000374:	443e      	add	r6, r7
 8000376:	1af3      	subs	r3, r6, r3
 8000378:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037c:	e77a      	b.n	8000274 <__udivmoddi4+0xbc>
 800037e:	f1c1 0720 	rsb	r7, r1, #32
 8000382:	fa03 f401 	lsl.w	r4, r3, r1
 8000386:	fa22 f307 	lsr.w	r3, r2, r7
 800038a:	431c      	orrs	r4, r3
 800038c:	fa20 f907 	lsr.w	r9, r0, r7
 8000390:	fa06 f301 	lsl.w	r3, r6, r1
 8000394:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000398:	40fe      	lsrs	r6, r7
 800039a:	ea49 0903 	orr.w	r9, r9, r3
 800039e:	ea4f 4319 	mov.w	r3, r9, lsr #16
 80003a2:	fbb6 fefc 	udiv	lr, r6, ip
 80003a6:	fa1f f884 	uxth.w	r8, r4
 80003aa:	fb0c 661e 	mls	r6, ip, lr, r6
 80003ae:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 80003b2:	fb0e fa08 	mul.w	sl, lr, r8
 80003b6:	45b2      	cmp	sl, r6
 80003b8:	fa02 f201 	lsl.w	r2, r2, r1
 80003bc:	fa00 f301 	lsl.w	r3, r0, r1
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x21c>
 80003c2:	19a6      	adds	r6, r4, r6
 80003c4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80003c8:	d248      	bcs.n	800045c <__udivmoddi4+0x2a4>
 80003ca:	45b2      	cmp	sl, r6
 80003cc:	d946      	bls.n	800045c <__udivmoddi4+0x2a4>
 80003ce:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d2:	4426      	add	r6, r4
 80003d4:	eba6 060a 	sub.w	r6, r6, sl
 80003d8:	fa1f f989 	uxth.w	r9, r9
 80003dc:	fbb6 f0fc 	udiv	r0, r6, ip
 80003e0:	fb0c 6610 	mls	r6, ip, r0, r6
 80003e4:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
 80003e8:	fb00 f808 	mul.w	r8, r0, r8
 80003ec:	45b0      	cmp	r8, r6
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0x248>
 80003f0:	19a6      	adds	r6, r4, r6
 80003f2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003f6:	d22d      	bcs.n	8000454 <__udivmoddi4+0x29c>
 80003f8:	45b0      	cmp	r8, r6
 80003fa:	d92b      	bls.n	8000454 <__udivmoddi4+0x29c>
 80003fc:	3802      	subs	r0, #2
 80003fe:	4426      	add	r6, r4
 8000400:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000404:	eba6 0608 	sub.w	r6, r6, r8
 8000408:	fba0 8902 	umull	r8, r9, r0, r2
 800040c:	454e      	cmp	r6, r9
 800040e:	46c4      	mov	ip, r8
 8000410:	46ce      	mov	lr, r9
 8000412:	d318      	bcc.n	8000446 <__udivmoddi4+0x28e>
 8000414:	d015      	beq.n	8000442 <__udivmoddi4+0x28a>
 8000416:	b375      	cbz	r5, 8000476 <__udivmoddi4+0x2be>
 8000418:	ebb3 020c 	subs.w	r2, r3, ip
 800041c:	eb66 060e 	sbc.w	r6, r6, lr
 8000420:	fa06 f707 	lsl.w	r7, r6, r7
 8000424:	fa22 f301 	lsr.w	r3, r2, r1
 8000428:	40ce      	lsrs	r6, r1
 800042a:	431f      	orrs	r7, r3
 800042c:	e9c5 7600 	strd	r7, r6, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	e711      	b.n	8000258 <__udivmoddi4+0xa0>
 8000434:	4629      	mov	r1, r5
 8000436:	4628      	mov	r0, r5
 8000438:	e70e      	b.n	8000258 <__udivmoddi4+0xa0>
 800043a:	4666      	mov	r6, ip
 800043c:	e6ed      	b.n	800021a <__udivmoddi4+0x62>
 800043e:	4618      	mov	r0, r3
 8000440:	e701      	b.n	8000246 <__udivmoddi4+0x8e>
 8000442:	4543      	cmp	r3, r8
 8000444:	d2e7      	bcs.n	8000416 <__udivmoddi4+0x25e>
 8000446:	ebb8 0c02 	subs.w	ip, r8, r2
 800044a:	eb69 0404 	sbc.w	r4, r9, r4
 800044e:	3801      	subs	r0, #1
 8000450:	46a6      	mov	lr, r4
 8000452:	e7e0      	b.n	8000416 <__udivmoddi4+0x25e>
 8000454:	4660      	mov	r0, ip
 8000456:	e7d3      	b.n	8000400 <__udivmoddi4+0x248>
 8000458:	4660      	mov	r0, ip
 800045a:	e78c      	b.n	8000376 <__udivmoddi4+0x1be>
 800045c:	4686      	mov	lr, r0
 800045e:	e7b9      	b.n	80003d4 <__udivmoddi4+0x21c>
 8000460:	4661      	mov	r1, ip
 8000462:	e774      	b.n	800034e <__udivmoddi4+0x196>
 8000464:	3802      	subs	r0, #2
 8000466:	443c      	add	r4, r7
 8000468:	e72b      	b.n	80002c2 <__udivmoddi4+0x10a>
 800046a:	4608      	mov	r0, r1
 800046c:	e747      	b.n	80002fe <__udivmoddi4+0x146>
 800046e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000472:	443e      	add	r6, r7
 8000474:	e711      	b.n	800029a <__udivmoddi4+0xe2>
 8000476:	4629      	mov	r1, r5
 8000478:	e6ee      	b.n	8000258 <__udivmoddi4+0xa0>
 800047a:	bf00      	nop

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <main>:
#include "heartbeat.h"
#include "pwm_led.h"


void main(void)
{
 8000480:	b508      	push	{r3, lr}
	heartbeat_setup();
 8000482:	f000 f80d 	bl	80004a0 <heartbeat_setup>
	pwm_led_setup();
 8000486:	f000 f891 	bl	80005ac <pwm_led_setup>

	printk("Nucleo Project\n");
 800048a:	4804      	ldr	r0, [pc, #16]	; (800049c <main+0x1c>)
 800048c:	f002 fe42 	bl	8003114 <printk>
	
	

	while (1)
	{
		heartbeat_exec();
 8000490:	f000 f822 	bl	80004d8 <heartbeat_exec>
		pwm_led_exec();
 8000494:	f000 f8d6 	bl	8000644 <pwm_led_exec>
	while (1)
 8000498:	e7fa      	b.n	8000490 <main+0x10>
 800049a:	bf00      	nop
 800049c:	0800406e 	.word	0x0800406e

080004a0 <heartbeat_setup>:
#include "heartbeat.h"

const struct device *dev;

int heartbeat_setup(void)
{
 80004a0:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 80004a2:	480b      	ldr	r0, [pc, #44]	; (80004d0 <heartbeat_setup+0x30>)
 80004a4:	f002 f83a 	bl	800251c <z_impl_device_get_binding>
	int ret;
	dev = device_get_binding(LED0);
 80004a8:	4a0a      	ldr	r2, [pc, #40]	; (80004d4 <heartbeat_setup+0x34>)
 80004aa:	6010      	str	r0, [r2, #0]
	if (dev == NULL) {
 80004ac:	b170      	cbz	r0, 80004cc <heartbeat_setup+0x2c>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
 80004ae:	68c4      	ldr	r4, [r0, #12]
	return api->pin_configure(port, pin, flags);
 80004b0:	6883      	ldr	r3, [r0, #8]
 80004b2:	f44f 52d0 	mov.w	r2, #6656	; 0x1a00
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2105      	movs	r1, #5
 80004ba:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
 80004bc:	2800      	cmp	r0, #0
 80004be:	d104      	bne.n	80004ca <heartbeat_setup+0x2a>
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 80004c0:	6823      	ldr	r3, [r4, #0]
 80004c2:	f023 0320 	bic.w	r3, r3, #32
 80004c6:	6023      	str	r3, [r4, #0]
	}
	ret = gpio_pin_configure(dev, PIN, GPIO_OUTPUT_ACTIVE | FLAGS);
	if (ret < 0) {
		return 0;
	}
}
 80004c8:	bd10      	pop	{r4, pc}
	if (ret < 0) {
 80004ca:	dafd      	bge.n	80004c8 <heartbeat_setup+0x28>
 80004cc:	2000      	movs	r0, #0
 80004ce:	e7fb      	b.n	80004c8 <heartbeat_setup+0x28>
 80004d0:	0800407e 	.word	0x0800407e
 80004d4:	20000228 	.word	0x20000228

080004d8 <heartbeat_exec>:

int heartbeat_exec(void)
{
	static bool led_is_on = true;
	gpio_pin_set(dev, PIN, (int)led_is_on);
 80004d8:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <heartbeat_exec+0x3c>)
 80004da:	6818      	ldr	r0, [r3, #0]

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 80004dc:	68c2      	ldr	r2, [r0, #12]
{
 80004de:	b510      	push	{r4, lr}
	gpio_pin_set(dev, PIN, (int)led_is_on);
 80004e0:	4c0d      	ldr	r4, [pc, #52]	; (8000518 <heartbeat_exec+0x40>)
 80004e2:	6812      	ldr	r2, [r2, #0]
 80004e4:	7823      	ldrb	r3, [r4, #0]
 80004e6:	0692      	lsls	r2, r2, #26
		value = (value != 0) ? 0 : 1;
 80004e8:	bf48      	it	mi
 80004ea:	f083 0301 	eormi.w	r3, r3, #1
	if (value != 0)	{
 80004ee:	b173      	cbz	r3, 800050e <heartbeat_exec+0x36>
	return api->port_set_bits_raw(port, pins);
 80004f0:	6883      	ldr	r3, [r0, #8]
 80004f2:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 80004f4:	2120      	movs	r1, #32
 80004f6:	4798      	blx	r3
	led_is_on = !led_is_on;
 80004f8:	7823      	ldrb	r3, [r4, #0]
 80004fa:	f083 0301 	eor.w	r3, r3, #1
 80004fe:	7023      	strb	r3, [r4, #0]
		parm0.val = timeout;
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
 8000500:	f242 7010 	movw	r0, #10000	; 0x2710
	k_msleep(SLEEP_TIME_MS);
 8000504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000508:	2100      	movs	r1, #0
 800050a:	f002 bbd9 	b.w	8002cc0 <z_impl_k_sleep>
 800050e:	6883      	ldr	r3, [r0, #8]
 8000510:	691b      	ldr	r3, [r3, #16]
 8000512:	e7ef      	b.n	80004f4 <heartbeat_exec+0x1c>
 8000514:	20000228 	.word	0x20000228
 8000518:	20000038 	.word	0x20000038

0800051c <pwm_pin_set_usec.constprop.0>:
 * @param flags Flags for pin configuration (polarity).
 *
 * @retval 0 If successful.
 * @retval Negative errno code if failure.
 */
static inline int pwm_pin_set_usec(const struct device *dev, uint32_t pwm,
 800051c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000520:	4606      	mov	r6, r0
 8000522:	b087      	sub	sp, #28
 8000524:	460d      	mov	r5, r1
 8000526:	4617      	mov	r7, r2
	return api->get_cycles_per_sec(dev, pwm, cycles);
 8000528:	6883      	ldr	r3, [r0, #8]
 800052a:	aa04      	add	r2, sp, #16
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	2101      	movs	r1, #1
 8000530:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 8000532:	9003      	str	r0, [sp, #12]
 8000534:	bb80      	cbnz	r0, 8000598 <pwm_pin_set_usec.constprop.0+0x7c>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 8000536:	e9dd 4b04 	ldrd	r4, fp, [sp, #16]
 800053a:	fba5 8904 	umull	r8, r9, r5, r4
 800053e:	fb05 990b 	mla	r9, r5, fp, r9
 8000542:	4a18      	ldr	r2, [pc, #96]	; (80005a4 <pwm_pin_set_usec.constprop.0+0x88>)
 8000544:	2300      	movs	r3, #0
 8000546:	4640      	mov	r0, r8
 8000548:	4649      	mov	r1, r9
 800054a:	f7ff fe1d 	bl	8000188 <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800054e:	4b16      	ldr	r3, [pc, #88]	; (80005a8 <pwm_pin_set_usec.constprop.0+0x8c>)
 8000550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000554:	454b      	cmp	r3, r9
 8000556:	bf08      	it	eq
 8000558:	4542      	cmpeq	r2, r8
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 800055a:	4682      	mov	sl, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
 800055c:	d31f      	bcc.n	800059e <pwm_pin_set_usec.constprop.0+0x82>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 800055e:	fba7 4504 	umull	r4, r5, r7, r4
 8000562:	fb07 550b 	mla	r5, r7, fp, r5
 8000566:	4a0f      	ldr	r2, [pc, #60]	; (80005a4 <pwm_pin_set_usec.constprop.0+0x88>)
 8000568:	2300      	movs	r3, #0
 800056a:	4620      	mov	r0, r4
 800056c:	4629      	mov	r1, r5
 800056e:	f7ff fe0b 	bl	8000188 <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 8000572:	4a0d      	ldr	r2, [pc, #52]	; (80005a8 <pwm_pin_set_usec.constprop.0+0x8c>)
 8000574:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000578:	42aa      	cmp	r2, r5
 800057a:	bf08      	it	eq
 800057c:	42a1      	cmpeq	r1, r4
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 800057e:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
 8000580:	d30d      	bcc.n	800059e <pwm_pin_set_usec.constprop.0+0x82>
	return api->pin_set(dev, pwm, period, pulse, flags);
 8000582:	68b2      	ldr	r2, [r6, #8]
 8000584:	9903      	ldr	r1, [sp, #12]
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	6814      	ldr	r4, [r2, #0]
 800058a:	2101      	movs	r1, #1
 800058c:	4652      	mov	r2, sl
 800058e:	4630      	mov	r0, r6
 8000590:	47a0      	blx	r4
		return -ENOTSUP;
	}

	return pwm_pin_set_cycles(dev, pwm, (uint32_t)period_cycles,
				  (uint32_t)pulse_cycles, flags);
}
 8000592:	b007      	add	sp, #28
 8000594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EIO;
 8000598:	f06f 0004 	mvn.w	r0, #4
 800059c:	e7f9      	b.n	8000592 <pwm_pin_set_usec.constprop.0+0x76>
		return -ENOTSUP;
 800059e:	f06f 0022 	mvn.w	r0, #34	; 0x22
 80005a2:	e7f6      	b.n	8000592 <pwm_pin_set_usec.constprop.0+0x76>
 80005a4:	000f4240 	.word	0x000f4240
 80005a8:	000f423f 	.word	0x000f423f

080005ac <pwm_led_setup>:
static uint32_t max_period;
static uint32_t period;
static uint8_t dir = 0U;

int pwm_led_setup(void)
{
 80005ac:	b570      	push	{r4, r5, r6, lr}
	printk("PWM-based blinky Setup\n");
 80005ae:	481b      	ldr	r0, [pc, #108]	; (800061c <pwm_led_setup+0x70>)
 80005b0:	f002 fdb0 	bl	8003114 <printk>
 80005b4:	481a      	ldr	r0, [pc, #104]	; (8000620 <pwm_led_setup+0x74>)

	pwm = device_get_binding(PWM_LABEL);
 80005b6:	4d1b      	ldr	r5, [pc, #108]	; (8000624 <pwm_led_setup+0x78>)
 80005b8:	f001 ffb0 	bl	800251c <z_impl_device_get_binding>
 80005bc:	4604      	mov	r4, r0
 80005be:	6028      	str	r0, [r5, #0]
	if (!pwm) {
 80005c0:	b928      	cbnz	r0, 80005ce <pwm_led_setup+0x22>
		printk("Error: didn't find %s device\n", PWM_LABEL);
 80005c2:	4819      	ldr	r0, [pc, #100]	; (8000628 <pwm_led_setup+0x7c>)
 80005c4:	4916      	ldr	r1, [pc, #88]	; (8000620 <pwm_led_setup+0x74>)
 80005c6:	f002 fda5 	bl	8003114 <printk>
		return 0;
 80005ca:	4620      	mov	r0, r4

	printk("Done calibrating; maximum/minimum periods %u/%u usec\n",
	       max_period, MIN_PERIOD_USEC);

	period = max_period;
}
 80005cc:	bd70      	pop	{r4, r5, r6, pc}
	printk("Calibrating for device %s channel %d...\n", PWM_LABEL, PWM_CHANNEL);
 80005ce:	4914      	ldr	r1, [pc, #80]	; (8000620 <pwm_led_setup+0x74>)
 80005d0:	4816      	ldr	r0, [pc, #88]	; (800062c <pwm_led_setup+0x80>)
	max_period = MAX_PERIOD_USEC;
 80005d2:	4c17      	ldr	r4, [pc, #92]	; (8000630 <pwm_led_setup+0x84>)
	printk("Calibrating for device %s channel %d...\n", PWM_LABEL, PWM_CHANNEL);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f002 fd9d 	bl	8003114 <printk>
	max_period = MAX_PERIOD_USEC;
 80005da:	4b16      	ldr	r3, [pc, #88]	; (8000634 <pwm_led_setup+0x88>)
 80005dc:	6023      	str	r3, [r4, #0]
		if (max_period < (4U * MIN_PERIOD_USEC)) {
 80005de:	f24f 4623 	movw	r6, #62499	; 0xf423
    while (pwm_pin_set_usec(pwm, PWM_CHANNEL,
 80005e2:	6821      	ldr	r1, [r4, #0]
 80005e4:	6828      	ldr	r0, [r5, #0]
 80005e6:	084a      	lsrs	r2, r1, #1
 80005e8:	f7ff ff98 	bl	800051c <pwm_pin_set_usec.constprop.0>
 80005ec:	b948      	cbnz	r0, 8000602 <pwm_led_setup+0x56>
	printk("Done calibrating; maximum/minimum periods %u/%u usec\n",
 80005ee:	6821      	ldr	r1, [r4, #0]
 80005f0:	4811      	ldr	r0, [pc, #68]	; (8000638 <pwm_led_setup+0x8c>)
 80005f2:	f643 5209 	movw	r2, #15625	; 0x3d09
 80005f6:	f002 fd8d 	bl	8003114 <printk>
	period = max_period;
 80005fa:	4b10      	ldr	r3, [pc, #64]	; (800063c <pwm_led_setup+0x90>)
 80005fc:	6822      	ldr	r2, [r4, #0]
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	e7e4      	b.n	80005cc <pwm_led_setup+0x20>
		max_period /= 2U;
 8000602:	6823      	ldr	r3, [r4, #0]
 8000604:	085b      	lsrs	r3, r3, #1
		if (max_period < (4U * MIN_PERIOD_USEC)) {
 8000606:	42b3      	cmp	r3, r6
		max_period /= 2U;
 8000608:	6023      	str	r3, [r4, #0]
		if (max_period < (4U * MIN_PERIOD_USEC)) {
 800060a:	d8ea      	bhi.n	80005e2 <pwm_led_setup+0x36>
			printk("Error: PWM device %s "
 800060c:	4904      	ldr	r1, [pc, #16]	; (8000620 <pwm_led_setup+0x74>)
 800060e:	480c      	ldr	r0, [pc, #48]	; (8000640 <pwm_led_setup+0x94>)
 8000610:	f24f 4224 	movw	r2, #62500	; 0xf424
 8000614:	f002 fd7e 	bl	8003114 <printk>
			return;
 8000618:	e7d8      	b.n	80005cc <pwm_led_setup+0x20>
 800061a:	bf00      	nop
 800061c:	08004084 	.word	0x08004084
 8000620:	0800409c 	.word	0x0800409c
 8000624:	20000234 	.word	0x20000234
 8000628:	080040a2 	.word	0x080040a2
 800062c:	080040c0 	.word	0x080040c0
 8000630:	2000022c 	.word	0x2000022c
 8000634:	000f4240 	.word	0x000f4240
 8000638:	08004125 	.word	0x08004125
 800063c:	20000230 	.word	0x20000230
 8000640:	080040e9 	.word	0x080040e9

08000644 <pwm_led_exec>:

int pwm_led_exec(void)
{
 8000644:	b510      	push	{r4, lr}
    int ret;

    ret = pwm_pin_set_usec(pwm, PWM_CHANNEL, period, period / 2U, PWM_FLAGS);
 8000646:	4c17      	ldr	r4, [pc, #92]	; (80006a4 <pwm_led_exec+0x60>)
 8000648:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <pwm_led_exec+0x64>)
 800064a:	6821      	ldr	r1, [r4, #0]
 800064c:	6818      	ldr	r0, [r3, #0]
 800064e:	084a      	lsrs	r2, r1, #1
 8000650:	f7ff ff64 	bl	800051c <pwm_pin_set_usec.constprop.0>

    if (ret)
 8000654:	4623      	mov	r3, r4
 8000656:	4601      	mov	r1, r0
 8000658:	b9f8      	cbnz	r0, 800069a <pwm_led_exec+0x56>
    {
        printk("Error %d: failed to set pulse width\n", ret);
        return 0;
    }

    period = dir ? (period * 2U) : (period / 2U);
 800065a:	4914      	ldr	r1, [pc, #80]	; (80006ac <pwm_led_exec+0x68>)
 800065c:	6822      	ldr	r2, [r4, #0]
 800065e:	7808      	ldrb	r0, [r1, #0]
 8000660:	b180      	cbz	r0, 8000684 <pwm_led_exec+0x40>
 8000662:	0052      	lsls	r2, r2, #1
    if (period > max_period)
 8000664:	4812      	ldr	r0, [pc, #72]	; (80006b0 <pwm_led_exec+0x6c>)
    period = dir ? (period * 2U) : (period / 2U);
 8000666:	601a      	str	r2, [r3, #0]
    if (period > max_period)
 8000668:	6800      	ldr	r0, [r0, #0]
 800066a:	4290      	cmp	r0, r2
 800066c:	d20c      	bcs.n	8000688 <pwm_led_exec+0x44>
    {
        period = max_period / 2U;
 800066e:	0840      	lsrs	r0, r0, #1
 8000670:	6018      	str	r0, [r3, #0]
        dir = 0U;
 8000672:	2300      	movs	r3, #0
    }
    else if (period < MIN_PERIOD_USEC)
    {
        period = MIN_PERIOD_USEC * 2U;
        dir = 1U;
 8000674:	700b      	strb	r3, [r1, #0]
 8000676:	f649 4040 	movw	r0, #40000	; 0x9c40
    }

    k_sleep(K_SECONDS(4U));
 800067a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800067e:	2100      	movs	r1, #0
 8000680:	f002 bb1e 	b.w	8002cc0 <z_impl_k_sleep>
    period = dir ? (period * 2U) : (period / 2U);
 8000684:	0852      	lsrs	r2, r2, #1
 8000686:	e7ed      	b.n	8000664 <pwm_led_exec+0x20>
    else if (period < MIN_PERIOD_USEC)
 8000688:	f643 5008 	movw	r0, #15624	; 0x3d08
 800068c:	4282      	cmp	r2, r0
 800068e:	d8f2      	bhi.n	8000676 <pwm_led_exec+0x32>
        period = MIN_PERIOD_USEC * 2U;
 8000690:	f647 2212 	movw	r2, #31250	; 0x7a12
 8000694:	601a      	str	r2, [r3, #0]
        dir = 1U;
 8000696:	2301      	movs	r3, #1
 8000698:	e7ec      	b.n	8000674 <pwm_led_exec+0x30>
        printk("Error %d: failed to set pulse width\n", ret);
 800069a:	4806      	ldr	r0, [pc, #24]	; (80006b4 <pwm_led_exec+0x70>)
 800069c:	f002 fd3a 	bl	8003114 <printk>
 80006a0:	2000      	movs	r0, #0
 80006a2:	bd10      	pop	{r4, pc}
 80006a4:	20000230 	.word	0x20000230
 80006a8:	20000234 	.word	0x20000234
 80006ac:	2000039c 	.word	0x2000039c
 80006b0:	2000022c 	.word	0x2000022c
 80006b4:	0800415b 	.word	0x0800415b

080006b8 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 80006b8:	680b      	ldr	r3, [r1, #0]
 80006ba:	3301      	adds	r3, #1
 80006bc:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 80006be:	4b01      	ldr	r3, [pc, #4]	; (80006c4 <char_out+0xc>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4718      	bx	r3
 80006c4:	20000000 	.word	0x20000000

080006c8 <__printk_hook_install>:
	_char_out = fn;
 80006c8:	4b01      	ldr	r3, [pc, #4]	; (80006d0 <__printk_hook_install+0x8>)
 80006ca:	6018      	str	r0, [r3, #0]
}
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	20000000 	.word	0x20000000

080006d4 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
 80006d4:	b507      	push	{r0, r1, r2, lr}
 80006d6:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
 80006d8:	2100      	movs	r1, #0
{
 80006da:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
 80006dc:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
 80006de:	4803      	ldr	r0, [pc, #12]	; (80006ec <vprintk+0x18>)
 80006e0:	a901      	add	r1, sp, #4
 80006e2:	f000 f95d 	bl	80009a0 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
 80006e6:	b003      	add	sp, #12
 80006e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80006ec:	080006b9 	.word	0x080006b9

080006f0 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
 80006f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	*conv = (struct conversion) {
 80006f2:	2200      	movs	r2, #0
 80006f4:	e9c0 2200 	strd	r2, r2, [r0]
 80006f8:	6082      	str	r2, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
 80006fa:	784a      	ldrb	r2, [r1, #1]
 80006fc:	2a25      	cmp	r2, #37	; 0x25
{
 80006fe:	4603      	mov	r3, r0
	if (*sp == '%') {
 8000700:	d033      	beq.n	800076a <extract_conversion+0x7a>
	++sp;
 8000702:	3101      	adds	r1, #1
 8000704:	4608      	mov	r0, r1
		switch (*sp) {
 8000706:	f811 2b01 	ldrb.w	r2, [r1], #1
 800070a:	2a2b      	cmp	r2, #43	; 0x2b
 800070c:	d03d      	beq.n	800078a <extract_conversion+0x9a>
 800070e:	d82f      	bhi.n	8000770 <extract_conversion+0x80>
 8000710:	2a20      	cmp	r2, #32
 8000712:	d03e      	beq.n	8000792 <extract_conversion+0xa2>
 8000714:	2a23      	cmp	r2, #35	; 0x23
 8000716:	d040      	beq.n	800079a <extract_conversion+0xaa>
	if (conv->flag_zero && conv->flag_dash) {
 8000718:	781a      	ldrb	r2, [r3, #0]
 800071a:	f002 0144 	and.w	r1, r2, #68	; 0x44
 800071e:	2944      	cmp	r1, #68	; 0x44
 8000720:	d102      	bne.n	8000728 <extract_conversion+0x38>
		conv->flag_zero = false;
 8000722:	f36f 1286 	bfc	r2, #6, #1
 8000726:	701a      	strb	r2, [r3, #0]
	if (*sp == '*') {
 8000728:	7802      	ldrb	r2, [r0, #0]
 800072a:	2a2a      	cmp	r2, #42	; 0x2a
 800072c:	d14c      	bne.n	80007c8 <extract_conversion+0xd8>
		conv->width_present = true;
 800072e:	8819      	ldrh	r1, [r3, #0]
 8000730:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8000734:	1c42      	adds	r2, r0, #1
 8000736:	8019      	strh	r1, [r3, #0]
	if (*sp != '.') {
 8000738:	7811      	ldrb	r1, [r2, #0]
 800073a:	292e      	cmp	r1, #46	; 0x2e
 800073c:	d14f      	bne.n	80007de <extract_conversion+0xee>
	if (*sp == '*') {
 800073e:	7851      	ldrb	r1, [r2, #1]
 8000740:	292a      	cmp	r1, #42	; 0x2a
 8000742:	d045      	beq.n	80007d0 <extract_conversion+0xe0>
 8000744:	3201      	adds	r2, #1
	const char *sp = *str;
 8000746:	4615      	mov	r5, r2
	size_t val = 0;
 8000748:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
 800074a:	270a      	movs	r7, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
 800074c:	4610      	mov	r0, r2
 800074e:	f810 4b01 	ldrb.w	r4, [r0], #1
 8000752:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 8000756:	2e09      	cmp	r6, #9
 8000758:	d964      	bls.n	8000824 <extract_conversion+0x134>
	if (sp != wp) {
 800075a:	4295      	cmp	r5, r2
		conv->prec_present = true;
 800075c:	bf1f      	itttt	ne
 800075e:	7858      	ldrbne	r0, [r3, #1]
		conv->prec_value = prec;
 8000760:	6099      	strne	r1, [r3, #8]
		conv->prec_present = true;
 8000762:	f040 0002 	orrne.w	r0, r0, #2
 8000766:	7058      	strbne	r0, [r3, #1]
		if (prec != conv->prec_value) {
 8000768:	e039      	b.n	80007de <extract_conversion+0xee>
		conv->specifier = *sp++;
 800076a:	1c88      	adds	r0, r1, #2
 800076c:	70da      	strb	r2, [r3, #3]
	sp = extract_prec(conv, sp);
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
 800076e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (*sp) {
 8000770:	2a2d      	cmp	r2, #45	; 0x2d
 8000772:	d005      	beq.n	8000780 <extract_conversion+0x90>
 8000774:	2a30      	cmp	r2, #48	; 0x30
 8000776:	d1cf      	bne.n	8000718 <extract_conversion+0x28>
			conv->flag_zero = true;
 8000778:	781a      	ldrb	r2, [r3, #0]
 800077a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800077e:	e002      	b.n	8000786 <extract_conversion+0x96>
			conv->flag_dash = true;
 8000780:	781a      	ldrb	r2, [r3, #0]
 8000782:	f042 0204 	orr.w	r2, r2, #4
			conv->flag_zero = true;
 8000786:	701a      	strb	r2, [r3, #0]
			break;
 8000788:	e7bc      	b.n	8000704 <extract_conversion+0x14>
			conv->flag_plus = true;
 800078a:	781a      	ldrb	r2, [r3, #0]
 800078c:	f042 0208 	orr.w	r2, r2, #8
 8000790:	e7f9      	b.n	8000786 <extract_conversion+0x96>
			conv->flag_space = true;
 8000792:	781a      	ldrb	r2, [r3, #0]
 8000794:	f042 0210 	orr.w	r2, r2, #16
 8000798:	e7f5      	b.n	8000786 <extract_conversion+0x96>
			conv->flag_hash = true;
 800079a:	781a      	ldrb	r2, [r3, #0]
 800079c:	f042 0220 	orr.w	r2, r2, #32
 80007a0:	e7f1      	b.n	8000786 <extract_conversion+0x96>
		val = 10U * val + *sp++ - '0';
 80007a2:	fb07 5101 	mla	r1, r7, r1, r5
 80007a6:	3930      	subs	r1, #48	; 0x30
 80007a8:	4622      	mov	r2, r4
 80007aa:	4614      	mov	r4, r2
 80007ac:	f814 5b01 	ldrb.w	r5, [r4], #1
 80007b0:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
 80007b4:	2e09      	cmp	r6, #9
 80007b6:	d9f4      	bls.n	80007a2 <extract_conversion+0xb2>
	if (sp != wp) {
 80007b8:	4290      	cmp	r0, r2
		conv->width_present = true;
 80007ba:	bf1f      	itttt	ne
 80007bc:	7818      	ldrbne	r0, [r3, #0]
		conv->width_value = width;
 80007be:	6059      	strne	r1, [r3, #4]
		conv->width_present = true;
 80007c0:	f040 0080 	orrne.w	r0, r0, #128	; 0x80
 80007c4:	7018      	strbne	r0, [r3, #0]
		if (width != conv->width_value) {
 80007c6:	e7b7      	b.n	8000738 <extract_conversion+0x48>
 80007c8:	4602      	mov	r2, r0
	size_t val = 0;
 80007ca:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
 80007cc:	270a      	movs	r7, #10
 80007ce:	e7ec      	b.n	80007aa <extract_conversion+0xba>
		conv->prec_present = true;
 80007d0:	7859      	ldrb	r1, [r3, #1]
 80007d2:	f021 0106 	bic.w	r1, r1, #6
 80007d6:	f041 0106 	orr.w	r1, r1, #6
 80007da:	7059      	strb	r1, [r3, #1]
		return ++sp;
 80007dc:	3202      	adds	r2, #2
	switch (*sp) {
 80007de:	4611      	mov	r1, r2
 80007e0:	f811 0b01 	ldrb.w	r0, [r1], #1
 80007e4:	286c      	cmp	r0, #108	; 0x6c
 80007e6:	d039      	beq.n	800085c <extract_conversion+0x16c>
 80007e8:	d821      	bhi.n	800082e <extract_conversion+0x13e>
 80007ea:	2868      	cmp	r0, #104	; 0x68
 80007ec:	d026      	beq.n	800083c <extract_conversion+0x14c>
 80007ee:	286a      	cmp	r0, #106	; 0x6a
 80007f0:	d03d      	beq.n	800086e <extract_conversion+0x17e>
 80007f2:	284c      	cmp	r0, #76	; 0x4c
 80007f4:	d041      	beq.n	800087a <extract_conversion+0x18a>
 80007f6:	4611      	mov	r1, r2
	conv->specifier = *sp++;
 80007f8:	4608      	mov	r0, r1
 80007fa:	f810 4b01 	ldrb.w	r4, [r0], #1
 80007fe:	70dc      	strb	r4, [r3, #3]
	switch (conv->specifier) {
 8000800:	2c78      	cmp	r4, #120	; 0x78
 8000802:	f200 80c6 	bhi.w	8000992 <extract_conversion+0x2a2>
 8000806:	2c57      	cmp	r4, #87	; 0x57
 8000808:	d842      	bhi.n	8000890 <extract_conversion+0x1a0>
 800080a:	2c41      	cmp	r4, #65	; 0x41
 800080c:	d003      	beq.n	8000816 <extract_conversion+0x126>
 800080e:	3c45      	subs	r4, #69	; 0x45
 8000810:	2c02      	cmp	r4, #2
 8000812:	f200 80be 	bhi.w	8000992 <extract_conversion+0x2a2>
		conv->specifier_cat = SPECIFIER_FP;
 8000816:	789a      	ldrb	r2, [r3, #2]
 8000818:	2104      	movs	r1, #4
 800081a:	f361 0202 	bfi	r2, r1, #0, #3
 800081e:	709a      	strb	r2, [r3, #2]
			unsupported = true;
 8000820:	2201      	movs	r2, #1
			break;
 8000822:	e092      	b.n	800094a <extract_conversion+0x25a>
		val = 10U * val + *sp++ - '0';
 8000824:	fb07 4101 	mla	r1, r7, r1, r4
 8000828:	3930      	subs	r1, #48	; 0x30
 800082a:	4602      	mov	r2, r0
 800082c:	e78e      	b.n	800074c <extract_conversion+0x5c>
	switch (*sp) {
 800082e:	2874      	cmp	r0, #116	; 0x74
 8000830:	d020      	beq.n	8000874 <extract_conversion+0x184>
 8000832:	287a      	cmp	r0, #122	; 0x7a
 8000834:	d1df      	bne.n	80007f6 <extract_conversion+0x106>
		conv->length_mod = LENGTH_Z;
 8000836:	785a      	ldrb	r2, [r3, #1]
 8000838:	2006      	movs	r0, #6
 800083a:	e00b      	b.n	8000854 <extract_conversion+0x164>
		if (*++sp == 'h') {
 800083c:	7850      	ldrb	r0, [r2, #1]
 800083e:	785c      	ldrb	r4, [r3, #1]
 8000840:	2868      	cmp	r0, #104	; 0x68
 8000842:	d105      	bne.n	8000850 <extract_conversion+0x160>
			conv->length_mod = LENGTH_HH;
 8000844:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
 8000846:	f361 04c6 	bfi	r4, r1, #3, #4
 800084a:	705c      	strb	r4, [r3, #1]
			++sp;
 800084c:	1c91      	adds	r1, r2, #2
 800084e:	e7d3      	b.n	80007f8 <extract_conversion+0x108>
			conv->length_mod = LENGTH_H;
 8000850:	4622      	mov	r2, r4
 8000852:	2002      	movs	r0, #2
		conv->length_mod = LENGTH_T;
 8000854:	f360 02c6 	bfi	r2, r0, #3, #4
 8000858:	705a      	strb	r2, [r3, #1]
		break;
 800085a:	e7cd      	b.n	80007f8 <extract_conversion+0x108>
		if (*++sp == 'l') {
 800085c:	7850      	ldrb	r0, [r2, #1]
 800085e:	785c      	ldrb	r4, [r3, #1]
 8000860:	286c      	cmp	r0, #108	; 0x6c
 8000862:	d101      	bne.n	8000868 <extract_conversion+0x178>
			conv->length_mod = LENGTH_LL;
 8000864:	2104      	movs	r1, #4
 8000866:	e7ee      	b.n	8000846 <extract_conversion+0x156>
			conv->length_mod = LENGTH_L;
 8000868:	4622      	mov	r2, r4
 800086a:	2003      	movs	r0, #3
 800086c:	e7f2      	b.n	8000854 <extract_conversion+0x164>
		conv->length_mod = LENGTH_J;
 800086e:	785a      	ldrb	r2, [r3, #1]
 8000870:	2005      	movs	r0, #5
 8000872:	e7ef      	b.n	8000854 <extract_conversion+0x164>
		conv->length_mod = LENGTH_T;
 8000874:	785a      	ldrb	r2, [r3, #1]
 8000876:	2007      	movs	r0, #7
 8000878:	e7ec      	b.n	8000854 <extract_conversion+0x164>
		conv->unsupported = true;
 800087a:	881a      	ldrh	r2, [r3, #0]
 800087c:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8000880:	f022 0202 	bic.w	r2, r2, #2
 8000884:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000888:	f042 0202 	orr.w	r2, r2, #2
 800088c:	801a      	strh	r2, [r3, #0]
		break;
 800088e:	e7b3      	b.n	80007f8 <extract_conversion+0x108>
 8000890:	f1a4 0258 	sub.w	r2, r4, #88	; 0x58
 8000894:	2a20      	cmp	r2, #32
 8000896:	d87c      	bhi.n	8000992 <extract_conversion+0x2a2>
 8000898:	a101      	add	r1, pc, #4	; (adr r1, 80008a0 <extract_conversion+0x1b0>)
 800089a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800089e:	bf00      	nop
 80008a0:	0800095b 	.word	0x0800095b
 80008a4:	08000993 	.word	0x08000993
 80008a8:	08000993 	.word	0x08000993
 80008ac:	08000993 	.word	0x08000993
 80008b0:	08000993 	.word	0x08000993
 80008b4:	08000993 	.word	0x08000993
 80008b8:	08000993 	.word	0x08000993
 80008bc:	08000993 	.word	0x08000993
 80008c0:	08000993 	.word	0x08000993
 80008c4:	08000817 	.word	0x08000817
 80008c8:	08000993 	.word	0x08000993
 80008cc:	0800095b 	.word	0x0800095b
 80008d0:	08000925 	.word	0x08000925
 80008d4:	08000817 	.word	0x08000817
 80008d8:	08000817 	.word	0x08000817
 80008dc:	08000817 	.word	0x08000817
 80008e0:	08000993 	.word	0x08000993
 80008e4:	08000925 	.word	0x08000925
 80008e8:	08000993 	.word	0x08000993
 80008ec:	08000993 	.word	0x08000993
 80008f0:	08000993 	.word	0x08000993
 80008f4:	08000993 	.word	0x08000993
 80008f8:	08000961 	.word	0x08000961
 80008fc:	0800095b 	.word	0x0800095b
 8000900:	0800097b 	.word	0x0800097b
 8000904:	08000993 	.word	0x08000993
 8000908:	08000993 	.word	0x08000993
 800090c:	0800097b 	.word	0x0800097b
 8000910:	08000993 	.word	0x08000993
 8000914:	0800095b 	.word	0x0800095b
 8000918:	08000993 	.word	0x08000993
 800091c:	08000993 	.word	0x08000993
 8000920:	0800095b 	.word	0x0800095b
		conv->specifier_cat = SPECIFIER_SINT;
 8000924:	789a      	ldrb	r2, [r3, #2]
 8000926:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
 8000928:	f361 0202 	bfi	r2, r1, #0, #3
 800092c:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 800092e:	785a      	ldrb	r2, [r3, #1]
 8000930:	f002 0278 	and.w	r2, r2, #120	; 0x78
 8000934:	2a40      	cmp	r2, #64	; 0x40
			conv->invalid = true;
 8000936:	bf02      	ittt	eq
 8000938:	7819      	ldrbeq	r1, [r3, #0]
 800093a:	f041 0101 	orreq.w	r1, r1, #1
 800093e:	7019      	strbeq	r1, [r3, #0]
		if (conv->specifier == 'c') {
 8000940:	2c63      	cmp	r4, #99	; 0x63
 8000942:	d12a      	bne.n	800099a <extract_conversion+0x2aa>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8000944:	3a00      	subs	r2, #0
 8000946:	bf18      	it	ne
 8000948:	2201      	movne	r2, #1
	conv->unsupported |= unsupported;
 800094a:	7819      	ldrb	r1, [r3, #0]
 800094c:	f3c1 0440 	ubfx	r4, r1, #1, #1
 8000950:	4322      	orrs	r2, r4
 8000952:	f362 0141 	bfi	r1, r2, #1, #1
 8000956:	7019      	strb	r1, [r3, #0]
	return sp;
 8000958:	e709      	b.n	800076e <extract_conversion+0x7e>
		conv->specifier_cat = SPECIFIER_UINT;
 800095a:	789a      	ldrb	r2, [r3, #2]
 800095c:	2102      	movs	r1, #2
 800095e:	e7e3      	b.n	8000928 <extract_conversion+0x238>
		conv->specifier_cat = SPECIFIER_PTR;
 8000960:	789a      	ldrb	r2, [r3, #2]
 8000962:	2103      	movs	r1, #3
 8000964:	f361 0202 	bfi	r2, r1, #0, #3
 8000968:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
 800096a:	785a      	ldrb	r2, [r3, #1]
 800096c:	f002 0278 	and.w	r2, r2, #120	; 0x78
 8000970:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8000974:	424a      	negs	r2, r1
 8000976:	414a      	adcs	r2, r1
 8000978:	e7e7      	b.n	800094a <extract_conversion+0x25a>
		conv->specifier_cat = SPECIFIER_PTR;
 800097a:	789a      	ldrb	r2, [r3, #2]
 800097c:	2103      	movs	r1, #3
 800097e:	f361 0202 	bfi	r2, r1, #0, #3
 8000982:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod != LENGTH_NONE) {
 8000984:	785a      	ldrb	r2, [r3, #1]
 8000986:	f012 0f78 	tst.w	r2, #120	; 0x78
 800098a:	bf14      	ite	ne
 800098c:	2201      	movne	r2, #1
 800098e:	2200      	moveq	r2, #0
 8000990:	e7db      	b.n	800094a <extract_conversion+0x25a>
		conv->invalid = true;
 8000992:	781a      	ldrb	r2, [r3, #0]
 8000994:	f042 0201 	orr.w	r2, r2, #1
 8000998:	701a      	strb	r2, [r3, #0]
	bool unsupported = false;
 800099a:	2200      	movs	r2, #0
 800099c:	e7d5      	b.n	800094a <extract_conversion+0x25a>
 800099e:	bf00      	nop

080009a0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 80009a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009a4:	4682      	mov	sl, r0
 80009a6:	b091      	sub	sp, #68	; 0x44
 80009a8:	468b      	mov	fp, r1
 80009aa:	4691      	mov	r9, r2
 80009ac:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 80009ae:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 80009b0:	f899 0000 	ldrb.w	r0, [r9]
 80009b4:	b908      	cbnz	r0, 80009ba <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
 80009b6:	4628      	mov	r0, r5
 80009b8:	e10d      	b.n	8000bd6 <cbvprintf+0x236>
		if (*fp != '%') {
 80009ba:	2825      	cmp	r0, #37	; 0x25
 80009bc:	d009      	beq.n	80009d2 <cbvprintf+0x32>
			OUTC(*fp++);
 80009be:	4659      	mov	r1, fp
 80009c0:	47d0      	blx	sl
 80009c2:	2800      	cmp	r0, #0
 80009c4:	f2c0 8107 	blt.w	8000bd6 <cbvprintf+0x236>
 80009c8:	f109 0301 	add.w	r3, r9, #1
 80009cc:	9302      	str	r3, [sp, #8]
			OUTC('%');
 80009ce:	3501      	adds	r5, #1
			break;
 80009d0:	e05e      	b.n	8000a90 <cbvprintf+0xf0>
		} state = {
 80009d2:	2218      	movs	r2, #24
 80009d4:	2100      	movs	r1, #0
 80009d6:	a80a      	add	r0, sp, #40	; 0x28
 80009d8:	f002 fd92 	bl	8003500 <memset>
		fp = extract_conversion(conv, sp);
 80009dc:	4649      	mov	r1, r9
 80009de:	a80c      	add	r0, sp, #48	; 0x30
 80009e0:	f7ff fe86 	bl	80006f0 <extract_conversion>
		if (conv->width_star) {
 80009e4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
		fp = extract_conversion(conv, sp);
 80009e8:	9002      	str	r0, [sp, #8]
		if (conv->width_star) {
 80009ea:	07d9      	lsls	r1, r3, #31
 80009ec:	d51b      	bpl.n	8000a26 <cbvprintf+0x86>
			width = va_arg(ap, int);
 80009ee:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
 80009f2:	f1b8 0f00 	cmp.w	r8, #0
 80009f6:	da07      	bge.n	8000a08 <cbvprintf+0x68>
				conv->flag_dash = true;
 80009f8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80009fc:	f042 0204 	orr.w	r2, r2, #4
 8000a00:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
 8000a04:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
 8000a08:	075a      	lsls	r2, r3, #29
 8000a0a:	d515      	bpl.n	8000a38 <cbvprintf+0x98>
			int arg = va_arg(ap, int);
 8000a0c:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
 8000a10:	2f00      	cmp	r7, #0
 8000a12:	da14      	bge.n	8000a3e <cbvprintf+0x9e>
				conv->prec_present = false;
 8000a14:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8000a18:	f36f 0341 	bfc	r3, #1, #1
 8000a1c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
 8000a20:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000a24:	e00b      	b.n	8000a3e <cbvprintf+0x9e>
		} else if (conv->width_present) {
 8000a26:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
 8000a2a:	2a00      	cmp	r2, #0
			width = conv->width_value;
 8000a2c:	bfb4      	ite	lt
 8000a2e:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
		int width = -1;
 8000a32:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
 8000a36:	e7e7      	b.n	8000a08 <cbvprintf+0x68>
		} else if (conv->prec_present) {
 8000a38:	079f      	lsls	r7, r3, #30
 8000a3a:	d5f1      	bpl.n	8000a20 <cbvprintf+0x80>
			precision = conv->prec_value;
 8000a3c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
 8000a3e:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
 8000a42:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
 8000a44:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
 8000a48:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
 8000a4c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
 8000a50:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
 8000a52:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 8000a56:	d12e      	bne.n	8000ab6 <cbvprintf+0x116>
			switch (length_mod) {
 8000a58:	1ecb      	subs	r3, r1, #3
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	d81b      	bhi.n	8000a96 <cbvprintf+0xf6>
 8000a5e:	e8df f003 	tbb	[pc, r3]
 8000a62:	3a03      	.short	0x3a03
 8000a64:	1a3a      	.short	0x1a3a
 8000a66:	1a          	.byte	0x1a
 8000a67:	00          	.byte	0x00
				value->sint = va_arg(ap, long);
 8000a68:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
 8000a6c:	17d3      	asrs	r3, r2, #31
				value->uint =
 8000a6e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
 8000a72:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8000a76:	f013 0603 	ands.w	r6, r3, #3
 8000a7a:	d04f      	beq.n	8000b1c <cbvprintf+0x17c>
			OUTS(sp, fp);
 8000a7c:	9b02      	ldr	r3, [sp, #8]
 8000a7e:	464a      	mov	r2, r9
 8000a80:	4659      	mov	r1, fp
 8000a82:	4650      	mov	r0, sl
 8000a84:	f002 fc84 	bl	8003390 <outs>
 8000a88:	2800      	cmp	r0, #0
 8000a8a:	f2c0 80a4 	blt.w	8000bd6 <cbvprintf+0x236>
 8000a8e:	4405      	add	r5, r0
			OUTS(bps, bpe);
 8000a90:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8000a94:	e78c      	b.n	80009b0 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8000a96:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
 8000a9a:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8000a9c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000aa0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
 8000aa4:	d102      	bne.n	8000aac <cbvprintf+0x10c>
				value->uint = (unsigned char)value->uint;
 8000aa6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8000aaa:	e010      	b.n	8000ace <cbvprintf+0x12e>
			} else if (length_mod == LENGTH_H) {
 8000aac:	2902      	cmp	r1, #2
 8000aae:	d1e0      	bne.n	8000a72 <cbvprintf+0xd2>
				value->sint = (short)value->sint;
 8000ab0:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8000ab4:	e7da      	b.n	8000a6c <cbvprintf+0xcc>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d120      	bne.n	8000afc <cbvprintf+0x15c>
			switch (length_mod) {
 8000aba:	1ecb      	subs	r3, r1, #3
 8000abc:	2b04      	cmp	r3, #4
 8000abe:	d810      	bhi.n	8000ae2 <cbvprintf+0x142>
 8000ac0:	e8df f003 	tbb	[pc, r3]
 8000ac4:	0f090903 	.word	0x0f090903
 8000ac8:	0f          	.byte	0x0f
 8000ac9:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned long);
 8000aca:	f854 3b04 	ldr.w	r3, [r4], #4
				value->uint = (unsigned char)value->uint;
 8000ace:	930a      	str	r3, [sp, #40]	; 0x28
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	930b      	str	r3, [sp, #44]	; 0x2c
 8000ad4:	e7cd      	b.n	8000a72 <cbvprintf+0xd2>
					(uint_value_type)va_arg(ap,
 8000ad6:	3407      	adds	r4, #7
 8000ad8:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
 8000adc:	e8f4 2302 	ldrd	r2, r3, [r4], #8
 8000ae0:	e7c5      	b.n	8000a6e <cbvprintf+0xce>
					(uint_value_type)va_arg(ap, size_t);
 8000ae2:	f854 3b04 	ldr.w	r3, [r4], #4
 8000ae6:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
 8000ae8:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
 8000aea:	f04f 0300 	mov.w	r3, #0
 8000aee:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
 8000af0:	d0d9      	beq.n	8000aa6 <cbvprintf+0x106>
			} else if (length_mod == LENGTH_H) {
 8000af2:	2902      	cmp	r1, #2
 8000af4:	d1bd      	bne.n	8000a72 <cbvprintf+0xd2>
				value->uint = (unsigned short)value->uint;
 8000af6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8000afa:	e7e8      	b.n	8000ace <cbvprintf+0x12e>
		} else if (specifier_cat == SPECIFIER_FP) {
 8000afc:	2b04      	cmp	r3, #4
 8000afe:	d107      	bne.n	8000b10 <cbvprintf+0x170>
			if (length_mod == LENGTH_UPPER_L) {
 8000b00:	3407      	adds	r4, #7
 8000b02:	f024 0407 	bic.w	r4, r4, #7
 8000b06:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
 8000b0a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8000b0e:	e7b0      	b.n	8000a72 <cbvprintf+0xd2>
		} else if (specifier_cat == SPECIFIER_PTR) {
 8000b10:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
 8000b12:	bf04      	itt	eq
 8000b14:	f854 3b04 	ldreq.w	r3, [r4], #4
 8000b18:	930a      	streq	r3, [sp, #40]	; 0x28
 8000b1a:	e7aa      	b.n	8000a72 <cbvprintf+0xd2>
		switch (conv->specifier) {
 8000b1c:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8000b20:	2878      	cmp	r0, #120	; 0x78
 8000b22:	d8b5      	bhi.n	8000a90 <cbvprintf+0xf0>
 8000b24:	2862      	cmp	r0, #98	; 0x62
 8000b26:	d81f      	bhi.n	8000b68 <cbvprintf+0x1c8>
 8000b28:	2825      	cmp	r0, #37	; 0x25
 8000b2a:	d04f      	beq.n	8000bcc <cbvprintf+0x22c>
 8000b2c:	2858      	cmp	r0, #88	; 0x58
 8000b2e:	d1af      	bne.n	8000a90 <cbvprintf+0xf0>
			bps = encode_uint(value->uint, conv, buf, bpe);
 8000b30:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8000b3a:	ab04      	add	r3, sp, #16
 8000b3c:	aa0c      	add	r2, sp, #48	; 0x30
 8000b3e:	f002 fbdc 	bl	80032fa <encode_uint>
 8000b42:	4681      	mov	r9, r0
			if (precision >= 0) {
 8000b44:	2f00      	cmp	r7, #0
 8000b46:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 8000b4a:	db0b      	blt.n	8000b64 <cbvprintf+0x1c4>
				conv->flag_zero = false;
 8000b4c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
 8000b50:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
 8000b54:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
 8000b58:	429f      	cmp	r7, r3
				conv->flag_zero = false;
 8000b5a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
 8000b5e:	d901      	bls.n	8000b64 <cbvprintf+0x1c4>
					conv->pad0_value = precision - (int)len;
 8000b60:	1aff      	subs	r7, r7, r3
 8000b62:	970d      	str	r7, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
 8000b64:	4607      	mov	r7, r0
 8000b66:	e046      	b.n	8000bf6 <cbvprintf+0x256>
 8000b68:	3863      	subs	r0, #99	; 0x63
 8000b6a:	2815      	cmp	r0, #21
 8000b6c:	d890      	bhi.n	8000a90 <cbvprintf+0xf0>
 8000b6e:	a201      	add	r2, pc, #4	; (adr r2, 8000b74 <cbvprintf+0x1d4>)
 8000b70:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
 8000b74:	08000bff 	.word	0x08000bff
 8000b78:	08000c63 	.word	0x08000c63
 8000b7c:	08000a91 	.word	0x08000a91
 8000b80:	08000a91 	.word	0x08000a91
 8000b84:	08000a91 	.word	0x08000a91
 8000b88:	08000a91 	.word	0x08000a91
 8000b8c:	08000c63 	.word	0x08000c63
 8000b90:	08000a91 	.word	0x08000a91
 8000b94:	08000a91 	.word	0x08000a91
 8000b98:	08000a91 	.word	0x08000a91
 8000b9c:	08000a91 	.word	0x08000a91
 8000ba0:	08000cc1 	.word	0x08000cc1
 8000ba4:	08000c8f 	.word	0x08000c8f
 8000ba8:	08000c93 	.word	0x08000c93
 8000bac:	08000a91 	.word	0x08000a91
 8000bb0:	08000a91 	.word	0x08000a91
 8000bb4:	08000bdd 	.word	0x08000bdd
 8000bb8:	08000a91 	.word	0x08000a91
 8000bbc:	08000c8f 	.word	0x08000c8f
 8000bc0:	08000a91 	.word	0x08000a91
 8000bc4:	08000a91 	.word	0x08000a91
 8000bc8:	08000c8f 	.word	0x08000c8f
			OUTC('%');
 8000bcc:	4659      	mov	r1, fp
 8000bce:	47d0      	blx	sl
 8000bd0:	2800      	cmp	r0, #0
 8000bd2:	f6bf aefc 	bge.w	80009ce <cbvprintf+0x2e>
#undef OUTS
#undef OUTC
}
 8000bd6:	b011      	add	sp, #68	; 0x44
 8000bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			bps = (const char *)value->ptr;
 8000bdc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
			size_t len = strlen(bps);
 8000be0:	4648      	mov	r0, r9
 8000be2:	f002 fc4f 	bl	8003484 <strlen>
			if ((precision >= 0)
 8000be6:	2f00      	cmp	r7, #0
 8000be8:	db02      	blt.n	8000bf0 <cbvprintf+0x250>
 8000bea:	42b8      	cmp	r0, r7
 8000bec:	bf28      	it	cs
 8000bee:	4638      	movcs	r0, r7
			bpe = bps + len;
 8000bf0:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
 8000bf4:	2600      	movs	r6, #0
		if (bps == NULL) {
 8000bf6:	f1b9 0f00 	cmp.w	r9, #0
 8000bfa:	d108      	bne.n	8000c0e <cbvprintf+0x26e>
 8000bfc:	e748      	b.n	8000a90 <cbvprintf+0xf0>
			buf[0] = value->uint;
 8000bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000c00:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
 8000c04:	2600      	movs	r6, #0
			bpe = buf + 1;
 8000c06:	f10d 0711 	add.w	r7, sp, #17
			bps = buf;
 8000c0a:	f10d 0910 	add.w	r9, sp, #16
		size_t nj_len = (bpe - bps);
 8000c0e:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
 8000c12:	b106      	cbz	r6, 8000c16 <cbvprintf+0x276>
			nj_len += 1U;
 8000c14:	3301      	adds	r3, #1
		if (conv->altform_0c) {
 8000c16:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
 8000c1a:	06d0      	lsls	r0, r2, #27
 8000c1c:	d56a      	bpl.n	8000cf4 <cbvprintf+0x354>
			nj_len += 2U;
 8000c1e:	3302      	adds	r3, #2
		if (conv->pad_fp) {
 8000c20:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
 8000c22:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
 8000c24:	bf48      	it	mi
 8000c26:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
 8000c28:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
 8000c2a:	bf48      	it	mi
 8000c2c:	189b      	addmi	r3, r3, r2
		if (width > 0) {
 8000c2e:	f1b8 0f00 	cmp.w	r8, #0
 8000c32:	dd73      	ble.n	8000d1c <cbvprintf+0x37c>
			if (!conv->flag_dash) {
 8000c34:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
 8000c38:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
 8000c3c:	f3c2 0380 	ubfx	r3, r2, #2, #1
 8000c40:	9303      	str	r3, [sp, #12]
 8000c42:	0753      	lsls	r3, r2, #29
 8000c44:	d46a      	bmi.n	8000d1c <cbvprintf+0x37c>
				if (conv->flag_zero) {
 8000c46:	0650      	lsls	r0, r2, #25
 8000c48:	f140 80a6 	bpl.w	8000d98 <cbvprintf+0x3f8>
					if (sign != 0) {
 8000c4c:	b13e      	cbz	r6, 8000c5e <cbvprintf+0x2be>
						OUTC(sign);
 8000c4e:	4659      	mov	r1, fp
 8000c50:	4630      	mov	r0, r6
 8000c52:	47d0      	blx	sl
 8000c54:	2800      	cmp	r0, #0
 8000c56:	dbbe      	blt.n	8000bd6 <cbvprintf+0x236>
						sign = 0;
 8000c58:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
 8000c5a:	3501      	adds	r5, #1
						sign = 0;
 8000c5c:	461e      	mov	r6, r3
					pad = '0';
 8000c5e:	2330      	movs	r3, #48	; 0x30
 8000c60:	e09b      	b.n	8000d9a <cbvprintf+0x3fa>
			if (conv->flag_plus) {
 8000c62:	071e      	lsls	r6, r3, #28
 8000c64:	d411      	bmi.n	8000c8a <cbvprintf+0x2ea>
				sign = ' ';
 8000c66:	f013 0610 	ands.w	r6, r3, #16
 8000c6a:	bf18      	it	ne
 8000c6c:	2620      	movne	r6, #32
			if (value->sint < 0) {
 8000c6e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	f173 0100 	sbcs.w	r1, r3, #0
 8000c78:	f6bf af5a 	bge.w	8000b30 <cbvprintf+0x190>
				value->uint = (uint_value_type)-value->sint;
 8000c7c:	4252      	negs	r2, r2
 8000c7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c82:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
 8000c86:	262d      	movs	r6, #45	; 0x2d
 8000c88:	e752      	b.n	8000b30 <cbvprintf+0x190>
				sign = '+';
 8000c8a:	262b      	movs	r6, #43	; 0x2b
 8000c8c:	e7ef      	b.n	8000c6e <cbvprintf+0x2ce>
		switch (conv->specifier) {
 8000c8e:	2600      	movs	r6, #0
 8000c90:	e74e      	b.n	8000b30 <cbvprintf+0x190>
			if (value->ptr != NULL) {
 8000c92:	980a      	ldr	r0, [sp, #40]	; 0x28
 8000c94:	b348      	cbz	r0, 8000cea <cbvprintf+0x34a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000c96:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	aa0c      	add	r2, sp, #48	; 0x30
 8000c9e:	ab04      	add	r3, sp, #16
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	f002 fb2a 	bl	80032fa <encode_uint>
				conv->altform_0c = true;
 8000ca6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8000caa:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8000cae:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
 8000cb2:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8000cb6:	4681      	mov	r9, r0
				conv->altform_0c = true;
 8000cb8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
 8000cbc:	2600      	movs	r6, #0
				goto prec_int_pad0;
 8000cbe:	e741      	b.n	8000b44 <cbvprintf+0x1a4>
				store_count(conv, value->ptr, count);
 8000cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
 8000cc2:	2907      	cmp	r1, #7
 8000cc4:	f63f aee4 	bhi.w	8000a90 <cbvprintf+0xf0>
 8000cc8:	e8df f001 	tbb	[pc, r1]
 8000ccc:	0d06040d 	.word	0x0d06040d
 8000cd0:	0d0d0808 	.word	0x0d0d0808
		*(signed char *)dp = (signed char)count;
 8000cd4:	701d      	strb	r5, [r3, #0]
		break;
 8000cd6:	e6db      	b.n	8000a90 <cbvprintf+0xf0>
		*(short *)dp = (short)count;
 8000cd8:	801d      	strh	r5, [r3, #0]
		break;
 8000cda:	e6d9      	b.n	8000a90 <cbvprintf+0xf0>
		*(intmax_t *)dp = (intmax_t)count;
 8000cdc:	4628      	mov	r0, r5
 8000cde:	17e9      	asrs	r1, r5, #31
 8000ce0:	e9c3 0100 	strd	r0, r1, [r3]
		break;
 8000ce4:	e6d4      	b.n	8000a90 <cbvprintf+0xf0>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 8000ce6:	601d      	str	r5, [r3, #0]
		break;
 8000ce8:	e6d2      	b.n	8000a90 <cbvprintf+0xf0>
			bpe = bps + 5;
 8000cea:	4f31      	ldr	r7, [pc, #196]	; (8000db0 <cbvprintf+0x410>)
 8000cec:	4606      	mov	r6, r0
			bps = "(nil)";
 8000cee:	f1a7 0905 	sub.w	r9, r7, #5
 8000cf2:	e78c      	b.n	8000c0e <cbvprintf+0x26e>
		} else if (conv->altform_0) {
 8000cf4:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
 8000cf6:	bf48      	it	mi
 8000cf8:	3301      	addmi	r3, #1
 8000cfa:	e791      	b.n	8000c20 <cbvprintf+0x280>
					OUTC(pad);
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	4659      	mov	r1, fp
 8000d00:	9303      	str	r3, [sp, #12]
 8000d02:	47d0      	blx	sl
 8000d04:	2800      	cmp	r0, #0
 8000d06:	9b03      	ldr	r3, [sp, #12]
 8000d08:	f6ff af65 	blt.w	8000bd6 <cbvprintf+0x236>
 8000d0c:	4642      	mov	r2, r8
				while (width-- > 0) {
 8000d0e:	2a00      	cmp	r2, #0
 8000d10:	eba5 0108 	sub.w	r1, r5, r8
 8000d14:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8000d18:	dcf0      	bgt.n	8000cfc <cbvprintf+0x35c>
 8000d1a:	460d      	mov	r5, r1
		if (sign != 0) {
 8000d1c:	b136      	cbz	r6, 8000d2c <cbvprintf+0x38c>
			OUTC(sign);
 8000d1e:	4659      	mov	r1, fp
 8000d20:	4630      	mov	r0, r6
 8000d22:	47d0      	blx	sl
 8000d24:	2800      	cmp	r0, #0
 8000d26:	f6ff af56 	blt.w	8000bd6 <cbvprintf+0x236>
 8000d2a:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
 8000d2c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8000d30:	06d9      	lsls	r1, r3, #27
 8000d32:	d401      	bmi.n	8000d38 <cbvprintf+0x398>
 8000d34:	071a      	lsls	r2, r3, #28
 8000d36:	d506      	bpl.n	8000d46 <cbvprintf+0x3a6>
				OUTC('0');
 8000d38:	4659      	mov	r1, fp
 8000d3a:	2030      	movs	r0, #48	; 0x30
 8000d3c:	47d0      	blx	sl
 8000d3e:	2800      	cmp	r0, #0
 8000d40:	f6ff af49 	blt.w	8000bd6 <cbvprintf+0x236>
 8000d44:	3501      	adds	r5, #1
			if (conv->altform_0c) {
 8000d46:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8000d4a:	06db      	lsls	r3, r3, #27
 8000d4c:	d507      	bpl.n	8000d5e <cbvprintf+0x3be>
				OUTC(conv->specifier);
 8000d4e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8000d52:	4659      	mov	r1, fp
 8000d54:	47d0      	blx	sl
 8000d56:	2800      	cmp	r0, #0
 8000d58:	f6ff af3d 	blt.w	8000bd6 <cbvprintf+0x236>
 8000d5c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
 8000d5e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8000d60:	442e      	add	r6, r5
 8000d62:	1b73      	subs	r3, r6, r5
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	dc1a      	bgt.n	8000d9e <cbvprintf+0x3fe>
			OUTS(bps, bpe);
 8000d68:	463b      	mov	r3, r7
 8000d6a:	464a      	mov	r2, r9
 8000d6c:	4659      	mov	r1, fp
 8000d6e:	4650      	mov	r0, sl
 8000d70:	f002 fb0e 	bl	8003390 <outs>
 8000d74:	2800      	cmp	r0, #0
 8000d76:	f6ff af2e 	blt.w	8000bd6 <cbvprintf+0x236>
 8000d7a:	4405      	add	r5, r0
		while (width > 0) {
 8000d7c:	44a8      	add	r8, r5
 8000d7e:	eba8 0305 	sub.w	r3, r8, r5
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f77f ae84 	ble.w	8000a90 <cbvprintf+0xf0>
			OUTC(' ');
 8000d88:	4659      	mov	r1, fp
 8000d8a:	2020      	movs	r0, #32
 8000d8c:	47d0      	blx	sl
 8000d8e:	2800      	cmp	r0, #0
 8000d90:	f6ff af21 	blt.w	8000bd6 <cbvprintf+0x236>
 8000d94:	3501      	adds	r5, #1
			--width;
 8000d96:	e7f2      	b.n	8000d7e <cbvprintf+0x3de>
				char pad = ' ';
 8000d98:	2320      	movs	r3, #32
 8000d9a:	4445      	add	r5, r8
 8000d9c:	e7b6      	b.n	8000d0c <cbvprintf+0x36c>
				OUTC('0');
 8000d9e:	4659      	mov	r1, fp
 8000da0:	2030      	movs	r0, #48	; 0x30
 8000da2:	47d0      	blx	sl
 8000da4:	2800      	cmp	r0, #0
 8000da6:	f6ff af16 	blt.w	8000bd6 <cbvprintf+0x236>
 8000daa:	3501      	adds	r5, #1
 8000dac:	e7d9      	b.n	8000d62 <cbvprintf+0x3c2>
 8000dae:	bf00      	nop
 8000db0:	08004185 	.word	0x08004185

08000db4 <stm32l4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8000db4:	f04f 0210 	mov.w	r2, #16
 8000db8:	f3ef 8311 	mrs	r3, BASEPRI
 8000dbc:	f382 8811 	msr	BASEPRI, r2
 8000dc0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8000dc4:	f383 8811 	msr	BASEPRI, r3
 8000dc8:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 4 MHz from MSI */
	SystemCoreClock = 4000000;
 8000dcc:	4b02      	ldr	r3, [pc, #8]	; (8000dd8 <stm32l4_init+0x24>)
 8000dce:	4a03      	ldr	r2, [pc, #12]	; (8000ddc <stm32l4_init+0x28>)
 8000dd0:	601a      	str	r2, [r3, #0]

	return 0;
}
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	2000002c 	.word	0x2000002c
 8000ddc:	003d0900 	.word	0x003d0900

08000de0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
 8000de0:	b510      	push	{r4, lr}
 8000de2:	4807      	ldr	r0, [pc, #28]	; (8000e00 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
 8000de4:	4c07      	ldr	r4, [pc, #28]	; (8000e04 <uart_console_init+0x24>)
 8000de6:	f001 fb99 	bl	800251c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <uart_console_init+0x28>)
 8000dec:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
 8000dee:	4620      	mov	r0, r4
 8000df0:	f000 fdb0 	bl	8001954 <__stdout_hook_install>
	__printk_hook_install(console_out);
 8000df4:	4620      	mov	r0, r4
 8000df6:	f7ff fc67 	bl	80006c8 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	bd10      	pop	{r4, pc}
 8000dfe:	bf00      	nop
 8000e00:	08004186 	.word	0x08004186
 8000e04:	08000e0d 	.word	0x08000e0d
 8000e08:	20000238 	.word	0x20000238

08000e0c <console_out>:
	if ('\n' == c) {
 8000e0c:	280a      	cmp	r0, #10
{
 8000e0e:	b538      	push	{r3, r4, r5, lr}
 8000e10:	4d07      	ldr	r5, [pc, #28]	; (8000e30 <console_out+0x24>)
 8000e12:	4604      	mov	r4, r0
	if ('\n' == c) {
 8000e14:	d104      	bne.n	8000e20 <console_out+0x14>
 8000e16:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
 8000e18:	6883      	ldr	r3, [r0, #8]
 8000e1a:	210d      	movs	r1, #13
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
 8000e20:	6828      	ldr	r0, [r5, #0]
 8000e22:	6883      	ldr	r3, [r0, #8]
 8000e24:	b2e1      	uxtb	r1, r4
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	4798      	blx	r3
}
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	bd38      	pop	{r3, r4, r5, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000238 	.word	0x20000238

08000e34 <__stm32_exti_isr.isra.0>:
 *
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, const struct device *dev)
 8000e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8000e38:	4f0d      	ldr	r7, [pc, #52]	; (8000e70 <__stm32_exti_isr.isra.0+0x3c>)
 8000e3a:	4604      	mov	r4, r0
 8000e3c:	460e      	mov	r6, r1
 8000e3e:	4615      	mov	r5, r2
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8000e40:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8000e44:	f102 0904 	add.w	r9, r2, #4
	for (line = min; line < max; line++) {
 8000e48:	42b4      	cmp	r4, r6
 8000e4a:	db01      	blt.n	8000e50 <__stm32_exti_isr.isra.0+0x1c>
		}
	}
}
 8000e4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e50:	697a      	ldr	r2, [r7, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8000e52:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 8000e56:	ea33 0202 	bics.w	r2, r3, r2
 8000e5a:	d107      	bne.n	8000e6c <__stm32_exti_isr.isra.0+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8000e5c:	617b      	str	r3, [r7, #20]
			if (!data->cb[line].cb) {
 8000e5e:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 8000e62:	b11b      	cbz	r3, 8000e6c <__stm32_exti_isr.isra.0+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 8000e64:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 8000e68:	4620      	mov	r0, r4
 8000e6a:	4798      	blx	r3
	for (line = min; line < max; line++) {
 8000e6c:	3401      	adds	r4, #1
 8000e6e:	e7eb      	b.n	8000e48 <__stm32_exti_isr.isra.0+0x14>
 8000e70:	40010400 	.word	0x40010400

08000e74 <stm32_exti_enable>:
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000e74:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <stm32_exti_enable+0x14>)
	LL_EXTI_EnableIT_0_31(1 << line);
 8000e76:	2301      	movs	r3, #1
 8000e78:	6811      	ldr	r1, [r2, #0]
 8000e7a:	4083      	lsls	r3, r0
 8000e7c:	430b      	orrs	r3, r1
 8000e7e:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 8000e80:	4b02      	ldr	r3, [pc, #8]	; (8000e8c <stm32_exti_enable+0x18>)
 8000e82:	5618      	ldrsb	r0, [r3, r0]
 8000e84:	f000 baa8 	b.w	80013d8 <arch_irq_enable>
 8000e88:	40010400 	.word	0x40010400
 8000e8c:	08004198 	.word	0x08004198

08000e90 <stm32_exti_disable>:
	if (line < 32) {
 8000e90:	281f      	cmp	r0, #31
 8000e92:	dc07      	bgt.n	8000ea4 <stm32_exti_disable+0x14>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8000e94:	4904      	ldr	r1, [pc, #16]	; (8000ea8 <stm32_exti_disable+0x18>)
		LL_EXTI_DisableIT_0_31(1 << line);
 8000e96:	2201      	movs	r2, #1
 8000e98:	680b      	ldr	r3, [r1, #0]
 8000e9a:	fa02 f000 	lsl.w	r0, r2, r0
 8000e9e:	ea23 0000 	bic.w	r0, r3, r0
 8000ea2:	6008      	str	r0, [r1, #0]
}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40010400 	.word	0x40010400

08000eac <stm32_exti_trigger>:
	switch (trigger) {
 8000eac:	2903      	cmp	r1, #3
 8000eae:	d80f      	bhi.n	8000ed0 <stm32_exti_trigger+0x24>
 8000eb0:	e8df f001 	tbb	[pc, r1]
 8000eb4:	23170f02 	.word	0x23170f02
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <stm32_exti_trigger+0x64>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	6899      	ldr	r1, [r3, #8]
 8000ebe:	fa02 f000 	lsl.w	r0, r2, r0
 8000ec2:	ea21 0100 	bic.w	r1, r1, r0
 8000ec6:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8000ec8:	68da      	ldr	r2, [r3, #12]
 8000eca:	ea22 0000 	bic.w	r0, r2, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8000ece:	60d8      	str	r0, [r3, #12]
}
 8000ed0:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000ed8:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <stm32_exti_trigger+0x64>)
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	4302      	orrs	r2, r0
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	e7f2      	b.n	8000ec8 <stm32_exti_trigger+0x1c>
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <stm32_exti_trigger+0x64>)
 8000eea:	68da      	ldr	r2, [r3, #12]
 8000eec:	4302      	orrs	r2, r0
 8000eee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	ea22 0000 	bic.w	r0, r2, r0
 8000ef6:	6098      	str	r0, [r3, #8]
}
 8000ef8:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8000efa:	2301      	movs	r3, #1
 8000efc:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <stm32_exti_trigger+0x64>)
 8000f02:	689a      	ldr	r2, [r3, #8]
 8000f04:	4302      	orrs	r2, r0
 8000f06:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8000f08:	68da      	ldr	r2, [r3, #12]
 8000f0a:	4310      	orrs	r0, r2
 8000f0c:	e7df      	b.n	8000ece <stm32_exti_trigger+0x22>
 8000f0e:	bf00      	nop
 8000f10:	40010400 	.word	0x40010400

08000f14 <stm32_exti_set_callback>:
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
	const struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->data;

	if (data->cb[line].cb) {
 8000f14:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <stm32_exti_set_callback+0x20>)
{
 8000f16:	b510      	push	{r4, lr}
 8000f18:	4604      	mov	r4, r0
	if (data->cb[line].cb) {
 8000f1a:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
 8000f1e:	b928      	cbnz	r0, 8000f2c <stm32_exti_set_callback+0x18>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8000f20:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	data->cb[line].data = arg;
 8000f24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8000f28:	605a      	str	r2, [r3, #4]

	return 0;
}
 8000f2a:	bd10      	pop	{r4, pc}
		return -EBUSY;
 8000f2c:	f06f 000f 	mvn.w	r0, #15
 8000f30:	e7fb      	b.n	8000f2a <stm32_exti_set_callback+0x16>
 8000f32:	bf00      	nop
 8000f34:	2000023c 	.word	0x2000023c

08000f38 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	const struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->data;

	data->cb[line].cb = NULL;
 8000f38:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <stm32_exti_unset_callback+0x10>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
	data->cb[line].data = NULL;
 8000f40:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8000f44:	605a      	str	r2, [r3, #4]
}
 8000f46:	4770      	bx	lr
 8000f48:	2000023c 	.word	0x2000023c

08000f4c <stm32_clock_control_on>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8000f4c:	680b      	ldr	r3, [r1, #0]
{
 8000f4e:	b086      	sub	sp, #24
 8000f50:	2b04      	cmp	r3, #4
 8000f52:	d838      	bhi.n	8000fc6 <stm32_clock_control_on+0x7a>
 8000f54:	e8df f003 	tbb	[pc, r3]
 8000f58:	2d190f03 	.word	0x2d190f03
 8000f5c:	23          	.byte	0x23
 8000f5d:	00          	.byte	0x00
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000f5e:	4a1b      	ldr	r2, [pc, #108]	; (8000fcc <stm32_clock_control_on+0x80>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8000f60:	684b      	ldr	r3, [r1, #4]
 8000f62:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8000f64:	4319      	orrs	r1, r3
 8000f66:	6491      	str	r1, [r2, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000f68:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000f6e:	9b01      	ldr	r3, [sp, #4]
#endif /* CONFIG_SOC_SERIES_STM32L0X || CONFIG_SOC_SERIES_STM32G0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8000f70:	2000      	movs	r0, #0
}
 8000f72:	b006      	add	sp, #24
 8000f74:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f76:	4a15      	ldr	r2, [pc, #84]	; (8000fcc <stm32_clock_control_on+0x80>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 8000f78:	684b      	ldr	r3, [r1, #4]
 8000f7a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8000f7c:	4319      	orrs	r1, r3
 8000f7e:	64d1      	str	r1, [r2, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f80:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000f82:	4013      	ands	r3, r2
 8000f84:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8000f86:	9b02      	ldr	r3, [sp, #8]
 8000f88:	e7f2      	b.n	8000f70 <stm32_clock_control_on+0x24>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000f8a:	4a10      	ldr	r2, [pc, #64]	; (8000fcc <stm32_clock_control_on+0x80>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8000f8c:	684b      	ldr	r3, [r1, #4]
 8000f8e:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8000f90:	4319      	orrs	r1, r3
 8000f92:	6591      	str	r1, [r2, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000f94:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000f96:	4013      	ands	r3, r2
 8000f98:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8000f9a:	9b03      	ldr	r3, [sp, #12]
 8000f9c:	e7e8      	b.n	8000f70 <stm32_clock_control_on+0x24>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000f9e:	4a0b      	ldr	r2, [pc, #44]	; (8000fcc <stm32_clock_control_on+0x80>)
		LL_APB1_GRP2_EnableClock(pclken->enr);
 8000fa0:	684b      	ldr	r3, [r1, #4]
 8000fa2:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8000fa4:	4319      	orrs	r1, r3
 8000fa6:	65d1      	str	r1, [r2, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000fa8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000faa:	4013      	ands	r3, r2
 8000fac:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8000fae:	9b04      	ldr	r3, [sp, #16]
 8000fb0:	e7de      	b.n	8000f70 <stm32_clock_control_on+0x24>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000fb2:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <stm32_clock_control_on+0x80>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8000fb4:	684b      	ldr	r3, [r1, #4]
 8000fb6:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8000fb8:	4319      	orrs	r1, r3
 8000fba:	6611      	str	r1, [r2, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000fbc:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8000fc2:	9b05      	ldr	r3, [sp, #20]
 8000fc4:	e7d4      	b.n	8000f70 <stm32_clock_control_on+0x24>
	switch (pclken->bus) {
 8000fc6:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8000fca:	e7d2      	b.n	8000f72 <stm32_clock_control_on+0x26>
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8000fd0:	680b      	ldr	r3, [r1, #0]
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	d828      	bhi.n	8001028 <stm32_clock_control_off+0x58>
 8000fd6:	e8df f003 	tbb	[pc, r3]
 8000fda:	0b03      	.short	0x0b03
 8000fdc:	2012      	.short	0x2012
 8000fde:	19          	.byte	0x19
 8000fdf:	00          	.byte	0x00
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8000fe0:	4a13      	ldr	r2, [pc, #76]	; (8001030 <stm32_clock_control_off+0x60>)
 8000fe2:	6849      	ldr	r1, [r1, #4]
 8000fe4:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8000fe6:	ea23 0301 	bic.w	r3, r3, r1
 8000fea:	6493      	str	r3, [r2, #72]	; 0x48
#endif /* CONFIG_SOC_SERIES_STM32L0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8000fec:	2000      	movs	r0, #0
}
 8000fee:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8000ff0:	4a0f      	ldr	r2, [pc, #60]	; (8001030 <stm32_clock_control_off+0x60>)
 8000ff2:	6849      	ldr	r1, [r1, #4]
 8000ff4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8000ff6:	ea23 0301 	bic.w	r3, r3, r1
 8000ffa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffc:	e7f6      	b.n	8000fec <stm32_clock_control_off+0x1c>
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8000ffe:	4a0c      	ldr	r2, [pc, #48]	; (8001030 <stm32_clock_control_off+0x60>)
 8001000:	6849      	ldr	r1, [r1, #4]
 8001002:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001004:	ea23 0301 	bic.w	r3, r3, r1
 8001008:	6593      	str	r3, [r2, #88]	; 0x58
 800100a:	e7ef      	b.n	8000fec <stm32_clock_control_off+0x1c>
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 800100c:	4a08      	ldr	r2, [pc, #32]	; (8001030 <stm32_clock_control_off+0x60>)
 800100e:	6849      	ldr	r1, [r1, #4]
 8001010:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8001012:	ea23 0301 	bic.w	r3, r3, r1
 8001016:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001018:	e7e8      	b.n	8000fec <stm32_clock_control_off+0x1c>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800101a:	4a05      	ldr	r2, [pc, #20]	; (8001030 <stm32_clock_control_off+0x60>)
 800101c:	6849      	ldr	r1, [r1, #4]
 800101e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001020:	ea23 0301 	bic.w	r3, r3, r1
 8001024:	6613      	str	r3, [r2, #96]	; 0x60
 8001026:	e7e1      	b.n	8000fec <stm32_clock_control_off+0x1c>
	switch (pclken->bus) {
 8001028:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40021000 	.word	0x40021000

08001034 <stm32_clock_control_get_subsys_rate>:
				CONFIG_CLOCK_STM32_APB2_PRESCALER);
#endif /* CONFIG_SOC_SERIES_STM32F0X && CONFIG_SOC_SERIES_STM32G0X */

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8001034:	680b      	ldr	r3, [r1, #0]
 8001036:	2b04      	cmp	r3, #4
	uint32_t ahb_clock = SystemCoreClock;
 8001038:	bf9f      	itttt	ls
 800103a:	4b04      	ldrls	r3, [pc, #16]	; (800104c <stm32_clock_control_get_subsys_rate+0x18>)
 800103c:	681b      	ldrls	r3, [r3, #0]
#endif /* CONFIG_SOC_SERIES_STM32G0X */
		*rate = apb1_clock;
		break;
#if !defined (CONFIG_SOC_SERIES_STM32F0X) && !defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_APB2:
		*rate = apb2_clock;
 800103e:	6013      	strls	r3, [r2, #0]
#endif /* CONFIG_SOC_SERIES_STM32F0X && CONFIG_SOC_SERIES_STM32G0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8001040:	2000      	movls	r0, #0
	switch (pclken->bus) {
 8001042:	bf88      	it	hi
 8001044:	f06f 0022 	mvnhi.w	r0, #34	; 0x22
}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	2000002c 	.word	0x2000002c

08001050 <stm32_clock_control_init>:
			 mco2_prescaler(CONFIG_CLOCK_STM32_MCO2_DIV));
#endif /* CONFIG_CLOCK_STM32_MCO2_SRC_NOCLOCK */
}

static int stm32_clock_control_init(const struct device *dev)
{
 8001050:	b510      	push	{r4, lr}
 8001052:	b086      	sub	sp, #24
	clk_init->AHBCLKDivider = ahb_prescaler(
 8001054:	2300      	movs	r3, #0
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001056:	4c1d      	ldr	r4, [pc, #116]	; (80010cc <stm32_clock_control_init+0x7c>)
	clk_init->APB2CLKDivider = apb2_prescaler(
 8001058:	9302      	str	r3, [sp, #8]
	clk_init->APB1CLKDivider = apb1_prescaler(
 800105a:	e9cd 3300 	strd	r3, r3, [sp]
#else
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
#endif /* CONFIG_SOC_SERIES_STM32WBX */

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 800105e:	f002 f9ff 	bl	8003460 <config_enable_default_clocks>

#ifdef CONFIG_CLOCK_STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8001062:	a803      	add	r0, sp, #12
 8001064:	f002 f9f4 	bl	8003450 <config_pll_init>
 8001068:	6823      	ldr	r3, [r4, #0]
 800106a:	055a      	lsls	r2, r3, #21
 800106c:	d406      	bmi.n	800107c <stm32_clock_control_init+0x2c>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800106e:	6823      	ldr	r3, [r4, #0]
 8001070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001074:	6023      	str	r3, [r4, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001076:	6823      	ldr	r3, [r4, #0]
 8001078:	055b      	lsls	r3, r3, #21
 800107a:	d5fc      	bpl.n	8001076 <stm32_clock_control_init+0x26>
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800107c:	68a3      	ldr	r3, [r4, #8]
 800107e:	f023 0303 	bic.w	r3, r3, #3
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001088:	68a3      	ldr	r3, [r4, #8]
 800108a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800108e:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001090:	68a3      	ldr	r3, [r4, #8]
 8001092:	f003 030c 	and.w	r3, r3, #12
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8001096:	2b04      	cmp	r3, #4
 8001098:	d1fa      	bne.n	8001090 <stm32_clock_control_init+0x40>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010a0:	6023      	str	r3, [r4, #0]
		 }
	 }
#endif

#ifdef CONFIG_CLOCK_STM32_PLL_Q_DIVISOR
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 80010a2:	68e3      	ldr	r3, [r4, #12]
 80010a4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80010a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010ac:	60e3      	str	r3, [r4, #12]
	LL_RCC_HSI_Disable();
	LL_RCC_HSE_Disable();

#elif CONFIG_CLOCK_STM32_PLL_SRC_HSI
	/* Switch to PLL with HSI as clock source */
	LL_PLL_ConfigSystemClock_HSI(&s_PLLInitStruct, &s_ClkInitStruct);
 80010ae:	4669      	mov	r1, sp
 80010b0:	a803      	add	r0, sp, #12
 80010b2:	f001 f9c5 	bl	8002440 <LL_PLL_ConfigSystemClock_HSI>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80010b6:	6823      	ldr	r3, [r4, #0]
 80010b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010bc:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80010be:	6823      	ldr	r3, [r4, #0]

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 80010c0:	2000      	movs	r0, #0
 80010c2:	f023 0301 	bic.w	r3, r3, #1
 80010c6:	6023      	str	r3, [r4, #0]
 80010c8:	b006      	add	sp, #24
 80010ca:	bd10      	pop	{r4, pc}
 80010cc:	40021000 	.word	0x40021000

080010d0 <enable_port>:
 * @param clk  optional clock device
 *
 * @return 0 on success, error otherwise
 */
static int enable_port(uint32_t port, const struct device *clk)
{
 80010d0:	b513      	push	{r0, r1, r4, lr}
 80010d2:	4604      	mov	r4, r0
	/* enable port clock */
	if (!clk) {
 80010d4:	4608      	mov	r0, r1
 80010d6:	b911      	cbnz	r1, 80010de <enable_port+0xe>
 80010d8:	4809      	ldr	r0, [pc, #36]	; (8001100 <enable_port+0x30>)
 80010da:	f001 fa1f 	bl	800251c <z_impl_device_get_binding>
		clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
	}

	struct stm32_pclken pclken;

	pclken.bus = STM32_CLOCK_BUS_GPIO;
 80010de:	2301      	movs	r3, #1
 80010e0:	9300      	str	r3, [sp, #0]
	pclken.enr = ports_enable[port];
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <enable_port+0x34>)
 80010e4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80010e8:	9301      	str	r3, [sp, #4]

	if (pclken.enr == STM32_PORT_NOT_AVAILABLE) {
 80010ea:	3301      	adds	r3, #1
 80010ec:	d005      	beq.n	80010fa <enable_port+0x2a>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->api;

	return api->on(dev, sys);
 80010ee:	6883      	ldr	r3, [r0, #8]
 80010f0:	4669      	mov	r1, sp
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4798      	blx	r3
		return -EIO;
	}

	return clock_control_on(clk, (clock_control_subsys_t *) &pclken);
}
 80010f6:	b002      	add	sp, #8
 80010f8:	bd10      	pop	{r4, pc}
		return -EIO;
 80010fa:	f06f 0004 	mvn.w	r0, #4
 80010fe:	e7fa      	b.n	80010f6 <enable_port+0x26>
 8001100:	080041a8 	.word	0x080041a8
 8001104:	08003e68 	.word	0x08003e68

08001108 <stm32_dt_pinctrl_configure>:
 *
 * @return 0 on success, -EINVAL otherwise
 */
int stm32_dt_pinctrl_configure(const struct soc_gpio_pinctrl *pinctrl,
			       size_t list_size, uint32_t base)
{
 8001108:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800110c:	4607      	mov	r7, r0
	const struct device *clk;
	uint32_t pin, mux;
	uint32_t func = 0;

	if (!list_size) {
 800110e:	460e      	mov	r6, r1
 8001110:	b331      	cbz	r1, 8001160 <stm32_dt_pinctrl_configure+0x58>
 8001112:	4818      	ldr	r0, [pc, #96]	; (8001174 <stm32_dt_pinctrl_configure+0x6c>)
 8001114:	f001 fa02 	bl	800251c <z_impl_device_get_binding>
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

	/* make sure to enable port clock first */
	clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);

	for (int i = 0; i < list_size; i++) {
 8001118:	2500      	movs	r5, #0
 800111a:	4680      	mov	r8, r0
	uint32_t func = 0;
 800111c:	46ab      	mov	fp, r5
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#else
		if (STM32_DT_PINMUX_FUNC(mux) < ANALOG) {
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
 800111e:	f107 0a04 	add.w	sl, r7, #4
		mux = pinctrl[i].pinmux;
 8001122:	f857 4035 	ldr.w	r4, [r7, r5, lsl #3]
		if (STM32_DT_PINMUX_FUNC(mux) < ANALOG) {
 8001126:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 800112a:	b2e3      	uxtb	r3, r4
 800112c:	d11c      	bne.n	8001168 <stm32_dt_pinctrl_configure+0x60>
			func = pinctrl[i].pincfg | STM32_MODER_ALT_MODE;
 800112e:	f85a 2035 	ldr.w	r2, [sl, r5, lsl #3]
 8001132:	f042 0b20 	orr.w	fp, r2, #32
			/* Not supported */
			__ASSERT_NO_MSG(STM32_DT_PINMUX_FUNC(mux));
		}
#endif /* DT_HAS_COMPAT_STATUS_OKAY(st_stm32f1_pinctrl) */

		pin = STM32PIN(STM32_DT_PINMUX_PORT(mux),
 8001136:	f3c4 2907 	ubfx	r9, r4, #8, #8
			       STM32_DT_PINMUX_LINE(mux));

		enable_port(STM32_PORT(pin), clk);
 800113a:	f3c4 3403 	ubfx	r4, r4, #12, #4
 800113e:	4641      	mov	r1, r8
 8001140:	4620      	mov	r0, r4
	uint32_t offset = STM32_PORT(pin) * GPIO_REG_SIZE;
 8001142:	02a4      	lsls	r4, r4, #10
 8001144:	9301      	str	r3, [sp, #4]
	for (int i = 0; i < list_size; i++) {
 8001146:	3501      	adds	r5, #1
		enable_port(STM32_PORT(pin), clk);
 8001148:	f7ff ffc2 	bl	80010d0 <enable_port>
	return gpio_stm32_configure((uint32_t *)port_base,
 800114c:	9b01      	ldr	r3, [sp, #4]
 800114e:	465a      	mov	r2, fp
 8001150:	f009 010f 	and.w	r1, r9, #15
 8001154:	f104 4090 	add.w	r0, r4, #1207959552	; 0x48000000
 8001158:	f002 fa5e 	bl	8003618 <gpio_stm32_configure>
	for (int i = 0; i < list_size; i++) {
 800115c:	42ae      	cmp	r6, r5
 800115e:	d1e0      	bne.n	8001122 <stm32_dt_pinctrl_configure+0x1a>

		stm32_pin_configure(pin, func, STM32_DT_PINMUX_FUNC(mux));
	}

	return 0;
}
 8001160:	2000      	movs	r0, #0
 8001162:	b003      	add	sp, #12
 8001164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			func = STM32_MODER_ANALOG_MODE;
 8001168:	2b10      	cmp	r3, #16
 800116a:	bf08      	it	eq
 800116c:	f04f 0b30 	moveq.w	fp, #48	; 0x30
 8001170:	e7e1      	b.n	8001136 <stm32_dt_pinctrl_configure+0x2e>
 8001172:	bf00      	nop
 8001174:	080041a8 	.word	0x080041a8

08001178 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 8001178:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <elapsed+0x30>)
 800117a:	689a      	ldr	r2, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 800117c:	6819      	ldr	r1, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
 800117e:	6898      	ldr	r0, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <elapsed+0x34>)
 8001182:	f411 3f80 	tst.w	r1, #65536	; 0x10000
{
 8001186:	b510      	push	{r4, lr}
 8001188:	4909      	ldr	r1, [pc, #36]	; (80011b0 <elapsed+0x38>)
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 800118a:	d101      	bne.n	8001190 <elapsed+0x18>
	    || (val1 < val2)) {
 800118c:	4282      	cmp	r2, r0
 800118e:	d205      	bcs.n	800119c <elapsed+0x24>
		overflow_cyc += last_load;
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	680c      	ldr	r4, [r1, #0]
 8001194:	4422      	add	r2, r4
 8001196:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8001198:	4a03      	ldr	r2, [pc, #12]	; (80011a8 <elapsed+0x30>)
 800119a:	6812      	ldr	r2, [r2, #0]
	}

	return (last_load - val2) + overflow_cyc;
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	680a      	ldr	r2, [r1, #0]
 80011a0:	4413      	add	r3, r2
}
 80011a2:	1a18      	subs	r0, r3, r0
 80011a4:	bd10      	pop	{r4, pc}
 80011a6:	bf00      	nop
 80011a8:	e000e010 	.word	0xe000e010
 80011ac:	200002c8 	.word	0x200002c8
 80011b0:	200002c4 	.word	0x200002c4

080011b4 <z_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void z_clock_isr(void *arg)
{
 80011b4:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	uint32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
 80011b6:	f7ff ffdf 	bl	8001178 <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <z_clock_isr+0x38>)
 80011bc:	4a0c      	ldr	r2, [pc, #48]	; (80011f0 <z_clock_isr+0x3c>)
 80011be:	6818      	ldr	r0, [r3, #0]
 80011c0:	6811      	ldr	r1, [r2, #0]
 80011c2:	4408      	add	r0, r1
 80011c4:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 80011ca:	4a0a      	ldr	r2, [pc, #40]	; (80011f4 <z_clock_isr+0x40>)
 80011cc:	6811      	ldr	r1, [r2, #0]
 80011ce:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80011d2:	1a40      	subs	r0, r0, r1
 80011d4:	fbb0 f0f3 	udiv	r0, r0, r3
		announced_cycles += dticks * CYC_PER_TICK;
 80011d8:	fb03 1300 	mla	r3, r3, r0, r1
 80011dc:	6013      	str	r3, [r2, #0]
		z_clock_announce(dticks);
 80011de:	f001 feff 	bl	8002fe0 <z_clock_announce>
	} else {
		z_clock_announce(1);
	}
	z_arm_int_exit();
}
 80011e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 80011e6:	f000 babd 	b.w	8001764 <z_arm_exc_exit>
 80011ea:	bf00      	nop
 80011ec:	200002c8 	.word	0x200002c8
 80011f0:	200002c0 	.word	0x200002c0
 80011f4:	200002bc 	.word	0x200002bc

080011f8 <z_clock_driver_init>:
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <z_clock_driver_init+0x28>)
 80011fa:	2210      	movs	r2, #16
 80011fc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
int z_clock_driver_init(const struct device *device)
{
	ARG_UNUSED(device);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <z_clock_driver_init+0x2c>)
 8001202:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001206:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <z_clock_driver_init+0x30>)
 800120a:	2000      	movs	r0, #0
 800120c:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 800120e:	4b07      	ldr	r3, [pc, #28]	; (800122c <z_clock_driver_init+0x34>)
 8001210:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8001212:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	f042 0207 	orr.w	r2, r2, #7
 800121a:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000ed00 	.word	0xe000ed00
 8001224:	200002c4 	.word	0x200002c4
 8001228:	200002c8 	.word	0x200002c8
 800122c:	e000e010 	.word	0xe000e010

08001230 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
 8001230:	b570      	push	{r4, r5, r6, lr}
 8001232:	4d2a      	ldr	r5, [pc, #168]	; (80012dc <z_clock_set_timeout+0xac>)
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_IDLE) && idle
 8001234:	b151      	cbz	r1, 800124c <z_clock_set_timeout+0x1c>
	    && ticks == K_TICKS_FOREVER) {
 8001236:	1c42      	adds	r2, r0, #1
 8001238:	d10c      	bne.n	8001254 <z_clock_set_timeout+0x24>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 800123a:	4a29      	ldr	r2, [pc, #164]	; (80012e0 <z_clock_set_timeout+0xb0>)
 800123c:	6813      	ldr	r3, [r2, #0]
 800123e:	f023 0301 	bic.w	r3, r3, #1
 8001242:	6013      	str	r3, [r2, #0]
		last_load = TIMER_STOPPED;
 8001244:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001248:	602b      	str	r3, [r5, #0]
	SysTick->LOAD = last_load - 1;
	SysTick->VAL = 0; /* resets timer to last_load */

	k_spin_unlock(&lock, key);
#endif
}
 800124a:	bd70      	pop	{r4, r5, r6, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 800124c:	1c43      	adds	r3, r0, #1
 800124e:	bf08      	it	eq
 8001250:	f44f 6003 	moveq.w	r0, #2096	; 0x830
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8001254:	1e44      	subs	r4, r0, #1
 8001256:	2c00      	cmp	r4, #0
 8001258:	dd27      	ble.n	80012aa <z_clock_set_timeout+0x7a>
 800125a:	f5b4 6f03 	cmp.w	r4, #2096	; 0x830
 800125e:	bfa8      	it	ge
 8001260:	f44f 6403 	movge.w	r4, #2096	; 0x830
	__asm__ volatile(
 8001264:	f04f 0310 	mov.w	r3, #16
 8001268:	f3ef 8611 	mrs	r6, BASEPRI
 800126c:	f383 8811 	msr	BASEPRI, r3
 8001270:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8001274:	f7ff ff80 	bl	8001178 <elapsed>
	cycle_count += pending;
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <z_clock_set_timeout+0xb4>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4410      	add	r0, r2
 800127e:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
 8001280:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <z_clock_set_timeout+0xb8>)
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8001286:	4b19      	ldr	r3, [pc, #100]	; (80012ec <z_clock_set_timeout+0xbc>)
 8001288:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 800128a:	1ac1      	subs	r1, r0, r3
 800128c:	d50f      	bpl.n	80012ae <z_clock_set_timeout+0x7e>
		last_load = MIN_DELAY;
 800128e:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = MAX_CYCLES;
 8001292:	602b      	str	r3, [r5, #0]
	SysTick->LOAD = last_load - 1;
 8001294:	682b      	ldr	r3, [r5, #0]
 8001296:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <z_clock_set_timeout+0xb0>)
 8001298:	3b01      	subs	r3, #1
 800129a:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 800129c:	2300      	movs	r3, #0
 800129e:	6093      	str	r3, [r2, #8]
	__asm__ volatile(
 80012a0:	f386 8811 	msr	BASEPRI, r6
 80012a4:	f3bf 8f6f 	isb	sy
 80012a8:	e7cf      	b.n	800124a <z_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 80012aa:	2400      	movs	r4, #0
 80012ac:	e7da      	b.n	8001264 <z_clock_set_timeout+0x34>
		delay = ticks * CYC_PER_TICK;
 80012ae:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
		delay += unannounced;
 80012b2:	fb02 1404 	mla	r4, r2, r4, r1
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 80012b6:	f504 54f9 	add.w	r4, r4, #7968	; 0x1f20
		delay -= unannounced;
 80012ba:	1a18      	subs	r0, r3, r0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 80012bc:	341f      	adds	r4, #31
 80012be:	fbb4 f4f2 	udiv	r4, r4, r2
		delay -= unannounced;
 80012c2:	fb02 0004 	mla	r0, r2, r4, r0
		delay = MAX(delay, MIN_DELAY);
 80012c6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80012ca:	d904      	bls.n	80012d6 <z_clock_set_timeout+0xa6>
		if (delay > MAX_CYCLES) {
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <z_clock_set_timeout+0xc0>)
 80012ce:	4298      	cmp	r0, r3
 80012d0:	d8df      	bhi.n	8001292 <z_clock_set_timeout+0x62>
			last_load = delay;
 80012d2:	6028      	str	r0, [r5, #0]
 80012d4:	e7de      	b.n	8001294 <z_clock_set_timeout+0x64>
		delay = MAX(delay, MIN_DELAY);
 80012d6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80012da:	e7fa      	b.n	80012d2 <z_clock_set_timeout+0xa2>
 80012dc:	200002c4 	.word	0x200002c4
 80012e0:	e000e010 	.word	0xe000e010
 80012e4:	200002c0 	.word	0x200002c0
 80012e8:	200002c8 	.word	0x200002c8
 80012ec:	200002bc 	.word	0x200002bc
 80012f0:	00ffdc00 	.word	0x00ffdc00

080012f4 <z_clock_elapsed>:

uint32_t z_clock_elapsed(void)
{
 80012f4:	b510      	push	{r4, lr}
	__asm__ volatile(
 80012f6:	f04f 0310 	mov.w	r3, #16
 80012fa:	f3ef 8411 	mrs	r4, BASEPRI
 80012fe:	f383 8811 	msr	BASEPRI, r3
 8001302:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8001306:	f7ff ff37 	bl	8001178 <elapsed>
 800130a:	4b07      	ldr	r3, [pc, #28]	; (8001328 <z_clock_elapsed+0x34>)
 800130c:	4a07      	ldr	r2, [pc, #28]	; (800132c <z_clock_elapsed+0x38>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6812      	ldr	r2, [r2, #0]
 8001312:	1a9b      	subs	r3, r3, r2
 8001314:	4403      	add	r3, r0
	__asm__ volatile(
 8001316:	f384 8811 	msr	BASEPRI, r4
 800131a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
 800131e:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8001322:	fbb3 f0f0 	udiv	r0, r3, r0
 8001326:	bd10      	pop	{r4, pc}
 8001328:	200002c0 	.word	0x200002c0
 800132c:	200002bc 	.word	0x200002bc

08001330 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 8001330:	4a09      	ldr	r2, [pc, #36]	; (8001358 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8001332:	490a      	ldr	r1, [pc, #40]	; (800135c <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8001334:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8001336:	6809      	ldr	r1, [r1, #0]
 8001338:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800133a:	4909      	ldr	r1, [pc, #36]	; (8001360 <arch_swap+0x30>)
	_current->arch.basepri = key;
 800133c:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800133e:	684b      	ldr	r3, [r1, #4]
 8001340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001344:	604b      	str	r3, [r1, #4]
 8001346:	2300      	movs	r3, #0
 8001348:	f383 8811 	msr	BASEPRI, r3
 800134c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8001350:	6893      	ldr	r3, [r2, #8]
}
 8001352:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	2000035c 	.word	0x2000035c
 800135c:	08004064 	.word	0x08004064
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8001364:	4912      	ldr	r1, [pc, #72]	; (80013b0 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8001366:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8001368:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
 800136c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 800136e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8001372:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8001376:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8001378:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 800137c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8001380:	4f0c      	ldr	r7, [pc, #48]	; (80013b4 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8001382:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8001386:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
 8001388:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 800138a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 800138c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
 800138e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8001390:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8001392:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8001396:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8001398:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 800139a:	f000 fa2b 	bl	80017f4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 800139e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 80013a2:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
 80013a6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 80013aa:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
 80013ae:	4770      	bx	lr
    ldr r1, =_kernel
 80013b0:	2000035c 	.word	0x2000035c
    ldr v4, =_SCS_ICSR
 80013b4:	e000ed04 	.word	0xe000ed04

080013b8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
 80013b8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 80013bc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 80013be:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 80013c2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 80013c6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 80013c8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 80013cc:	2902      	cmp	r1, #2
    beq _oops
 80013ce:	d0ff      	beq.n	80013d0 <_oops>

080013d0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 80013d0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 80013d2:	f002 f84c 	bl	800346e <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 80013d6:	bd01      	pop	{r0, pc}

080013d8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 80013d8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 80013da:	2b00      	cmp	r3, #0
 80013dc:	db08      	blt.n	80013f0 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013de:	2201      	movs	r2, #1
 80013e0:	f000 001f 	and.w	r0, r0, #31
 80013e4:	fa02 f000 	lsl.w	r0, r2, r0
 80013e8:	095b      	lsrs	r3, r3, #5
 80013ea:	4a02      	ldr	r2, [pc, #8]	; (80013f4 <arch_irq_enable+0x1c>)
 80013ec:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000e100 	.word	0xe000e100

080013f8 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 80013f8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 80013fa:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fc:	bfa8      	it	ge
 80013fe:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
 8001402:	f101 0101 	add.w	r1, r1, #1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001406:	bfb8      	it	lt
 8001408:	4b06      	ldrlt	r3, [pc, #24]	; (8001424 <z_arm_irq_priority_set+0x2c>)
 800140a:	ea4f 1101 	mov.w	r1, r1, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140e:	bfac      	ite	ge
 8001410:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001414:	f000 000f 	andlt.w	r0, r0, #15
 8001418:	b2c9      	uxtb	r1, r1
 800141a:	bfb4      	ite	lt
 800141c:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141e:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
 8001422:	4770      	bx	lr
 8001424:	e000ed14 	.word	0xe000ed14

08001428 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8001428:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 800142c:	9b00      	ldr	r3, [sp, #0]
 800142e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 8001432:	490a      	ldr	r1, [pc, #40]	; (800145c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
 8001434:	9b01      	ldr	r3, [sp, #4]
 8001436:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 800143a:	9b02      	ldr	r3, [sp, #8]
 800143c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 8001440:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8001444:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001448:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 800144c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8001450:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8001452:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 8001454:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
 8001456:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	0800312f 	.word	0x0800312f

08001460 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 8001460:	4a0b      	ldr	r2, [pc, #44]	; (8001490 <z_check_thread_stack_fail+0x30>)
{
 8001462:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
 8001464:	6890      	ldr	r0, [r2, #8]

	if (!thread) {
 8001466:	b190      	cbz	r0, 800148e <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8001468:	f113 0f16 	cmn.w	r3, #22
 800146c:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800146e:	d005      	beq.n	800147c <z_check_thread_stack_fail+0x1c>
 8001470:	f1a0 0220 	sub.w	r2, r0, #32
 8001474:	429a      	cmp	r2, r3
 8001476:	d806      	bhi.n	8001486 <z_check_thread_stack_fail+0x26>
 8001478:	4283      	cmp	r3, r0
 800147a:	d204      	bcs.n	8001486 <z_check_thread_stack_fail+0x26>
 800147c:	4281      	cmp	r1, r0
 800147e:	bf2c      	ite	cs
 8001480:	2100      	movcs	r1, #0
 8001482:	2101      	movcc	r1, #1
 8001484:	e000      	b.n	8001488 <z_check_thread_stack_fail+0x28>
 8001486:	2100      	movs	r1, #0
 8001488:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 800148a:	bf08      	it	eq
 800148c:	2000      	moveq	r0, #0
}
 800148e:	4770      	bx	lr
 8001490:	2000035c 	.word	0x2000035c

08001494 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8001494:	b508      	push	{r3, lr}
 8001496:	4604      	mov	r4, r0
 8001498:	460e      	mov	r6, r1
 800149a:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
 800149c:	f000 f99e 	bl	80017dc <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <arch_switch_to_main_thread+0x30>)
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 80014a2:	4620      	mov	r0, r4
	_current = main_thread;
 80014a4:	609c      	str	r4, [r3, #8]
	z_arm_configure_dynamic_mpu_regions(main_thread);
 80014a6:	f000 f9a5 	bl	80017f4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 80014aa:	4628      	mov	r0, r5
 80014ac:	f386 8809 	msr	PSP, r6
 80014b0:	2100      	movs	r1, #0
 80014b2:	b663      	cpsie	if
 80014b4:	f381 8811 	msr	BASEPRI, r1
 80014b8:	f3bf 8f6f 	isb	sy
 80014bc:	2200      	movs	r2, #0
 80014be:	2300      	movs	r3, #0
 80014c0:	f001 fe35 	bl	800312e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 80014c4:	2000035c 	.word	0x2000035c

080014c8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 80014c8:	4901      	ldr	r1, [pc, #4]	; (80014d0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 80014ca:	2210      	movs	r2, #16
	str	r2, [r1]
 80014cc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 80014ce:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 80014d0:	e000ed10 	.word	0xe000ed10

080014d4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 80014d4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 80014d6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 80014d8:	f380 8811 	msr	BASEPRI, r0
	isb
 80014dc:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 80014e0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 80014e4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 80014e6:	b662      	cpsie	i
	isb
 80014e8:	f3bf 8f6f 	isb	sy

	bx	lr
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop

080014f0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 80014f0:	bf30      	wfi
    b z_SysNmiOnReset
 80014f2:	f7ff bffd 	b.w	80014f0 <z_SysNmiOnReset>
 80014f6:	bf00      	nop

080014f8 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 80014f8:	4a0e      	ldr	r2, [pc, #56]	; (8001534 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 80014fa:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 80014fc:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <z_arm_prep_c+0x40>)
 80014fe:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8001502:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001504:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001508:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 800150c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001510:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001514:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8001518:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 800151c:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8001520:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8001524:	f001 f822 	bl	800256c <z_bss_zero>
	z_data_copy();
 8001528:	f001 f82a 	bl	8002580 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 800152c:	f000 f928 	bl	8001780 <z_arm_interrupt_init>
	z_cstart();
 8001530:	f001 f864 	bl	80025fc <z_cstart>
 8001534:	08000000 	.word	0x08000000
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 800153c:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 800153e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8001542:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8001546:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 800154a:	4904      	ldr	r1, [pc, #16]	; (800155c <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 800154c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 800154e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 8001550:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8001552:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8001556:	4902      	ldr	r1, [pc, #8]	; (8001560 <_isr_wrapper+0x24>)
	bx r1
 8001558:	4708      	bx	r1
 800155a:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 800155c:	08003bd0 	.word	0x08003bd0
	ldr r1, =z_arm_int_exit
 8001560:	08001765 	.word	0x08001765

08001564 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8001564:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8001566:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 800156a:	4808      	ldr	r0, [pc, #32]	; (800158c <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 800156c:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 8001570:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8001572:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8001576:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 800157a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 800157c:	4308      	orrs	r0, r1
    msr CONTROL, r0
 800157e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8001582:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8001586:	f7ff ffb7 	bl	80014f8 <z_arm_prep_c>
 800158a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 800158c:	20000920 	.word	0x20000920

08001590 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8001590:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8001594:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 8001598:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 800159a:	4672      	mov	r2, lr
	bl z_arm_fault
 800159c:	f000 f864 	bl	8001668 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 80015a0:	bd01      	pop	{r0, pc}
 80015a2:	bf00      	nop

080015a4 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
 80015a4:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 80015a6:	4b17      	ldr	r3, [pc, #92]	; (8001604 <mem_manage_fault+0x60>)
{
 80015a8:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 80015aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 80015ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 80015ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
 80015b0:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 80015b2:	0790      	lsls	r0, r2, #30
 80015b4:	d516      	bpl.n	80015e4 <mem_manage_fault+0x40>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
 80015b6:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 80015b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015ba:	0612      	lsls	r2, r2, #24
 80015bc:	d504      	bpl.n	80015c8 <mem_manage_fault+0x24>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
 80015be:	b119      	cbz	r1, 80015c8 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 80015c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015c6:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 80015c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 80015ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
 80015cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015ce:	06d2      	lsls	r2, r2, #27
 80015d0:	d40b      	bmi.n	80015ea <mem_manage_fault+0x46>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80015d2:	2000      	movs	r0, #0
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 80015d4:	4a0b      	ldr	r2, [pc, #44]	; (8001604 <mem_manage_fault+0x60>)
 80015d6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80015d8:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80015dc:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
 80015de:	2300      	movs	r3, #0
 80015e0:	7023      	strb	r3, [r4, #0]

	return reason;
}
 80015e2:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
 80015e4:	f06f 0015 	mvn.w	r0, #21
 80015e8:	e7ee      	b.n	80015c8 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	051b      	lsls	r3, r3, #20
 80015ee:	d5f0      	bpl.n	80015d2 <mem_manage_fault+0x2e>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 80015f0:	4629      	mov	r1, r5
 80015f2:	f7ff ff35 	bl	8001460 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 80015f6:	2800      	cmp	r0, #0
 80015f8:	d0eb      	beq.n	80015d2 <mem_manage_fault+0x2e>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80015fa:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 80015fe:	2002      	movs	r0, #2
 8001600:	e7e8      	b.n	80015d4 <mem_manage_fault+0x30>
 8001602:	bf00      	nop
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8001608:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <bus_fault.isra.0+0x38>)
 800160a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 800160c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 800160e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001610:	0592      	lsls	r2, r2, #22
 8001612:	d508      	bpl.n	8001626 <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 8001614:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8001616:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001618:	0412      	lsls	r2, r2, #16
 800161a:	d504      	bpl.n	8001626 <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
 800161c:	b118      	cbz	r0, 8001626 <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 800161e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001620:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001624:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <bus_fault.isra.0+0x38>)
 8001628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 800162a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800162c:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 800162e:	bf58      	it	pl
 8001630:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8001632:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
 8001634:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8001636:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
 800163a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
 800163c:	7008      	strb	r0, [r1, #0]

	return reason;
}
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8001644:	4b07      	ldr	r3, [pc, #28]	; (8001664 <usage_fault.isra.0+0x20>)
 8001646:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8001648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 800164a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 800164c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 800164e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8001650:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8001652:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001654:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 8001658:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 800165c:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
 800165e:	2000      	movs	r0, #0
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 8001668:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800166a:	4b37      	ldr	r3, [pc, #220]	; (8001748 <z_arm_fault+0xe0>)
 800166c:	685b      	ldr	r3, [r3, #4]
{
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8001672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001676:	2500      	movs	r5, #0
 8001678:	f385 8811 	msr	BASEPRI, r5
 800167c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8001680:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
 8001684:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 8001688:	d111      	bne.n	80016ae <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 800168a:	f002 010c 	and.w	r1, r2, #12
 800168e:	2908      	cmp	r1, #8
 8001690:	d00d      	beq.n	80016ae <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8001692:	0711      	lsls	r1, r2, #28
 8001694:	d401      	bmi.n	800169a <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 8001696:	4606      	mov	r6, r0
			*nested_exc = true;
 8001698:	2501      	movs	r5, #1
	*recoverable = false;
 800169a:	2200      	movs	r2, #0
 800169c:	3b03      	subs	r3, #3
 800169e:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 80016a2:	2b03      	cmp	r3, #3
 80016a4:	d848      	bhi.n	8001738 <z_arm_fault+0xd0>
 80016a6:	e8df f003 	tbb	[pc, r3]
 80016aa:	3f04      	.short	0x3f04
 80016ac:	3c43      	.short	0x3c43
		return NULL;
 80016ae:	462e      	mov	r6, r5
 80016b0:	e7f3      	b.n	800169a <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 80016b2:	4b25      	ldr	r3, [pc, #148]	; (8001748 <z_arm_fault+0xe0>)
 80016b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b6:	0792      	lsls	r2, r2, #30
 80016b8:	d43e      	bmi.n	8001738 <z_arm_fault+0xd0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 80016ba:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80016bc:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
 80016c0:	d009      	beq.n	80016d6 <z_arm_fault+0x6e>
		if (SCB_MMFSR != 0) {
 80016c2:	3328      	adds	r3, #40	; 0x28
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	b1f3      	cbz	r3, 8001706 <z_arm_fault+0x9e>
			reason = mem_manage_fault(esf, 1, recoverable);
 80016c8:	f10d 0207 	add.w	r2, sp, #7
 80016cc:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 80016ce:	4630      	mov	r0, r6
 80016d0:	f7ff ff68 	bl	80015a4 <mem_manage_fault>
		reason = usage_fault(esf);
 80016d4:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 80016d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80016da:	b993      	cbnz	r3, 8001702 <z_arm_fault+0x9a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 80016dc:	2220      	movs	r2, #32
 80016de:	4631      	mov	r1, r6
 80016e0:	a802      	add	r0, sp, #8
 80016e2:	f001 fee2 	bl	80034aa <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 80016e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80016e8:	b345      	cbz	r5, 800173c <z_arm_fault+0xd4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 80016ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80016ee:	b922      	cbnz	r2, 80016fa <z_arm_fault+0x92>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 80016f0:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 80016f4:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80016f8:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 80016fa:	a902      	add	r1, sp, #8
 80016fc:	4620      	mov	r0, r4
 80016fe:	f001 feb4 	bl	800346a <z_arm_fatal_error>
}
 8001702:	b00a      	add	sp, #40	; 0x28
 8001704:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <z_arm_fault+0xe4>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	b12b      	cbz	r3, 8001718 <z_arm_fault+0xb0>
			reason = bus_fault(esf, 1, recoverable);
 800170c:	f10d 0107 	add.w	r1, sp, #7
 8001710:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 8001712:	f7ff ff79 	bl	8001608 <bus_fault.isra.0>
 8001716:	e7dd      	b.n	80016d4 <z_arm_fault+0x6c>
		} else if (SCB_UFSR != 0) {
 8001718:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <z_arm_fault+0xe8>)
 800171a:	8818      	ldrh	r0, [r3, #0]
 800171c:	b284      	uxth	r4, r0
 800171e:	2c00      	cmp	r4, #0
 8001720:	d0d9      	beq.n	80016d6 <z_arm_fault+0x6e>
		reason = usage_fault(esf);
 8001722:	f7ff ff8f 	bl	8001644 <usage_fault.isra.0>
 8001726:	e7d5      	b.n	80016d4 <z_arm_fault+0x6c>
		reason = mem_manage_fault(esf, 0, recoverable);
 8001728:	f10d 0207 	add.w	r2, sp, #7
 800172c:	2100      	movs	r1, #0
 800172e:	e7ce      	b.n	80016ce <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
 8001730:	f10d 0107 	add.w	r1, sp, #7
 8001734:	2000      	movs	r0, #0
 8001736:	e7ec      	b.n	8001712 <z_arm_fault+0xaa>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8001738:	2400      	movs	r4, #0
 800173a:	e7cc      	b.n	80016d6 <z_arm_fault+0x6e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 800173c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001740:	f023 0301 	bic.w	r3, r3, #1
 8001744:	e7d8      	b.n	80016f8 <z_arm_fault+0x90>
 8001746:	bf00      	nop
 8001748:	e000ed00 	.word	0xe000ed00
 800174c:	e000ed29 	.word	0xe000ed29
 8001750:	e000ed2a 	.word	0xe000ed2a

08001754 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8001754:	4a02      	ldr	r2, [pc, #8]	; (8001760 <z_arm_fault_init+0xc>)
 8001756:	6953      	ldr	r3, [r2, #20]
 8001758:	f043 0310 	orr.w	r3, r3, #16
 800175c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 800175e:	4770      	bx	lr
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8001764:	4b04      	ldr	r3, [pc, #16]	; (8001778 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8001766:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8001768:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
 800176a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 800176c:	d003      	beq.n	8001776 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 800176e:	4903      	ldr	r1, [pc, #12]	; (800177c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8001770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8001774:	600a      	str	r2, [r1, #0]

08001776 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8001776:	4770      	bx	lr
	ldr r3, =_kernel
 8001778:	2000035c 	.word	0x2000035c
	ldr r1, =_SCS_ICSR
 800177c:	e000ed04 	.word	0xe000ed04

08001780 <z_arm_interrupt_init>:
 8001780:	4804      	ldr	r0, [pc, #16]	; (8001794 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	2110      	movs	r1, #16
 8001786:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8001788:	3301      	adds	r3, #1
 800178a:	2b52      	cmp	r3, #82	; 0x52
 800178c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8001790:	d1f9      	bne.n	8001786 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8001792:	4770      	bx	lr
 8001794:	e000e100 	.word	0xe000e100

08001798 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
 8001798:	b508      	push	{r3, lr}
	if (_current == thread) {
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <z_impl_k_thread_abort+0x3c>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	4283      	cmp	r3, r0
 80017a0:	d107      	bne.n	80017b2 <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80017a2:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 80017a6:	b193      	cbz	r3, 80017ce <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80017a8:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <z_impl_k_thread_abort+0x40>)
 80017aa:	6853      	ldr	r3, [r2, #4]
 80017ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b0:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
 80017b2:	f001 f961 	bl	8002a78 <z_thread_single_abort>
	__asm__ volatile(
 80017b6:	f04f 0310 	mov.w	r3, #16
 80017ba:	f3ef 8011 	mrs	r0, BASEPRI
 80017be:	f383 8811 	msr	BASEPRI, r3
 80017c2:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
 80017c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
 80017ca:	f002 b8d6 	b.w	800397a <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
 80017ce:	f001 fb1b 	bl	8002e08 <z_self_abort>
 80017d2:	bf00      	nop
 80017d4:	2000035c 	.word	0x2000035c
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 80017dc:	4b02      	ldr	r3, [pc, #8]	; (80017e8 <z_arm_configure_static_mpu_regions+0xc>)
 80017de:	4a03      	ldr	r2, [pc, #12]	; (80017ec <z_arm_configure_static_mpu_regions+0x10>)
 80017e0:	4803      	ldr	r0, [pc, #12]	; (80017f0 <z_arm_configure_static_mpu_regions+0x14>)
 80017e2:	2101      	movs	r1, #1
 80017e4:	f000 b896 	b.w	8001914 <arm_core_mpu_configure_static_mpu_regions>
 80017e8:	20018000 	.word	0x20018000
 80017ec:	20000000 	.word	0x20000000
 80017f0:	08003e94 	.word	0x08003e94

080017f4 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 80017f4:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 80017f6:	4b05      	ldr	r3, [pc, #20]	; (800180c <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
 80017f8:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
 80017fa:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <z_arm_configure_dynamic_mpu_regions+0x1c>)
 80017fe:	2120      	movs	r1, #32
 8001800:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 8001804:	4618      	mov	r0, r3
 8001806:	2101      	movs	r1, #1
 8001808:	f000 b88e 	b.w	8001928 <arm_core_mpu_configure_dynamic_mpu_regions>
 800180c:	200002cc 	.word	0x200002cc
 8001810:	150b0000 	.word	0x150b0000

08001814 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 8001814:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
 8001816:	4f1e      	ldr	r7, [pc, #120]	; (8001890 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 8001818:	2600      	movs	r6, #0
 800181a:	428e      	cmp	r6, r1
 800181c:	db01      	blt.n	8001822 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 800181e:	4610      	mov	r0, r2
 8001820:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
 8001822:	6844      	ldr	r4, [r0, #4]
 8001824:	b384      	cbz	r4, 8001888 <mpu_configure_regions+0x74>
		if (do_sanity_check &&
 8001826:	b153      	cbz	r3, 800183e <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
 8001828:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 800182c:	ea14 0f0c 	tst.w	r4, ip
 8001830:	d118      	bne.n	8001864 <mpu_configure_regions+0x50>
		&&
 8001832:	2c1f      	cmp	r4, #31
 8001834:	d916      	bls.n	8001864 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
 8001836:	6805      	ldr	r5, [r0, #0]
		&&
 8001838:	ea1c 0f05 	tst.w	ip, r5
 800183c:	d112      	bne.n	8001864 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 800183e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
 8001840:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
 8001842:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	d90f      	bls.n	800186a <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
 800184a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 800184e:	d80e      	bhi.n	800186e <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 8001850:	3c01      	subs	r4, #1
 8001852:	fab4 f484 	clz	r4, r4
 8001856:	f1c4 041f 	rsb	r4, r4, #31
 800185a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
 800185c:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800185e:	ea4c 0404 	orr.w	r4, ip, r4
 8001862:	d906      	bls.n	8001872 <mpu_configure_regions+0x5e>
			return -EINVAL;
 8001864:	f06f 0215 	mvn.w	r2, #21
 8001868:	e7d9      	b.n	800181e <mpu_configure_regions+0xa>
		return REGION_32B;
 800186a:	2408      	movs	r4, #8
 800186c:	e7f6      	b.n	800185c <mpu_configure_regions+0x48>
		return REGION_4G;
 800186e:	243e      	movs	r4, #62	; 0x3e
 8001870:	e7f4      	b.n	800185c <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001872:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
 8001876:	4315      	orrs	r5, r2
 8001878:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800187c:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
 8001880:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001882:	60fd      	str	r5, [r7, #12]
		reg_index++;
 8001884:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8001886:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
 8001888:	3601      	adds	r6, #1
 800188a:	300c      	adds	r0, #12
 800188c:	e7c5      	b.n	800181a <mpu_configure_regions+0x6>
 800188e:	bf00      	nop
 8001890:	e000ed90 	.word	0xe000ed90

08001894 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8001894:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <arm_core_mpu_enable+0x10>)
 8001896:	2205      	movs	r2, #5
 8001898:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 800189a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800189e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 80018a2:	4770      	bx	lr
 80018a4:	e000ed90 	.word	0xe000ed90

080018a8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80018a8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 80018ac:	4b01      	ldr	r3, [pc, #4]	; (80018b4 <arm_core_mpu_disable+0xc>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	605a      	str	r2, [r3, #4]
}
 80018b2:	4770      	bx	lr
 80018b4:	e000ed90 	.word	0xe000ed90

080018b8 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 80018b8:	4913      	ldr	r1, [pc, #76]	; (8001908 <arm_mpu_init+0x50>)
 80018ba:	6808      	ldr	r0, [r1, #0]
 80018bc:	2808      	cmp	r0, #8
{
 80018be:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 80018c0:	d81e      	bhi.n	8001900 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 80018c2:	f7ff fff1 	bl	80018a8 <arm_core_mpu_disable>
	MPU->RNR = index;
 80018c6:	4c11      	ldr	r4, [pc, #68]	; (800190c <arm_mpu_init+0x54>)
 80018c8:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80018ca:	2200      	movs	r2, #0
 80018cc:	4290      	cmp	r0, r2
 80018ce:	f101 010c 	add.w	r1, r1, #12
 80018d2:	d105      	bne.n	80018e0 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 80018d4:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <arm_mpu_init+0x58>)
 80018d6:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 80018d8:	f7ff ffdc 	bl	8001894 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
 80018dc:	2000      	movs	r0, #0
}
 80018de:	bd10      	pop	{r4, pc}
 80018e0:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80018e2:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 80018e6:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 80018ea:	4313      	orrs	r3, r2
 80018ec:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80018f0:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80018f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80018fc:	3201      	adds	r2, #1
 80018fe:	e7e5      	b.n	80018cc <arm_mpu_init+0x14>
		return -1;
 8001900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001904:	e7eb      	b.n	80018de <arm_mpu_init+0x26>
 8001906:	bf00      	nop
 8001908:	08003ea0 	.word	0x08003ea0
 800190c:	e000ed90 	.word	0xe000ed90
 8001910:	2000039d 	.word	0x2000039d

08001914 <arm_core_mpu_configure_static_mpu_regions>:
{
 8001914:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 8001916:	4c03      	ldr	r4, [pc, #12]	; (8001924 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8001918:	2301      	movs	r3, #1
 800191a:	7822      	ldrb	r2, [r4, #0]
 800191c:	f7ff ff7a 	bl	8001814 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8001920:	7020      	strb	r0, [r4, #0]
}
 8001922:	bd10      	pop	{r4, pc}
 8001924:	2000039d 	.word	0x2000039d

08001928 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
 8001928:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 800192a:	4a08      	ldr	r2, [pc, #32]	; (800194c <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
 800192c:	2300      	movs	r3, #0
 800192e:	7812      	ldrb	r2, [r2, #0]
 8001930:	f7ff ff70 	bl	8001814 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8001934:	f110 0f16 	cmn.w	r0, #22
 8001938:	d003      	beq.n	8001942 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 800193a:	4b05      	ldr	r3, [pc, #20]	; (8001950 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
 800193c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 800193e:	2807      	cmp	r0, #7
 8001940:	dd00      	ble.n	8001944 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
 8001942:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
 8001944:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
 8001946:	611a      	str	r2, [r3, #16]
 8001948:	3001      	adds	r0, #1
 800194a:	e7f8      	b.n	800193e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
 800194c:	2000039d 	.word	0x2000039d
 8001950:	e000ed90 	.word	0xe000ed90

08001954 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 8001954:	4b01      	ldr	r3, [pc, #4]	; (800195c <__stdout_hook_install+0x8>)
 8001956:	6018      	str	r0, [r3, #0]
}
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	20000018 	.word	0x20000018

08001960 <gpio_stm32_init>:
static int gpio_stm32_init(const struct device *device)
{
	const struct gpio_stm32_config *cfg = device->config;
	struct gpio_stm32_data *data = device->data;

	data->dev = device;
 8001960:	68c3      	ldr	r3, [r0, #12]
{
 8001962:	b513      	push	{r0, r1, r4, lr}
	const struct gpio_stm32_config *cfg = device->config;
 8001964:	6844      	ldr	r4, [r0, #4]
	data->dev = device;
 8001966:	6058      	str	r0, [r3, #4]
 8001968:	4816      	ldr	r0, [pc, #88]	; (80019c4 <gpio_stm32_init+0x64>)
 800196a:	f000 fdd7 	bl	800251c <z_impl_device_get_binding>
 800196e:	6883      	ldr	r3, [r0, #8]
 8001970:	f104 010c 	add.w	r1, r4, #12
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4798      	blx	r3

	/* enable clock for subsystem */
	const struct device *clk =
		device_get_binding(STM32_CLOCK_CONTROL_NAME);

	if (clock_control_on(clk,
 8001978:	bb00      	cbnz	r0, 80019bc <gpio_stm32_init+0x5c>
			     (clock_control_subsys_t *)&cfg->pclken) != 0) {
		return -EIO;
	}

#ifdef PWR_CR2_IOSV
	if (cfg->port == STM32_PORTG) {
 800197a:	68a3      	ldr	r3, [r4, #8]
 800197c:	2b06      	cmp	r3, #6
 800197e:	d109      	bne.n	8001994 <gpio_stm32_init+0x34>
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8001980:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <gpio_stm32_init+0x68>)
 8001982:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001984:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001988:	4a10      	ldr	r2, [pc, #64]	; (80019cc <gpio_stm32_init+0x6c>)
 800198a:	d005      	beq.n	8001998 <gpio_stm32_init+0x38>
  * @rmtoll CR2          IOSV          LL_PWR_EnableVddIO2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800198c:	6853      	ldr	r3, [r2, #4]
 800198e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001992:	6053      	str	r3, [r2, #4]
		z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
	}
#endif  /* PWR_CR2_IOSV */

	return 0;
}
 8001994:	b002      	add	sp, #8
 8001996:	bd10      	pop	{r4, pc}
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001998:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800199a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800199e:	6599      	str	r1, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80019a0:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80019a2:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80019a6:	9101      	str	r1, [sp, #4]
  (void)tmpreg;
 80019a8:	9901      	ldr	r1, [sp, #4]
 80019aa:	6851      	ldr	r1, [r2, #4]
 80019ac:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80019b0:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80019b2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019b4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80019b8:	659a      	str	r2, [r3, #88]	; 0x58
 80019ba:	e7eb      	b.n	8001994 <gpio_stm32_init+0x34>
		return -EIO;
 80019bc:	f06f 0004 	mvn.w	r0, #4
 80019c0:	e7e8      	b.n	8001994 <gpio_stm32_init+0x34>
 80019c2:	bf00      	nop
 80019c4:	080041a8 	.word	0x080041a8
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40007000 	.word	0x40007000

080019d0 <gpio_stm32_pin_interrupt_configure>:
{
 80019d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80019d4:	460c      	mov	r4, r1
 80019d6:	4611      	mov	r1, r2
	if (mode == GPIO_INT_MODE_DISABLED) {
 80019d8:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
	const struct gpio_stm32_config *cfg = dev->config;
 80019dc:	6847      	ldr	r7, [r0, #4]
	struct gpio_stm32_data *data = dev->data;
 80019de:	68c2      	ldr	r2, [r0, #12]
{
 80019e0:	461e      	mov	r6, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 80019e2:	d123      	bne.n	8001a2c <gpio_stm32_pin_interrupt_configure+0x5c>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80019e4:	f004 0303 	and.w	r3, r4, #3
 80019e8:	3304      	adds	r3, #4
 80019ea:	009a      	lsls	r2, r3, #2
 80019ec:	230f      	movs	r3, #15
 80019ee:	4093      	lsls	r3, r2
 80019f0:	ea43 0394 	orr.w	r3, r3, r4, lsr #2
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U)) >> POSITION_VAL(Line >> 16U));
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4936      	ldr	r1, [pc, #216]	; (8001ad0 <gpio_stm32_pin_interrupt_configure+0x100>)
 80019f8:	3202      	adds	r2, #2
 80019fa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80019fe:	0c19      	lsrs	r1, r3, #16
 8001a00:	ea02 4313 	and.w	r3, r2, r3, lsr #16
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a04:	fa91 f2a1 	rbit	r2, r1
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001a08:	fab2 f282 	clz	r2, r2
 8001a0c:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d109      	bne.n	8001a28 <gpio_stm32_pin_interrupt_configure+0x58>
			stm32_exti_disable(pin);
 8001a14:	4620      	mov	r0, r4
 8001a16:	f7ff fa3b 	bl	8000e90 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	f7ff fa8c 	bl	8000f38 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8001a20:	2100      	movs	r1, #0
 8001a22:	4620      	mov	r0, r4
 8001a24:	f7ff fa42 	bl	8000eac <stm32_exti_trigger>
	int err = 0;
 8001a28:	2500      	movs	r5, #0
 8001a2a:	e043      	b.n	8001ab4 <gpio_stm32_pin_interrupt_configure+0xe4>
	if (mode == GPIO_INT_MODE_LEVEL) {
 8001a2c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8001a30:	d048      	beq.n	8001ac4 <gpio_stm32_pin_interrupt_configure+0xf4>
	if (stm32_exti_set_callback(pin, gpio_stm32_isr, data) != 0) {
 8001a32:	4928      	ldr	r1, [pc, #160]	; (8001ad4 <gpio_stm32_pin_interrupt_configure+0x104>)
 8001a34:	4620      	mov	r0, r4
 8001a36:	f7ff fa6d 	bl	8000f14 <stm32_exti_set_callback>
 8001a3a:	4605      	mov	r5, r0
 8001a3c:	2800      	cmp	r0, #0
 8001a3e:	d144      	bne.n	8001aca <gpio_stm32_pin_interrupt_configure+0xfa>
	gpio_stm32_enable_int(cfg->port, pin);
 8001a40:	68bf      	ldr	r7, [r7, #8]
 8001a42:	4825      	ldr	r0, [pc, #148]	; (8001ad8 <gpio_stm32_pin_interrupt_configure+0x108>)
 8001a44:	f000 fd6a 	bl	800251c <z_impl_device_get_binding>
	struct stm32_pclken pclken = {
 8001a48:	4924      	ldr	r1, [pc, #144]	; (8001adc <gpio_stm32_pin_interrupt_configure+0x10c>)
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	c903      	ldmia	r1, {r0, r1}
 8001a4e:	466a      	mov	r2, sp
 8001a50:	e882 0003 	stmia.w	r2, {r0, r1}
 8001a54:	6899      	ldr	r1, [r3, #8]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f8d1 8000 	ldr.w	r8, [r1]
 8001a5c:	4611      	mov	r1, r2
 8001a5e:	47c0      	blx	r8
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8001a60:	f004 0103 	and.w	r1, r4, #3
 8001a64:	3104      	adds	r1, #4
 8001a66:	008b      	lsls	r3, r1, #2
 8001a68:	210f      	movs	r1, #15
 8001a6a:	4099      	lsls	r1, r3
 8001a6c:	ea41 0194 	orr.w	r1, r1, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8001a70:	b2ca      	uxtb	r2, r1
 8001a72:	0092      	lsls	r2, r2, #2
 8001a74:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001a78:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001a7c:	0c0b      	lsrs	r3, r1, #16
 8001a7e:	6890      	ldr	r0, [r2, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a80:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8001a84:	fab3 f383 	clz	r3, r3
 8001a88:	ea20 4111 	bic.w	r1, r0, r1, lsr #16
 8001a8c:	409f      	lsls	r7, r3
 8001a8e:	430f      	orrs	r7, r1
	switch (trig) {
 8001a90:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 8001a94:	6097      	str	r7, [r2, #8]
 8001a96:	d011      	beq.n	8001abc <gpio_stm32_pin_interrupt_configure+0xec>
 8001a98:	f5b6 2fc0 	cmp.w	r6, #393216	; 0x60000
 8001a9c:	d010      	beq.n	8001ac0 <gpio_stm32_pin_interrupt_configure+0xf0>
 8001a9e:	f5b6 3f00 	cmp.w	r6, #131072	; 0x20000
 8001aa2:	bf14      	ite	ne
 8001aa4:	2100      	movne	r1, #0
 8001aa6:	2102      	moveq	r1, #2
	stm32_exti_trigger(pin, edge);
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f7ff f9ff 	bl	8000eac <stm32_exti_trigger>
	stm32_exti_enable(pin);
 8001aae:	4620      	mov	r0, r4
 8001ab0:	f7ff f9e0 	bl	8000e74 <stm32_exti_enable>
}
 8001ab4:	4628      	mov	r0, r5
 8001ab6:	b002      	add	sp, #8
 8001ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		edge = STM32_EXTI_TRIG_RISING;
 8001abc:	2101      	movs	r1, #1
 8001abe:	e7f3      	b.n	8001aa8 <gpio_stm32_pin_interrupt_configure+0xd8>
		edge = STM32_EXTI_TRIG_BOTH;
 8001ac0:	2103      	movs	r1, #3
 8001ac2:	e7f1      	b.n	8001aa8 <gpio_stm32_pin_interrupt_configure+0xd8>
		err = -ENOTSUP;
 8001ac4:	f06f 0522 	mvn.w	r5, #34	; 0x22
 8001ac8:	e7f4      	b.n	8001ab4 <gpio_stm32_pin_interrupt_configure+0xe4>
		err = -EBUSY;
 8001aca:	f06f 050f 	mvn.w	r5, #15
	return err;
 8001ace:	e7f1      	b.n	8001ab4 <gpio_stm32_pin_interrupt_configure+0xe4>
 8001ad0:	40010000 	.word	0x40010000
 8001ad4:	0800354d 	.word	0x0800354d
 8001ad8:	080041a8 	.word	0x080041a8
 8001adc:	08003e60 	.word	0x08003e60

08001ae0 <pwm_stm32_pin_set>:
}

static int pwm_stm32_pin_set(const struct device *dev, uint32_t pwm,
			     uint32_t period_cycles, uint32_t pulse_cycles,
			     pwm_flags_t flags)
{
 8001ae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct pwm_stm32_config *cfg = dev->config;

	uint32_t channel;

	if (pwm < 1u || pwm > TIMER_MAX_CH) {
 8001ae4:	3901      	subs	r1, #1
 8001ae6:	2905      	cmp	r1, #5
	const struct pwm_stm32_config *cfg = dev->config;
 8001ae8:	6847      	ldr	r7, [r0, #4]
{
 8001aea:	b089      	sub	sp, #36	; 0x24
 8001aec:	4615      	mov	r5, r2
 8001aee:	4699      	mov	r9, r3
	if (pwm < 1u || pwm > TIMER_MAX_CH) {
 8001af0:	f200 80ac 	bhi.w	8001c4c <pwm_stm32_pin_set+0x16c>
		LOG_ERR("Invalid channel (%d)", pwm);
		return -EINVAL;
	}

	if (pulse_cycles > period_cycles) {
 8001af4:	4293      	cmp	r3, r2
 8001af6:	f200 80a9 	bhi.w	8001c4c <pwm_stm32_pin_set+0x16c>

	/*
	 * Non 32-bit timers count from 0 up to the value in the ARR register
	 * (16-bit). Thus period_cycles cannot be greater than UINT16_MAX + 1.
	 */
	if (!IS_TIM_32B_COUNTER_INSTANCE(cfg->timer) &&
 8001afa:	6838      	ldr	r0, [r7, #0]
 8001afc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001b00:	d006      	beq.n	8001b10 <pwm_stm32_pin_set+0x30>
 8001b02:	4b55      	ldr	r3, [pc, #340]	; (8001c58 <pwm_stm32_pin_set+0x178>)
 8001b04:	4298      	cmp	r0, r3
 8001b06:	d003      	beq.n	8001b10 <pwm_stm32_pin_set+0x30>
 8001b08:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001b0c:	f200 80a1 	bhi.w	8001c52 <pwm_stm32_pin_set+0x172>
	    (period_cycles > UINT16_MAX + 1)) {
		return -ENOTSUP;
	}

	channel = ch2ll[pwm - 1u];
 8001b10:	4b52      	ldr	r3, [pc, #328]	; (8001c5c <pwm_stm32_pin_set+0x17c>)
 8001b12:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]

	if (period_cycles == 0u) {
 8001b16:	b92d      	cbnz	r5, 8001b24 <pwm_stm32_pin_set+0x44>
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  CLEAR_BIT(TIMx->CCER, Channels);
 8001b18:	6a01      	ldr	r1, [r0, #32]
 8001b1a:	ea21 0104 	bic.w	r1, r1, r4
 8001b1e:	6201      	str	r1, [r0, #32]
		LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
	}



	return 0;
 8001b20:	2000      	movs	r0, #0
 8001b22:	e024      	b.n	8001b6e <pwm_stm32_pin_set+0x8e>
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_CC_IsEnabledChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8001b24:	6a03      	ldr	r3, [r0, #32]
 8001b26:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 8001b2a:	ea34 0303 	bics.w	r3, r4, r3
 8001b2e:	f006 0601 	and.w	r6, r6, #1
 8001b32:	d105      	bne.n	8001b40 <pwm_stm32_pin_set+0x60>
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001b34:	2c01      	cmp	r4, #1
	return LL_TIM_OCPOLARITY_LOW;
 8001b36:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8001b3a:	d154      	bne.n	8001be6 <pwm_stm32_pin_set+0x106>
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	e066      	b.n	8001c0e <pwm_stm32_pin_set+0x12e>
		LL_TIM_OC_StructInit(&oc_init);
 8001b40:	4668      	mov	r0, sp
 8001b42:	f001 fed9 	bl	80038f8 <LL_TIM_OC_StructInit>
		oc_init.OCState = LL_TIM_OCSTATE_ENABLE;
 8001b46:	f04f 0801 	mov.w	r8, #1
 8001b4a:	2360      	movs	r3, #96	; 0x60
 8001b4c:	e9cd 3800 	strd	r3, r8, [sp]
		return LL_TIM_OCPOLARITY_HIGH;
 8001b50:	fa06 f608 	lsl.w	r6, r6, r8
		oc_init.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001b54:	2300      	movs	r3, #0
		if (LL_TIM_OC_Init(cfg->timer, channel, &oc_init) != SUCCESS) {
 8001b56:	6838      	ldr	r0, [r7, #0]
		oc_init.CompareValue = pulse_cycles;
 8001b58:	f8cd 900c 	str.w	r9, [sp, #12]
		if (LL_TIM_OC_Init(cfg->timer, channel, &oc_init) != SUCCESS) {
 8001b5c:	466a      	mov	r2, sp
 8001b5e:	4621      	mov	r1, r4
		oc_init.OCPolarity = get_polarity(flags);
 8001b60:	9604      	str	r6, [sp, #16]
		oc_init.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001b62:	9306      	str	r3, [sp, #24]
		if (LL_TIM_OC_Init(cfg->timer, channel, &oc_init) != SUCCESS) {
 8001b64:	f000 fa3a 	bl	8001fdc <LL_TIM_OC_Init>
 8001b68:	b120      	cbz	r0, 8001b74 <pwm_stm32_pin_set+0x94>
			return -EIO;
 8001b6a:	f06f 0004 	mvn.w	r0, #4
}
 8001b6e:	b009      	add	sp, #36	; 0x24
 8001b70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LL_TIM_EnableARRPreload(cfg->timer);
 8001b74:	683b      	ldr	r3, [r7, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001b76:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001b78:	2c01      	cmp	r4, #1
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001b7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b7e:	601a      	str	r2, [r3, #0]
   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001b80:	d013      	beq.n	8001baa <pwm_stm32_pin_set+0xca>
 8001b82:	2c04      	cmp	r4, #4
 8001b84:	d023      	beq.n	8001bce <pwm_stm32_pin_set+0xee>
 8001b86:	2c10      	cmp	r4, #16
 8001b88:	d023      	beq.n	8001bd2 <pwm_stm32_pin_set+0xf2>
 8001b8a:	2c40      	cmp	r4, #64	; 0x40
 8001b8c:	d023      	beq.n	8001bd6 <pwm_stm32_pin_set+0xf6>
 8001b8e:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8001b92:	d022      	beq.n	8001bda <pwm_stm32_pin_set+0xfa>
 8001b94:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001b98:	d021      	beq.n	8001bde <pwm_stm32_pin_set+0xfe>
 8001b9a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8001b9e:	d020      	beq.n	8001be2 <pwm_stm32_pin_set+0x102>
 8001ba0:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8001ba4:	bf0c      	ite	eq
 8001ba6:	2007      	moveq	r0, #7
 8001ba8:	2008      	movne	r0, #8
   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001baa:	4a2d      	ldr	r2, [pc, #180]	; (8001c60 <pwm_stm32_pin_set+0x180>)
 8001bac:	5c14      	ldrb	r4, [r2, r0]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001bae:	4a2d      	ldr	r2, [pc, #180]	; (8001c64 <pwm_stm32_pin_set+0x184>)
   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001bb0:	f103 0118 	add.w	r1, r3, #24
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001bb4:	5c10      	ldrb	r0, [r2, r0]
 8001bb6:	5866      	ldr	r6, [r4, r1]
 8001bb8:	2208      	movs	r2, #8
 8001bba:	4082      	lsls	r2, r0
 8001bbc:	4332      	orrs	r2, r6
 8001bbe:	5062      	str	r2, [r4, r1]
		LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
 8001bc0:	3d01      	subs	r5, #1
  WRITE_REG(TIMx->ARR, AutoReload);
 8001bc2:	62dd      	str	r5, [r3, #44]	; 0x2c
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001bc4:	695a      	ldr	r2, [r3, #20]
 8001bc6:	f042 0201 	orr.w	r2, r2, #1
 8001bca:	615a      	str	r2, [r3, #20]
 8001bcc:	e7a8      	b.n	8001b20 <pwm_stm32_pin_set+0x40>
   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001bce:	4640      	mov	r0, r8
 8001bd0:	e7eb      	b.n	8001baa <pwm_stm32_pin_set+0xca>
 8001bd2:	2002      	movs	r0, #2
 8001bd4:	e7e9      	b.n	8001baa <pwm_stm32_pin_set+0xca>
 8001bd6:	2003      	movs	r0, #3
 8001bd8:	e7e7      	b.n	8001baa <pwm_stm32_pin_set+0xca>
 8001bda:	2004      	movs	r0, #4
 8001bdc:	e7e5      	b.n	8001baa <pwm_stm32_pin_set+0xca>
 8001bde:	2005      	movs	r0, #5
 8001be0:	e7e3      	b.n	8001baa <pwm_stm32_pin_set+0xca>
 8001be2:	2006      	movs	r0, #6
 8001be4:	e7e1      	b.n	8001baa <pwm_stm32_pin_set+0xca>
   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001be6:	2c04      	cmp	r4, #4
 8001be8:	d024      	beq.n	8001c34 <pwm_stm32_pin_set+0x154>
 8001bea:	2c10      	cmp	r4, #16
 8001bec:	d024      	beq.n	8001c38 <pwm_stm32_pin_set+0x158>
 8001bee:	2c40      	cmp	r4, #64	; 0x40
 8001bf0:	d024      	beq.n	8001c3c <pwm_stm32_pin_set+0x15c>
 8001bf2:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8001bf6:	d023      	beq.n	8001c40 <pwm_stm32_pin_set+0x160>
 8001bf8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001bfc:	d022      	beq.n	8001c44 <pwm_stm32_pin_set+0x164>
 8001bfe:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8001c02:	d021      	beq.n	8001c48 <pwm_stm32_pin_set+0x168>
 8001c04:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8001c08:	bf0c      	ite	eq
 8001c0a:	2207      	moveq	r2, #7
 8001c0c:	2208      	movne	r2, #8
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8001c0e:	4c16      	ldr	r4, [pc, #88]	; (8001c68 <pwm_stm32_pin_set+0x188>)
 8001c10:	6a03      	ldr	r3, [r0, #32]
 8001c12:	5ca4      	ldrb	r4, [r4, r2]
 8001c14:	2202      	movs	r2, #2
 8001c16:	40a2      	lsls	r2, r4
 8001c18:	ea23 0302 	bic.w	r3, r3, r2
 8001c1c:	40a6      	lsls	r6, r4
 8001c1e:	431e      	orrs	r6, r3
		set_timer_compare[pwm - 1u](cfg->timer, pulse_cycles);
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <pwm_stm32_pin_set+0x18c>)
 8001c22:	6206      	str	r6, [r0, #32]
 8001c24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c28:	4649      	mov	r1, r9
 8001c2a:	4798      	blx	r3
		LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	3d01      	subs	r5, #1
  WRITE_REG(TIMx->ARR, AutoReload);
 8001c30:	62dd      	str	r5, [r3, #44]	; 0x2c
 8001c32:	e775      	b.n	8001b20 <pwm_stm32_pin_set+0x40>
   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001c34:	2201      	movs	r2, #1
 8001c36:	e7ea      	b.n	8001c0e <pwm_stm32_pin_set+0x12e>
 8001c38:	2202      	movs	r2, #2
 8001c3a:	e7e8      	b.n	8001c0e <pwm_stm32_pin_set+0x12e>
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	e7e6      	b.n	8001c0e <pwm_stm32_pin_set+0x12e>
 8001c40:	2204      	movs	r2, #4
 8001c42:	e7e4      	b.n	8001c0e <pwm_stm32_pin_set+0x12e>
 8001c44:	2205      	movs	r2, #5
 8001c46:	e7e2      	b.n	8001c0e <pwm_stm32_pin_set+0x12e>
 8001c48:	2206      	movs	r2, #6
 8001c4a:	e7e0      	b.n	8001c0e <pwm_stm32_pin_set+0x12e>
		return -EINVAL;
 8001c4c:	f06f 0015 	mvn.w	r0, #21
 8001c50:	e78d      	b.n	8001b6e <pwm_stm32_pin_set+0x8e>
		return -ENOTSUP;
 8001c52:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8001c56:	e78a      	b.n	8001b6e <pwm_stm32_pin_set+0x8e>
 8001c58:	40000c00 	.word	0x40000c00
 8001c5c:	08003f84 	.word	0x08003f84
 8001c60:	080041f4 	.word	0x080041f4
 8001c64:	08004206 	.word	0x08004206
 8001c68:	080041fd 	.word	0x080041fd
 8001c6c:	08003fc4 	.word	0x08003fc4

08001c70 <pwm_stm32_init>:
	.pin_set = pwm_stm32_pin_set,
	.get_cycles_per_sec = pwm_stm32_get_cycles_per_sec,
};

static int pwm_stm32_init(const struct device *dev)
{
 8001c70:	b570      	push	{r4, r5, r6, lr}
	struct pwm_stm32_data *data = dev->data;
 8001c72:	68c6      	ldr	r6, [r0, #12]
	const struct pwm_stm32_config *cfg = dev->config;
 8001c74:	6844      	ldr	r4, [r0, #4]
{
 8001c76:	b086      	sub	sp, #24
 8001c78:	4827      	ldr	r0, [pc, #156]	; (8001d18 <pwm_stm32_init+0xa8>)
 8001c7a:	f000 fc4f 	bl	800251c <z_impl_device_get_binding>
 8001c7e:	6883      	ldr	r3, [r0, #8]

	/* enable clock and store its speed */
	clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
	__ASSERT_NO_MSG(clk);

	r = clock_control_on(clk, (clock_control_subsys_t *)&cfg->pclken);
 8001c80:	f104 0508 	add.w	r5, r4, #8
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4629      	mov	r1, r5
 8001c88:	4798      	blx	r3
	if (r < 0) {
 8001c8a:	2800      	cmp	r0, #0
 8001c8c:	db3f      	blt.n	8001d0e <pwm_stm32_init+0x9e>
 8001c8e:	4822      	ldr	r0, [pc, #136]	; (8001d18 <pwm_stm32_init+0xa8>)
 8001c90:	f000 fc44 	bl	800251c <z_impl_device_get_binding>
		(const struct clock_control_driver_api *)dev->api;

	__ASSERT(api->get_rate != NULL, "%s not implemented for device %s",
		__func__, dev->name);

	return api->get_rate(dev, sys, rate);
 8001c94:	6883      	ldr	r3, [r0, #8]
 8001c96:	aa01      	add	r2, sp, #4
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	4629      	mov	r1, r5
 8001c9c:	4798      	blx	r3
	if (r < 0) {
 8001c9e:	2800      	cmp	r0, #0
 8001ca0:	db35      	blt.n	8001d0e <pwm_stm32_init+0x9e>
		*tim_clk = bus_clk;
 8001ca2:	9b01      	ldr	r3, [sp, #4]
 8001ca4:	6033      	str	r3, [r6, #0]
		LOG_ERR("Could not obtain timer clock (%d)", r);
		return r;
	}

	/* configure pinmux */
	r = stm32_dt_pinctrl_configure(cfg->pinctrl,
 8001ca6:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8001caa:	6822      	ldr	r2, [r4, #0]
 8001cac:	f7ff fa2c 	bl	8001108 <stm32_dt_pinctrl_configure>
				       cfg->pinctrl_len,
				       (uint32_t)cfg->timer);
	if (r < 0) {
 8001cb0:	2800      	cmp	r0, #0
 8001cb2:	db2c      	blt.n	8001d0e <pwm_stm32_init+0x9e>
		LOG_ERR("PWM pinctrl setup failed (%d)", r);
		return r;
	}

	/* initialize timer */
	LL_TIM_StructInit(&init);
 8001cb4:	a801      	add	r0, sp, #4
 8001cb6:	f001 fe16 	bl	80038e6 <LL_TIM_StructInit>

	init.Prescaler = cfg->prescaler;
 8001cba:	6863      	ldr	r3, [r4, #4]
 8001cbc:	f8ad 3004 	strh.w	r3, [sp, #4]
	init.CounterMode = LL_TIM_COUNTERMODE_UP;
	init.Autoreload = 0u;
	init.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
	init.RepetitionCounter = 0u;
	if (LL_TIM_Init(cfg->timer, &init) != SUCCESS) {
 8001cc0:	6820      	ldr	r0, [r4, #0]
	init.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001cc2:	2300      	movs	r3, #0
	if (LL_TIM_Init(cfg->timer, &init) != SUCCESS) {
 8001cc4:	a901      	add	r1, sp, #4
	init.Autoreload = 0u;
 8001cc6:	e9cd 3302 	strd	r3, r3, [sp, #8]
	init.RepetitionCounter = 0u;
 8001cca:	e9cd 3304 	strd	r3, r3, [sp, #16]
	if (LL_TIM_Init(cfg->timer, &init) != SUCCESS) {
 8001cce:	f000 f921 	bl	8001f14 <LL_TIM_Init>
 8001cd2:	b9f0      	cbnz	r0, 8001d12 <pwm_stm32_init+0xa2>
		LOG_ERR("Could not initialize timer");
		return -EIO;
	}

	/* enable outputs and counter */
	if (IS_TIM_BREAK_INSTANCE(cfg->timer)) {
 8001cd4:	6823      	ldr	r3, [r4, #0]
 8001cd6:	4a11      	ldr	r2, [pc, #68]	; (8001d1c <pwm_stm32_init+0xac>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d00f      	beq.n	8001cfc <pwm_stm32_init+0x8c>
 8001cdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d00b      	beq.n	8001cfc <pwm_stm32_init+0x8c>
 8001ce4:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d007      	beq.n	8001cfc <pwm_stm32_init+0x8c>
 8001cec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d003      	beq.n	8001cfc <pwm_stm32_init+0x8c>
 8001cf4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d103      	bne.n	8001d04 <pwm_stm32_init+0x94>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8001cfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d02:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
		LL_TIM_EnableAllOutputs(cfg->timer);
	}

	LL_TIM_EnableCounter(cfg->timer);

	return 0;
 8001d0c:	2000      	movs	r0, #0
}
 8001d0e:	b006      	add	sp, #24
 8001d10:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
 8001d12:	f06f 0004 	mvn.w	r0, #4
 8001d16:	e7fa      	b.n	8001d0e <pwm_stm32_init+0x9e>
 8001d18:	080041a8 	.word	0x080041a8
 8001d1c:	40012c00 	.word	0x40012c00

08001d20 <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(const struct device *dev)
{
 8001d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8001d24:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8001d28:	68c7      	ldr	r7, [r0, #12]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8001d2a:	4645      	mov	r5, r8
{
 8001d2c:	4606      	mov	r6, r0
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8001d2e:	f855 4b08 	ldr.w	r4, [r5], #8
 8001d32:	482b      	ldr	r0, [pc, #172]	; (8001de0 <uart_stm32_init+0xc0>)
 8001d34:	f000 fbf2 	bl	800251c <z_impl_device_get_binding>
	return api->on(dev, sys);
 8001d38:	6883      	ldr	r3, [r0, #8]
	data->clock = clk;
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	4629      	mov	r1, r5
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4798      	blx	r3
	uint32_t ll_datawidth;
	int err;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 8001d42:	4605      	mov	r5, r0
 8001d44:	2800      	cmp	r0, #0
 8001d46:	d147      	bne.n	8001dd8 <uart_stm32_init+0xb8>
	}

	/* Configure dt provided device signals when available */
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
					 config->pinctrl_list_size,
					 (uint32_t)UART_STRUCT(dev));
 8001d48:	6873      	ldr	r3, [r6, #4]
	err = stm32_dt_pinctrl_configure(config->pinctrl_list,
 8001d4a:	e9d8 0106 	ldrd	r0, r1, [r8, #24]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	f7ff f9da 	bl	8001108 <stm32_dt_pinctrl_configure>
	if (err < 0) {
 8001d54:	2800      	cmp	r0, #0
 8001d56:	db33      	blt.n	8001dc0 <uart_stm32_init+0xa0>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001d58:	6823      	ldr	r3, [r4, #0]
 8001d5a:	f023 0301 	bic.w	r3, r3, #1
 8001d5e:	6023      	str	r3, [r4, #0]
  *         @arg @ref LL_USART_DIRECTION_TX_RX
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8001d60:	6823      	ldr	r3, [r4, #0]
 8001d62:	f043 030c 	orr.w	r3, r3, #12
 8001d66:	6023      	str	r3, [r4, #0]
				      LL_USART_DIRECTION_TX_RX);

	/* Determine the datawidth and parity. If we use other parity than
	 * 'none' we must use datawidth = 9 (to get 8 databit + 1 parity bit).
	 */
	if (config->parity == 2) {
 8001d68:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d029      	beq.n	8001dc4 <uart_stm32_init+0xa4>
		/* 8 databit, 1 parity bit, parity even */
		ll_parity = LL_USART_PARITY_EVEN;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else if (config->parity == 1) {
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d02c      	beq.n	8001dce <uart_stm32_init+0xae>
			LOG_WRN("Invalid parity setting '%d'."
				"Defaulting to 'none'.", config->parity);
		}
		/* 8 databit, parity none */
		ll_parity = LL_USART_PARITY_NONE;
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 8001d74:	462b      	mov	r3, r5
		ll_parity = LL_USART_PARITY_NONE;
 8001d76:	4628      	mov	r0, r5
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity,
                                              uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8001d78:	6822      	ldr	r2, [r4, #0]
 8001d7a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001d7e:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001d82:	4303      	orrs	r3, r0
 8001d84:	4313      	orrs	r3, r2
 8001d86:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001d88:	6863      	ldr	r3, [r4, #4]
 8001d8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d8e:	6063      	str	r3, [r4, #4]
	LL_USART_ConfigCharacter(UartInstance,
				 ll_datawidth,
				 ll_parity,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 8001d90:	f898 3010 	ldrb.w	r3, [r8, #16]
 8001d94:	b12b      	cbz	r3, 8001da2 <uart_stm32_init+0x82>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8001d96:	6873      	ldr	r3, [r6, #4]
 8001d98:	681a      	ldr	r2, [r3, #0]
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001d9a:	6893      	ldr	r3, [r2, #8]
 8001d9c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001da0:	6093      	str	r3, [r2, #8]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8001da2:	6839      	ldr	r1, [r7, #0]
 8001da4:	4630      	mov	r0, r6
 8001da6:	f001 fd14 	bl	80037d2 <uart_stm32_set_baudrate>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001daa:	6823      	ldr	r3, [r4, #0]
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6023      	str	r3, [r4, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8001db2:	69e3      	ldr	r3, [r4, #28]
 8001db4:	029a      	lsls	r2, r3, #10
 8001db6:	d5fc      	bpl.n	8001db2 <uart_stm32_init+0x92>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8001db8:	69e3      	ldr	r3, [r4, #28]
 8001dba:	025b      	lsls	r3, r3, #9
 8001dbc:	d5fc      	bpl.n	8001db8 <uart_stm32_init+0x98>
#endif /* !USART_ISR_REACK */

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	config->uconf.irq_config_func(dev);
#endif
	return 0;
 8001dbe:	2000      	movs	r0, #0
}
 8001dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8001dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 8001dc8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001dcc:	e7d4      	b.n	8001d78 <uart_stm32_init+0x58>
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 8001dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_ODD;
 8001dd2:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8001dd6:	e7cf      	b.n	8001d78 <uart_stm32_init+0x58>
		return -EIO;
 8001dd8:	f06f 0004 	mvn.w	r0, #4
 8001ddc:	e7f0      	b.n	8001dc0 <uart_stm32_init+0xa0>
 8001dde:	bf00      	nop
 8001de0:	080041a8 	.word	0x080041a8

08001de4 <uart_stm32_configure>:
{
 8001de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 8001de8:	790a      	ldrb	r2, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8001dea:	6843      	ldr	r3, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8001dec:	68c6      	ldr	r6, [r0, #12]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8001dee:	681c      	ldr	r4, [r3, #0]
	switch (parity) {
 8001df0:	2a01      	cmp	r2, #1
{
 8001df2:	460d      	mov	r5, r1
	switch (parity) {
 8001df4:	f000 8081 	beq.w	8001efa <uart_stm32_configure+0x116>
		return LL_USART_PARITY_NONE;
 8001df8:	2a02      	cmp	r2, #2
 8001dfa:	bf0c      	ite	eq
 8001dfc:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8001e00:	2100      	movne	r1, #0
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8001e02:	f895 9005 	ldrb.w	r9, [r5, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits);
 8001e06:	f895 8006 	ldrb.w	r8, [r5, #6]
 8001e0a:	f1b9 0f02 	cmp.w	r9, #2
 8001e0e:	bf96      	itet	ls
 8001e10:	4b3e      	ldrls	r3, [pc, #248]	; (8001f0c <uart_stm32_configure+0x128>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8001e12:	f44f 5e00 	movhi.w	lr, #8192	; 0x2000
 8001e16:	f833 e019 	ldrhls.w	lr, [r3, r9, lsl #1]
	switch (db) {
 8001e1a:	f1b8 0f02 	cmp.w	r8, #2
 8001e1e:	d06f      	beq.n	8001f00 <uart_stm32_configure+0x11c>
		return LL_USART_DATAWIDTH_8B;
 8001e20:	f1b8 0f04 	cmp.w	r8, #4
 8001e24:	bf0c      	ite	eq
 8001e26:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 8001e2a:	2300      	movne	r3, #0
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8001e2c:	79ef      	ldrb	r7, [r5, #7]
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 8001e2e:	3a03      	subs	r2, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 8001e30:	2f01      	cmp	r7, #1
 8001e32:	bf14      	ite	ne
 8001e34:	f04f 0c00 	movne.w	ip, #0
 8001e38:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 8001e3c:	2a01      	cmp	r2, #1
 8001e3e:	d962      	bls.n	8001f06 <uart_stm32_configure+0x122>
	if (UART_CFG_STOP_BITS_0_5 == cfg->stop_bits) {
 8001e40:	f019 0ffd 	tst.w	r9, #253	; 0xfd
 8001e44:	d05f      	beq.n	8001f06 <uart_stm32_configure+0x122>
	if ((UART_CFG_DATA_BITS_5 == cfg->data_bits) ||
 8001e46:	f1b8 0f01 	cmp.w	r8, #1
 8001e4a:	d95c      	bls.n	8001f06 <uart_stm32_configure+0x122>
	if (UART_CFG_FLOW_CTRL_NONE != cfg->flow_ctrl) {
 8001e4c:	b1c7      	cbz	r7, 8001e80 <uart_stm32_configure+0x9c>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 8001e4e:	4a30      	ldr	r2, [pc, #192]	; (8001f10 <uart_stm32_configure+0x12c>)
 8001e50:	4294      	cmp	r4, r2
 8001e52:	d013      	beq.n	8001e7c <uart_stm32_configure+0x98>
 8001e54:	f5a2 4274 	sub.w	r2, r2, #62464	; 0xf400
 8001e58:	4294      	cmp	r4, r2
 8001e5a:	d00f      	beq.n	8001e7c <uart_stm32_configure+0x98>
 8001e5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e60:	4294      	cmp	r4, r2
 8001e62:	d00b      	beq.n	8001e7c <uart_stm32_configure+0x98>
 8001e64:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e68:	4294      	cmp	r4, r2
 8001e6a:	d007      	beq.n	8001e7c <uart_stm32_configure+0x98>
 8001e6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e70:	4294      	cmp	r4, r2
 8001e72:	d003      	beq.n	8001e7c <uart_stm32_configure+0x98>
 8001e74:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8001e78:	4294      	cmp	r4, r2
 8001e7a:	d144      	bne.n	8001f06 <uart_stm32_configure+0x122>
 8001e7c:	2f01      	cmp	r7, #1
 8001e7e:	d142      	bne.n	8001f06 <uart_stm32_configure+0x122>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001e80:	6822      	ldr	r2, [r4, #0]
 8001e82:	f022 0201 	bic.w	r2, r2, #1
 8001e86:	6022      	str	r2, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8001e88:	6822      	ldr	r2, [r4, #0]
 8001e8a:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
	if (parity != uart_stm32_get_parity(dev)) {
 8001e8e:	428a      	cmp	r2, r1
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8001e90:	bf1f      	itttt	ne
 8001e92:	6827      	ldrne	r7, [r4, #0]
 8001e94:	f427 67c0 	bicne.w	r7, r7, #1536	; 0x600
 8001e98:	430f      	orrne	r7, r1
 8001e9a:	6027      	strne	r7, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8001e9c:	6862      	ldr	r2, [r4, #4]
 8001e9e:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8001ea2:	4596      	cmp	lr, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001ea4:	bf1f      	itttt	ne
 8001ea6:	6861      	ldrne	r1, [r4, #4]
 8001ea8:	f421 5140 	bicne.w	r1, r1, #12288	; 0x3000
 8001eac:	ea41 010e 	orrne.w	r1, r1, lr
 8001eb0:	6061      	strne	r1, [r4, #4]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8001eb2:	6822      	ldr	r2, [r4, #0]
	if (cfg->baudrate != data->baud_rate) {
 8001eb4:	6829      	ldr	r1, [r5, #0]
 8001eb6:	f002 2210 	and.w	r2, r2, #268439552	; 0x10001000
	if (databits != uart_stm32_get_databits(dev)) {
 8001eba:	429a      	cmp	r2, r3
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8001ebc:	bf1f      	itttt	ne
 8001ebe:	6822      	ldrne	r2, [r4, #0]
 8001ec0:	f022 2210 	bicne.w	r2, r2, #268439552	; 0x10001000
 8001ec4:	431a      	orrne	r2, r3
 8001ec6:	6022      	strne	r2, [r4, #0]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8001ec8:	68a3      	ldr	r3, [r4, #8]
 8001eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8001ece:	459c      	cmp	ip, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001ed0:	bf1f      	itttt	ne
 8001ed2:	68a3      	ldrne	r3, [r4, #8]
 8001ed4:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 8001ed8:	ea43 030c 	orrne.w	r3, r3, ip
 8001edc:	60a3      	strne	r3, [r4, #8]
	if (cfg->baudrate != data->baud_rate) {
 8001ede:	6833      	ldr	r3, [r6, #0]
 8001ee0:	4299      	cmp	r1, r3
 8001ee2:	d003      	beq.n	8001eec <uart_stm32_configure+0x108>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8001ee4:	f001 fc75 	bl	80037d2 <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8001ee8:	682b      	ldr	r3, [r5, #0]
 8001eea:	6033      	str	r3, [r6, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001eec:	6823      	ldr	r3, [r4, #0]
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6023      	str	r3, [r4, #0]
	return 0;
 8001ef4:	2000      	movs	r0, #0
};
 8001ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	switch (parity) {
 8001efa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001efe:	e780      	b.n	8001e02 <uart_stm32_configure+0x1e>
	switch (db) {
 8001f00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001f04:	e792      	b.n	8001e2c <uart_stm32_configure+0x48>
		return -ENOTSUP;
 8001f06:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8001f0a:	e7f4      	b.n	8001ef6 <uart_stm32_configure+0x112>
 8001f0c:	08004068 	.word	0x08004068
 8001f10:	40013800 	.word	0x40013800

08001f14 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f14:	4a2f      	ldr	r2, [pc, #188]	; (8001fd4 <LL_TIM_Init+0xc0>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001f16:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f18:	4290      	cmp	r0, r2
 8001f1a:	d012      	beq.n	8001f42 <LL_TIM_Init+0x2e>
 8001f1c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001f20:	d00f      	beq.n	8001f42 <LL_TIM_Init+0x2e>
 8001f22:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001f26:	4290      	cmp	r0, r2
 8001f28:	d00b      	beq.n	8001f42 <LL_TIM_Init+0x2e>
 8001f2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f2e:	4290      	cmp	r0, r2
 8001f30:	d007      	beq.n	8001f42 <LL_TIM_Init+0x2e>
 8001f32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f36:	4290      	cmp	r0, r2
 8001f38:	d003      	beq.n	8001f42 <LL_TIM_Init+0x2e>
 8001f3a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8001f3e:	4290      	cmp	r0, r2
 8001f40:	d119      	bne.n	8001f76 <LL_TIM_Init+0x62>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001f42:	684a      	ldr	r2, [r1, #4]
 8001f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f48:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f4a:	4a22      	ldr	r2, [pc, #136]	; (8001fd4 <LL_TIM_Init+0xc0>)
 8001f4c:	4290      	cmp	r0, r2
 8001f4e:	d01d      	beq.n	8001f8c <LL_TIM_Init+0x78>
 8001f50:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001f54:	d01a      	beq.n	8001f8c <LL_TIM_Init+0x78>
 8001f56:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001f5a:	4290      	cmp	r0, r2
 8001f5c:	d016      	beq.n	8001f8c <LL_TIM_Init+0x78>
 8001f5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f62:	4290      	cmp	r0, r2
 8001f64:	d012      	beq.n	8001f8c <LL_TIM_Init+0x78>
 8001f66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f6a:	4290      	cmp	r0, r2
 8001f6c:	d00e      	beq.n	8001f8c <LL_TIM_Init+0x78>
 8001f6e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8001f72:	4290      	cmp	r0, r2
 8001f74:	d00a      	beq.n	8001f8c <LL_TIM_Init+0x78>
 8001f76:	4a18      	ldr	r2, [pc, #96]	; (8001fd8 <LL_TIM_Init+0xc4>)
 8001f78:	4290      	cmp	r0, r2
 8001f7a:	d007      	beq.n	8001f8c <LL_TIM_Init+0x78>
 8001f7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f80:	4290      	cmp	r0, r2
 8001f82:	d003      	beq.n	8001f8c <LL_TIM_Init+0x78>
 8001f84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f88:	4290      	cmp	r0, r2
 8001f8a:	d103      	bne.n	8001f94 <LL_TIM_Init+0x80>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001f8c:	68ca      	ldr	r2, [r1, #12]
 8001f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f92:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001f94:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001f96:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001f98:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001f9a:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001f9c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	; (8001fd4 <LL_TIM_Init+0xc0>)
 8001fa0:	4298      	cmp	r0, r3
 8001fa2:	d00f      	beq.n	8001fc4 <LL_TIM_Init+0xb0>
 8001fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fa8:	4298      	cmp	r0, r3
 8001faa:	d00b      	beq.n	8001fc4 <LL_TIM_Init+0xb0>
 8001fac:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001fb0:	4298      	cmp	r0, r3
 8001fb2:	d007      	beq.n	8001fc4 <LL_TIM_Init+0xb0>
 8001fb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fb8:	4298      	cmp	r0, r3
 8001fba:	d003      	beq.n	8001fc4 <LL_TIM_Init+0xb0>
 8001fbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fc0:	4298      	cmp	r0, r3
 8001fc2:	d101      	bne.n	8001fc8 <LL_TIM_Init+0xb4>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001fc4:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001fc6:	6303      	str	r3, [r0, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001fc8:	6943      	ldr	r3, [r0, #20]
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	4770      	bx	lr
 8001fd4:	40012c00 	.word	0x40012c00
 8001fd8:	40014000 	.word	0x40014000

08001fdc <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 8001fdc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
{
 8001fe0:	b530      	push	{r4, r5, lr}
  switch (Channel)
 8001fe2:	f000 8111 	beq.w	8002208 <LL_TIM_OC_Init+0x22c>
 8001fe6:	d80a      	bhi.n	8001ffe <LL_TIM_OC_Init+0x22>
 8001fe8:	2910      	cmp	r1, #16
 8001fea:	f000 8086 	beq.w	80020fa <LL_TIM_OC_Init+0x11e>
 8001fee:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001ff2:	f000 80c6 	beq.w	8002182 <LL_TIM_OC_Init+0x1a6>
 8001ff6:	2901      	cmp	r1, #1
 8001ff8:	d03d      	beq.n	8002076 <LL_TIM_OC_Init+0x9a>
 8001ffa:	2001      	movs	r0, #1
    default:
      break;
  }

  return result;
}
 8001ffc:	bd30      	pop	{r4, r5, pc}
  switch (Channel)
 8001ffe:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8002002:	f000 8136 	beq.w	8002272 <LL_TIM_OC_Init+0x296>
 8002006:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800200a:	d1f6      	bne.n	8001ffa <LL_TIM_OC_Init+0x1e>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800200c:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800200e:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8002010:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002014:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002016:	6a03      	ldr	r3, [r0, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002018:	6d41      	ldr	r1, [r0, #84]	; 0x54
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800201a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800201e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8002022:	ea41 2404 	orr.w	r4, r1, r4, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8002026:	6911      	ldr	r1, [r2, #16]
 8002028:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800202c:	ea43 5301 	orr.w	r3, r3, r1, lsl #20

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8002030:	6851      	ldr	r1, [r2, #4]
 8002032:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002036:	ea43 5301 	orr.w	r3, r3, r1, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800203a:	49a8      	ldr	r1, [pc, #672]	; (80022dc <LL_TIM_OC_Init+0x300>)
 800203c:	4288      	cmp	r0, r1
 800203e:	d00f      	beq.n	8002060 <LL_TIM_OC_Init+0x84>
 8002040:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002044:	4288      	cmp	r0, r1
 8002046:	d00b      	beq.n	8002060 <LL_TIM_OC_Init+0x84>
 8002048:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800204c:	4288      	cmp	r0, r1
 800204e:	d007      	beq.n	8002060 <LL_TIM_OC_Init+0x84>
 8002050:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002054:	4288      	cmp	r0, r1
 8002056:	d003      	beq.n	8002060 <LL_TIM_OC_Init+0x84>
 8002058:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800205c:	4288      	cmp	r0, r1
 800205e:	d106      	bne.n	800206e <LL_TIM_OC_Init+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8002060:	6841      	ldr	r1, [r0, #4]
 8002062:	6995      	ldr	r5, [r2, #24]
 8002064:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002068:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 800206c:	6041      	str	r1, [r0, #4]

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 800206e:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002070:	6544      	str	r4, [r0, #84]	; 0x54
  WRITE_REG(TIMx->CCR6, CompareValue);
 8002072:	65c2      	str	r2, [r0, #92]	; 0x5c
 8002074:	e03e      	b.n	80020f4 <LL_TIM_OC_Init+0x118>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002076:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002078:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800207a:	f023 0301 	bic.w	r3, r3, #1
 800207e:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002080:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002082:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002084:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002086:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800208a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 800208e:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002090:	6915      	ldr	r5, [r2, #16]
 8002092:	f023 0302 	bic.w	r3, r3, #2
 8002096:	432b      	orrs	r3, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002098:	6855      	ldr	r5, [r2, #4]
 800209a:	f023 0301 	bic.w	r3, r3, #1
 800209e:	432b      	orrs	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020a0:	4d8e      	ldr	r5, [pc, #568]	; (80022dc <LL_TIM_OC_Init+0x300>)
 80020a2:	42a8      	cmp	r0, r5
 80020a4:	d00f      	beq.n	80020c6 <LL_TIM_OC_Init+0xea>
 80020a6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80020aa:	42a8      	cmp	r0, r5
 80020ac:	d00b      	beq.n	80020c6 <LL_TIM_OC_Init+0xea>
 80020ae:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80020b2:	42a8      	cmp	r0, r5
 80020b4:	d007      	beq.n	80020c6 <LL_TIM_OC_Init+0xea>
 80020b6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020ba:	42a8      	cmp	r0, r5
 80020bc:	d003      	beq.n	80020c6 <LL_TIM_OC_Init+0xea>
 80020be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020c2:	42a8      	cmp	r0, r5
 80020c4:	d112      	bne.n	80020ec <LL_TIM_OC_Init+0x110>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80020c6:	6955      	ldr	r5, [r2, #20]
 80020c8:	f023 0308 	bic.w	r3, r3, #8
 80020cc:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80020d0:	6895      	ldr	r5, [r2, #8]
 80020d2:	f023 0304 	bic.w	r3, r3, #4
 80020d6:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80020da:	6995      	ldr	r5, [r2, #24]
 80020dc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80020e0:	4329      	orrs	r1, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80020e2:	69d5      	ldr	r5, [r2, #28]
 80020e4:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80020e8:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80020ec:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80020ee:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80020f0:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80020f2:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80020f4:	6203      	str	r3, [r0, #32]
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80020f6:	2000      	movs	r0, #0
      break;
 80020f8:	e780      	b.n	8001ffc <LL_TIM_OC_Init+0x20>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80020fa:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80020fc:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80020fe:	f023 0310 	bic.w	r3, r3, #16
 8002102:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002104:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002106:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002108:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800210a:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800210e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8002112:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002116:	6915      	ldr	r5, [r2, #16]
 8002118:	f023 0320 	bic.w	r3, r3, #32
 800211c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002120:	6855      	ldr	r5, [r2, #4]
 8002122:	f023 0310 	bic.w	r3, r3, #16
 8002126:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800212a:	4d6c      	ldr	r5, [pc, #432]	; (80022dc <LL_TIM_OC_Init+0x300>)
 800212c:	42a8      	cmp	r0, r5
 800212e:	d00f      	beq.n	8002150 <LL_TIM_OC_Init+0x174>
 8002130:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002134:	42a8      	cmp	r0, r5
 8002136:	d00b      	beq.n	8002150 <LL_TIM_OC_Init+0x174>
 8002138:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800213c:	42a8      	cmp	r0, r5
 800213e:	d007      	beq.n	8002150 <LL_TIM_OC_Init+0x174>
 8002140:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002144:	42a8      	cmp	r0, r5
 8002146:	d003      	beq.n	8002150 <LL_TIM_OC_Init+0x174>
 8002148:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800214c:	42a8      	cmp	r0, r5
 800214e:	d113      	bne.n	8002178 <LL_TIM_OC_Init+0x19c>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002150:	6955      	ldr	r5, [r2, #20]
 8002152:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002156:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800215a:	6895      	ldr	r5, [r2, #8]
 800215c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002160:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002164:	6995      	ldr	r5, [r2, #24]
 8002166:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800216a:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800216e:	69d5      	ldr	r5, [r2, #28]
 8002170:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8002174:	ea41 01c5 	orr.w	r1, r1, r5, lsl #3
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002178:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800217a:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800217c:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800217e:	6382      	str	r2, [r0, #56]	; 0x38
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002180:	e7b8      	b.n	80020f4 <LL_TIM_OC_Init+0x118>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002182:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002184:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002186:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800218a:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800218c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800218e:	6841      	ldr	r1, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002190:	69c4      	ldr	r4, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002192:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8002196:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 800219a:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800219c:	6915      	ldr	r5, [r2, #16]
 800219e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80021a2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80021a6:	6855      	ldr	r5, [r2, #4]
 80021a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021ac:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021b0:	4d4a      	ldr	r5, [pc, #296]	; (80022dc <LL_TIM_OC_Init+0x300>)
 80021b2:	42a8      	cmp	r0, r5
 80021b4:	d00f      	beq.n	80021d6 <LL_TIM_OC_Init+0x1fa>
 80021b6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80021ba:	42a8      	cmp	r0, r5
 80021bc:	d00b      	beq.n	80021d6 <LL_TIM_OC_Init+0x1fa>
 80021be:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80021c2:	42a8      	cmp	r0, r5
 80021c4:	d007      	beq.n	80021d6 <LL_TIM_OC_Init+0x1fa>
 80021c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80021ca:	42a8      	cmp	r0, r5
 80021cc:	d003      	beq.n	80021d6 <LL_TIM_OC_Init+0x1fa>
 80021ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80021d2:	42a8      	cmp	r0, r5
 80021d4:	d113      	bne.n	80021fe <LL_TIM_OC_Init+0x222>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80021d6:	6955      	ldr	r5, [r2, #20]
 80021d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021dc:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80021e0:	6895      	ldr	r5, [r2, #8]
 80021e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021e6:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80021ea:	6995      	ldr	r5, [r2, #24]
 80021ec:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80021f0:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80021f4:	69d5      	ldr	r5, [r2, #28]
 80021f6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 80021fa:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80021fe:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002200:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002202:	61c4      	str	r4, [r0, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002204:	63c2      	str	r2, [r0, #60]	; 0x3c
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002206:	e775      	b.n	80020f4 <LL_TIM_OC_Init+0x118>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002208:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800220a:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800220c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002210:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002212:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002214:	6844      	ldr	r4, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002216:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002218:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800221c:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8002220:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002224:	6915      	ldr	r5, [r2, #16]
 8002226:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800222a:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800222e:	6855      	ldr	r5, [r2, #4]
 8002230:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002234:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002238:	4d28      	ldr	r5, [pc, #160]	; (80022dc <LL_TIM_OC_Init+0x300>)
 800223a:	42a8      	cmp	r0, r5
 800223c:	d00f      	beq.n	800225e <LL_TIM_OC_Init+0x282>
 800223e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002242:	42a8      	cmp	r0, r5
 8002244:	d00b      	beq.n	800225e <LL_TIM_OC_Init+0x282>
 8002246:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800224a:	42a8      	cmp	r0, r5
 800224c:	d007      	beq.n	800225e <LL_TIM_OC_Init+0x282>
 800224e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002252:	42a8      	cmp	r0, r5
 8002254:	d003      	beq.n	800225e <LL_TIM_OC_Init+0x282>
 8002256:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800225a:	42a8      	cmp	r0, r5
 800225c:	d104      	bne.n	8002268 <LL_TIM_OC_Init+0x28c>
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800225e:	6995      	ldr	r5, [r2, #24]
 8002260:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 8002264:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002268:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800226a:	6044      	str	r4, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800226c:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800226e:	6402      	str	r2, [r0, #64]	; 0x40
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002270:	e740      	b.n	80020f4 <LL_TIM_OC_Init+0x118>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8002272:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8002274:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8002276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227a:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800227c:	6a03      	ldr	r3, [r0, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800227e:	6d41      	ldr	r1, [r0, #84]	; 0x54
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8002280:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002284:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8002288:	430c      	orrs	r4, r1
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 800228a:	6911      	ldr	r1, [r2, #16]
 800228c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002290:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8002294:	6851      	ldr	r1, [r2, #4]
 8002296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800229a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800229e:	490f      	ldr	r1, [pc, #60]	; (80022dc <LL_TIM_OC_Init+0x300>)
 80022a0:	4288      	cmp	r0, r1
 80022a2:	d00f      	beq.n	80022c4 <LL_TIM_OC_Init+0x2e8>
 80022a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022a8:	4288      	cmp	r0, r1
 80022aa:	d00b      	beq.n	80022c4 <LL_TIM_OC_Init+0x2e8>
 80022ac:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 80022b0:	4288      	cmp	r0, r1
 80022b2:	d007      	beq.n	80022c4 <LL_TIM_OC_Init+0x2e8>
 80022b4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80022b8:	4288      	cmp	r0, r1
 80022ba:	d003      	beq.n	80022c4 <LL_TIM_OC_Init+0x2e8>
 80022bc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80022c0:	4288      	cmp	r0, r1
 80022c2:	d106      	bne.n	80022d2 <LL_TIM_OC_Init+0x2f6>
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80022c4:	6841      	ldr	r1, [r0, #4]
 80022c6:	6995      	ldr	r5, [r2, #24]
 80022c8:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80022cc:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 80022d0:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80022d2:	6544      	str	r4, [r0, #84]	; 0x54
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80022d4:	68d2      	ldr	r2, [r2, #12]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80022d6:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80022d8:	6582      	str	r2, [r0, #88]	; 0x58
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80022da:	e70b      	b.n	80020f4 <LL_TIM_OC_Init+0x118>
 80022dc:	40012c00 	.word	0x40012c00

080022e0 <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <UTILS_PLL_IsBusy+0x24>)
 80022e2:	6819      	ldr	r1, [r3, #0]
  * @rmtoll CR           PLLSAI1RDY    LL_RCC_PLLSAI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI1_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 80022e4:	681a      	ldr	r2, [r3, #0]
  * @rmtoll CR           PLLSAI2RDY    LL_RCC_PLLSAI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI2_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RCC_CR_PLLSAI2RDY) ? 1UL : 0UL);
 80022e6:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80022e8:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RCC_CR_PLLSAI1RDY) ? 1UL : 0UL);
 80022ec:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80022f0:	430a      	orrs	r2, r1
 80022f2:	bf14      	ite	ne
 80022f4:	2001      	movne	r0, #1
 80022f6:	2000      	moveq	r0, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RCC_CR_PLLSAI2RDY) ? 1UL : 0UL);
 80022f8:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
    status = ERROR;
  }
#endif /*RCC_PLLSAI2_SUPPORT*/

  return status;
}
 80022fc:	bf18      	it	ne
 80022fe:	2001      	movne	r0, #1
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000

08002308 <LL_SetFlashLatency>:
  if ((HCLKFrequency == 0U) || (HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE1))
 8002308:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <LL_SetFlashLatency+0x7c>)
 800230a:	1e42      	subs	r2, r0, #1
 800230c:	429a      	cmp	r2, r3
 800230e:	d833      	bhi.n	8002378 <LL_SetFlashLatency+0x70>
  return (uint32_t)(READ_BIT(PWR->CR1, PWR_CR1_VOS));
 8002310:	4b1d      	ldr	r3, [pc, #116]	; (8002388 <LL_SetFlashLatency+0x80>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8002318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800231c:	d10f      	bne.n	800233e <LL_SetFlashLatency+0x36>
      if(HCLKFrequency > UTILS_SCALE1_LATENCY4_FREQ)
 800231e:	4b1b      	ldr	r3, [pc, #108]	; (800238c <LL_SetFlashLatency+0x84>)
 8002320:	4298      	cmp	r0, r3
 8002322:	d81a      	bhi.n	800235a <LL_SetFlashLatency+0x52>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY3_FREQ)
 8002324:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <LL_SetFlashLatency+0x88>)
 8002326:	4298      	cmp	r0, r3
 8002328:	d828      	bhi.n	800237c <LL_SetFlashLatency+0x74>
      else if(HCLKFrequency > UTILS_SCALE1_LATENCY2_FREQ)
 800232a:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <LL_SetFlashLatency+0x8c>)
 800232c:	4298      	cmp	r0, r3
 800232e:	d827      	bhi.n	8002380 <LL_SetFlashLatency+0x78>
        if(HCLKFrequency > UTILS_SCALE1_LATENCY1_FREQ)
 8002330:	4b19      	ldr	r3, [pc, #100]	; (8002398 <LL_SetFlashLatency+0x90>)
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 8002332:	4298      	cmp	r0, r3
 8002334:	bf94      	ite	ls
 8002336:	2300      	movls	r3, #0
 8002338:	2301      	movhi	r3, #1
  ErrorStatus status = SUCCESS;
 800233a:	2000      	movs	r0, #0
 800233c:	e011      	b.n	8002362 <LL_SetFlashLatency+0x5a>
      if(HCLKFrequency > UTILS_MAX_FREQUENCY_SCALE2)
 800233e:	4b17      	ldr	r3, [pc, #92]	; (800239c <LL_SetFlashLatency+0x94>)
 8002340:	4298      	cmp	r0, r3
 8002342:	d80c      	bhi.n	800235e <LL_SetFlashLatency+0x56>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY3_FREQ)
 8002344:	f5a3 03f4 	sub.w	r3, r3, #7995392	; 0x7a0000
 8002348:	f5a3 5390 	sub.w	r3, r3, #4608	; 0x1200
 800234c:	4298      	cmp	r0, r3
 800234e:	d815      	bhi.n	800237c <LL_SetFlashLatency+0x74>
      else if(HCLKFrequency > UTILS_SCALE2_LATENCY2_FREQ)
 8002350:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <LL_SetFlashLatency+0x98>)
 8002352:	4298      	cmp	r0, r3
 8002354:	d814      	bhi.n	8002380 <LL_SetFlashLatency+0x78>
        if(HCLKFrequency > UTILS_SCALE2_LATENCY1_FREQ)
 8002356:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <LL_SetFlashLatency+0x9c>)
 8002358:	e7eb      	b.n	8002332 <LL_SetFlashLatency+0x2a>
        latency = LL_FLASH_LATENCY_4;
 800235a:	2304      	movs	r3, #4
 800235c:	e7ed      	b.n	800233a <LL_SetFlashLatency+0x32>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 800235e:	2300      	movs	r3, #0
        status = ERROR;
 8002360:	2001      	movs	r0, #1
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002362:	4911      	ldr	r1, [pc, #68]	; (80023a8 <LL_SetFlashLatency+0xa0>)
 8002364:	680a      	ldr	r2, [r1, #0]
 8002366:	f022 0207 	bic.w	r2, r2, #7
 800236a:	431a      	orrs	r2, r3
 800236c:	600a      	str	r2, [r1, #0]
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800236e:	680a      	ldr	r2, [r1, #0]
 8002370:	f002 0207 	and.w	r2, r2, #7
    if(LL_FLASH_GetLatency() != latency)
 8002374:	4293      	cmp	r3, r2
 8002376:	d000      	beq.n	800237a <LL_SetFlashLatency+0x72>
      status = ERROR;
 8002378:	2001      	movs	r0, #1
}
 800237a:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_3;
 800237c:	2303      	movs	r3, #3
 800237e:	e7dc      	b.n	800233a <LL_SetFlashLatency+0x32>
        latency = LL_FLASH_LATENCY_2;
 8002380:	2302      	movs	r3, #2
 8002382:	e7da      	b.n	800233a <LL_SetFlashLatency+0x32>
 8002384:	04c4b3ff 	.word	0x04c4b3ff
 8002388:	40007000 	.word	0x40007000
 800238c:	03d09000 	.word	0x03d09000
 8002390:	02dc6c00 	.word	0x02dc6c00
 8002394:	01e84800 	.word	0x01e84800
 8002398:	00f42400 	.word	0x00f42400
 800239c:	018cba80 	.word	0x018cba80
 80023a0:	00b71b00 	.word	0x00b71b00
 80023a4:	005b8d80 	.word	0x005b8d80
 80023a8:	40022000 	.word	0x40022000

080023ac <UTILS_EnablePLLAndSwitchSystem>:
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 80023ac:	680b      	ldr	r3, [r1, #0]
 80023ae:	4a21      	ldr	r2, [pc, #132]	; (8002434 <UTILS_EnablePLLAndSwitchSystem+0x88>)
 80023b0:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 80023b4:	b570      	push	{r4, r5, r6, lr}
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 80023b6:	5cd3      	ldrb	r3, [r2, r3]

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 80023b8:	4e1f      	ldr	r6, [pc, #124]	; (8002438 <UTILS_EnablePLLAndSwitchSystem+0x8c>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 80023ba:	fa20 f403 	lsr.w	r4, r0, r3
  if(SystemCoreClock < hclk_frequency)
 80023be:	6833      	ldr	r3, [r6, #0]
 80023c0:	42a3      	cmp	r3, r4
{
 80023c2:	460d      	mov	r5, r1
  if(SystemCoreClock < hclk_frequency)
 80023c4:	d328      	bcc.n	8002418 <UTILS_EnablePLLAndSwitchSystem+0x6c>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80023c6:	4b1d      	ldr	r3, [pc, #116]	; (800243c <UTILS_EnablePLLAndSwitchSystem+0x90>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80023ce:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80023d6:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	0192      	lsls	r2, r2, #6
 80023dc:	d5fc      	bpl.n	80023d8 <UTILS_EnablePLLAndSwitchSystem+0x2c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	6829      	ldr	r1, [r5, #0]
 80023e2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80023e6:	430a      	orrs	r2, r1
 80023e8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	f042 0203 	orr.w	r2, r2, #3
 80023f0:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	f002 020c 	and.w	r2, r2, #12
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80023f8:	2a0c      	cmp	r2, #12
 80023fa:	d1fa      	bne.n	80023f2 <UTILS_EnablePLLAndSwitchSystem+0x46>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	6869      	ldr	r1, [r5, #4]
 8002400:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002404:	430a      	orrs	r2, r1
 8002406:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	68a9      	ldr	r1, [r5, #8]
 800240c:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 8002410:	430a      	orrs	r2, r1
 8002412:	609a      	str	r2, [r3, #8]
}
 8002414:	2000      	movs	r0, #0
 8002416:	e004      	b.n	8002422 <UTILS_EnablePLLAndSwitchSystem+0x76>
    status = LL_SetFlashLatency(hclk_frequency);
 8002418:	4620      	mov	r0, r4
 800241a:	f7ff ff75 	bl	8002308 <LL_SetFlashLatency>
  if(status == SUCCESS)
 800241e:	2800      	cmp	r0, #0
 8002420:	d0d1      	beq.n	80023c6 <UTILS_EnablePLLAndSwitchSystem+0x1a>
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 8002422:	6833      	ldr	r3, [r6, #0]
 8002424:	42a3      	cmp	r3, r4
 8002426:	d902      	bls.n	800242e <UTILS_EnablePLLAndSwitchSystem+0x82>
  {
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(hclk_frequency);
 8002428:	4620      	mov	r0, r4
 800242a:	f7ff ff6d 	bl	8002308 <LL_SetFlashLatency>
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 800242e:	b900      	cbnz	r0, 8002432 <UTILS_EnablePLLAndSwitchSystem+0x86>
  SystemCoreClock = HCLKFrequency;
 8002430:	6034      	str	r4, [r6, #0]
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 8002432:	bd70      	pop	{r4, r5, r6, pc}
 8002434:	08004216 	.word	0x08004216
 8002438:	2000002c 	.word	0x2000002c
 800243c:	40021000 	.word	0x40021000

08002440 <LL_PLL_ConfigSystemClock_HSI>:
{
 8002440:	b570      	push	{r4, r5, r6, lr}
 8002442:	4605      	mov	r5, r0
 8002444:	460c      	mov	r4, r1
  if(UTILS_PLL_IsBusy() == SUCCESS)
 8002446:	f7ff ff4b 	bl	80022e0 <UTILS_PLL_IsBusy>
 800244a:	bb00      	cbnz	r0, 800248e <LL_PLL_ConfigSystemClock_HSI+0x4e>
    pllfreq = UTILS_GetPLLOutputFrequency(HSI_VALUE, UTILS_PLLInitStruct);
 800244c:	4629      	mov	r1, r5
 800244e:	4811      	ldr	r0, [pc, #68]	; (8002494 <LL_PLL_ConfigSystemClock_HSI+0x54>)
 8002450:	f001 fa5c 	bl	800390c <UTILS_GetPLLOutputFrequency>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8002454:	4a10      	ldr	r2, [pc, #64]	; (8002498 <LL_PLL_ConfigSystemClock_HSI+0x58>)
 8002456:	6813      	ldr	r3, [r2, #0]
 8002458:	0559      	lsls	r1, r3, #21
 800245a:	d406      	bmi.n	800246a <LL_PLL_ConfigSystemClock_HSI+0x2a>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800245c:	6813      	ldr	r3, [r2, #0]
 800245e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002462:	6013      	str	r3, [r2, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8002464:	6813      	ldr	r3, [r2, #0]
 8002466:	055b      	lsls	r3, r3, #21
 8002468:	d5fc      	bpl.n	8002464 <LL_PLL_ConfigSystemClock_HSI+0x24>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800246a:	68d6      	ldr	r6, [r2, #12]
 800246c:	4b0b      	ldr	r3, [pc, #44]	; (800249c <LL_PLL_ConfigSystemClock_HSI+0x5c>)
 800246e:	6869      	ldr	r1, [r5, #4]
 8002470:	4033      	ands	r3, r6
 8002472:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002476:	6829      	ldr	r1, [r5, #0]
 8002478:	430b      	orrs	r3, r1
 800247a:	68a9      	ldr	r1, [r5, #8]
 800247c:	430b      	orrs	r3, r1
 800247e:	f043 0302 	orr.w	r3, r3, #2
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8002482:	4621      	mov	r1, r4
 8002484:	60d3      	str	r3, [r2, #12]
}
 8002486:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 800248a:	f7ff bf8f 	b.w	80023ac <UTILS_EnablePLLAndSwitchSystem>
}
 800248e:	2001      	movs	r0, #1
 8002490:	bd70      	pop	{r4, r5, r6, pc}
 8002492:	bf00      	nop
 8002494:	00f42400 	.word	0x00f42400
 8002498:	40021000 	.word	0x40021000
 800249c:	f9ff808c 	.word	0xf9ff808c

080024a0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
 80024a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 80024a2:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
 80024a4:	4f10      	ldr	r7, [pc, #64]	; (80024e8 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 80024a6:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80024aa:	3001      	adds	r0, #1
 80024ac:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80024b0:	42ae      	cmp	r6, r5
 80024b2:	d800      	bhi.n	80024b6 <z_sys_init_run_level+0x16>
		}
	}
}
 80024b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
 80024b6:	e9d5 3400 	ldrd	r3, r4, [r5]
 80024ba:	4620      	mov	r0, r4
 80024bc:	4798      	blx	r3
 80024be:	b170      	cbz	r0, 80024de <z_sys_init_run_level+0x3e>
 80024c0:	b16c      	cbz	r4, 80024de <z_sys_init_run_level+0x3e>
				(dev - __device_start));
 80024c2:	1be4      	subs	r4, r4, r7
 80024c4:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
 80024c6:	0961      	lsrs	r1, r4, #5
 80024c8:	4a08      	ldr	r2, [pc, #32]	; (80024ec <z_sys_init_run_level+0x4c>)
 80024ca:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 80024ce:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
 80024d2:	2301      	movs	r3, #1
 80024d4:	fa03 f404 	lsl.w	r4, r3, r4
 80024d8:	4304      	orrs	r4, r0
 80024da:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 80024de:	3508      	adds	r5, #8
 80024e0:	e7e6      	b.n	80024b0 <z_sys_init_run_level+0x10>
 80024e2:	bf00      	nop
 80024e4:	08004050 	.word	0x08004050
 80024e8:	2000003c 	.word	0x2000003c
 80024ec:	2000011c 	.word	0x2000011c

080024f0 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
 80024f0:	4b08      	ldr	r3, [pc, #32]	; (8002514 <z_device_ready+0x24>)
 80024f2:	1ac0      	subs	r0, r0, r3
 80024f4:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
 80024f6:	4b08      	ldr	r3, [pc, #32]	; (8002518 <z_device_ready+0x28>)
 80024f8:	0942      	lsrs	r2, r0, #5
 80024fa:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
 80024fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
 8002502:	2301      	movs	r3, #1
 8002504:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
 8002508:	4210      	tst	r0, r2
}
 800250a:	bf0c      	ite	eq
 800250c:	4618      	moveq	r0, r3
 800250e:	2000      	movne	r0, #0
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	2000003c 	.word	0x2000003c
 8002518:	2000011c 	.word	0x2000011c

0800251c <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
 800251c:	4911      	ldr	r1, [pc, #68]	; (8002564 <z_impl_device_get_binding+0x48>)
{
 800251e:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
 8002520:	4c11      	ldr	r4, [pc, #68]	; (8002568 <z_impl_device_get_binding+0x4c>)
{
 8002522:	4605      	mov	r5, r0
 8002524:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
 8002526:	428c      	cmp	r4, r1
 8002528:	d104      	bne.n	8002534 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
 800252a:	4c0f      	ldr	r4, [pc, #60]	; (8002568 <z_impl_device_get_binding+0x4c>)
 800252c:	42b4      	cmp	r4, r6
 800252e:	d10a      	bne.n	8002546 <z_impl_device_get_binding+0x2a>
	return NULL;
 8002530:	2400      	movs	r4, #0
 8002532:	e014      	b.n	800255e <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
 8002534:	4620      	mov	r0, r4
 8002536:	f7ff ffdb 	bl	80024f0 <z_device_ready>
 800253a:	b110      	cbz	r0, 8002542 <z_impl_device_get_binding+0x26>
 800253c:	6823      	ldr	r3, [r4, #0]
 800253e:	42ab      	cmp	r3, r5
 8002540:	d00d      	beq.n	800255e <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
 8002542:	3410      	adds	r4, #16
 8002544:	e7ef      	b.n	8002526 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 8002546:	4620      	mov	r0, r4
 8002548:	f7ff ffd2 	bl	80024f0 <z_device_ready>
 800254c:	b908      	cbnz	r0, 8002552 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
 800254e:	3410      	adds	r4, #16
 8002550:	e7ec      	b.n	800252c <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 8002552:	6821      	ldr	r1, [r4, #0]
 8002554:	4628      	mov	r0, r5
 8002556:	f000 ff9c 	bl	8003492 <strcmp>
 800255a:	2800      	cmp	r0, #0
 800255c:	d1f7      	bne.n	800254e <z_impl_device_get_binding+0x32>
}
 800255e:	4620      	mov	r0, r4
 8002560:	bd70      	pop	{r4, r5, r6, pc}
 8002562:	bf00      	nop
 8002564:	2000011c 	.word	0x2000011c
 8002568:	2000003c 	.word	0x2000003c

0800256c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 800256c:	4802      	ldr	r0, [pc, #8]	; (8002578 <z_bss_zero+0xc>)
 800256e:	4a03      	ldr	r2, [pc, #12]	; (800257c <z_bss_zero+0x10>)
 8002570:	2100      	movs	r1, #0
 8002572:	1a12      	subs	r2, r2, r0
 8002574:	f000 bfc4 	b.w	8003500 <memset>
 8002578:	20000120 	.word	0x20000120
 800257c:	200003a0 	.word	0x200003a0

08002580 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
 8002580:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
 8002582:	4806      	ldr	r0, [pc, #24]	; (800259c <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
 8002584:	4a06      	ldr	r2, [pc, #24]	; (80025a0 <z_data_copy+0x20>)
 8002586:	4907      	ldr	r1, [pc, #28]	; (80025a4 <z_data_copy+0x24>)
 8002588:	1a12      	subs	r2, r2, r0
 800258a:	f000 ff8e 	bl	80034aa <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 800258e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
 8002592:	4a05      	ldr	r2, [pc, #20]	; (80025a8 <z_data_copy+0x28>)
 8002594:	4905      	ldr	r1, [pc, #20]	; (80025ac <z_data_copy+0x2c>)
 8002596:	4806      	ldr	r0, [pc, #24]	; (80025b0 <z_data_copy+0x30>)
 8002598:	f000 bf87 	b.w	80034aa <memcpy>
 800259c:	20000000 	.word	0x20000000
 80025a0:	20000120 	.word	0x20000120
 80025a4:	08004274 	.word	0x08004274
 80025a8:	00000000 	.word	0x00000000
 80025ac:	08004274 	.word	0x08004274
 80025b0:	20000000 	.word	0x20000000

080025b4 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 80025b4:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
 80025b6:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <bg_thread_main+0x34>)
 80025b8:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 80025ba:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 80025bc:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 80025be:	f7ff ff6f 	bl	80024a0 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 80025c2:	4a0a      	ldr	r2, [pc, #40]	; (80025ec <bg_thread_main+0x38>)
 80025c4:	490a      	ldr	r1, [pc, #40]	; (80025f0 <bg_thread_main+0x3c>)
 80025c6:	480b      	ldr	r0, [pc, #44]	; (80025f4 <bg_thread_main+0x40>)
 80025c8:	f000 fda4 	bl	8003114 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 80025cc:	2003      	movs	r0, #3
 80025ce:	f7ff ff67 	bl	80024a0 <z_sys_init_run_level>

	z_init_static_threads();
 80025d2:	f000 fbcd 	bl	8002d70 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
 80025d6:	f7fd ff53 	bl	8000480 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 80025da:	4a07      	ldr	r2, [pc, #28]	; (80025f8 <bg_thread_main+0x44>)
 80025dc:	7b13      	ldrb	r3, [r2, #12]
 80025de:	f023 0301 	bic.w	r3, r3, #1
 80025e2:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 80025e4:	bd08      	pop	{r3, pc}
 80025e6:	bf00      	nop
 80025e8:	2000039e 	.word	0x2000039e
 80025ec:	0800426d 	.word	0x0800426d
 80025f0:	08004226 	.word	0x08004226
 80025f4:	08004247 	.word	0x08004247
 80025f8:	200001a0 	.word	0x200001a0

080025fc <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
 80025fc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8002600:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 80026f8 <z_cstart+0xfc>
 8002604:	b0a7      	sub	sp, #156	; 0x9c
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8002606:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 800260a:	4d33      	ldr	r5, [pc, #204]	; (80026d8 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
 800260c:	4e33      	ldr	r6, [pc, #204]	; (80026dc <z_cstart+0xe0>)
 800260e:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8002610:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 80026fc <z_cstart+0x100>
	z_setup_new_thread(thread, stack,
 8002614:	4f32      	ldr	r7, [pc, #200]	; (80026e0 <z_cstart+0xe4>)
 8002616:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261a:	2400      	movs	r4, #0
 800261c:	616b      	str	r3, [r5, #20]
 800261e:	23f0      	movs	r3, #240	; 0xf0
 8002620:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 8002624:	77ec      	strb	r4, [r5, #31]
 8002626:	762c      	strb	r4, [r5, #24]
 8002628:	766c      	strb	r4, [r5, #25]
 800262a:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 800262c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800262e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8002632:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8002634:	f7ff f88e 	bl	8001754 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8002638:	f7fe ff46 	bl	80014c8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 800263c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002640:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8002642:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
 8002644:	4d27      	ldr	r5, [pc, #156]	; (80026e4 <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
 8002646:	f240 1301 	movw	r3, #257	; 0x101
 800264a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 800264e:	ab06      	add	r3, sp, #24
 8002650:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8002652:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
 8002654:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
 8002658:	f7ff ff22 	bl	80024a0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 800265c:	2001      	movs	r0, #1
 800265e:	f7ff ff1f 	bl	80024a0 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8002662:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
 8002666:	f000 fad1 	bl	8002c0c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800266a:	4b1f      	ldr	r3, [pc, #124]	; (80026e8 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
 800266c:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 800266e:	491f      	ldr	r1, [pc, #124]	; (80026ec <z_cstart+0xf0>)
 8002670:	9305      	str	r3, [sp, #20]
 8002672:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002676:	4653      	mov	r3, sl
 8002678:	e9cd 4b03 	strd	r4, fp, [sp, #12]
 800267c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002680:	9400      	str	r4, [sp, #0]
 8002682:	4630      	mov	r0, r6
 8002684:	f000 fb42 	bl	8002d0c <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8002688:	7b73      	ldrb	r3, [r6, #13]
 800268a:	4680      	mov	r8, r0
 800268c:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
 8002690:	4630      	mov	r0, r6
 8002692:	7373      	strb	r3, [r6, #13]
 8002694:	f001 f99d 	bl	80039d2 <z_ready_thread>
	z_setup_new_thread(thread, stack,
 8002698:	230f      	movs	r3, #15
 800269a:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800269e:	4914      	ldr	r1, [pc, #80]	; (80026f0 <z_cstart+0xf4>)
 80026a0:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <z_cstart+0xf8>)
 80026a2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80026a6:	e9cd b404 	strd	fp, r4, [sp, #16]
 80026aa:	e9cd 5400 	strd	r5, r4, [sp]
 80026ae:	4638      	mov	r0, r7
 80026b0:	f000 fb2c 	bl	8002d0c <z_setup_new_thread>
 80026b4:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 80026b6:	60ef      	str	r7, [r5, #12]
 80026b8:	f023 0304 	bic.w	r3, r3, #4
 80026bc:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 80026be:	f105 031c 	add.w	r3, r5, #28
	list->tail = (sys_dnode_t *)list;
 80026c2:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].id = i;
 80026c6:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
 80026c8:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 80026cc:	4652      	mov	r2, sl
 80026ce:	4641      	mov	r1, r8
 80026d0:	4630      	mov	r0, r6
 80026d2:	f7fe fedf 	bl	8001494 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 80026d6:	bf00      	nop
 80026d8:	e000ed00 	.word	0xe000ed00
 80026dc:	200001a0 	.word	0x200001a0
 80026e0:	20000120 	.word	0x20000120
 80026e4:	2000035c 	.word	0x2000035c
 80026e8:	0800426e 	.word	0x0800426e
 80026ec:	200003a0 	.word	0x200003a0
 80026f0:	200007c0 	.word	0x200007c0
 80026f4:	08003abb 	.word	0x08003abb
 80026f8:	20001140 	.word	0x20001140
 80026fc:	080025b5 	.word	0x080025b5

08002700 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
 8002700:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
 8002702:	4c08      	ldr	r4, [pc, #32]	; (8002724 <z_reset_time_slice+0x24>)
 8002704:	6823      	ldr	r3, [r4, #0]
 8002706:	b15b      	cbz	r3, 8002720 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 8002708:	f7fe fdf4 	bl	80012f4 <z_clock_elapsed>
 800270c:	4603      	mov	r3, r0
 800270e:	6820      	ldr	r0, [r4, #0]
 8002710:	4a05      	ldr	r2, [pc, #20]	; (8002728 <z_reset_time_slice+0x28>)
 8002712:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
 8002714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 8002718:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
 800271a:	2100      	movs	r1, #0
 800271c:	f001 b9af 	b.w	8003a7e <z_set_timeout_expiry>
}
 8002720:	bd10      	pop	{r4, pc}
 8002722:	bf00      	nop
 8002724:	20000394 	.word	0x20000394
 8002728:	2000035c 	.word	0x2000035c

0800272c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
 800272c:	b510      	push	{r4, lr}
 800272e:	f04f 0310 	mov.w	r3, #16
 8002732:	f3ef 8411 	mrs	r4, BASEPRI
 8002736:	f383 8811 	msr	BASEPRI, r3
 800273a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <k_sched_time_slice_set+0x34>)
 8002740:	2200      	movs	r2, #0
 8002742:	615a      	str	r2, [r3, #20]
		} else {
			return t / (from_hz / to_hz);
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
 8002744:	230a      	movs	r3, #10
 8002746:	4358      	muls	r0, r3
		slice_time = k_ms_to_ticks_ceil32(slice);
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <k_sched_time_slice_set+0x38>)
 800274a:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <k_sched_time_slice_set+0x3c>)
 800274e:	6019      	str	r1, [r3, #0]
		z_reset_time_slice();
 8002750:	f7ff ffd6 	bl	8002700 <z_reset_time_slice>
	__asm__ volatile(
 8002754:	f384 8811 	msr	BASEPRI, r4
 8002758:	f3bf 8f6f 	isb	sy
	}
}
 800275c:	bd10      	pop	{r4, pc}
 800275e:	bf00      	nop
 8002760:	2000035c 	.word	0x2000035c
 8002764:	20000394 	.word	0x20000394
 8002768:	20000390 	.word	0x20000390

0800276c <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800276c:	b949      	cbnz	r1, 8002782 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800276e:	f3ef 8005 	mrs	r0, IPSR
 8002772:	b930      	cbnz	r0, 8002782 <z_reschedule+0x16>
	return _kernel.ready_q.cache;
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
 8002776:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	429a      	cmp	r2, r3
 800277c:	d001      	beq.n	8002782 <z_reschedule+0x16>
	ret = arch_swap(key);
 800277e:	f7fe bdd7 	b.w	8001330 <arch_swap>
 8002782:	f381 8811 	msr	BASEPRI, r1
 8002786:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
 800278a:	4770      	bx	lr
 800278c:	2000035c 	.word	0x2000035c

08002790 <k_sched_lock>:
	__asm__ volatile(
 8002790:	f04f 0310 	mov.w	r3, #16
 8002794:	f3ef 8111 	mrs	r1, BASEPRI
 8002798:	f383 8811 	msr	BASEPRI, r3
 800279c:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
 80027a0:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <k_sched_lock+0x24>)
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	7bd3      	ldrb	r3, [r2, #15]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 80027aa:	f381 8811 	msr	BASEPRI, r1
 80027ae:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
 80027b2:	4770      	bx	lr
 80027b4:	2000035c 	.word	0x2000035c

080027b8 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
 80027b8:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <z_priq_dumb_remove+0x28>)
 80027ba:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80027be:	4282      	cmp	r2, r0
 80027c0:	d105      	bne.n	80027ce <z_priq_dumb_remove+0x16>
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	428b      	cmp	r3, r1
 80027c6:	d102      	bne.n	80027ce <z_priq_dumb_remove+0x16>
 80027c8:	7b4b      	ldrb	r3, [r1, #13]
 80027ca:	06db      	lsls	r3, r3, #27
 80027cc:	d106      	bne.n	80027dc <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
 80027ce:	e9d1 3200 	ldrd	r3, r2, [r1]
 80027d2:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 80027d4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 80027d6:	2300      	movs	r3, #0
	node->prev = NULL;
 80027d8:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	2000035c 	.word	0x2000035c

080027e4 <update_cache>:
{
 80027e4:	b538      	push	{r3, r4, r5, lr}
 80027e6:	4c12      	ldr	r4, [pc, #72]	; (8002830 <update_cache+0x4c>)
	if (_current_cpu->pending_abort != NULL) {
 80027e8:	6923      	ldr	r3, [r4, #16]
 80027ea:	68a2      	ldr	r2, [r4, #8]
{
 80027ec:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
 80027ee:	b10b      	cbz	r3, 80027f4 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
 80027f0:	68e5      	ldr	r5, [r4, #12]
 80027f2:	e00c      	b.n	800280e <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
 80027f4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80027f8:	f001 f8e1 	bl	80039be <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
 80027fc:	7b53      	ldrb	r3, [r2, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
 80027fe:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
 8002800:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
 8002802:	bf44      	itt	mi
 8002804:	f043 0308 	orrmi.w	r3, r3, #8
 8002808:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
 800280a:	2d00      	cmp	r5, #0
 800280c:	d0f0      	beq.n	80027f0 <update_cache+0xc>
	if (preempt_ok != 0) {
 800280e:	b949      	cbnz	r1, 8002824 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
 8002810:	7b53      	ldrb	r3, [r2, #13]
 8002812:	06db      	lsls	r3, r3, #27
 8002814:	d106      	bne.n	8002824 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8002816:	69ab      	ldr	r3, [r5, #24]
 8002818:	b923      	cbnz	r3, 8002824 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
 800281a:	89d3      	ldrh	r3, [r2, #14]
 800281c:	2b7f      	cmp	r3, #127	; 0x7f
 800281e:	d901      	bls.n	8002824 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
 8002820:	6262      	str	r2, [r4, #36]	; 0x24
}
 8002822:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
 8002824:	4295      	cmp	r5, r2
 8002826:	d001      	beq.n	800282c <update_cache+0x48>
			z_reset_time_slice();
 8002828:	f7ff ff6a 	bl	8002700 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 800282c:	6265      	str	r5, [r4, #36]	; 0x24
}
 800282e:	e7f8      	b.n	8002822 <update_cache+0x3e>
 8002830:	2000035c 	.word	0x2000035c

08002834 <k_sched_unlock>:
{
 8002834:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002836:	f04f 0310 	mov.w	r3, #16
 800283a:	f3ef 8411 	mrs	r4, BASEPRI
 800283e:	f383 8811 	msr	BASEPRI, r3
 8002842:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 8002846:	4b08      	ldr	r3, [pc, #32]	; (8002868 <k_sched_unlock+0x34>)
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	7bd3      	ldrb	r3, [r2, #15]
 800284c:	3301      	adds	r3, #1
 800284e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8002850:	2000      	movs	r0, #0
 8002852:	f7ff ffc7 	bl	80027e4 <update_cache>
	__asm__ volatile(
 8002856:	f384 8811 	msr	BASEPRI, r4
 800285a:	f3bf 8f6f 	isb	sy
}
 800285e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8002862:	f001 b896 	b.w	8003992 <z_reschedule_unlocked>
 8002866:	bf00      	nop
 8002868:	2000035c 	.word	0x2000035c

0800286c <ready_thread>:
{
 800286c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 800286e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
 8002872:	7b43      	ldrb	r3, [r0, #13]
 8002874:	2a00      	cmp	r2, #0
 8002876:	db2c      	blt.n	80028d2 <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8002878:	06db      	lsls	r3, r3, #27
 800287a:	d12a      	bne.n	80028d2 <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
 800287c:	6983      	ldr	r3, [r0, #24]
 800287e:	bb43      	cbnz	r3, 80028d2 <ready_thread+0x66>
	return list->head == list;
 8002880:	4a15      	ldr	r2, [pc, #84]	; (80028d8 <ready_thread+0x6c>)
 8002882:	4611      	mov	r1, r2
 8002884:	f851 4f28 	ldr.w	r4, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002888:	428c      	cmp	r4, r1
 800288a:	bf18      	it	ne
 800288c:	4623      	movne	r3, r4
 800288e:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8002890:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8002892:	bf38      	it	cc
 8002894:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8002896:	b1b3      	cbz	r3, 80028c6 <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
 8002898:	f990 600e 	ldrsb.w	r6, [r0, #14]
 800289c:	f993 500e 	ldrsb.w	r5, [r3, #14]
 80028a0:	42ae      	cmp	r6, r5
 80028a2:	db03      	blt.n	80028ac <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
 80028a4:	42a3      	cmp	r3, r4
 80028a6:	d00e      	beq.n	80028c6 <ready_thread+0x5a>
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	e7f4      	b.n	8002896 <ready_thread+0x2a>
	node->prev = successor->prev;
 80028ac:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 80028ae:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
 80028b2:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 80028b4:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
 80028b6:	7b43      	ldrb	r3, [r0, #13]
 80028b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028bc:	7343      	strb	r3, [r0, #13]
}
 80028be:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 80028c0:	2000      	movs	r0, #0
 80028c2:	f7ff bf8f 	b.w	80027e4 <update_cache>
	node->prev = list->tail;
 80028c6:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
 80028ca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80028cc:	6018      	str	r0, [r3, #0]
	list->tail = node;
 80028ce:	62d0      	str	r0, [r2, #44]	; 0x2c
}
 80028d0:	e7f1      	b.n	80028b6 <ready_thread+0x4a>
}
 80028d2:	bc70      	pop	{r4, r5, r6}
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	2000035c 	.word	0x2000035c

080028dc <z_sched_start>:
{
 80028dc:	b510      	push	{r4, lr}
	__asm__ volatile(
 80028de:	f04f 0210 	mov.w	r2, #16
 80028e2:	f3ef 8411 	mrs	r4, BASEPRI
 80028e6:	f382 8811 	msr	BASEPRI, r2
 80028ea:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
 80028ee:	7b42      	ldrb	r2, [r0, #13]
 80028f0:	0751      	lsls	r1, r2, #29
 80028f2:	d404      	bmi.n	80028fe <z_sched_start+0x22>
	__asm__ volatile(
 80028f4:	f384 8811 	msr	BASEPRI, r4
 80028f8:	f3bf 8f6f 	isb	sy
}
 80028fc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80028fe:	f022 0204 	bic.w	r2, r2, #4
 8002902:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 8002904:	f7ff ffb2 	bl	800286c <ready_thread>
	z_reschedule(&sched_spinlock, key);
 8002908:	4621      	mov	r1, r4
 800290a:	4802      	ldr	r0, [pc, #8]	; (8002914 <z_sched_start+0x38>)
}
 800290c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 8002910:	f7ff bf2c 	b.w	800276c <z_reschedule>
 8002914:	2000039f 	.word	0x2000039f

08002918 <move_thread_to_end_of_prio_q>:
{
 8002918:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
 800291a:	f990 300d 	ldrsb.w	r3, [r0, #13]
 800291e:	2b00      	cmp	r3, #0
{
 8002920:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8002922:	da02      	bge.n	800292a <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
 8002924:	4817      	ldr	r0, [pc, #92]	; (8002984 <move_thread_to_end_of_prio_q+0x6c>)
 8002926:	f7ff ff47 	bl	80027b8 <z_priq_dumb_remove>
	return list->head == list;
 800292a:	4a17      	ldr	r2, [pc, #92]	; (8002988 <move_thread_to_end_of_prio_q+0x70>)
 800292c:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800292e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
	return list->head == list;
 8002930:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002934:	4283      	cmp	r3, r0
 8002936:	bf08      	it	eq
 8002938:	2300      	moveq	r3, #0
 800293a:	2b00      	cmp	r3, #0
 800293c:	bf38      	it	cc
 800293e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8002940:	b1d3      	cbz	r3, 8002978 <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
 8002942:	f991 600e 	ldrsb.w	r6, [r1, #14]
 8002946:	f993 500e 	ldrsb.w	r5, [r3, #14]
 800294a:	42ae      	cmp	r6, r5
 800294c:	db03      	blt.n	8002956 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
 800294e:	42a3      	cmp	r3, r4
 8002950:	d012      	beq.n	8002978 <move_thread_to_end_of_prio_q+0x60>
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	e7f4      	b.n	8002940 <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
 8002956:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
 8002958:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
 800295c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 800295e:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
 8002960:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
 8002962:	6890      	ldr	r0, [r2, #8]
 8002964:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002968:	734b      	strb	r3, [r1, #13]
 800296a:	1a43      	subs	r3, r0, r1
 800296c:	4258      	negs	r0, r3
}
 800296e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
 8002972:	4158      	adcs	r0, r3
 8002974:	f7ff bf36 	b.w	80027e4 <update_cache>
	node->prev = list->tail;
 8002978:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
 800297c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800297e:	6019      	str	r1, [r3, #0]
	list->tail = node;
 8002980:	62d1      	str	r1, [r2, #44]	; 0x2c
}
 8002982:	e7ed      	b.n	8002960 <move_thread_to_end_of_prio_q+0x48>
 8002984:	20000384 	.word	0x20000384
 8002988:	2000035c 	.word	0x2000035c

0800298c <z_time_slice>:
{
 800298c:	b570      	push	{r4, r5, r6, lr}
 800298e:	4601      	mov	r1, r0
	__asm__ volatile(
 8002990:	f04f 0310 	mov.w	r3, #16
 8002994:	f3ef 8411 	mrs	r4, BASEPRI
 8002998:	f383 8811 	msr	BASEPRI, r3
 800299c:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 80029a0:	4b16      	ldr	r3, [pc, #88]	; (80029fc <z_time_slice+0x70>)
 80029a2:	4a17      	ldr	r2, [pc, #92]	; (8002a00 <z_time_slice+0x74>)
 80029a4:	6898      	ldr	r0, [r3, #8]
 80029a6:	6815      	ldr	r5, [r2, #0]
 80029a8:	42a8      	cmp	r0, r5
 80029aa:	461d      	mov	r5, r3
 80029ac:	d106      	bne.n	80029bc <z_time_slice+0x30>
			z_reset_time_slice();
 80029ae:	f7ff fea7 	bl	8002700 <z_reset_time_slice>
	__asm__ volatile(
 80029b2:	f384 8811 	msr	BASEPRI, r4
 80029b6:	f3bf 8f6f 	isb	sy
}
 80029ba:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
 80029bc:	2600      	movs	r6, #0
 80029be:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
 80029c0:	4a10      	ldr	r2, [pc, #64]	; (8002a04 <z_time_slice+0x78>)
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	b1ba      	cbz	r2, 80029f6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 80029c6:	89c2      	ldrh	r2, [r0, #14]
 80029c8:	2a7f      	cmp	r2, #127	; 0x7f
 80029ca:	d814      	bhi.n	80029f6 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
 80029cc:	7b42      	ldrb	r2, [r0, #13]
 80029ce:	06d2      	lsls	r2, r2, #27
 80029d0:	d111      	bne.n	80029f6 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 80029d2:	4a0d      	ldr	r2, [pc, #52]	; (8002a08 <z_time_slice+0x7c>)
 80029d4:	f990 600e 	ldrsb.w	r6, [r0, #14]
 80029d8:	6812      	ldr	r2, [r2, #0]
 80029da:	4296      	cmp	r6, r2
 80029dc:	db0b      	blt.n	80029f6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
 80029de:	4a0b      	ldr	r2, [pc, #44]	; (8002a0c <z_time_slice+0x80>)
 80029e0:	4290      	cmp	r0, r2
 80029e2:	d008      	beq.n	80029f6 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	428a      	cmp	r2, r1
 80029e8:	dc02      	bgt.n	80029f0 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
 80029ea:	f7ff ff95 	bl	8002918 <move_thread_to_end_of_prio_q>
 80029ee:	e7de      	b.n	80029ae <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
 80029f0:	1a52      	subs	r2, r2, r1
 80029f2:	615a      	str	r2, [r3, #20]
 80029f4:	e7dd      	b.n	80029b2 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	616b      	str	r3, [r5, #20]
 80029fa:	e7da      	b.n	80029b2 <z_time_slice+0x26>
 80029fc:	2000035c 	.word	0x2000035c
 8002a00:	2000038c 	.word	0x2000038c
 8002a04:	20000394 	.word	0x20000394
 8002a08:	20000390 	.word	0x20000390
 8002a0c:	20000120 	.word	0x20000120

08002a10 <z_impl_k_thread_suspend>:
{
 8002a10:	b570      	push	{r4, r5, r6, lr}
 8002a12:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8002a14:	3018      	adds	r0, #24
 8002a16:	f001 f80c 	bl	8003a32 <z_abort_timeout>
	__asm__ volatile(
 8002a1a:	f04f 0310 	mov.w	r3, #16
 8002a1e:	f3ef 8611 	mrs	r6, BASEPRI
 8002a22:	f383 8811 	msr	BASEPRI, r3
 8002a26:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 8002a2a:	f994 300d 	ldrsb.w	r3, [r4, #13]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	da07      	bge.n	8002a42 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
 8002a32:	480f      	ldr	r0, [pc, #60]	; (8002a70 <z_impl_k_thread_suspend+0x60>)
 8002a34:	4621      	mov	r1, r4
 8002a36:	f7ff febf 	bl	80027b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 8002a3a:	7b63      	ldrb	r3, [r4, #13]
 8002a3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a40:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 8002a42:	4d0c      	ldr	r5, [pc, #48]	; (8002a74 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8002a44:	7b63      	ldrb	r3, [r4, #13]
 8002a46:	68a8      	ldr	r0, [r5, #8]
 8002a48:	f043 0310 	orr.w	r3, r3, #16
 8002a4c:	7363      	strb	r3, [r4, #13]
 8002a4e:	1b03      	subs	r3, r0, r4
 8002a50:	4258      	negs	r0, r3
 8002a52:	4158      	adcs	r0, r3
 8002a54:	f7ff fec6 	bl	80027e4 <update_cache>
	__asm__ volatile(
 8002a58:	f386 8811 	msr	BASEPRI, r6
 8002a5c:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 8002a60:	68ab      	ldr	r3, [r5, #8]
 8002a62:	42a3      	cmp	r3, r4
 8002a64:	d103      	bne.n	8002a6e <z_impl_k_thread_suspend+0x5e>
}
 8002a66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 8002a6a:	f000 bf92 	b.w	8003992 <z_reschedule_unlocked>
}
 8002a6e:	bd70      	pop	{r4, r5, r6, pc}
 8002a70:	20000384 	.word	0x20000384
 8002a74:	2000035c 	.word	0x2000035c

08002a78 <z_thread_single_abort>:
{
 8002a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a7c:	4604      	mov	r4, r0
	__asm__ volatile(
 8002a7e:	f04f 0310 	mov.w	r3, #16
 8002a82:	f3ef 8211 	mrs	r2, BASEPRI
 8002a86:	f383 8811 	msr	BASEPRI, r3
 8002a8a:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
 8002a8e:	7b43      	ldrb	r3, [r0, #13]
 8002a90:	f013 0f28 	tst.w	r3, #40	; 0x28
 8002a94:	d005      	beq.n	8002aa2 <z_thread_single_abort+0x2a>
	__asm__ volatile(
 8002a96:	f382 8811 	msr	BASEPRI, r2
 8002a9a:	f3bf 8f6f 	isb	sy
}
 8002a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
 8002aa2:	f043 0320 	orr.w	r3, r3, #32
 8002aa6:	7343      	strb	r3, [r0, #13]
 8002aa8:	f382 8811 	msr	BASEPRI, r2
 8002aac:	f3bf 8f6f 	isb	sy
 8002ab0:	3018      	adds	r0, #24
 8002ab2:	f000 ffbe 	bl	8003a32 <z_abort_timeout>
	__asm__ volatile(
 8002ab6:	f04f 0310 	mov.w	r3, #16
 8002aba:	f3ef 8611 	mrs	r6, BASEPRI
 8002abe:	f383 8811 	msr	BASEPRI, r3
 8002ac2:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 8002ac6:	7b63      	ldrb	r3, [r4, #13]
 8002ac8:	06d8      	lsls	r0, r3, #27
 8002aca:	d116      	bne.n	8002afa <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
 8002acc:	69a2      	ldr	r2, [r4, #24]
 8002ace:	b9a2      	cbnz	r2, 8002afa <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
 8002ad0:	0619      	lsls	r1, r3, #24
 8002ad2:	d507      	bpl.n	8002ae4 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
 8002ad4:	4826      	ldr	r0, [pc, #152]	; (8002b70 <z_thread_single_abort+0xf8>)
 8002ad6:	4621      	mov	r1, r4
 8002ad8:	f7ff fe6e 	bl	80027b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 8002adc:	7b63      	ldrb	r3, [r4, #13]
 8002ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ae2:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
 8002ae4:	4b23      	ldr	r3, [pc, #140]	; (8002b74 <z_thread_single_abort+0xfc>)
 8002ae6:	6898      	ldr	r0, [r3, #8]
 8002ae8:	1b02      	subs	r2, r0, r4
 8002aea:	4250      	negs	r0, r2
 8002aec:	4150      	adcs	r0, r2
 8002aee:	f7ff fe79 	bl	80027e4 <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8002af2:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
 8002af6:	2700      	movs	r7, #0
 8002af8:	e01d      	b.n	8002b36 <z_thread_single_abort+0xbe>
			if (z_is_thread_pending(thread)) {
 8002afa:	079b      	lsls	r3, r3, #30
 8002afc:	d5f9      	bpl.n	8002af2 <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
 8002afe:	68a0      	ldr	r0, [r4, #8]
 8002b00:	4621      	mov	r1, r4
 8002b02:	f7ff fe59 	bl	80027b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8002b06:	7b63      	ldrb	r3, [r4, #13]
 8002b08:	f023 0302 	bic.w	r3, r3, #2
 8002b0c:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60a3      	str	r3, [r4, #8]
 8002b12:	e7ee      	b.n	8002af2 <z_thread_single_abort+0x7a>
 8002b14:	f105 0018 	add.w	r0, r5, #24
 8002b18:	f000 ff8b 	bl	8003a32 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
 8002b1c:	68a8      	ldr	r0, [r5, #8]
 8002b1e:	4629      	mov	r1, r5
 8002b20:	f7ff fe4a 	bl	80027b8 <z_priq_dumb_remove>
 8002b24:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
 8002b26:	60af      	str	r7, [r5, #8]
 8002b28:	f023 0302 	bic.w	r3, r3, #2
 8002b2c:	736b      	strb	r3, [r5, #13]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8002b2e:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
 8002b30:	4628      	mov	r0, r5
 8002b32:	f7ff fe9b 	bl	800286c <ready_thread>
	return list->head == list;
 8002b36:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002b38:	4545      	cmp	r5, r8
 8002b3a:	d001      	beq.n	8002b40 <z_thread_single_abort+0xc8>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
 8002b3c:	2d00      	cmp	r5, #0
 8002b3e:	d1e9      	bne.n	8002b14 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <z_thread_single_abort+0xfc>)
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <z_thread_single_abort+0x100>)
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d102      	bne.n	8002b50 <z_thread_single_abort+0xd8>
			update_cache(1);
 8002b4a:	2001      	movs	r0, #1
 8002b4c:	f7ff fe4a 	bl	80027e4 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
 8002b50:	7b63      	ldrb	r3, [r4, #13]
 8002b52:	f043 0308 	orr.w	r3, r3, #8
 8002b56:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
 8002b58:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
 8002b5a:	f386 8811 	msr	BASEPRI, r6
 8002b5e:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d09b      	beq.n	8002a9e <z_thread_single_abort+0x26>
		fn_abort(thread);
 8002b66:	4620      	mov	r0, r4
}
 8002b68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
 8002b6c:	4718      	bx	r3
 8002b6e:	bf00      	nop
 8002b70:	20000384 	.word	0x20000384
 8002b74:	2000035c 	.word	0x2000035c
 8002b78:	20000120 	.word	0x20000120

08002b7c <unready_thread>:
{
 8002b7c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 8002b7e:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8002b82:	2b00      	cmp	r3, #0
{
 8002b84:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 8002b86:	da06      	bge.n	8002b96 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
 8002b88:	4807      	ldr	r0, [pc, #28]	; (8002ba8 <unready_thread+0x2c>)
 8002b8a:	f7ff fe15 	bl	80027b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 8002b8e:	7b4b      	ldrb	r3, [r1, #13]
 8002b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b94:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
 8002b96:	4b05      	ldr	r3, [pc, #20]	; (8002bac <unready_thread+0x30>)
 8002b98:	6898      	ldr	r0, [r3, #8]
 8002b9a:	1a43      	subs	r3, r0, r1
 8002b9c:	4258      	negs	r0, r3
 8002b9e:	4158      	adcs	r0, r3
}
 8002ba0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 8002ba4:	f7ff be1e 	b.w	80027e4 <update_cache>
 8002ba8:	20000384 	.word	0x20000384
 8002bac:	2000035c 	.word	0x2000035c

08002bb0 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
 8002bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bb2:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
 8002bb4:	f000 ff7d 	bl	8003ab2 <z_tick_get_32>
 8002bb8:	182c      	adds	r4, r5, r0
	__asm__ volatile(
 8002bba:	f04f 0310 	mov.w	r3, #16
 8002bbe:	f3ef 8711 	mrs	r7, BASEPRI
 8002bc2:	f383 8811 	msr	BASEPRI, r3
 8002bc6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 8002bca:	4e0d      	ldr	r6, [pc, #52]	; (8002c00 <z_tick_sleep.part.0+0x50>)
 8002bcc:	4b0d      	ldr	r3, [pc, #52]	; (8002c04 <z_tick_sleep.part.0+0x54>)
 8002bce:	68b0      	ldr	r0, [r6, #8]
 8002bd0:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
 8002bd2:	f7ff ffd3 	bl	8002b7c <unready_thread>
	z_add_thread_timeout(_current, timeout);
 8002bd6:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
 8002bd8:	490b      	ldr	r1, [pc, #44]	; (8002c08 <z_tick_sleep.part.0+0x58>)
 8002bda:	462a      	mov	r2, r5
 8002bdc:	17eb      	asrs	r3, r5, #31
 8002bde:	3018      	adds	r0, #24
 8002be0:	f000 f976 	bl	8002ed0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 8002be4:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8002be6:	7b53      	ldrb	r3, [r2, #13]
 8002be8:	f043 0310 	orr.w	r3, r3, #16
 8002bec:	7353      	strb	r3, [r2, #13]
 8002bee:	4638      	mov	r0, r7
 8002bf0:	f7fe fb9e 	bl	8001330 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
 8002bf4:	f000 ff5d 	bl	8003ab2 <z_tick_get_32>
 8002bf8:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
 8002bfa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8002bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c00:	2000035c 	.word	0x2000035c
 8002c04:	2000038c 	.word	0x2000038c
 8002c08:	080039f3 	.word	0x080039f3

08002c0c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 8002c0c:	4b04      	ldr	r3, [pc, #16]	; (8002c20 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 8002c0e:	2100      	movs	r1, #0
 8002c10:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
 8002c14:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 8002c18:	4608      	mov	r0, r1
 8002c1a:	f7ff bd87 	b.w	800272c <k_sched_time_slice_set>
 8002c1e:	bf00      	nop
 8002c20:	2000035c 	.word	0x2000035c

08002c24 <z_impl_k_yield>:
{
 8002c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
 8002c26:	4c24      	ldr	r4, [pc, #144]	; (8002cb8 <z_impl_k_yield+0x94>)
 8002c28:	4b24      	ldr	r3, [pc, #144]	; (8002cbc <z_impl_k_yield+0x98>)
 8002c2a:	68a2      	ldr	r2, [r4, #8]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d030      	beq.n	8002c92 <z_impl_k_yield+0x6e>
 8002c30:	f04f 0310 	mov.w	r3, #16
 8002c34:	f3ef 8511 	mrs	r5, BASEPRI
 8002c38:	f383 8811 	msr	BASEPRI, r3
 8002c3c:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
 8002c40:	68a1      	ldr	r1, [r4, #8]
 8002c42:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8002c46:	f7ff fdb7 	bl	80027b8 <z_priq_dumb_remove>
	return list->head == list;
 8002c4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
 8002c4c:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8002c4e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002c50:	4283      	cmp	r3, r0
 8002c52:	bf08      	it	eq
 8002c54:	2300      	moveq	r3, #0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	bf38      	it	cc
 8002c5a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8002c5c:	b32b      	cbz	r3, 8002caa <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
 8002c5e:	f992 700e 	ldrsb.w	r7, [r2, #14]
 8002c62:	f993 600e 	ldrsb.w	r6, [r3, #14]
 8002c66:	42b7      	cmp	r7, r6
 8002c68:	db03      	blt.n	8002c72 <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
 8002c6a:	428b      	cmp	r3, r1
 8002c6c:	d01d      	beq.n	8002caa <z_impl_k_yield+0x86>
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	e7f4      	b.n	8002c5c <z_impl_k_yield+0x38>
	node->prev = successor->prev;
 8002c72:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
 8002c74:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
 8002c78:	600a      	str	r2, [r1, #0]
	successor->prev = node;
 8002c7a:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
 8002c7c:	7b53      	ldrb	r3, [r2, #13]
 8002c7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c82:	7353      	strb	r3, [r2, #13]
			update_cache(1);
 8002c84:	2001      	movs	r0, #1
 8002c86:	f7ff fdad 	bl	80027e4 <update_cache>
	__asm__ volatile(
 8002c8a:	f385 8811 	msr	BASEPRI, r5
 8002c8e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 8002c92:	f04f 0310 	mov.w	r3, #16
 8002c96:	f3ef 8011 	mrs	r0, BASEPRI
 8002c9a:	f383 8811 	msr	BASEPRI, r3
 8002c9e:	f3bf 8f6f 	isb	sy
}
 8002ca2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002ca6:	f7fe bb43 	b.w	8001330 <arch_swap>
	node->prev = list->tail;
 8002caa:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
 8002cae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002cb0:	601a      	str	r2, [r3, #0]
	list->tail = node;
 8002cb2:	62e2      	str	r2, [r4, #44]	; 0x2c
}
 8002cb4:	e7e2      	b.n	8002c7c <z_impl_k_yield+0x58>
 8002cb6:	bf00      	nop
 8002cb8:	2000035c 	.word	0x2000035c
 8002cbc:	20000120 	.word	0x20000120

08002cc0 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
 8002cc0:	460b      	mov	r3, r1

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	bf08      	it	eq
 8002cc6:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 8002cca:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002ccc:	d106      	bne.n	8002cdc <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 8002cce:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <z_impl_k_sleep+0x3c>)
 8002cd0:	6898      	ldr	r0, [r3, #8]
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_SUSPEND);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_suspend(thread);
 8002cd2:	f7ff fe9d 	bl	8002a10 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
 8002cd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
 8002cda:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
 8002cdc:	4604      	mov	r4, r0
	if (ticks == 0) {
 8002cde:	b940      	cbnz	r0, 8002cf2 <z_impl_k_sleep+0x32>
	z_impl_k_yield();
 8002ce0:	f7ff ffa0 	bl	8002c24 <z_impl_k_yield>
			return t / (from_hz / to_hz);
 8002ce4:	220a      	movs	r2, #10
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	4620      	mov	r0, r4
 8002cea:	17e1      	asrs	r1, r4, #31
 8002cec:	f7fd fa4c 	bl	8000188 <__aeabi_uldivmod>
	return k_ticks_to_ms_floor64(ticks);
 8002cf0:	e7f3      	b.n	8002cda <z_impl_k_sleep+0x1a>
 8002cf2:	f7ff ff5d 	bl	8002bb0 <z_tick_sleep.part.0>
 8002cf6:	4604      	mov	r4, r0
 8002cf8:	e7f4      	b.n	8002ce4 <z_impl_k_sleep+0x24>
 8002cfa:	bf00      	nop
 8002cfc:	2000035c 	.word	0x2000035c

08002d00 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 8002d00:	4b01      	ldr	r3, [pc, #4]	; (8002d08 <z_impl_k_current_get+0x8>)
 8002d02:	6898      	ldr	r0, [r3, #8]
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	2000035c 	.word	0x2000035c

08002d0c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8002d0c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
 8002d10:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
 8002d14:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
 8002d18:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8002d1a:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 8002d1c:	2504      	movs	r5, #4
 8002d1e:	7345      	strb	r5, [r0, #13]
{
 8002d20:	460f      	mov	r7, r1

	thread_base->prio = priority;
 8002d22:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8002d24:	7385      	strb	r5, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8002d26:	1dd6      	adds	r6, r2, #7

	thread_base->sched_locked = 0U;
 8002d28:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002d2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
 8002d2c:	73c5      	strb	r5, [r0, #15]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8002d2e:	f026 0607 	bic.w	r6, r6, #7

#define K_KERNEL_STACK_SIZEOF(sym) (sizeof(sym) - K_KERNEL_STACK_RESERVED)

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 8002d32:	3720      	adds	r7, #32
	node->prev = NULL;
 8002d34:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
 8002d38:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	new_thread->stack_info.delta = delta;
 8002d3c:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8002d3e:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002d42:	9202      	str	r2, [sp, #8]
 8002d44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002d46:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
 8002d48:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002d4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002d4c:	9200      	str	r2, [sp, #0]
 8002d4e:	4642      	mov	r2, r8
{
 8002d50:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002d52:	f7fe fb69 	bl	8001428 <arch_new_thread>
	if (!_current) {
 8002d56:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <z_setup_new_thread+0x60>)
 8002d58:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
 8002d5a:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
 8002d5e:	b103      	cbz	r3, 8002d62 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
 8002d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
 8002d62:	6763      	str	r3, [r4, #116]	; 0x74
}
 8002d64:	4640      	mov	r0, r8
 8002d66:	b004      	add	sp, #16
 8002d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d6c:	2000035c 	.word	0x2000035c

08002d70 <z_init_static_threads>:
{
 8002d70:	b5f0      	push	{r4, r5, r6, r7, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
 8002d72:	4f22      	ldr	r7, [pc, #136]	; (8002dfc <z_init_static_threads+0x8c>)
 8002d74:	4d22      	ldr	r5, [pc, #136]	; (8002e00 <z_init_static_threads+0x90>)
{
 8002d76:	b087      	sub	sp, #28
 8002d78:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
 8002d7a:	42bd      	cmp	r5, r7
 8002d7c:	f105 0430 	add.w	r4, r5, #48	; 0x30
 8002d80:	d30b      	bcc.n	8002d9a <z_init_static_threads+0x2a>
	k_sched_lock();
 8002d82:	f7ff fd05 	bl	8002790 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 8002d86:	4c1e      	ldr	r4, [pc, #120]	; (8002e00 <z_init_static_threads+0x90>)
 8002d88:	4f1e      	ldr	r7, [pc, #120]	; (8002e04 <z_init_static_threads+0x94>)
		} else {
			return t * (to_hz / from_hz);
 8002d8a:	250a      	movs	r5, #10
 8002d8c:	42b4      	cmp	r4, r6
 8002d8e:	d321      	bcc.n	8002dd4 <z_init_static_threads+0x64>
}
 8002d90:	b007      	add	sp, #28
 8002d92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 8002d96:	f7ff bd4d 	b.w	8002834 <k_sched_unlock>
		z_setup_new_thread(
 8002d9a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002d9e:	9305      	str	r3, [sp, #20]
 8002da0:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8002da4:	9304      	str	r3, [sp, #16]
 8002da6:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8002daa:	9303      	str	r3, [sp, #12]
 8002dac:	f854 3c18 	ldr.w	r3, [r4, #-24]
 8002db0:	9302      	str	r3, [sp, #8]
 8002db2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8002db6:	9301      	str	r3, [sp, #4]
 8002db8:	f854 3c20 	ldr.w	r3, [r4, #-32]
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 8002dc2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 8002dc6:	f7ff ffa1 	bl	8002d0c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 8002dca:	f854 3c30 	ldr.w	r3, [r4, #-48]
 8002dce:	65dd      	str	r5, [r3, #92]	; 0x5c
 8002dd0:	4625      	mov	r5, r4
 8002dd2:	e7d2      	b.n	8002d7a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8002dd4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002dd6:	1c53      	adds	r3, r2, #1
 8002dd8:	d009      	beq.n	8002dee <z_init_static_threads+0x7e>
					    K_MSEC(thread_data->init_delay));
 8002dda:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8002dde:	fb82 2305 	smull	r2, r3, r2, r5
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8002de2:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 8002de6:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8002de8:	d103      	bne.n	8002df2 <z_init_static_threads+0x82>
	z_sched_start(thread);
 8002dea:	f7ff fd77 	bl	80028dc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 8002dee:	3430      	adds	r4, #48	; 0x30
 8002df0:	e7cc      	b.n	8002d8c <z_init_static_threads+0x1c>
 8002df2:	4639      	mov	r1, r7
 8002df4:	3018      	adds	r0, #24
 8002df6:	f000 f86b 	bl	8002ed0 <z_add_timeout>
 8002dfa:	e7f8      	b.n	8002dee <z_init_static_threads+0x7e>
 8002dfc:	20000120 	.word	0x20000120
 8002e00:	20000120 	.word	0x20000120
 8002e04:	080039f3 	.word	0x080039f3

08002e08 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os);

FUNC_NORETURN void z_self_abort(void)
{
 8002e08:	b508      	push	{r3, lr}
 8002e0a:	f04f 0310 	mov.w	r3, #16
 8002e0e:	f3ef 8411 	mrs	r4, BASEPRI
 8002e12:	f383 8811 	msr	BASEPRI, r3
 8002e16:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
 8002e1a:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <z_self_abort+0x24>)
 8002e1c:	6898      	ldr	r0, [r3, #8]
 8002e1e:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
 8002e20:	f7ff fdf6 	bl	8002a10 <z_impl_k_thread_suspend>
 8002e24:	4620      	mov	r0, r4
 8002e26:	f7fe fa83 	bl	8001330 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE;
 8002e2a:	bf00      	nop
 8002e2c:	2000035c 	.word	0x2000035c

08002e30 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
 8002e30:	4b03      	ldr	r3, [pc, #12]	; (8002e40 <elapsed+0x10>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	b90b      	cbnz	r3, 8002e3a <elapsed+0xa>
 8002e36:	f7fe ba5d 	b.w	80012f4 <z_clock_elapsed>
}
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	20000398 	.word	0x20000398

08002e44 <remove_timeout>:
{
 8002e44:	b530      	push	{r4, r5, lr}
 8002e46:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8002e48:	b168      	cbz	r0, 8002e66 <remove_timeout+0x22>
 8002e4a:	4a0a      	ldr	r2, [pc, #40]	; (8002e74 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
 8002e4c:	6852      	ldr	r2, [r2, #4]
 8002e4e:	4290      	cmp	r0, r2
 8002e50:	d009      	beq.n	8002e66 <remove_timeout+0x22>
	if (next(t) != NULL) {
 8002e52:	b143      	cbz	r3, 8002e66 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 8002e54:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8002e58:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8002e5c:	1912      	adds	r2, r2, r4
 8002e5e:	eb45 0101 	adc.w	r1, r5, r1
 8002e62:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
 8002e66:	6842      	ldr	r2, [r0, #4]
 8002e68:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 8002e6a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8002e6c:	2300      	movs	r3, #0
	node->prev = NULL;
 8002e6e:	e9c0 3300 	strd	r3, r3, [r0]
}
 8002e72:	bd30      	pop	{r4, r5, pc}
 8002e74:	20000030 	.word	0x20000030

08002e78 <next_timeout>:

static int32_t next_timeout(void)
{
 8002e78:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
 8002e7a:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <next_timeout+0x50>)
 8002e7c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002e7e:	429c      	cmp	r4, r3
 8002e80:	bf08      	it	eq
 8002e82:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 8002e84:	f7ff ffd4 	bl	8002e30 <elapsed>
 8002e88:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
 8002e8a:	b1bc      	cbz	r4, 8002ebc <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 8002e8c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8002e90:	1b40      	subs	r0, r0, r5
 8002e92:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
 8002e96:	2801      	cmp	r0, #1
 8002e98:	f171 0300 	sbcs.w	r3, r1, #0
 8002e9c:	db11      	blt.n	8002ec2 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 8002e9e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	4282      	cmp	r2, r0
 8002ea6:	eb73 0401 	sbcs.w	r4, r3, r1
 8002eaa:	da00      	bge.n	8002eae <next_timeout+0x36>
 8002eac:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8002eae:	4b07      	ldr	r3, [pc, #28]	; (8002ecc <next_timeout+0x54>)
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	b113      	cbz	r3, 8002eba <next_timeout+0x42>
 8002eb4:	4298      	cmp	r0, r3
 8002eb6:	bfa8      	it	ge
 8002eb8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 8002eba:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
 8002ebc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8002ec0:	e7f5      	b.n	8002eae <next_timeout+0x36>
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	e7f3      	b.n	8002eae <next_timeout+0x36>
 8002ec6:	bf00      	nop
 8002ec8:	20000030 	.word	0x20000030
 8002ecc:	2000035c 	.word	0x2000035c

08002ed0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
 8002ed0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ed4:	9101      	str	r1, [sp, #4]
 8002ed6:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002ed8:	1c4b      	adds	r3, r1, #1
 8002eda:	bf08      	it	eq
 8002edc:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 8002ee0:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002ee2:	d06c      	beq.n	8002fbe <z_add_timeout+0xee>
#endif

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
 8002ee4:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
 8002ee6:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
 8002eea:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
 8002eee:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8002ef2:	ebb3 0804 	subs.w	r8, r3, r4
 8002ef6:	eb6b 0905 	sbc.w	r9, fp, r5
 8002efa:	f1b8 0f00 	cmp.w	r8, #0
 8002efe:	f179 0300 	sbcs.w	r3, r9, #0
 8002f02:	db0f      	blt.n	8002f24 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
 8002f04:	f7ff ff94 	bl	8002e30 <elapsed>
 8002f08:	4a33      	ldr	r2, [pc, #204]	; (8002fd8 <z_add_timeout+0x108>)
 8002f0a:	e9d2 1c00 	ldrd	r1, ip, [r2]
 8002f0e:	f06f 0301 	mvn.w	r3, #1
 8002f12:	1a5b      	subs	r3, r3, r1
 8002f14:	eb6b 020c 	sbc.w	r2, fp, ip
 8002f18:	1b1e      	subs	r6, r3, r4
 8002f1a:	eb62 0705 	sbc.w	r7, r2, r5
 8002f1e:	1a34      	subs	r4, r6, r0
 8002f20:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8002f24:	9b01      	ldr	r3, [sp, #4]
 8002f26:	f8ca 3008 	str.w	r3, [sl, #8]
 8002f2a:	f04f 0310 	mov.w	r3, #16
 8002f2e:	f3ef 8611 	mrs	r6, BASEPRI
 8002f32:	f383 8811 	msr	BASEPRI, r3
 8002f36:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
 8002f3a:	f7ff ff79 	bl	8002e30 <elapsed>
	ticks = MAX(1, ticks);
 8002f3e:	2c01      	cmp	r4, #1
 8002f40:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
 8002f44:	4b25      	ldr	r3, [pc, #148]	; (8002fdc <z_add_timeout+0x10c>)
 8002f46:	bfb8      	it	lt
 8002f48:	2401      	movlt	r4, #1
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	bfb8      	it	lt
 8002f4e:	2500      	movlt	r5, #0
		to->dticks = ticks + elapsed();
 8002f50:	1824      	adds	r4, r4, r0
 8002f52:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002f56:	429a      	cmp	r2, r3
 8002f58:	e9ca 4504 	strd	r4, r5, [sl, #16]
 8002f5c:	d001      	beq.n	8002f62 <z_add_timeout+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8002f5e:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
 8002f60:	b952      	cbnz	r2, 8002f78 <z_add_timeout+0xa8>
	node->prev = list->tail;
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
 8002f68:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 8002f6a:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
 8002f6e:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
 8002f72:	f8c3 a004 	str.w	sl, [r3, #4]
}
 8002f76:	e014      	b.n	8002fa2 <z_add_timeout+0xd2>
			if (t->dticks > to->dticks) {
 8002f78:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
 8002f7c:	e9da 4504 	ldrd	r4, r5, [sl, #16]
 8002f80:	4544      	cmp	r4, r8
 8002f82:	eb75 0109 	sbcs.w	r1, r5, r9
 8002f86:	da1d      	bge.n	8002fc4 <z_add_timeout+0xf4>
				t->dticks -= to->dticks;
 8002f88:	ebb8 0004 	subs.w	r0, r8, r4
 8002f8c:	eb69 0105 	sbc.w	r1, r9, r5
 8002f90:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
 8002f94:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 8002f96:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
 8002f9a:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
 8002f9e:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
 8002fa2:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d006      	beq.n	8002fb6 <z_add_timeout+0xe6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8002fa8:	4592      	cmp	sl, r2
 8002faa:	d104      	bne.n	8002fb6 <z_add_timeout+0xe6>
			z_clock_set_timeout(next_timeout(), false);
 8002fac:	f7ff ff64 	bl	8002e78 <next_timeout>
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	f7fe f93d 	bl	8001230 <z_clock_set_timeout>
	__asm__ volatile(
 8002fb6:	f386 8811 	msr	BASEPRI, r6
 8002fba:	f3bf 8f6f 	isb	sy
		}
	}
}
 8002fbe:	b003      	add	sp, #12
 8002fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
 8002fc4:	ebb4 0008 	subs.w	r0, r4, r8
 8002fc8:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
 8002fcc:	42ba      	cmp	r2, r7
 8002fce:	e9ca 0104 	strd	r0, r1, [sl, #16]
 8002fd2:	d0c6      	beq.n	8002f62 <z_add_timeout+0x92>
 8002fd4:	6812      	ldr	r2, [r2, #0]
 8002fd6:	e7c3      	b.n	8002f60 <z_add_timeout+0x90>
 8002fd8:	20000220 	.word	0x20000220
 8002fdc:	20000030 	.word	0x20000030

08002fe0 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
 8002fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fe4:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 8002fe6:	f7ff fcd1 	bl	800298c <z_time_slice>
	__asm__ volatile(
 8002fea:	f04f 0310 	mov.w	r3, #16
 8002fee:	f3ef 8411 	mrs	r4, BASEPRI
 8002ff2:	f383 8811 	msr	BASEPRI, r3
 8002ff6:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 8002ffa:	4d2c      	ldr	r5, [pc, #176]	; (80030ac <z_clock_announce+0xcc>)
 8002ffc:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 80030b0 <z_clock_announce+0xd0>
	return list->head == list;
 8003000:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 80030b4 <z_clock_announce+0xd4>
 8003004:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
 8003006:	4651      	mov	r1, sl
 8003008:	f8d5 c000 	ldr.w	ip, [r5]
 800300c:	f8db 0000 	ldr.w	r0, [fp]
 8003010:	4662      	mov	r2, ip
 8003012:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003014:	4558      	cmp	r0, fp
 8003016:	e9da 8900 	ldrd	r8, r9, [sl]
 800301a:	e9cd 2300 	strd	r2, r3, [sp]
 800301e:	d00d      	beq.n	800303c <z_clock_announce+0x5c>
 8003020:	b160      	cbz	r0, 800303c <z_clock_announce+0x5c>
 8003022:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
 8003026:	45b4      	cmp	ip, r6
 8003028:	41bb      	sbcs	r3, r7
 800302a:	da1e      	bge.n	800306a <z_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 800302c:	9b00      	ldr	r3, [sp, #0]
 800302e:	ebb6 0c03 	subs.w	ip, r6, r3
 8003032:	9b01      	ldr	r3, [sp, #4]
 8003034:	eb67 0603 	sbc.w	r6, r7, r3
 8003038:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
 800303c:	9b00      	ldr	r3, [sp, #0]
 800303e:	eb13 0208 	adds.w	r2, r3, r8
 8003042:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
 8003044:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
 8003048:	eb43 0309 	adc.w	r3, r3, r9
 800304c:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
 8003050:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
 8003052:	f7ff ff11 	bl	8002e78 <next_timeout>
 8003056:	4631      	mov	r1, r6
 8003058:	f7fe f8ea 	bl	8001230 <z_clock_set_timeout>
	__asm__ volatile(
 800305c:	f384 8811 	msr	BASEPRI, r4
 8003060:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8003064:	b003      	add	sp, #12
 8003066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
 800306a:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
 8003076:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
 800307a:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
 800307e:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
 8003082:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
 8003086:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
 8003088:	f7ff fedc 	bl	8002e44 <remove_timeout>
 800308c:	f384 8811 	msr	BASEPRI, r4
 8003090:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8003094:	6883      	ldr	r3, [r0, #8]
 8003096:	4798      	blx	r3
	__asm__ volatile(
 8003098:	f04f 0310 	mov.w	r3, #16
 800309c:	f3ef 8411 	mrs	r4, BASEPRI
 80030a0:	f383 8811 	msr	BASEPRI, r3
 80030a4:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
 80030a8:	4901      	ldr	r1, [pc, #4]	; (80030b0 <z_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 80030aa:	e7ad      	b.n	8003008 <z_clock_announce+0x28>
 80030ac:	20000398 	.word	0x20000398
 80030b0:	20000220 	.word	0x20000220
 80030b4:	20000030 	.word	0x20000030

080030b8 <z_tick_get>:

int64_t z_tick_get(void)
{
 80030b8:	b510      	push	{r4, lr}
 80030ba:	f04f 0310 	mov.w	r3, #16
 80030be:	f3ef 8411 	mrs	r4, BASEPRI
 80030c2:	f383 8811 	msr	BASEPRI, r3
 80030c6:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
 80030ca:	f7fe f913 	bl	80012f4 <z_clock_elapsed>
 80030ce:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <z_tick_get+0x30>)
 80030d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d4:	1812      	adds	r2, r2, r0
 80030d6:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
 80030da:	f384 8811 	msr	BASEPRI, r4
 80030de:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 80030e2:	4610      	mov	r0, r2
 80030e4:	4619      	mov	r1, r3
 80030e6:	bd10      	pop	{r4, pc}
 80030e8:	20000220 	.word	0x20000220

080030ec <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
 80030ec:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 80030ee:	4c06      	ldr	r4, [pc, #24]	; (8003108 <statics_init+0x1c>)
 80030f0:	4d06      	ldr	r5, [pc, #24]	; (800310c <statics_init+0x20>)
 80030f2:	42ac      	cmp	r4, r5
 80030f4:	d301      	bcc.n	80030fa <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
 80030f6:	2000      	movs	r0, #0
 80030f8:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 80030fa:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80030fe:	4620      	mov	r0, r4
 8003100:	f000 fd11 	bl	8003b26 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 8003104:	3414      	adds	r4, #20
 8003106:	e7f4      	b.n	80030f2 <statics_init+0x6>
 8003108:	20000120 	.word	0x20000120
 800310c:	20000120 	.word	0x20000120

08003110 <arch_printk_char_out>:
}
 8003110:	2000      	movs	r0, #0
 8003112:	4770      	bx	lr

08003114 <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
 8003114:	b40f      	push	{r0, r1, r2, r3}
 8003116:	b507      	push	{r0, r1, r2, lr}
 8003118:	a904      	add	r1, sp, #16
 800311a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 800311e:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
 8003120:	f7fd fad8 	bl	80006d4 <vprintk>
	}
	va_end(ap);
}
 8003124:	b003      	add	sp, #12
 8003126:	f85d eb04 	ldr.w	lr, [sp], #4
 800312a:	b004      	add	sp, #16
 800312c:	4770      	bx	lr

0800312e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 800312e:	4604      	mov	r4, r0
 8003130:	b508      	push	{r3, lr}
 8003132:	4608      	mov	r0, r1
 8003134:	4611      	mov	r1, r2
	entry(p1, p2, p3);
 8003136:	461a      	mov	r2, r3
 8003138:	47a0      	blx	r4
	return z_impl_k_current_get();
 800313a:	f7ff fde1 	bl	8002d00 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
 800313e:	f7fe fb2b 	bl	8001798 <z_impl_k_thread_abort>

08003142 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 8003142:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
 8003144:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 8003148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
 800314c:	bf2c      	ite	cs
 800314e:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
 8003152:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
 8003156:	4770      	bx	lr

08003158 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
 8003158:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
 800315c:	6880      	ldr	r0, [r0, #8]
 800315e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
 8003162:	bf2c      	ite	cs
 8003164:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
 8003168:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
 800316c:	4770      	bx	lr

0800316e <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
 800316e:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 8003170:	2201      	movs	r2, #1
 8003172:	f7ff ffe6 	bl	8003142 <chunk_field>
}
 8003176:	0840      	lsrs	r0, r0, #1
 8003178:	bd08      	pop	{r3, pc}

0800317a <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 800317a:	6883      	ldr	r3, [r0, #8]
 800317c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
 8003180:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 8003184:	d308      	bcc.n	8003198 <set_chunk_used+0x1e>
		if (used) {
 8003186:	684b      	ldr	r3, [r1, #4]
 8003188:	b11a      	cbz	r2, 8003192 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
 800318a:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
 800318e:	604b      	str	r3, [r1, #4]
 8003190:	4770      	bx	lr
 8003192:	f023 0301 	bic.w	r3, r3, #1
 8003196:	e7fa      	b.n	800318e <set_chunk_used+0x14>
		}
	} else {
		if (used) {
 8003198:	884b      	ldrh	r3, [r1, #2]
 800319a:	b11a      	cbz	r2, 80031a4 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 800319c:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 80031a0:	804b      	strh	r3, [r1, #2]
		}
	}
}
 80031a2:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 80031a4:	f023 0301 	bic.w	r3, r3, #1
 80031a8:	e7fa      	b.n	80031a0 <set_chunk_used+0x26>

080031aa <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 80031aa:	0053      	lsls	r3, r2, #1
 80031ac:	2201      	movs	r2, #1
 80031ae:	f7ff bfd3 	b.w	8003158 <chunk_set>

080031b2 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
 80031b2:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
 80031b4:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 80031b6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80031ba:	bf2c      	ite	cs
 80031bc:	2002      	movcs	r0, #2
 80031be:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
 80031c0:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
 80031c2:	fab0 f080 	clz	r0, r0
}
 80031c6:	f1c0 001f 	rsb	r0, r0, #31
 80031ca:	4770      	bx	lr

080031cc <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
 80031cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031d0:	4604      	mov	r4, r0
 80031d2:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
 80031d4:	f7ff ffcb 	bl	800316e <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
 80031d8:	68a3      	ldr	r3, [r4, #8]
 80031da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031de:	4601      	mov	r1, r0
 80031e0:	d301      	bcc.n	80031e6 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
 80031e2:	2801      	cmp	r0, #1
 80031e4:	d035      	beq.n	8003252 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
 80031e6:	4620      	mov	r0, r4
 80031e8:	f7ff ffe3 	bl	80031b2 <bucket_idx>
	if (b->next == 0U) {
 80031ec:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 80031f0:	6916      	ldr	r6, [r2, #16]
 80031f2:	b99e      	cbnz	r6, 800321c <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
 80031f4:	2301      	movs	r3, #1
 80031f6:	fa03 f000 	lsl.w	r0, r3, r0
 80031fa:	68e3      	ldr	r3, [r4, #12]
 80031fc:	4303      	orrs	r3, r0
 80031fe:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
 8003200:	4629      	mov	r1, r5
		b->next = c;
 8003202:	6115      	str	r5, [r2, #16]
 8003204:	462b      	mov	r3, r5
 8003206:	2202      	movs	r2, #2
 8003208:	4620      	mov	r0, r4
 800320a:	f7ff ffa5 	bl	8003158 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 800320e:	2203      	movs	r2, #3
 8003210:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
 8003212:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
 8003214:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003218:	f7ff bf9e 	b.w	8003158 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
 800321c:	2202      	movs	r2, #2
 800321e:	4631      	mov	r1, r6
 8003220:	4620      	mov	r0, r4
 8003222:	f7ff ff8e 	bl	8003142 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
 8003226:	2202      	movs	r2, #2
 8003228:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
 800322a:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
 800322c:	4629      	mov	r1, r5
 800322e:	4620      	mov	r0, r4
 8003230:	f7ff ff92 	bl	8003158 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 8003234:	4633      	mov	r3, r6
 8003236:	2203      	movs	r2, #3
 8003238:	4629      	mov	r1, r5
 800323a:	4620      	mov	r0, r4
 800323c:	f7ff ff8c 	bl	8003158 <chunk_set>
 8003240:	2203      	movs	r2, #3
 8003242:	4639      	mov	r1, r7
 8003244:	462b      	mov	r3, r5
 8003246:	4620      	mov	r0, r4
 8003248:	f7ff ff86 	bl	8003158 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
 800324c:	2202      	movs	r2, #2
 800324e:	4631      	mov	r1, r6
 8003250:	e7df      	b.n	8003212 <free_list_add+0x46>
 8003252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003256 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
 8003256:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 800325a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800325c:	bf2c      	ite	cs
 800325e:	2508      	movcs	r5, #8
 8003260:	2504      	movcc	r5, #4
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 8003262:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8003264:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8003266:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8003268:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 800326c:	f025 0507 	bic.w	r5, r5, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
 8003270:	2200      	movs	r2, #0
 8003272:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
 8003274:	1b2d      	subs	r5, r5, r4
	heap->heap = h;
 8003276:	6004      	str	r4, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
 8003278:	08ed      	lsrs	r5, r5, #3
	h->chunk0_hdr_area = 0;
 800327a:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
 800327e:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
 8003280:	4629      	mov	r1, r5
	h->len = buf_sz;
 8003282:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
 8003284:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
 8003286:	4620      	mov	r0, r4
 8003288:	f7ff ff93 	bl	80031b2 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
 800328c:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 800328e:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
 8003290:	1c41      	adds	r1, r0, #1
 8003292:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 8003294:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
 8003298:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
 800329a:	428b      	cmp	r3, r1
 800329c:	db29      	blt.n	80032f2 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
 800329e:	4632      	mov	r2, r6
 80032a0:	4620      	mov	r0, r4
 80032a2:	2100      	movs	r1, #0
 80032a4:	f7ff ff81 	bl	80031aa <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
 80032a8:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
 80032aa:	4620      	mov	r0, r4
 80032ac:	2201      	movs	r2, #1
 80032ae:	2100      	movs	r1, #0
 80032b0:	f7ff ff63 	bl	800317a <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
 80032b4:	463a      	mov	r2, r7
 80032b6:	4631      	mov	r1, r6
 80032b8:	f7ff ff77 	bl	80031aa <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 80032bc:	4633      	mov	r3, r6
 80032be:	4631      	mov	r1, r6
 80032c0:	4620      	mov	r0, r4
 80032c2:	2200      	movs	r2, #0
 80032c4:	f7ff ff48 	bl	8003158 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
 80032c8:	4629      	mov	r1, r5
 80032ca:	4620      	mov	r0, r4
 80032cc:	2200      	movs	r2, #0
 80032ce:	f7ff ff6c 	bl	80031aa <set_chunk_size>
 80032d2:	463b      	mov	r3, r7
 80032d4:	4629      	mov	r1, r5
 80032d6:	4620      	mov	r0, r4
 80032d8:	2200      	movs	r2, #0
 80032da:	f7ff ff3d 	bl	8003158 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
 80032de:	4629      	mov	r1, r5
 80032e0:	4620      	mov	r0, r4
 80032e2:	2201      	movs	r2, #1
 80032e4:	f7ff ff49 	bl	800317a <set_chunk_used>

	free_list_add(h, chunk0_size);
 80032e8:	4631      	mov	r1, r6
}
 80032ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
 80032ee:	f7ff bf6d 	b.w	80031cc <free_list_add>
		h->buckets[i].next = 0;
 80032f2:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
 80032f6:	3301      	adds	r3, #1
 80032f8:	e7cf      	b.n	800329a <sys_heap_init+0x44>

080032fa <encode_uint>:
{
 80032fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032fe:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
 8003300:	78d3      	ldrb	r3, [r2, #3]
{
 8003302:	4614      	mov	r4, r2
	switch (specifier) {
 8003304:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
 8003306:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
 800330a:	4606      	mov	r6, r0
 800330c:	460f      	mov	r7, r1
 800330e:	9201      	str	r2, [sp, #4]
	switch (specifier) {
 8003310:	d02d      	beq.n	800336e <encode_uint+0x74>
 8003312:	d828      	bhi.n	8003366 <encode_uint+0x6c>
		return 16;
 8003314:	2b58      	cmp	r3, #88	; 0x58
 8003316:	bf14      	ite	ne
 8003318:	250a      	movne	r5, #10
 800331a:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
 800331c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
 8003320:	46aa      	mov	sl, r5
 8003322:	f04f 0b00 	mov.w	fp, #0
 8003326:	4652      	mov	r2, sl
 8003328:	465b      	mov	r3, fp
 800332a:	4630      	mov	r0, r6
 800332c:	4639      	mov	r1, r7
 800332e:	f7fc ff2b 	bl	8000188 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8003332:	2a09      	cmp	r2, #9
 8003334:	b2d3      	uxtb	r3, r2
 8003336:	d81f      	bhi.n	8003378 <encode_uint+0x7e>
 8003338:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
 800333a:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
 800333c:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
 800333e:	bf08      	it	eq
 8003340:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8003342:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
 8003346:	d301      	bcc.n	800334c <encode_uint+0x52>
 8003348:	45c8      	cmp	r8, r9
 800334a:	d812      	bhi.n	8003372 <encode_uint+0x78>
	if (conv->flag_hash) {
 800334c:	7823      	ldrb	r3, [r4, #0]
 800334e:	069b      	lsls	r3, r3, #26
 8003350:	d505      	bpl.n	800335e <encode_uint+0x64>
		if (radix == 8) {
 8003352:	2d08      	cmp	r5, #8
 8003354:	d116      	bne.n	8003384 <encode_uint+0x8a>
			conv->altform_0 = true;
 8003356:	78a3      	ldrb	r3, [r4, #2]
 8003358:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
 800335c:	70a3      	strb	r3, [r4, #2]
}
 800335e:	4640      	mov	r0, r8
 8003360:	b003      	add	sp, #12
 8003362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
 8003366:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
 800336a:	2b70      	cmp	r3, #112	; 0x70
 800336c:	e7d3      	b.n	8003316 <encode_uint+0x1c>
	switch (specifier) {
 800336e:	2508      	movs	r5, #8
 8003370:	e7d4      	b.n	800331c <encode_uint+0x22>
		value /= radix;
 8003372:	4606      	mov	r6, r0
 8003374:	460f      	mov	r7, r1
 8003376:	e7d6      	b.n	8003326 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 8003378:	9a01      	ldr	r2, [sp, #4]
 800337a:	2a19      	cmp	r2, #25
 800337c:	bf94      	ite	ls
 800337e:	3337      	addls	r3, #55	; 0x37
 8003380:	3357      	addhi	r3, #87	; 0x57
 8003382:	e7da      	b.n	800333a <encode_uint+0x40>
		} else if (radix == 16) {
 8003384:	2d10      	cmp	r5, #16
 8003386:	d1ea      	bne.n	800335e <encode_uint+0x64>
			conv->altform_0c = true;
 8003388:	78a3      	ldrb	r3, [r4, #2]
 800338a:	f043 0310 	orr.w	r3, r3, #16
 800338e:	e7e5      	b.n	800335c <encode_uint+0x62>

08003390 <outs>:
{
 8003390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003394:	4607      	mov	r7, r0
 8003396:	4688      	mov	r8, r1
 8003398:	4615      	mov	r5, r2
 800339a:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 800339c:	4614      	mov	r4, r2
 800339e:	42b4      	cmp	r4, r6
 80033a0:	eba4 0005 	sub.w	r0, r4, r5
 80033a4:	d302      	bcc.n	80033ac <outs+0x1c>
 80033a6:	b93e      	cbnz	r6, 80033b8 <outs+0x28>
 80033a8:	7823      	ldrb	r3, [r4, #0]
 80033aa:	b12b      	cbz	r3, 80033b8 <outs+0x28>
		int rc = out((int)*sp++, ctx);
 80033ac:	f814 0b01 	ldrb.w	r0, [r4], #1
 80033b0:	4641      	mov	r1, r8
 80033b2:	47b8      	blx	r7
		if (rc < 0) {
 80033b4:	2800      	cmp	r0, #0
 80033b6:	daf2      	bge.n	800339e <outs+0xe>
}
 80033b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080033bc <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 80033bc:	4770      	bx	lr

080033be <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, arg);
 80033be:	68c2      	ldr	r2, [r0, #12]
 80033c0:	2101      	movs	r1, #1
 80033c2:	2000      	movs	r0, #0
 80033c4:	f7fd bd36 	b.w	8000e34 <__stm32_exti_isr.isra.0>

080033c8 <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, arg);
 80033c8:	68c2      	ldr	r2, [r0, #12]
 80033ca:	2102      	movs	r1, #2
 80033cc:	2001      	movs	r0, #1
 80033ce:	f7fd bd31 	b.w	8000e34 <__stm32_exti_isr.isra.0>

080033d2 <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, arg);
 80033d2:	68c2      	ldr	r2, [r0, #12]
 80033d4:	2103      	movs	r1, #3
 80033d6:	2002      	movs	r0, #2
 80033d8:	f7fd bd2c 	b.w	8000e34 <__stm32_exti_isr.isra.0>

080033dc <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, arg);
 80033dc:	68c2      	ldr	r2, [r0, #12]
 80033de:	2104      	movs	r1, #4
 80033e0:	2003      	movs	r0, #3
 80033e2:	f7fd bd27 	b.w	8000e34 <__stm32_exti_isr.isra.0>

080033e6 <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, arg);
 80033e6:	68c2      	ldr	r2, [r0, #12]
 80033e8:	2105      	movs	r1, #5
 80033ea:	2004      	movs	r0, #4
 80033ec:	f7fd bd22 	b.w	8000e34 <__stm32_exti_isr.isra.0>

080033f0 <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, arg);
 80033f0:	68c2      	ldr	r2, [r0, #12]
 80033f2:	210a      	movs	r1, #10
 80033f4:	2005      	movs	r0, #5
 80033f6:	f7fd bd1d 	b.w	8000e34 <__stm32_exti_isr.isra.0>

080033fa <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, arg);
 80033fa:	68c2      	ldr	r2, [r0, #12]
 80033fc:	2110      	movs	r1, #16
 80033fe:	200a      	movs	r0, #10
 8003400:	f7fd bd18 	b.w	8000e34 <__stm32_exti_isr.isra.0>

08003404 <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32L5X) || \
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	IRQ_CONNECT(EXTI0_IRQn,
 8003404:	2200      	movs	r2, #0
{
 8003406:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 8003408:	4611      	mov	r1, r2
 800340a:	2006      	movs	r0, #6
 800340c:	f7fd fff4 	bl	80013f8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 8003410:	2200      	movs	r2, #0
 8003412:	4611      	mov	r1, r2
 8003414:	2007      	movs	r0, #7
 8003416:	f7fd ffef 	bl	80013f8 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 800341a:	2200      	movs	r2, #0
 800341c:	4611      	mov	r1, r2
 800341e:	2008      	movs	r0, #8
 8003420:	f7fd ffea 	bl	80013f8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 8003424:	2200      	movs	r2, #0
 8003426:	4611      	mov	r1, r2
 8003428:	2009      	movs	r0, #9
 800342a:	f7fd ffe5 	bl	80013f8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 800342e:	2200      	movs	r2, #0
 8003430:	4611      	mov	r1, r2
 8003432:	200a      	movs	r0, #10
 8003434:	f7fd ffe0 	bl	80013f8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI4_IRQ_PRI,
		__stm32_exti_isr_4, DEVICE_GET(exti_stm32),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 8003438:	2200      	movs	r2, #0
 800343a:	4611      	mov	r1, r2
 800343c:	2017      	movs	r0, #23
 800343e:	f7fd ffdb 	bl	80013f8 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 8003442:	2200      	movs	r2, #0
 8003444:	4611      	mov	r1, r2
 8003446:	2028      	movs	r0, #40	; 0x28
 8003448:	f7fd ffd6 	bl	80013f8 <z_arm_irq_priority_set>
}
 800344c:	2000      	movs	r0, #0
 800344e:	bd08      	pop	{r3, pc}

08003450 <config_pll_init>:
 * @brief fill in pll configuration structure
 */
void config_pll_init(LL_UTILS_PLLInitTypeDef *pllinit)
{
	pllinit->PLLM = pllm(CONFIG_CLOCK_STM32_PLL_M_DIVISOR);
	pllinit->PLLN = CONFIG_CLOCK_STM32_PLL_N_MULTIPLIER;
 8003450:	2314      	movs	r3, #20
 8003452:	2200      	movs	r2, #0
 8003454:	e9c0 2300 	strd	r2, r3, [r0]
	pllinit->PLLR = pllr(CONFIG_CLOCK_STM32_PLL_R_DIVISOR);
 8003458:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800345c:	6083      	str	r3, [r0, #8]
	/* set power boost mode for sys clock greater than 80MHz */
	if (sys_clock_hw_cycles_per_sec() >= MHZ(80)) {
		LL_PWR_EnableRange1BoostMode();
	}
#endif /* PWR_CR5_R1MODE */
}
 800345e:	4770      	bx	lr

08003460 <config_enable_default_clocks>:
	LL_PWR_DisableBkUpAccess();

	z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);

#endif
}
 8003460:	4770      	bx	lr

08003462 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8003462:	2100      	movs	r1, #0
 8003464:	2001      	movs	r0, #1
 8003466:	f000 b800 	b.w	800346a <z_arm_fatal_error>

0800346a <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 800346a:	f000 ba6b 	b.w	8003944 <z_fatal_error>

0800346e <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 800346e:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 8003470:	6800      	ldr	r0, [r0, #0]
 8003472:	f000 ba67 	b.w	8003944 <z_fatal_error>

08003476 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 8003476:	b508      	push	{r3, lr}
	handler();
 8003478:	f7fe f83a 	bl	80014f0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 800347c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8003480:	f7fe b970 	b.w	8001764 <z_arm_exc_exit>

08003484 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
 8003484:	4603      	mov	r3, r0
	size_t n = 0;
 8003486:	2000      	movs	r0, #0

	while (*s != '\0') {
 8003488:	5c1a      	ldrb	r2, [r3, r0]
 800348a:	b902      	cbnz	r2, 800348e <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
 800348c:	4770      	bx	lr
		n++;
 800348e:	3001      	adds	r0, #1
 8003490:	e7fa      	b.n	8003488 <strlen+0x4>

08003492 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
 8003492:	1e43      	subs	r3, r0, #1
 8003494:	3901      	subs	r1, #1
 8003496:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800349a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800349e:	4282      	cmp	r2, r0
 80034a0:	d101      	bne.n	80034a6 <strcmp+0x14>
 80034a2:	2a00      	cmp	r2, #0
 80034a4:	d1f7      	bne.n	8003496 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
 80034a6:	1a10      	subs	r0, r2, r0
 80034a8:	4770      	bx	lr

080034aa <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
 80034aa:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
 80034ac:	ea81 0400 	eor.w	r4, r1, r0
 80034b0:	07a5      	lsls	r5, r4, #30
 80034b2:	4603      	mov	r3, r0
 80034b4:	d00b      	beq.n	80034ce <memcpy+0x24>
 80034b6:	3b01      	subs	r3, #1
 80034b8:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
 80034ba:	4291      	cmp	r1, r2
 80034bc:	d11b      	bne.n	80034f6 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 80034be:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
 80034c0:	2a00      	cmp	r2, #0
 80034c2:	d0fc      	beq.n	80034be <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
 80034c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034c8:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
 80034cc:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
 80034ce:	079c      	lsls	r4, r3, #30
 80034d0:	d1f6      	bne.n	80034c0 <memcpy+0x16>
 80034d2:	f022 0403 	bic.w	r4, r2, #3
 80034d6:	1f1d      	subs	r5, r3, #4
 80034d8:	0896      	lsrs	r6, r2, #2
 80034da:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
 80034dc:	42b9      	cmp	r1, r7
 80034de:	d105      	bne.n	80034ec <memcpy+0x42>
 80034e0:	f06f 0503 	mvn.w	r5, #3
 80034e4:	fb05 2206 	mla	r2, r5, r6, r2
 80034e8:	4423      	add	r3, r4
 80034ea:	e7e4      	b.n	80034b6 <memcpy+0xc>
			*(d_word++) = *(s_word++);
 80034ec:	f851 cb04 	ldr.w	ip, [r1], #4
 80034f0:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
 80034f4:	e7f2      	b.n	80034dc <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
 80034f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034fa:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 80034fe:	e7dc      	b.n	80034ba <memcpy+0x10>

08003500 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
 8003500:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 8003502:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
 8003504:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
 8003506:	079c      	lsls	r4, r3, #30
 8003508:	d111      	bne.n	800352e <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
 800350a:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
 800350e:	f022 0603 	bic.w	r6, r2, #3
 8003512:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
 8003516:	441e      	add	r6, r3
 8003518:	0894      	lsrs	r4, r2, #2
 800351a:	42b3      	cmp	r3, r6
 800351c:	d10d      	bne.n	800353a <memset+0x3a>
 800351e:	f06f 0503 	mvn.w	r5, #3
 8003522:	fb05 2204 	mla	r2, r5, r4, r2
 8003526:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
 8003528:	4293      	cmp	r3, r2
 800352a:	d109      	bne.n	8003540 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 800352c:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
 800352e:	2a00      	cmp	r2, #0
 8003530:	d0fc      	beq.n	800352c <memset+0x2c>
		*(d_byte++) = c_byte;
 8003532:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8003536:	3a01      	subs	r2, #1
 8003538:	e7e5      	b.n	8003506 <memset+0x6>
		*(d_word++) = c_word;
 800353a:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
 800353e:	e7ec      	b.n	800351a <memset+0x1a>
		*(d_byte++) = c_byte;
 8003540:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8003544:	e7f0      	b.n	8003528 <memset+0x28>

08003546 <_stdout_hook_default>:
}
 8003546:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800354a:	4770      	bx	lr

0800354c <gpio_stm32_isr>:
{
 800354c:	460b      	mov	r3, r1
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 800354e:	6889      	ldr	r1, [r1, #8]
 8003550:	b570      	push	{r4, r5, r6, lr}
 8003552:	b1a9      	cbz	r1, 8003580 <gpio_stm32_isr+0x34>
 8003554:	680c      	ldr	r4, [r1, #0]
	gpio_fire_callbacks(&data->cb, data->dev, BIT(line));
 8003556:	685e      	ldr	r6, [r3, #4]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
 8003558:	2c00      	cmp	r4, #0
 800355a:	f04f 0501 	mov.w	r5, #1
 800355e:	bf38      	it	cc
 8003560:	2400      	movcc	r4, #0
 8003562:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 8003564:	688a      	ldr	r2, [r1, #8]
 8003566:	402a      	ands	r2, r5
 8003568:	d002      	beq.n	8003570 <gpio_stm32_isr+0x24>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 800356a:	684b      	ldr	r3, [r1, #4]
 800356c:	4630      	mov	r0, r6
 800356e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8003570:	b134      	cbz	r4, 8003580 <gpio_stm32_isr+0x34>
 8003572:	6823      	ldr	r3, [r4, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	bf38      	it	cc
 8003578:	2300      	movcc	r3, #0
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 800357a:	4621      	mov	r1, r4
 800357c:	461c      	mov	r4, r3
 800357e:	e7f1      	b.n	8003564 <gpio_stm32_isr+0x18>
}
 8003580:	bd70      	pop	{r4, r5, r6, pc}

08003582 <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8003582:	6843      	ldr	r3, [r0, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8003586:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8003588:	600b      	str	r3, [r1, #0]
}
 800358a:	2000      	movs	r0, #0
 800358c:	4770      	bx	lr

0800358e <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 800358e:	6843      	ldr	r3, [r0, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8003592:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8003594:	4042      	eors	r2, r0
 8003596:	400a      	ands	r2, r1
 8003598:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 800359a:	615a      	str	r2, [r3, #20]
}
 800359c:	2000      	movs	r0, #0
 800359e:	4770      	bx	lr

080035a0 <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80035a0:	6843      	ldr	r3, [r0, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
}
 80035a4:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 80035a6:	6199      	str	r1, [r3, #24]
}
 80035a8:	4770      	bx	lr

080035aa <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80035aa:	6843      	ldr	r3, [r0, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
}
 80035ae:	2000      	movs	r0, #0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80035b0:	6299      	str	r1, [r3, #40]	; 0x28
 80035b2:	4770      	bx	lr

080035b4 <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 80035b4:	6843      	ldr	r3, [r0, #4]
 80035b6:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 80035b8:	6953      	ldr	r3, [r2, #20]
 80035ba:	404b      	eors	r3, r1
 80035bc:	6153      	str	r3, [r2, #20]
}
 80035be:	2000      	movs	r0, #0
 80035c0:	4770      	bx	lr

080035c2 <gpio_stm32_manage_callback>:
	struct gpio_stm32_data *data = dev->data;
 80035c2:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
 80035c4:	6898      	ldr	r0, [r3, #8]
{
 80035c6:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
 80035c8:	b158      	cbz	r0, 80035e2 <gpio_stm32_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80035ca:	2400      	movs	r4, #0
 80035cc:	4281      	cmp	r1, r0
 80035ce:	d113      	bne.n	80035f8 <gpio_stm32_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
 80035d0:	6808      	ldr	r0, [r1, #0]
 80035d2:	b95c      	cbnz	r4, 80035ec <gpio_stm32_manage_callback+0x2a>
 80035d4:	68dc      	ldr	r4, [r3, #12]
	list->head = node;
 80035d6:	6098      	str	r0, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
 80035d8:	42a1      	cmp	r1, r4
 80035da:	d100      	bne.n	80035de <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 80035dc:	60d8      	str	r0, [r3, #12]
	parent->next = child;
 80035de:	2000      	movs	r0, #0
 80035e0:	6008      	str	r0, [r1, #0]
	if (set) {
 80035e2:	b972      	cbnz	r2, 8003602 <gpio_stm32_manage_callback+0x40>
	return 0;
 80035e4:	2000      	movs	r0, #0
}
 80035e6:	bd30      	pop	{r4, r5, pc}
 80035e8:	4628      	mov	r0, r5
 80035ea:	e7ef      	b.n	80035cc <gpio_stm32_manage_callback+0xa>
 80035ec:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 80035ee:	68d8      	ldr	r0, [r3, #12]
 80035f0:	4281      	cmp	r1, r0
	list->tail = node;
 80035f2:	bf08      	it	eq
 80035f4:	60dc      	streq	r4, [r3, #12]
}
 80035f6:	e7f2      	b.n	80035de <gpio_stm32_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 80035f8:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80035fa:	4604      	mov	r4, r0
 80035fc:	2d00      	cmp	r5, #0
 80035fe:	d1f3      	bne.n	80035e8 <gpio_stm32_manage_callback+0x26>
			if (!set) {
 8003600:	b13a      	cbz	r2, 8003612 <gpio_stm32_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
 8003602:	689a      	ldr	r2, [r3, #8]
	parent->next = child;
 8003604:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 8003606:	68d8      	ldr	r0, [r3, #12]
	list->head = node;
 8003608:	6099      	str	r1, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
 800360a:	2800      	cmp	r0, #0
 800360c:	d1ea      	bne.n	80035e4 <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 800360e:	60d9      	str	r1, [r3, #12]
}
 8003610:	e7e9      	b.n	80035e6 <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 8003612:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 8003616:	e7e6      	b.n	80035e6 <gpio_stm32_manage_callback+0x24>

08003618 <gpio_stm32_configure>:
{
 8003618:	b5f0      	push	{r4, r5, r6, r7, lr}
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 800361a:	f002 0530 	and.w	r5, r2, #48	; 0x30
	if (mode == STM32_MODER_ANALOG_MODE) {
 800361e:	2d30      	cmp	r5, #48	; 0x30
  SET_BIT(GPIOx->ASCR, PinMask);
 8003620:	bf08      	it	eq
 8003622:	6ac6      	ldreq	r6, [r0, #44]	; 0x2c
	pinval = 1 << pin;
 8003624:	f04f 0401 	mov.w	r4, #1
 8003628:	fa04 f401 	lsl.w	r4, r4, r1
 800362c:	bf04      	itt	eq
 800362e:	4326      	orreq	r6, r4
 8003630:	62c6      	streq	r6, [r0, #44]	; 0x2c
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003632:	6847      	ldr	r7, [r0, #4]
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8003634:	f3c2 1680 	ubfx	r6, r2, #6, #1
 8003638:	ea27 0704 	bic.w	r7, r7, r4
 800363c:	408e      	lsls	r6, r1
 800363e:	433e      	orrs	r6, r7
 8003640:	6046      	str	r6, [r0, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003642:	fa94 f7a4 	rbit	r7, r4
  return __builtin_clz(value);
 8003646:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800364a:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800364e:	f04f 0e03 	mov.w	lr, #3
 8003652:	007f      	lsls	r7, r7, #1
 8003654:	fa0e f707 	lsl.w	r7, lr, r7
 8003658:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365c:	fa94 f7a4 	rbit	r7, r4
  return __builtin_clz(value);
 8003660:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8003664:	f3c2 16c1 	ubfx	r6, r2, #7, #2
 8003668:	007f      	lsls	r7, r7, #1
 800366a:	40be      	lsls	r6, r7
 800366c:	ea46 060c 	orr.w	r6, r6, ip
 8003670:	6086      	str	r6, [r0, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	fa94 f6a4 	rbit	r6, r4
  return __builtin_clz(value);
 8003676:	fab6 f686 	clz	r6, r6
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800367a:	68c7      	ldr	r7, [r0, #12]
 800367c:	0076      	lsls	r6, r6, #1
 800367e:	fa0e f606 	lsl.w	r6, lr, r6
 8003682:	ea27 0706 	bic.w	r7, r7, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003686:	fa94 f6a4 	rbit	r6, r4
  return __builtin_clz(value);
 800368a:	fab6 f686 	clz	r6, r6
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 800368e:	f3c2 2241 	ubfx	r2, r2, #9, #2
 8003692:	0076      	lsls	r6, r6, #1
 8003694:	40b2      	lsls	r2, r6
 8003696:	433a      	orrs	r2, r7
	if (mode == STM32_MODER_ALT_MODE) {
 8003698:	2d20      	cmp	r5, #32
 800369a:	60c2      	str	r2, [r0, #12]
 800369c:	d115      	bne.n	80036ca <gpio_stm32_configure+0xb2>
		if (pin < 8) {
 800369e:	2907      	cmp	r1, #7
 80036a0:	dc2c      	bgt.n	80036fc <gpio_stm32_configure+0xe4>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a2:	fa94 f2a4 	rbit	r2, r4
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80036a6:	6a01      	ldr	r1, [r0, #32]
  if (value == 0U)
 80036a8:	b332      	cbz	r2, 80036f8 <gpio_stm32_configure+0xe0>
  return __builtin_clz(value);
 80036aa:	fab2 f282 	clz	r2, r2
 80036ae:	0092      	lsls	r2, r2, #2
 80036b0:	260f      	movs	r6, #15
 80036b2:	fa06 f202 	lsl.w	r2, r6, r2
 80036b6:	ea21 0102 	bic.w	r1, r1, r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ba:	fa94 f2a4 	rbit	r2, r4
  return __builtin_clz(value);
 80036be:	fab2 f282 	clz	r2, r2
 80036c2:	0092      	lsls	r2, r2, #2
 80036c4:	4093      	lsls	r3, r2
 80036c6:	430b      	orrs	r3, r1
 80036c8:	6203      	str	r3, [r0, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	fa94 f3a4 	rbit	r3, r4
  return __builtin_clz(value);
 80036ce:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80036d2:	6802      	ldr	r2, [r0, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d4:	fa94 f4a4 	rbit	r4, r4
 80036d8:	2103      	movs	r1, #3
 80036da:	005b      	lsls	r3, r3, #1
  return __builtin_clz(value);
 80036dc:	fab4 f484 	clz	r4, r4
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 80036e0:	092d      	lsrs	r5, r5, #4
 80036e2:	fa01 f303 	lsl.w	r3, r1, r3
 80036e6:	0064      	lsls	r4, r4, #1
 80036e8:	ea22 0303 	bic.w	r3, r2, r3
 80036ec:	fa05 f404 	lsl.w	r4, r5, r4
 80036f0:	431c      	orrs	r4, r3
 80036f2:	6004      	str	r4, [r0, #0]
}
 80036f4:	2000      	movs	r0, #0
 80036f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 32U;
 80036f8:	462a      	mov	r2, r5
 80036fa:	e7d8      	b.n	80036ae <gpio_stm32_configure+0x96>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80036fc:	0a22      	lsrs	r2, r4, #8
 80036fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003700:	fa92 f1a2 	rbit	r1, r2
  if (value == 0U)
 8003704:	b181      	cbz	r1, 8003728 <gpio_stm32_configure+0x110>
  return __builtin_clz(value);
 8003706:	fab1 f181 	clz	r1, r1
 800370a:	0089      	lsls	r1, r1, #2
 800370c:	270f      	movs	r7, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370e:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8003712:	fab2 f282 	clz	r2, r2
 8003716:	fa07 f101 	lsl.w	r1, r7, r1
 800371a:	0092      	lsls	r2, r2, #2
 800371c:	ea26 0101 	bic.w	r1, r6, r1
 8003720:	4093      	lsls	r3, r2
 8003722:	430b      	orrs	r3, r1
 8003724:	6243      	str	r3, [r0, #36]	; 0x24
}
 8003726:	e7d0      	b.n	80036ca <gpio_stm32_configure+0xb2>
    return 32U;
 8003728:	4629      	mov	r1, r5
 800372a:	e7ee      	b.n	800370a <gpio_stm32_configure+0xf2>

0800372c <gpio_stm32_config>:
{
 800372c:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 800372e:	059a      	lsls	r2, r3, #22
{
 8003730:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = dev->config;
 8003732:	6840      	ldr	r0, [r0, #4]
	if ((flags & GPIO_OUTPUT) != 0) {
 8003734:	d519      	bpl.n	800376a <gpio_stm32_config+0x3e>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8003736:	079c      	lsls	r4, r3, #30
 8003738:	d510      	bpl.n	800375c <gpio_stm32_config+0x30>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 800373a:	075a      	lsls	r2, r3, #29
 800373c:	d52d      	bpl.n	800379a <gpio_stm32_config+0x6e>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 800373e:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 8003740:	06dc      	lsls	r4, r3, #27
 8003742:	d50d      	bpl.n	8003760 <gpio_stm32_config+0x34>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8003744:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8003748:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800374c:	6844      	ldr	r4, [r0, #4]
 800374e:	d11b      	bne.n	8003788 <gpio_stm32_config+0x5c>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8003750:	055b      	lsls	r3, r3, #21
 8003752:	d513      	bpl.n	800377c <gpio_stm32_config+0x50>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8003754:	2301      	movs	r3, #1
 8003756:	408b      	lsls	r3, r1
  WRITE_REG(GPIOx->BRR, PinMask);
 8003758:	62a3      	str	r3, [r4, #40]	; 0x28
	return 0;
 800375a:	e00f      	b.n	800377c <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 800375c:	2210      	movs	r2, #16
 800375e:	e7ef      	b.n	8003740 <gpio_stm32_config+0x14>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8003760:	069c      	lsls	r4, r3, #26
 8003762:	d5f1      	bpl.n	8003748 <gpio_stm32_config+0x1c>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8003764:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 8003768:	e7ee      	b.n	8003748 <gpio_stm32_config+0x1c>
	} else if  ((flags & GPIO_INPUT) != 0) {
 800376a:	05dc      	lsls	r4, r3, #23
 800376c:	d510      	bpl.n	8003790 <gpio_stm32_config+0x64>
		if ((flags & GPIO_PULL_UP) != 0) {
 800376e:	06da      	lsls	r2, r3, #27
 8003770:	d410      	bmi.n	8003794 <gpio_stm32_config+0x68>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8003772:	f013 0220 	ands.w	r2, r3, #32
 8003776:	bf18      	it	ne
 8003778:	f44f 6280 	movne.w	r2, #1024	; 0x400
	gpio_stm32_configure(cfg->base, pin, pincfg, 0);
 800377c:	6840      	ldr	r0, [r0, #4]
 800377e:	2300      	movs	r3, #0
 8003780:	f7ff ff4a 	bl	8003618 <gpio_stm32_configure>
 8003784:	2000      	movs	r0, #0
}
 8003786:	bd10      	pop	{r4, pc}
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8003788:	2301      	movs	r3, #1
 800378a:	408b      	lsls	r3, r1
	WRITE_REG(gpio->BSRR, pins);
 800378c:	61a3      	str	r3, [r4, #24]
	return 0;
 800378e:	e7f5      	b.n	800377c <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8003790:	2230      	movs	r2, #48	; 0x30
 8003792:	e7f3      	b.n	800377c <gpio_stm32_config+0x50>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8003794:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003798:	e7f0      	b.n	800377c <gpio_stm32_config+0x50>
				return -ENOTSUP;
 800379a:	f06f 0022 	mvn.w	r0, #34	; 0x22
	return err;
 800379e:	e7f2      	b.n	8003786 <gpio_stm32_config+0x5a>

080037a0 <LL_TIM_OC_SetCompareCH1>:
  WRITE_REG(TIMx->CCR1, CompareValue);
 80037a0:	6341      	str	r1, [r0, #52]	; 0x34
}
 80037a2:	4770      	bx	lr

080037a4 <LL_TIM_OC_SetCompareCH2>:
  WRITE_REG(TIMx->CCR2, CompareValue);
 80037a4:	6381      	str	r1, [r0, #56]	; 0x38
}
 80037a6:	4770      	bx	lr

080037a8 <LL_TIM_OC_SetCompareCH3>:
  WRITE_REG(TIMx->CCR3, CompareValue);
 80037a8:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 80037aa:	4770      	bx	lr

080037ac <LL_TIM_OC_SetCompareCH4>:
  WRITE_REG(TIMx->CCR4, CompareValue);
 80037ac:	6401      	str	r1, [r0, #64]	; 0x40
}
 80037ae:	4770      	bx	lr

080037b0 <LL_TIM_OC_SetCompareCH5>:
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80037b0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80037b2:	6581      	str	r1, [r0, #88]	; 0x58
}
 80037b4:	4770      	bx	lr

080037b6 <LL_TIM_OC_SetCompareCH6>:
  WRITE_REG(TIMx->CCR6, CompareValue);
 80037b6:	65c1      	str	r1, [r0, #92]	; 0x5c
}
 80037b8:	4770      	bx	lr

080037ba <pwm_stm32_get_cycles_per_sec>:
{
 80037ba:	b510      	push	{r4, lr}
	*cycles = (uint64_t)(data->tim_clk / (cfg->prescaler + 1));
 80037bc:	6843      	ldr	r3, [r0, #4]
 80037be:	68c4      	ldr	r4, [r0, #12]
 80037c0:	6859      	ldr	r1, [r3, #4]
 80037c2:	6823      	ldr	r3, [r4, #0]
 80037c4:	2000      	movs	r0, #0
 80037c6:	3101      	adds	r1, #1
 80037c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80037cc:	e9c2 3000 	strd	r3, r0, [r2]
}
 80037d0:	bd10      	pop	{r4, pc}

080037d2 <uart_stm32_set_baudrate>:
	if (clock_control_get_rate(data->clock,
 80037d2:	68c3      	ldr	r3, [r0, #12]
{
 80037d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037d6:	460c      	mov	r4, r1
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80037d8:	6841      	ldr	r1, [r0, #4]
	if (clock_control_get_rate(data->clock,
 80037da:	6858      	ldr	r0, [r3, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80037dc:	f851 5b08 	ldr.w	r5, [r1], #8
	return api->get_rate(dev, sys, rate);
 80037e0:	6883      	ldr	r3, [r0, #8]
 80037e2:	aa01      	add	r2, sp, #4
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	4798      	blx	r3
	if (clock_control_get_rate(data->clock,
 80037e8:	2800      	cmp	r0, #0
 80037ea:	db06      	blt.n	80037fa <uart_stm32_set_baudrate+0x28>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80037ec:	9b01      	ldr	r3, [sp, #4]
 80037ee:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 80037f2:	fbb3 f3f4 	udiv	r3, r3, r4
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	60eb      	str	r3, [r5, #12]
}
 80037fa:	b003      	add	sp, #12
 80037fc:	bd30      	pop	{r4, r5, pc}

080037fe <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 80037fe:	68c3      	ldr	r3, [r0, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003804:	6843      	ldr	r3, [r0, #4]
 8003806:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8003808:	6813      	ldr	r3, [r2, #0]
 800380a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 800380e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003812:	d028      	beq.n	8003866 <uart_stm32_config_get+0x68>
		return UART_CFG_PARITY_NONE;
 8003814:	f5a3 60c0 	sub.w	r0, r3, #1536	; 0x600
 8003818:	4243      	negs	r3, r0
 800381a:	4143      	adcs	r3, r0
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 800381c:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800381e:	6853      	ldr	r3, [r2, #4]
 8003820:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8003824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003828:	d01f      	beq.n	800386a <uart_stm32_config_get+0x6c>
 800382a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800382e:	d01e      	beq.n	800386e <uart_stm32_config_get+0x70>
 8003830:	2b00      	cmp	r3, #0
 8003832:	bf14      	ite	ne
 8003834:	2303      	movne	r3, #3
 8003836:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 8003838:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800383a:	6813      	ldr	r3, [r2, #0]
 800383c:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
	switch (db) {
 8003840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003844:	d015      	beq.n	8003872 <uart_stm32_config_get+0x74>
 8003846:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
		return UART_CFG_DATA_BITS_7;
 800384a:	bf14      	ite	ne
 800384c:	2303      	movne	r3, #3
 800384e:	2302      	moveq	r3, #2
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8003850:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8003852:	6893      	ldr	r3, [r2, #8]
 8003854:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8003858:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 800385c:	4253      	negs	r3, r2
 800385e:	4153      	adcs	r3, r2
 8003860:	71cb      	strb	r3, [r1, #7]
}
 8003862:	2000      	movs	r0, #0
 8003864:	4770      	bx	lr
	switch (parity) {
 8003866:	2302      	movs	r3, #2
 8003868:	e7d8      	b.n	800381c <uart_stm32_config_get+0x1e>
		return UART_CFG_STOP_BITS_0_5;
 800386a:	2300      	movs	r3, #0
 800386c:	e7e4      	b.n	8003838 <uart_stm32_config_get+0x3a>
		return UART_CFG_STOP_BITS_1_5;
 800386e:	2302      	movs	r3, #2
 8003870:	e7e2      	b.n	8003838 <uart_stm32_config_get+0x3a>
	switch (db) {
 8003872:	2304      	movs	r3, #4
 8003874:	e7ec      	b.n	8003850 <uart_stm32_config_get+0x52>

08003876 <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8003876:	6843      	ldr	r3, [r0, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800387a:	69da      	ldr	r2, [r3, #28]
 800387c:	0612      	lsls	r2, r2, #24
 800387e:	d5fc      	bpl.n	800387a <uart_stm32_poll_out+0x4>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003880:	2240      	movs	r2, #64	; 0x40
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8003882:	b289      	uxth	r1, r1
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003884:	621a      	str	r2, [r3, #32]
  USARTx->TDR = Value;
 8003886:	8519      	strh	r1, [r3, #40]	; 0x28
}
 8003888:	4770      	bx	lr

0800388a <uart_stm32_err_check>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800388a:	6843      	ldr	r3, [r0, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800388e:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 8003890:	69da      	ldr	r2, [r3, #28]
	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 8003892:	07d2      	lsls	r2, r2, #31
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8003894:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003896:	f3c0 00c0 	ubfx	r0, r0, #3, #1
		err |= UART_ERROR_PARITY;
 800389a:	bf48      	it	mi
 800389c:	f040 0002 	orrmi.w	r0, r0, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80038a0:	0791      	lsls	r1, r2, #30
		err |= UART_ERROR_FRAMING;
 80038a2:	bf48      	it	mi
 80038a4:	f040 0004 	orrmi.w	r0, r0, #4
	if (err & UART_ERROR_OVERRUN) {
 80038a8:	07c2      	lsls	r2, r0, #31
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80038aa:	bf44      	itt	mi
 80038ac:	2208      	movmi	r2, #8
 80038ae:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_PARITY) {
 80038b0:	0781      	lsls	r1, r0, #30
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 80038b2:	bf44      	itt	mi
 80038b4:	2201      	movmi	r2, #1
 80038b6:	621a      	strmi	r2, [r3, #32]
	if (err & UART_ERROR_FRAMING) {
 80038b8:	0742      	lsls	r2, r0, #29
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 80038ba:	bf44      	itt	mi
 80038bc:	2202      	movmi	r2, #2
 80038be:	621a      	strmi	r2, [r3, #32]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 80038c0:	2204      	movs	r2, #4
 80038c2:	621a      	str	r2, [r3, #32]
}
 80038c4:	4770      	bx	lr

080038c6 <uart_stm32_poll_in>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80038c6:	6843      	ldr	r3, [r0, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80038ca:	69da      	ldr	r2, [r3, #28]
 80038cc:	0710      	lsls	r0, r2, #28
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80038ce:	bf44      	itt	mi
 80038d0:	2208      	movmi	r2, #8
 80038d2:	621a      	strmi	r2, [r3, #32]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 80038d4:	69da      	ldr	r2, [r3, #28]
 80038d6:	0692      	lsls	r2, r2, #26
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80038d8:	bf43      	ittte	mi
 80038da:	8c9b      	ldrhmi	r3, [r3, #36]	; 0x24
 80038dc:	700b      	strbmi	r3, [r1, #0]
	return 0;
 80038de:	2000      	movmi	r0, #0
		return -1;
 80038e0:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 80038e4:	4770      	bx	lr

080038e6 <LL_TIM_StructInit>:
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 80038e6:	2300      	movs	r3, #0
  TIM_InitStruct->Autoreload        = 0xFFFFFFFFU;
 80038e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  TIM_InitStruct->ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1;
 80038ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 80038f0:	8003      	strh	r3, [r0, #0]
  TIM_InitStruct->CounterMode       = LL_TIM_COUNTERMODE_UP;
 80038f2:	6043      	str	r3, [r0, #4]
  TIM_InitStruct->RepetitionCounter = 0x00000000U;
 80038f4:	6103      	str	r3, [r0, #16]
}
 80038f6:	4770      	bx	lr

080038f8 <LL_TIM_OC_StructInit>:
  TIM_OC_InitStruct->OCMode       = LL_TIM_OCMODE_FROZEN;
 80038f8:	2300      	movs	r3, #0
  TIM_OC_InitStruct->OCState      = LL_TIM_OCSTATE_DISABLE;
 80038fa:	e9c0 3300 	strd	r3, r3, [r0]
  TIM_OC_InitStruct->CompareValue = 0x00000000U;
 80038fe:	e9c0 3302 	strd	r3, r3, [r0, #8]
  TIM_OC_InitStruct->OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
 8003902:	e9c0 3304 	strd	r3, r3, [r0, #16]
  TIM_OC_InitStruct->OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8003906:	e9c0 3306 	strd	r3, r3, [r0, #24]
}
 800390a:	4770      	bx	lr

0800390c <UTILS_GetPLLOutputFrequency>:
  pllfreq = PLL_InputFrequency / (((UTILS_PLLInitStruct->PLLM >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800390c:	680b      	ldr	r3, [r1, #0]
 800390e:	091b      	lsrs	r3, r3, #4
 8003910:	3301      	adds	r3, #1
 8003912:	fbb0 f0f3 	udiv	r0, r0, r3
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8003916:	684b      	ldr	r3, [r1, #4]
 8003918:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800391c:	4358      	muls	r0, r3
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLR >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U);
 800391e:	688b      	ldr	r3, [r1, #8]
 8003920:	0e5b      	lsrs	r3, r3, #25
 8003922:	3301      	adds	r3, #1
 8003924:	005b      	lsls	r3, r3, #1
}
 8003926:	fbb0 f0f3 	udiv	r0, r0, r3
 800392a:	4770      	bx	lr

0800392c <arch_system_halt>:
	__asm__ volatile(
 800392c:	f04f 0210 	mov.w	r2, #16
 8003930:	f3ef 8311 	mrs	r3, BASEPRI
 8003934:	f382 8811 	msr	BASEPRI, r2
 8003938:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 800393c:	e7fe      	b.n	800393c <arch_system_halt+0x10>

0800393e <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 800393e:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 8003940:	f7ff fff4 	bl	800392c <arch_system_halt>

08003944 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8003944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003946:	4605      	mov	r5, r0
 8003948:	460e      	mov	r6, r1
 800394a:	f04f 0310 	mov.w	r3, #16
 800394e:	f3ef 8711 	mrs	r7, BASEPRI
 8003952:	f383 8811 	msr	BASEPRI, r3
 8003956:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
 800395a:	f7ff f9d1 	bl	8002d00 <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 800395e:	4631      	mov	r1, r6
 8003960:	4604      	mov	r4, r0
 8003962:	4628      	mov	r0, r5
 8003964:	f7ff ffeb 	bl	800393e <k_sys_fatal_error_handler>
	__asm__ volatile(
 8003968:	f387 8811 	msr	BASEPRI, r7
 800396c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 8003970:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
 8003972:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003976:	f7fd bf0f 	b.w	8001798 <z_impl_k_thread_abort>

0800397a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800397a:	4603      	mov	r3, r0
 800397c:	b920      	cbnz	r0, 8003988 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800397e:	f3ef 8205 	mrs	r2, IPSR
 8003982:	b90a      	cbnz	r2, 8003988 <z_reschedule_irqlock+0xe>
 8003984:	f7fd bcd4 	b.w	8001330 <arch_swap>
 8003988:	f383 8811 	msr	BASEPRI, r3
 800398c:	f3bf 8f6f 	isb	sy
}
 8003990:	4770      	bx	lr

08003992 <z_reschedule_unlocked>:
	__asm__ volatile(
 8003992:	f04f 0310 	mov.w	r3, #16
 8003996:	f3ef 8011 	mrs	r0, BASEPRI
 800399a:	f383 8811 	msr	BASEPRI, r3
 800399e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 80039a2:	f7ff bfea 	b.w	800397a <z_reschedule_irqlock>

080039a6 <unpend_thread_no_timeout>:
{
 80039a6:	4601      	mov	r1, r0
 80039a8:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
 80039aa:	6880      	ldr	r0, [r0, #8]
 80039ac:	f7fe ff04 	bl	80027b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 80039b0:	7b4b      	ldrb	r3, [r1, #13]
 80039b2:	f023 0302 	bic.w	r3, r3, #2
 80039b6:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	608b      	str	r3, [r1, #8]
}
 80039bc:	bd08      	pop	{r3, pc}

080039be <z_priq_dumb_best>:
{
 80039be:	4603      	mov	r3, r0
	return list->head == list;
 80039c0:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80039c2:	4283      	cmp	r3, r0
 80039c4:	d003      	beq.n	80039ce <z_priq_dumb_best+0x10>
	if (n != NULL) {
 80039c6:	2800      	cmp	r0, #0
 80039c8:	bf38      	it	cc
 80039ca:	2000      	movcc	r0, #0
 80039cc:	4770      	bx	lr
	struct k_thread *thread = NULL;
 80039ce:	2000      	movs	r0, #0
}
 80039d0:	4770      	bx	lr

080039d2 <z_ready_thread>:
{
 80039d2:	b510      	push	{r4, lr}
 80039d4:	f04f 0310 	mov.w	r3, #16
 80039d8:	f3ef 8411 	mrs	r4, BASEPRI
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
 80039e4:	f7fe ff42 	bl	800286c <ready_thread>
	__asm__ volatile(
 80039e8:	f384 8811 	msr	BASEPRI, r4
 80039ec:	f3bf 8f6f 	isb	sy
}
 80039f0:	bd10      	pop	{r4, pc}

080039f2 <z_thread_timeout>:
{
 80039f2:	b570      	push	{r4, r5, r6, lr}
 80039f4:	4604      	mov	r4, r0
	__asm__ volatile(
 80039f6:	f04f 0310 	mov.w	r3, #16
 80039fa:	f3ef 8611 	mrs	r6, BASEPRI
 80039fe:	f383 8811 	msr	BASEPRI, r3
 8003a02:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
 8003a06:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
 8003a0a:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
 8003a0e:	b113      	cbz	r3, 8003a16 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
 8003a10:	4628      	mov	r0, r5
 8003a12:	f7ff ffc8 	bl	80039a6 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8003a16:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 8003a1a:	f023 0314 	bic.w	r3, r3, #20
 8003a1e:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
 8003a22:	4628      	mov	r0, r5
 8003a24:	f7fe ff22 	bl	800286c <ready_thread>
	__asm__ volatile(
 8003a28:	f386 8811 	msr	BASEPRI, r6
 8003a2c:	f3bf 8f6f 	isb	sy
}
 8003a30:	bd70      	pop	{r4, r5, r6, pc}

08003a32 <z_abort_timeout>:
{
 8003a32:	b510      	push	{r4, lr}
	__asm__ volatile(
 8003a34:	f04f 0210 	mov.w	r2, #16
 8003a38:	f3ef 8411 	mrs	r4, BASEPRI
 8003a3c:	f382 8811 	msr	BASEPRI, r2
 8003a40:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 8003a44:	6803      	ldr	r3, [r0, #0]
 8003a46:	b13b      	cbz	r3, 8003a58 <z_abort_timeout+0x26>
			remove_timeout(to);
 8003a48:	f7ff f9fc 	bl	8002e44 <remove_timeout>
			ret = 0;
 8003a4c:	2000      	movs	r0, #0
	__asm__ volatile(
 8003a4e:	f384 8811 	msr	BASEPRI, r4
 8003a52:	f3bf 8f6f 	isb	sy
}
 8003a56:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 8003a58:	f06f 0015 	mvn.w	r0, #21
 8003a5c:	e7f7      	b.n	8003a4e <z_abort_timeout+0x1c>

08003a5e <z_get_next_timeout_expiry>:
{
 8003a5e:	b510      	push	{r4, lr}
	__asm__ volatile(
 8003a60:	f04f 0310 	mov.w	r3, #16
 8003a64:	f3ef 8411 	mrs	r4, BASEPRI
 8003a68:	f383 8811 	msr	BASEPRI, r3
 8003a6c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
 8003a70:	f7ff fa02 	bl	8002e78 <next_timeout>
	__asm__ volatile(
 8003a74:	f384 8811 	msr	BASEPRI, r4
 8003a78:	f3bf 8f6f 	isb	sy
}
 8003a7c:	bd10      	pop	{r4, pc}

08003a7e <z_set_timeout_expiry>:
{
 8003a7e:	b570      	push	{r4, r5, r6, lr}
 8003a80:	4604      	mov	r4, r0
 8003a82:	460d      	mov	r5, r1
	__asm__ volatile(
 8003a84:	f04f 0310 	mov.w	r3, #16
 8003a88:	f3ef 8611 	mrs	r6, BASEPRI
 8003a8c:	f383 8811 	msr	BASEPRI, r3
 8003a90:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 8003a94:	f7ff f9f0 	bl	8002e78 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 8003a98:	2801      	cmp	r0, #1
 8003a9a:	dd05      	ble.n	8003aa8 <z_set_timeout_expiry+0x2a>
 8003a9c:	42a0      	cmp	r0, r4
 8003a9e:	dd03      	ble.n	8003aa8 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
 8003aa0:	4629      	mov	r1, r5
 8003aa2:	4620      	mov	r0, r4
 8003aa4:	f7fd fbc4 	bl	8001230 <z_clock_set_timeout>
	__asm__ volatile(
 8003aa8:	f386 8811 	msr	BASEPRI, r6
 8003aac:	f3bf 8f6f 	isb	sy
}
 8003ab0:	bd70      	pop	{r4, r5, r6, pc}

08003ab2 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
 8003ab2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
 8003ab4:	f7ff fb00 	bl	80030b8 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
 8003ab8:	bd08      	pop	{r3, pc}

08003aba <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
 8003aba:	b538      	push	{r3, r4, r5, lr}
 8003abc:	4604      	mov	r4, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
 8003abe:	2500      	movs	r5, #0
	__asm__ volatile(
 8003ac0:	f04f 0210 	mov.w	r2, #16
 8003ac4:	f3ef 8311 	mrs	r3, BASEPRI
 8003ac8:	f382 8811 	msr	BASEPRI, r2
 8003acc:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
 8003ad0:	6920      	ldr	r0, [r4, #16]
		if (to_abort) {
 8003ad2:	b188      	cbz	r0, 8003af8 <idle+0x3e>
			cpu->pending_abort = NULL;
 8003ad4:	6125      	str	r5, [r4, #16]
	__asm__ volatile(
 8003ad6:	f383 8811 	msr	BASEPRI, r3
 8003ada:	f3bf 8f6f 	isb	sy
			 * is continued below.
			 */
			LOG_DBG("idle %p aborting thread %p",
				_current, to_abort);

			z_thread_single_abort(to_abort);
 8003ade:	f7fe ffcb 	bl	8002a78 <z_thread_single_abort>
	__asm__ volatile(
 8003ae2:	f04f 0310 	mov.w	r3, #16
 8003ae6:	f3ef 8011 	mrs	r0, BASEPRI
 8003aea:	f383 8811 	msr	BASEPRI, r3
 8003aee:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8003af2:	f7ff ff42 	bl	800397a <z_reschedule_irqlock>
			 * in order to abort the thread, and we now need to
			 * figure out what to do next, it's not necessarily
			 * the case that there are no other runnable threads.
			 */
			z_reschedule_unlocked();
			continue;
 8003af6:	e7e3      	b.n	8003ac0 <idle+0x6>
	__asm__ volatile(
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 8003b00:	f04f 0210 	mov.w	r2, #16
 8003b04:	f3ef 8311 	mrs	r3, BASEPRI
 8003b08:	f382 8811 	msr	BASEPRI, r2
 8003b0c:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
 8003b10:	f7ff ffa5 	bl	8003a5e <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
 8003b14:	2101      	movs	r1, #1
 8003b16:	2802      	cmp	r0, #2
 8003b18:	bfd8      	it	le
 8003b1a:	4608      	movle	r0, r1
 8003b1c:	f7ff ffaf 	bl	8003a7e <z_set_timeout_expiry>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8003b20:	f7fd fcd8 	bl	80014d4 <arch_cpu_idle>
}
 8003b24:	e7cc      	b.n	8003ac0 <idle+0x6>

08003b26 <k_heap_init>:
{
 8003b26:	b410      	push	{r4}
 8003b28:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
 8003b2c:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
 8003b30:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
 8003b32:	f7ff bb90 	b.w	8003256 <sys_heap_init>

08003b36 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
 8003b36:	4770      	bx	lr
